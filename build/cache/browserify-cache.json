{"modules":{"/Users/Temich/PycharmProjects/tanks/src/client/utils/browsercheck/browsercheck.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/utils/browsercheck/browsercheck.js","source":"module.exports = {\n  WebGLAvailablilty: function () {\n    if (window.WebGLRenderingContext) {\n      var canvas = document.createElement(\"canvas\");\n      canvas.width = 1;\n      canvas.height = 1;\n      var gl;\n\n      try {\n        gl = canvas.getContext(\"webgl\");\n      } catch (x) {\n        gl = null;\n      }\n\n      if (gl == null) {\n        try {\n          gl = canvas.getContext(\"experimental-webgl\");\n        } catch (x) {\n          gl = null;\n        }\n      }\n\n      if (gl) {\n        return \"available\";\n      } else {\n        return \"disabled\";\n      }\n    } else {\n      return \"unavailable\";\n    }\n  }\n};","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/client/utils/browsercheck/browsercheckview.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/utils/browsercheck/browsercheckview.js","source":"/* @load-resource: './browser-check.scss' */\nvar BrowserCheck = require(\"./browsercheck\");\n\nmodule.exports = function (callback) {\n  /**\n   * Chrome 8\n   * Edge 12\n   * IE 11\n   * Firefox 4\n   * Safari 5.1\n   * Opera 12.1\n   * iOS Safari 8\n   * Android Browser 81\n   * Opera Mobile 12\n   * Chrome for Android 81\n   * Firefox for Android 68\n   * UC Browser for Android 12.12\n   * Samsung Internet 4\n   * QQ Browser 10.4\n   * Baidu Browser 7.12\n   * KaiOS Browser 2.5\n   */\n  var webGl = BrowserCheck.WebGLAvailablilty();\n\n  if (webGl == \"available\") {\n    callback();\n  } else {\n    var container = $(\"<div>\").addClass(\"unsupported-browser\");\n    var header = $(\"<h1>\").addClass(\"header\");\n    var text = $(\"<div>\").addClass(\"text\");\n    var footer = $(\"<div>\").addClass(\"footer\");\n\n    if (webGl == \"disabled\") {\n      header.text(\"В Вашем браузере отключен WebGL\");\n      text.append($(\"<p>\").text(\"Необходимо разрешить использование WebGL в настройках \" + \"вашего браузера, прежде чем страница сможет быть загружена\"));\n      return;\n    }\n\n    if (webGl == \"unavailable\") {\n      header.text(\"Ваш браузер устарел\");\n      text.append($(\"<p>\").text(\"Страница не может быть загружена, поскольку ваш браузер \" + \"не поддерживает WebGL. Для быстрой и стабильной работы страницы рекомендуем \" + \"скачать последнюю версию одного из этих браузеров:\"));\n\n      function browserLink(name, image, href) {\n        footer.append($(\"<a>\").addClass(\"supported-browser\").append($(\"<img>\").attr(\"src\", image).attr(\"alt\", name), $(\"<p>\").text(name)).attr(\"href\", href));\n      }\n\n      browserLink(\"Google Chrome\", \"../assets/browser/chrome.png\", \"https://www.google.com/chrome/browser/desktop/\");\n      browserLink(\"Firefox\", \"../assets/browser/firefox.png\", \"https://www.mozilla.org/firefox/new\");\n    }\n\n    container.append(header, text, footer);\n    $(document.body).append(container);\n  }\n};","deps":{"./browsercheck":"/Users/Temich/PycharmProjects/tanks/src/client/utils/browsercheck/browsercheck.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/game/index.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/game/index.js","source":"var BrowserCheckView = require(\"../utils/browsercheck/browsercheckview\");\n\nwindow.addEventListener(\"load\", function () {\n  BrowserCheckView(downloadGameScript);\n});\n\nfunction startGame() {\n  var root = $(\"<div>\").addClass(\"game-root\");\n  $(document.body).append(root);\n  var game = new Game({\n    scale: window.devicePixelRatio,\n    ip: \"ws://\" + window.location.host + \":25565\",\n    root: root\n  });\n  game.loop.start();\n  game.canvas.focus();\n  window.game = game;\n}\n\nfunction downloadGameScript() {\n  var script = document.createElement(\"script\");\n  script.src = \"./game.js\";\n  script.onload = startGame;\n  document.head.appendChild(script);\n}","deps":{"../utils/browsercheck/browsercheckview":"/Users/Temich/PycharmProjects/tanks/src/client/utils/browsercheck/browsercheckview.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/utils/progress.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/utils/progress.js","source":"class Progress {\n  constructor() {\n    this.completed = 0;\n    this.target = 0;\n    this.subtasks = [];\n    this.fraction = 0;\n    this.refresh = false;\n    this.parent = null;\n  }\n\n  addSubtask(task) {\n    task.parent = this;\n    this.subtasks.push(task);\n    this.setNeedsUpdate();\n  }\n\n  refreshFraction() {\n    this.refresh = false;\n    let total = this.target + this.subtasks.length;\n\n    if (total === 0) {\n      this.fraction = 0;\n      return;\n    }\n\n    if (this.target === 0) {\n      this.fraction = 0;\n    } else {\n      this.fraction = this.completed;\n    }\n\n    for (let task of this.subtasks) {\n      this.fraction += task.completeFraction();\n    }\n\n    this.fraction /= total;\n  }\n\n  complete() {\n    if (this.target === 0) {\n      this.target = 1;\n    }\n\n    this.completed = this.target;\n    this.setNeedsUpdate();\n  }\n\n  setNeedsUpdate() {\n    if (this.parent) {\n      this.parent.setNeedsUpdate();\n    }\n\n    this.refresh = true;\n  }\n\n  setTarget(target) {\n    this.target = target;\n    this.setNeedsUpdate();\n  }\n\n  getTarget() {\n    return this.target;\n  }\n\n  setCompleted(completed) {\n    this.completed = completed;\n    this.setNeedsUpdate();\n  }\n\n  getCompleted() {\n    return this.completed;\n  }\n\n  completeFraction() {\n    if (this.refresh) {\n      this.refreshFraction();\n    }\n\n    return this.fraction;\n  }\n\n}\n\nmodule.exports = Progress;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/client/utils/canvasfactory.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/utils/canvasfactory.js","source":"module.exports = function () {\n  const canvas = document.createElement(\"canvas\");\n  let ctx;\n\n  try {\n    ctx = canvas.getContext(\"webgl\");\n  } catch (ignored) {}\n\n  try {\n    ctx = canvas.getContext(\"experimental-webgl\");\n  } catch (ignored) {}\n\n  if (!ctx) throw new Error(\"WebGL not supported\");\n  ctx.clearColor(1.0, 1.0, 1.0, 1.0);\n  ctx.blendFuncSeparate(ctx.SRC_ALPHA, ctx.ONE_MINUS_SRC_ALPHA, ctx.ONE, ctx.ONE_MINUS_SRC_ALPHA);\n  ctx.enable(ctx.BLEND);\n  return {\n    canvas: canvas,\n    ctx: ctx\n  };\n};","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/client/engine.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/engine.js","source":"class Engine {\n  constructor(config) {\n    this.config = config;\n  }\n\n  configure(game, tank) {\n    this.game = game;\n    this.tank = tank;\n    this.sound = this.game.playSound(this.config.sound, {\n      loop: true,\n      mapX: tank.x,\n      mapY: tank.y\n    });\n    this.rpm = 1;\n    this.gear = 0;\n    this.const = {\n      multiplier: this.config.multiplier || 11,\n      gears: this.config.gears || [{\n        gearing: 1\n      }],\n      gearUpRPM: this.config.gearUpRPM || 2.1,\n      gearDownRPM: this.config.gearDownRPM || 1.9,\n      pitch: this.config.pitch || 1,\n      volume: this.config.volume || 1\n    };\n  }\n\n  clone() {\n    return new Engine(this.config);\n  }\n\n  destroy() {\n    if (this.sound) this.sound.stop();\n  }\n\n  tick() {\n    return;\n\n    if (this.game) {\n      if (this.sound) {\n        this.sound.config.mapX = this.tank.x;\n        this.sound.config.mapY = this.tank.y;\n      }\n\n      if (this.tank.model.health === 0) {\n        this.destinationRPM = 0;\n        this.sound.gainNode.value;\n      } else {\n        const tankSpeed = this.tank.options.transmissionSpeed * this.game.tps;\n        const rpm = tankSpeed / this.const.multiplier;\n        const currentGear = this.const.gears[this.gear];\n        const nextGear = this.const.gears[this.gear + 1];\n        const previousGear = this.const.gears[this.gear - 1];\n        const currentRPM = rpm * currentGear.gearing;\n\n        if (previousGear && currentRPM < currentGear.low) {\n          this.gear--;\n        }\n\n        if (nextGear && currentRPM > currentGear.high) {\n          this.gear++;\n        }\n\n        const minRPM = 1 - this.tank.options.clutch / 6;\n        this.destinationRPM = Math.max(minRPM, rpm) * this.const.gears[this.gear].gearing * this.tank.options.clutch + (1 - this.tank.options.clutch);\n      }\n\n      if (this.destinationRPM < this.rpm) {\n        this.rpm -= 0.1;\n\n        if (this.destinationRPM > this.rpm) {\n          this.rpm = this.destinationRPM;\n        }\n      } else if (this.destinationRPM > this.rpm) {\n        this.rpm += 0.05;\n\n        if (this.destinationRPM < this.rpm) {\n          this.rpm = this.destinationRPM;\n        }\n      }\n\n      if (this.sound) {\n        this.sound.source.playbackRate.value = this.rpm * this.const.pitch;\n        let volume = 0.3 + this.tank.options.clutch / 4;\n\n        if (this.rpm < 0.7) {\n          volume *= (this.rpm - 0.2) * 2;\n        }\n\n        this.sound.config.volume = volume * this.const.volume;\n        this.game.updateSoundPosition(this.sound);\n      }\n    }\n  }\n\n}\n\nmodule.exports = Engine;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/utils/color.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/color.js","source":"class Color {\n  constructor(red, green, blue, alpha) {\n    this.r = red;\n    this.g = green;\n    this.b = blue;\n    this.alpha = alpha || 1.0;\n  }\n\n  setRed(r) {\n    this.r = r;\n    this.string = 0;\n  }\n\n  setGreen(g) {\n    this.g = g;\n    this.string = 0;\n  }\n\n  setBlue(b) {\n    this.b = b;\n    this.string = 0;\n  }\n\n  setAlpha(a) {\n    this.alpha = a;\n    this.string = 0;\n  }\n  /**\n   * Returns chat color code with specified RGB values\n   * @param r {number}\n   * @param g {number}\n   * @param b {number}\n   * @param bold {boolean}\n   */\n\n\n  static chatColor(r, g, b, bold = false) {\n    let color = \"\";\n\n    if ((r & 0xF) === (r >> 4 & 0xF) && (g & 0xF) === (g >> 4 & 0xF) && (b & 0xF) === (b >> 4 & 0xF)) {\n      color = r.toString(16) + g.toString(16) + b.toString(16);\n    } else {\n      color = r.toString(16).padStart(2, \"0\") + g.toString(16).padStart(2, \"0\") + b.toString(16).padStart(2, \"0\");\n    }\n\n    if (bold) {\n      return \"§!\" + color + \";\";\n    } else {\n      return \"§\" + color + \";\";\n    }\n  }\n\n  static replace(text, replace) {\n    return text.replace(/(§!?[0-9A-F]{0,6};)?[^§\\n]*/gi, function (a) {\n      // if(!/^\\\\*(§!?[0-9A-F]{0,6};/.test(a)) {\n      //     return replace(\"\", false, a)\n      // }\n      //\n      // // Checking if color sequence is screened\n      //\n      // let start = a.indexOf(\"§\")\n      let prefix = \"\"; // if(start % 2 === 1) {\n      //     return a.substr(1)\n      // } else if(start) {\n      //     prefix = a.substr(0, start)\n      //     a = a.substr(start)\n      // }\n\n      let index = a.indexOf(\";\");\n      let color = a.substr(1, index - 1);\n      let text = a.substr(index + 1);\n      let bold = color.startsWith(\"!\");\n      if (bold) color = color.substr(1);\n      return prefix + replace(color, bold, text);\n    });\n  }\n\n  toChatColor(bold) {\n    return Color.chatColor(this.r, this.g, this.b, bold);\n  }\n\n  code() {\n    if (this.string) return this.string;\n\n    if (this.alpha === 1) {\n      let r, g, b;\n      r = Math.round(this.r).toString(16);\n      g = Math.round(this.g).toString(16);\n      b = Math.round(this.b).toString(16);\n      r.length === 1 && (r = \"0\" + r);\n      g.length === 1 && (g = \"0\" + g);\n      b.length === 1 && (b = \"0\" + b);\n      this.string = \"#\" + r + g + b;\n    } else {\n      this.string = \"rgba(\" + Math.round(this.r) + \",\" + Math.round(this.g) + \",\" + Math.round(this.b) + \",\" + Math.round(this.alpha * 100) / 100 + \")\";\n    }\n\n    return this.string;\n  }\n\n  static saturateChannel(c, saturation) {\n    return Math.round((c - 127) * saturation + 127);\n  }\n\n  applyingSaturation(saturation) {\n    return new Color(Color.saturateChannel(this.r, saturation), Color.saturateChannel(this.g, saturation), Color.saturateChannel(this.b, saturation), this.alpha);\n  }\n\n  withAlpha(alpha) {\n    return new Color(this.r, this.g, this.b, alpha);\n  }\n\n  static red() {\n    return new Color(255, 0, 0);\n  }\n\n  static green() {\n    return new Color(0, 255, 0);\n  }\n\n  static blue() {\n    return new Color(0, 0, 255);\n  }\n\n  static gray() {\n    return new Color(127, 127, 127);\n  }\n\n}\n\nmodule.exports = Color;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/client/sound/fx.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/sound/fx.js","source":"class FX {\n  static randomExplosion() {\n    return Math.floor(Math.random() * 4) + 11;\n  }\n\n}\n\nFX.RELOAD_START = 0;\nFX.RELOAD_END = 1;\nFX.SHOOT_16MM = 2;\nFX.SHOOT_SHOTGUN = 3;\nFX.SHOOT_SNIPER = 4;\nFX.SHOOT_BOMBER = 5;\nFX.SHOOT_MORTAR = 6;\nFX.FLAMETHROWER_START = 7;\nFX.FLAMETHROWER_SOUND = 8;\nFX.TESLA_START = 9;\nFX.TESLA_SOUND = 10;\nFX.ENGINE_1 = 15;\nFX.ENGINE_2 = 16;\nFX.ENGINE_3 = 17;\nFX.ENGINE_4 = 18;\nFX.sounds = [\n/*  0 */\n\"assets/sound/reload_start.wav\",\n/*  1 */\n\"assets/sound/reload_end.wav\",\n/*  2 */\n\"assets/sound/16mm-shoot.wav\",\n/*  3 */\n\"assets/sound/shotgun-shoot.wav\",\n/*  4 */\n\"assets/sound/sniper-shoot.wav\",\n/*  5 */\n\"assets/sound/bomber-shoot.wav\",\n/*  6 */\n\"assets/sound/mortar-shoot.wav\",\n/*  7 */\n\"assets/sound/flamethrower-sound-start.wav\",\n/*  8 */\n\"assets/sound/flamethrower-sound.wav\",\n/*  9 */\n\"assets/sound/tesla-sound-start.wav\",\n/* 10 */\n\"assets/sound/tesla-sound.wav\",\n/* 11 */\n\"assets/sound/serverworldexplodeeffect-1.wav\",\n/* 12 */\n\"assets/sound/serverworldexplodeeffect-2.wav\",\n/* 13 */\n\"assets/sound/serverworldexplodeeffect-3.wav\",\n/* 14 */\n\"assets/sound/serverworldexplodeeffect-4.wav\",\n/* 15 */\n\"assets/sound/engine-1.wav\",\n/* 16 */\n\"assets/sound/engine-2.wav\",\n/* 17 */\n\"assets/sound/engine-3.wav\",\n/* 18 */\n\"assets/sound/engine-4.wav\"];\nmodule.exports = FX;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/controlpanel.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/controlpanel.js","source":"class ControlPanel {\n  constructor() {\n    this.vidgets = [];\n  }\n\n  addVidget(vidget) {\n    this.vidgets.push(vidget);\n  }\n\n  draw(ctx, spt) {\n    this.vidgets.forEach(function (vidget) {\n      if (vidget.hidden) return;\n      ctx.translate(vidget.x, vidget.y);\n      vidget.draw(ctx, spt);\n      ctx.translate(-vidget.x, -vidget.y);\n    });\n  }\n\n  captureTouch(touch) {\n    let x = touch.left;\n    let y = touch.top;\n\n    for (let i = 0, l = this.vidgets.length; i < l; i++) {\n      let vidget = this.vidgets[i];\n\n      if (vidget.touched) {\n        vidget.touchEnded();\n      }\n\n      if (x < vidget.x || x > vidget.x + vidget.width) continue;\n      if (y < vidget.y || y > vidget.y + vidget.height) continue;\n      vidget.touchStarted(x - vidget.x, y - vidget.y);\n      vidget.touched = true;\n      touch.vidget = vidget;\n      touch.captured = this;\n      return true;\n    }\n\n    return false;\n  }\n\n  touchEnded(touch) {\n    if (touch.vidget) {\n      touch.vidget.touchEnded();\n      touch.vidget.touched = false;\n    }\n  }\n\n  touchMoved(touch) {\n    let vidget = touch.vidget;\n\n    if (vidget) {\n      let y = touch.top - vidget.y;\n      let x = touch.left - vidget.x;\n      vidget.touchMoved(x, y);\n    }\n  }\n\n}\n\nmodule.exports = ControlPanel;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/concrete.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/concrete.js","source":"const EdgedBlockDrawer = require(\"../edgedblockdrawer\");\n\nconst MapDrawer = require(\"../../mapdrawer\");\n\nclass ConcreteBlockDrawer extends EdgedBlockDrawer {\n  constructor() {\n    super();\n    this.spritePath = \"blocks/concrete\";\n  }\n\n}\n\nMapDrawer.registerBlockLoader(2, new ConcreteBlockDrawer());\nmodule.exports = ConcreteBlockDrawer;","deps":{"../../mapdrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/mapdrawer.js","../edgedblockdrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/edgedblockdrawer.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/stone.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/stone.js","source":"const EdgedBlockDrawer = require(\"../edgedblockdrawer\");\n\nconst MapDrawer = require(\"../../mapdrawer\");\n\nclass StoneBlockDrawer extends EdgedBlockDrawer {\n  constructor() {\n    super();\n    this.spritePath = \"blocks/stone\";\n  }\n\n}\n\nMapDrawer.registerBlockLoader(5, new StoneBlockDrawer());\nmodule.exports = StoneBlockDrawer;","deps":{"../../mapdrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/mapdrawer.js","../edgedblockdrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/edgedblockdrawer.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/unbreakable.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/unbreakable.js","source":"const EdgedBlockDrawer = require(\"../edgedblockdrawer\");\n\nconst MapDrawer = require(\"../../mapdrawer\");\n\nclass TrophephngoldBlockDrawer extends EdgedBlockDrawer {\n  constructor() {\n    super();\n    this.spritePath = \"blocks/trophephngold\";\n  }\n\n}\n\nMapDrawer.registerBlockLoader(4, new TrophephngoldBlockDrawer());\nmodule.exports = TrophephngoldBlockDrawer;","deps":{"../../mapdrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/mapdrawer.js","../edgedblockdrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/edgedblockdrawer.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/wood.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/wood.js","source":"const EdgedBlockDrawer = require(\"../edgedblockdrawer\");\n\nconst MapDrawer = require(\"../../mapdrawer\");\n\nclass WoodBlockDrawer extends EdgedBlockDrawer {\n  constructor() {\n    super();\n    this.spritePath = [];\n\n    for (let i = 0; i <= 17; i++) {\n      this.spritePath.push(\"blocks/wood/variant-\" + i);\n    }\n  }\n\n}\n\nMapDrawer.registerBlockLoader(3, new WoodBlockDrawer());\nmodule.exports = WoodBlockDrawer;","deps":{"../../mapdrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/mapdrawer.js","../edgedblockdrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/edgedblockdrawer.js"}},"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","source":"function extend(a, b) {\n  for (var c in b) {\n    a[c] = b[c];\n  }\n}\n\nfunction isInstanceOf(obj, _constructor) {\n  while (typeof obj === \"object\") {\n    if (obj.constructor === _constructor) {\n      return true;\n    }\n\n    obj = obj._super;\n  }\n\n  return false;\n}\n\n;\n\nvar b2BoundValues = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2BoundValues.prototype.__constructor = function () {\n  this.lowerValues = new Array();\n  this.lowerValues[0] = 0;\n  this.lowerValues[1] = 0;\n  this.upperValues = new Array();\n  this.upperValues[0] = 0;\n  this.upperValues[1] = 0;\n};\n\nb2BoundValues.prototype.__varz = function () {};\n\nb2BoundValues.prototype.lowerValues = null;\nb2BoundValues.prototype.upperValues = null;\n\nvar b2PairManager = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2PairManager.prototype.__constructor = function () {\n  this.m_pairs = new Array();\n  this.m_pairBuffer = new Array();\n  this.m_pairCount = 0;\n  this.m_pairBufferCount = 0;\n  this.m_freePair = null;\n};\n\nb2PairManager.prototype.__varz = function () {};\n\nb2PairManager.prototype.AddPair = function (proxy1, proxy2) {\n  var pair = proxy1.pairs[proxy2];\n\n  if (pair != null) {\n    return pair;\n  }\n\n  if (this.m_freePair == null) {\n    this.m_freePair = new b2Pair();\n    this.m_pairs.push(this.m_freePair);\n  }\n\n  pair = this.m_freePair;\n  this.m_freePair = pair.next;\n  pair.proxy1 = proxy1;\n  pair.proxy2 = proxy2;\n  pair.status = 0;\n  pair.userData = null;\n  pair.next = null;\n  proxy1.pairs[proxy2] = pair;\n  proxy2.pairs[proxy1] = pair;\n  ++this.m_pairCount;\n  return pair;\n};\n\nb2PairManager.prototype.RemovePair = function (proxy1, proxy2) {\n  var pair = proxy1.pairs[proxy2];\n\n  if (pair == null) {\n    return null;\n  }\n\n  var userData = pair.userData;\n  delete proxy1.pairs[proxy2];\n  delete proxy2.pairs[proxy1];\n  pair.next = this.m_freePair;\n  pair.proxy1 = null;\n  pair.proxy2 = null;\n  pair.userData = null;\n  pair.status = 0;\n  this.m_freePair = pair;\n  --this.m_pairCount;\n  return userData;\n};\n\nb2PairManager.prototype.Find = function (proxy1, proxy2) {\n  return proxy1.pairs[proxy2];\n};\n\nb2PairManager.prototype.ValidateBuffer = function () {};\n\nb2PairManager.prototype.ValidateTable = function () {};\n\nb2PairManager.prototype.Initialize = function (broadPhase) {\n  this.m_broadPhase = broadPhase;\n};\n\nb2PairManager.prototype.AddBufferedPair = function (proxy1, proxy2) {\n  var pair = this.AddPair(proxy1, proxy2);\n\n  if (pair.IsBuffered() == false) {\n    pair.SetBuffered();\n    this.m_pairBuffer[this.m_pairBufferCount] = pair;\n    ++this.m_pairBufferCount;\n  }\n\n  pair.ClearRemoved();\n\n  if (b2BroadPhase.s_validate) {\n    this.ValidateBuffer();\n  }\n};\n\nb2PairManager.prototype.RemoveBufferedPair = function (proxy1, proxy2) {\n  var pair = this.Find(proxy1, proxy2);\n\n  if (pair == null) {\n    return;\n  }\n\n  if (pair.IsBuffered() == false) {\n    pair.SetBuffered();\n    this.m_pairBuffer[this.m_pairBufferCount] = pair;\n    ++this.m_pairBufferCount;\n  }\n\n  pair.SetRemoved();\n\n  if (b2BroadPhase.s_validate) {\n    this.ValidateBuffer();\n  }\n};\n\nb2PairManager.prototype.Commit = function (callback) {\n  var i = 0;\n  var removeCount = 0;\n\n  for (i = 0; i < this.m_pairBufferCount; ++i) {\n    var pair = this.m_pairBuffer[i];\n    pair.ClearBuffered();\n    var proxy1 = pair.proxy1;\n    var proxy2 = pair.proxy2;\n\n    if (pair.IsRemoved()) {} else {\n      if (pair.IsFinal() == false) {\n        callback(proxy1.userData, proxy2.userData);\n      }\n    }\n  }\n\n  this.m_pairBufferCount = 0;\n\n  if (b2BroadPhase.s_validate) {\n    this.ValidateTable();\n  }\n};\n\nb2PairManager.prototype.m_broadPhase = null;\nb2PairManager.prototype.m_pairs = null;\nb2PairManager.prototype.m_freePair = null;\nb2PairManager.prototype.m_pairCount = 0;\nb2PairManager.prototype.m_pairBuffer = null;\nb2PairManager.prototype.m_pairBufferCount = 0;\n\nvar b2TimeStep = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2TimeStep.prototype.__constructor = function () {};\n\nb2TimeStep.prototype.__varz = function () {};\n\nb2TimeStep.prototype.Set = function (step) {\n  this.dt = step.dt;\n  this.inv_dt = step.inv_dt;\n  this.positionIterations = step.positionIterations;\n  this.velocityIterations = step.velocityIterations;\n  this.warmStarting = step.warmStarting;\n};\n\nb2TimeStep.prototype.dt = null;\nb2TimeStep.prototype.inv_dt = null;\nb2TimeStep.prototype.dtRatio = null;\nb2TimeStep.prototype.velocityIterations = 0;\nb2TimeStep.prototype.positionIterations = 0;\nb2TimeStep.prototype.warmStarting = null;\n\nvar b2Controller = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Controller.prototype.__constructor = function () {};\n\nb2Controller.prototype.__varz = function () {};\n\nb2Controller.prototype.Step = function (step) {};\n\nb2Controller.prototype.Draw = function (debugDraw) {};\n\nb2Controller.prototype.AddBody = function (body) {\n  var edge = new b2ControllerEdge();\n  edge.controller = this;\n  edge.body = body;\n  edge.nextBody = m_bodyList;\n  edge.prevBody = null;\n  m_bodyList = edge;\n\n  if (edge.nextBody) {\n    edge.nextBody.prevBody = edge;\n  }\n\n  m_bodyCount++;\n  edge.nextController = body.m_controllerList;\n  edge.prevController = null;\n  body.m_controllerList = edge;\n\n  if (edge.nextController) {\n    edge.nextController.prevController = edge;\n  }\n\n  body.m_controllerCount++;\n};\n\nb2Controller.prototype.RemoveBody = function (body) {\n  var edge = body.m_controllerList;\n\n  while (edge && edge.controller != this) {\n    edge = edge.nextController;\n  }\n\n  if (edge.prevBody) {\n    edge.prevBody.nextBody = edge.nextBody;\n  }\n\n  if (edge.nextBody) {\n    edge.nextBody.prevBody = edge.prevBody;\n  }\n\n  if (edge.nextController) {\n    edge.nextController.prevController = edge.prevController;\n  }\n\n  if (edge.prevController) {\n    edge.prevController.nextController = edge.nextController;\n  }\n\n  if (m_bodyList == edge) {\n    m_bodyList = edge.nextBody;\n  }\n\n  if (body.m_controllerList == edge) {\n    body.m_controllerList = edge.nextController;\n  }\n\n  body.m_controllerCount--;\n  m_bodyCount--;\n};\n\nb2Controller.prototype.Clear = function () {\n  while (m_bodyList) {\n    this.RemoveBody(m_bodyList.body);\n  }\n};\n\nb2Controller.prototype.GetNext = function () {\n  return this.m_next;\n};\n\nb2Controller.prototype.GetWorld = function () {\n  return this.m_world;\n};\n\nb2Controller.prototype.GetBodyList = function () {\n  return m_bodyList;\n};\n\nb2Controller.prototype.m_next = null;\nb2Controller.prototype.m_prev = null;\nb2Controller.prototype.m_world = null;\n\nvar b2GravityController = function () {\n  b2Controller.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2GravityController.prototype, b2Controller.prototype);\nb2GravityController.prototype._super = b2Controller.prototype;\n\nb2GravityController.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n};\n\nb2GravityController.prototype.__varz = function () {};\n\nb2GravityController.prototype.Step = function (step) {\n  var i = null;\n  var body1 = null;\n  var p1 = null;\n  var mass1 = 0;\n  var j = null;\n  var body2 = null;\n  var p2 = null;\n  var dx = 0;\n  var dy = 0;\n  var r2 = 0;\n  var f = null;\n\n  if (this.invSqr) {\n    for (i = m_bodyList; i; i = i.nextBody) {\n      body1 = i.body;\n      p1 = body1.GetWorldCenter();\n      mass1 = body1.GetMass();\n\n      for (j = m_bodyList; j != i; j = j.nextBody) {\n        body2 = j.body;\n        p2 = body2.GetWorldCenter();\n        dx = p2.x - p1.x;\n        dy = p2.y - p1.y;\n        r2 = dx * dx + dy * dy;\n\n        if (r2 < Number.MIN_VALUE) {\n          continue;\n        }\n\n        f = new b2Vec2(dx, dy);\n        f.Multiply(this.G / r2 / Math.sqrt(r2) * mass1 * body2.GetMass());\n\n        if (body1.IsAwake()) {\n          body1.ApplyForce(f, p1);\n        }\n\n        f.Multiply(-1);\n\n        if (body2.IsAwake()) {\n          body2.ApplyForce(f, p2);\n        }\n      }\n    }\n  } else {\n    for (i = m_bodyList; i; i = i.nextBody) {\n      body1 = i.body;\n      p1 = body1.GetWorldCenter();\n      mass1 = body1.GetMass();\n\n      for (j = m_bodyList; j != i; j = j.nextBody) {\n        body2 = j.body;\n        p2 = body2.GetWorldCenter();\n        dx = p2.x - p1.x;\n        dy = p2.y - p1.y;\n        r2 = dx * dx + dy * dy;\n\n        if (r2 < Number.MIN_VALUE) {\n          continue;\n        }\n\n        f = new b2Vec2(dx, dy);\n        f.Multiply(this.G / r2 * mass1 * body2.GetMass());\n\n        if (body1.IsAwake()) {\n          body1.ApplyForce(f, p1);\n        }\n\n        f.Multiply(-1);\n\n        if (body2.IsAwake()) {\n          body2.ApplyForce(f, p2);\n        }\n      }\n    }\n  }\n};\n\nb2GravityController.prototype.G = 1;\nb2GravityController.prototype.invSqr = true;\n\nvar b2DestructionListener = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2DestructionListener.prototype.__constructor = function () {};\n\nb2DestructionListener.prototype.__varz = function () {};\n\nb2DestructionListener.prototype.SayGoodbyeJoint = function (joint) {};\n\nb2DestructionListener.prototype.SayGoodbyeFixture = function (fixture) {};\n\nvar b2ContactEdge = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2ContactEdge.prototype.__constructor = function () {};\n\nb2ContactEdge.prototype.__varz = function () {};\n\nb2ContactEdge.prototype.other = null;\nb2ContactEdge.prototype.contact = null;\nb2ContactEdge.prototype.prev = null;\nb2ContactEdge.prototype.next = null;\n\nvar b2EdgeChainDef = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2EdgeChainDef.prototype.__constructor = function () {\n  this.vertexCount = 0;\n  this.isALoop = true;\n  this.vertices = [];\n};\n\nb2EdgeChainDef.prototype.__varz = function () {};\n\nb2EdgeChainDef.prototype.vertices = null;\nb2EdgeChainDef.prototype.vertexCount = null;\nb2EdgeChainDef.prototype.isALoop = null;\n\nclass b2Vec2 {\n  constructor(x_, y_) {\n    this.x = 0;\n    this.y = 0;\n\n    if (arguments.length == 2) {\n      this.x = x_;\n      this.y = y_;\n    }\n  }\n\n  SetZero() {\n    this.x = 0;\n    this.y = 0;\n  }\n\n  Set(x_, y_) {\n    this.x = x_;\n    this.y = y_;\n  }\n\n  SetV(v) {\n    this.x = v.x;\n    this.y = v.y;\n  }\n\n  GetNegative() {\n    return new b2Vec2(-this.x, -this.y);\n  }\n\n  NegativeSelf() {\n    this.x = -this.x;\n    this.y = -this.y;\n  }\n\n  Copy() {\n    return new b2Vec2(this.x, this.y);\n  }\n\n  Add(v) {\n    this.x += v.x;\n    this.y += v.y;\n  }\n\n  Subtract(v) {\n    this.x -= v.x;\n    this.y -= v.y;\n  }\n\n  Multiply(a) {\n    this.x *= a;\n    this.y *= a;\n  }\n\n  MulM(A) {\n    var tX = this.x;\n    this.x = A.col1.x * tX + A.col2.x * this.y;\n    this.y = A.col1.y * tX + A.col2.y * this.y;\n  }\n\n  MulTM(A) {\n    var tX = b2Math.Dot(this, A.col1);\n    this.y = b2Math.Dot(this, A.col2);\n    this.x = tX;\n  }\n\n  CrossVF(s) {\n    var tX = this.x;\n    this.x = s * this.y;\n    this.y = -s * tX;\n  }\n\n  CrossFV(s) {\n    var tX = this.x;\n    this.x = -s * this.y;\n    this.y = s * tX;\n  }\n\n  MinV(b) {\n    this.x = this.x < b.x ? this.x : b.x;\n    this.y = this.y < b.y ? this.y : b.y;\n  }\n\n  MaxV(b) {\n    this.x = this.x > b.x ? this.x : b.x;\n    this.y = this.y > b.y ? this.y : b.y;\n  }\n\n  Abs() {\n    if (this.x < 0) {\n      this.x = -this.x;\n    }\n\n    if (this.y < 0) {\n      this.y = -this.y;\n    }\n  }\n\n  Length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  LengthSquared() {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  Normalize() {\n    var length = Math.sqrt(this.x * this.x + this.y * this.y);\n\n    if (length < Number.MIN_VALUE) {\n      return 0;\n    }\n\n    var invLength = 1 / length;\n    this.x *= invLength;\n    this.y *= invLength;\n    return length;\n  }\n\n  IsValid() {\n    return b2Math.IsValid(this.x) && b2Math.IsValid(this.y);\n  }\n\n  static Make(x_, y_) {\n    return new b2Vec2(x_, y_);\n  }\n\n}\n\nclass b2Vec3 {\n  constructor(x, y, z) {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n\n    if (arguments.length == 3) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n    }\n  }\n\n  SetZero() {\n    this.x = this.y = this.z = 0;\n  }\n\n  Set(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  SetV(v) {\n    this.x = v.x;\n    this.y = v.y;\n    this.z = v.z;\n  }\n\n  GetNegative() {\n    return new b2Vec3(-this.x, -this.y, -this.z);\n  }\n\n  NegativeSelf() {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n  }\n\n  Copy() {\n    return new b2Vec3(this.x, this.y, this.z);\n  }\n\n  Add(v) {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n  }\n\n  Subtract(v) {\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n  }\n\n  Multiply(a) {\n    this.x *= a;\n    this.y *= a;\n    this.z *= a;\n  }\n\n}\n\nvar b2DistanceProxy = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2DistanceProxy.prototype.__constructor = function () {};\n\nb2DistanceProxy.prototype.__varz = function () {};\n\nb2DistanceProxy.prototype.Set = function (shape) {\n  switch (shape.GetType()) {\n    case b2Shape.e_circleShape:\n      var circle = shape;\n      this.m_vertices = new Array(1);\n      this.m_vertices[0] = circle.m_p;\n      this.m_count = 1;\n      this.m_radius = circle.m_radius;\n      break;\n\n    case b2Shape.e_polygonShape:\n      var polygon = shape;\n      this.m_vertices = polygon.m_vertices;\n      this.m_count = polygon.m_vertexCount;\n      this.m_radius = polygon.m_radius;\n      break;\n\n    default:\n      b2Settings.b2Assert(false);\n  }\n};\n\nb2DistanceProxy.prototype.GetSupport = function (d) {\n  var bestIndex = 0;\n  var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;\n\n  for (var i = 1; i < this.m_count; ++i) {\n    var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;\n\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n\n  return bestIndex;\n};\n\nb2DistanceProxy.prototype.GetSupportVertex = function (d) {\n  var bestIndex = 0;\n  var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;\n\n  for (var i = 1; i < this.m_count; ++i) {\n    var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;\n\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n\n  return this.m_vertices[bestIndex];\n};\n\nb2DistanceProxy.prototype.GetVertexCount = function () {\n  return this.m_count;\n};\n\nb2DistanceProxy.prototype.GetVertex = function (index) {\n  b2Settings.b2Assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n};\n\nb2DistanceProxy.prototype.m_vertices = null;\nb2DistanceProxy.prototype.m_count = 0;\nb2DistanceProxy.prototype.m_radius = null;\n\nvar b2ContactFactory = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2ContactFactory.prototype.__constructor = function (allocator) {\n  this.m_allocator = allocator;\n  this.InitializeRegisters();\n};\n\nb2ContactFactory.prototype.__varz = function () {};\n\nb2ContactFactory.prototype.AddType = function (createFcn, destroyFcn, type1, type2) {\n  this.m_registers[type1][type2].createFcn = createFcn;\n  this.m_registers[type1][type2].destroyFcn = destroyFcn;\n  this.m_registers[type1][type2].primary = true;\n\n  if (type1 != type2) {\n    this.m_registers[type2][type1].createFcn = createFcn;\n    this.m_registers[type2][type1].destroyFcn = destroyFcn;\n    this.m_registers[type2][type1].primary = false;\n  }\n};\n\nb2ContactFactory.prototype.InitializeRegisters = function () {\n  this.m_registers = new Array(b2Shape.e_shapeTypeCount);\n\n  for (var i = 0; i < b2Shape.e_shapeTypeCount; i++) {\n    this.m_registers[i] = new Array(b2Shape.e_shapeTypeCount);\n\n    for (var j = 0; j < b2Shape.e_shapeTypeCount; j++) {\n      this.m_registers[i][j] = new b2ContactRegister();\n    }\n  }\n\n  this.AddType(b2CircleContact.Create, b2CircleContact.Destroy, b2Shape.e_circleShape, b2Shape.e_circleShape);\n  this.AddType(b2PolyAndCircleContact.Create, b2PolyAndCircleContact.Destroy, b2Shape.e_polygonShape, b2Shape.e_circleShape);\n  this.AddType(b2PolygonContact.Create, b2PolygonContact.Destroy, b2Shape.e_polygonShape, b2Shape.e_polygonShape);\n  this.AddType(b2EdgeAndCircleContact.Create, b2EdgeAndCircleContact.Destroy, b2Shape.e_edgeShape, b2Shape.e_circleShape);\n  this.AddType(b2PolyAndEdgeContact.Create, b2PolyAndEdgeContact.Destroy, b2Shape.e_polygonShape, b2Shape.e_edgeShape);\n};\n\nb2ContactFactory.prototype.Create = function (fixtureA, fixtureB) {\n  var type1 = fixtureA.GetType();\n  var type2 = fixtureB.GetType();\n  var reg = this.m_registers[type1][type2];\n  var c;\n\n  if (reg.pool) {\n    c = reg.pool;\n    reg.pool = c.m_next;\n    reg.poolCount--;\n    c.Reset(fixtureA, fixtureB);\n    return c;\n  }\n\n  var createFcn = reg.createFcn;\n\n  if (createFcn != null) {\n    if (reg.primary) {\n      c = createFcn(this.m_allocator);\n      c.Reset(fixtureA, fixtureB);\n      return c;\n    } else {\n      c = createFcn(this.m_allocator);\n      c.Reset(fixtureB, fixtureA);\n      return c;\n    }\n  } else {\n    return null;\n  }\n};\n\nb2ContactFactory.prototype.Destroy = function (contact) {\n  if (contact.m_manifold.m_pointCount > 0) {\n    contact.m_fixtureA.m_body.SetAwake(true);\n    contact.m_fixtureB.m_body.SetAwake(true);\n  }\n\n  var type1 = contact.m_fixtureA.GetType();\n  var type2 = contact.m_fixtureB.GetType();\n  var reg = this.m_registers[type1][type2];\n\n  if (true) {\n    reg.poolCount++;\n    contact.m_next = reg.pool;\n    reg.pool = contact;\n  }\n\n  var destroyFcn = reg.destroyFcn;\n  destroyFcn(contact, this.m_allocator);\n};\n\nb2ContactFactory.prototype.m_registers = null;\nb2ContactFactory.prototype.m_allocator = null;\n\nvar b2ConstantAccelController = function () {\n  b2Controller.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2ConstantAccelController.prototype, b2Controller.prototype);\nb2ConstantAccelController.prototype._super = b2Controller.prototype;\n\nb2ConstantAccelController.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n};\n\nb2ConstantAccelController.prototype.__varz = function () {\n  this.A = new b2Vec2(0, 0);\n};\n\nb2ConstantAccelController.prototype.Step = function (step) {\n  var smallA = new b2Vec2(this.A.x * step.dt, this.A.y * step.dt);\n\n  for (var i = m_bodyList; i; i = i.nextBody) {\n    var body = i.body;\n\n    if (!body.IsAwake()) {\n      continue;\n    }\n\n    body.SetLinearVelocity(new b2Vec2(body.GetLinearVelocity().x + smallA.x, body.GetLinearVelocity().y + smallA.y));\n  }\n};\n\nb2ConstantAccelController.prototype.A = new b2Vec2(0, 0);\n\nvar b2SeparationFunction = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2SeparationFunction.prototype.__constructor = function () {};\n\nb2SeparationFunction.prototype.__varz = function () {\n  this.m_localPoint = new b2Vec2();\n  this.m_axis = new b2Vec2();\n};\n\nb2SeparationFunction.e_points = 1;\nb2SeparationFunction.e_faceA = 2;\nb2SeparationFunction.e_faceB = 4;\n\nb2SeparationFunction.prototype.Initialize = function (cache, proxyA, transformA, proxyB, transformB) {\n  this.m_proxyA = proxyA;\n  this.m_proxyB = proxyB;\n  var count = cache.count;\n  b2Settings.b2Assert(0 < count && count < 3);\n  var localPointA;\n  var localPointA1;\n  var localPointA2;\n  var localPointB;\n  var localPointB1;\n  var localPointB2;\n  var pointAX;\n  var pointAY;\n  var pointBX;\n  var pointBY;\n  var normalX;\n  var normalY;\n  var tMat;\n  var tVec;\n  var s;\n  var sgn;\n\n  if (count == 1) {\n    this.m_type = b2SeparationFunction.e_points;\n    localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);\n    localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);\n    tVec = localPointA;\n    tMat = transformA.R;\n    pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n    pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n    tVec = localPointB;\n    tMat = transformB.R;\n    pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n    pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n    this.m_axis.x = pointBX - pointAX;\n    this.m_axis.y = pointBY - pointAY;\n    this.m_axis.Normalize();\n  } else {\n    if (cache.indexB[0] == cache.indexB[1]) {\n      this.m_type = b2SeparationFunction.e_faceA;\n      localPointA1 = this.m_proxyA.GetVertex(cache.indexA[0]);\n      localPointA2 = this.m_proxyA.GetVertex(cache.indexA[1]);\n      localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);\n      this.m_localPoint.x = 0.5 * (localPointA1.x + localPointA2.x);\n      this.m_localPoint.y = 0.5 * (localPointA1.y + localPointA2.y);\n      this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointA2, localPointA1), 1);\n      this.m_axis.Normalize();\n      tVec = this.m_axis;\n      tMat = transformA.R;\n      normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n      normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n      tVec = this.m_localPoint;\n      tMat = transformA.R;\n      pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      tVec = localPointB;\n      tMat = transformB.R;\n      pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      s = (pointBX - pointAX) * normalX + (pointBY - pointAY) * normalY;\n\n      if (s < 0) {\n        this.m_axis.NegativeSelf();\n      }\n    } else {\n      if (cache.indexA[0] == cache.indexA[0]) {\n        this.m_type = b2SeparationFunction.e_faceB;\n        localPointB1 = this.m_proxyB.GetVertex(cache.indexB[0]);\n        localPointB2 = this.m_proxyB.GetVertex(cache.indexB[1]);\n        localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);\n        this.m_localPoint.x = 0.5 * (localPointB1.x + localPointB2.x);\n        this.m_localPoint.y = 0.5 * (localPointB1.y + localPointB2.y);\n        this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointB2, localPointB1), 1);\n        this.m_axis.Normalize();\n        tVec = this.m_axis;\n        tMat = transformB.R;\n        normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n        normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n        tVec = this.m_localPoint;\n        tMat = transformB.R;\n        pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n        pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n        tVec = localPointA;\n        tMat = transformA.R;\n        pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n        pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n        s = (pointAX - pointBX) * normalX + (pointAY - pointBY) * normalY;\n\n        if (s < 0) {\n          this.m_axis.NegativeSelf();\n        }\n      } else {\n        localPointA1 = this.m_proxyA.GetVertex(cache.indexA[0]);\n        localPointA2 = this.m_proxyA.GetVertex(cache.indexA[1]);\n        localPointB1 = this.m_proxyB.GetVertex(cache.indexB[0]);\n        localPointB2 = this.m_proxyB.GetVertex(cache.indexB[1]);\n        var pA = b2Math.MulX(transformA, localPointA);\n        var dA = b2Math.MulMV(transformA.R, b2Math.SubtractVV(localPointA2, localPointA1));\n        var pB = b2Math.MulX(transformB, localPointB);\n        var dB = b2Math.MulMV(transformB.R, b2Math.SubtractVV(localPointB2, localPointB1));\n        var a = dA.x * dA.x + dA.y * dA.y;\n        var e = dB.x * dB.x + dB.y * dB.y;\n        var r = b2Math.SubtractVV(dB, dA);\n        var c = dA.x * r.x + dA.y * r.y;\n        var f = dB.x * r.x + dB.y * r.y;\n        var b = dA.x * dB.x + dA.y * dB.y;\n        var denom = a * e - b * b;\n        s = 0;\n\n        if (denom != 0) {\n          s = b2Math.Clamp((b * f - c * e) / denom, 0, 1);\n        }\n\n        var t = (b * s + f) / e;\n\n        if (t < 0) {\n          t = 0;\n          s = b2Math.Clamp((b - c) / a, 0, 1);\n        }\n\n        localPointA = new b2Vec2();\n        localPointA.x = localPointA1.x + s * (localPointA2.x - localPointA1.x);\n        localPointA.y = localPointA1.y + s * (localPointA2.y - localPointA1.y);\n        localPointB = new b2Vec2();\n        localPointB.x = localPointB1.x + s * (localPointB2.x - localPointB1.x);\n        localPointB.y = localPointB1.y + s * (localPointB2.y - localPointB1.y);\n\n        if (s == 0 || s == 1) {\n          this.m_type = b2SeparationFunction.e_faceB;\n          this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointB2, localPointB1), 1);\n          this.m_axis.Normalize();\n          this.m_localPoint = localPointB;\n          tVec = this.m_axis;\n          tMat = transformB.R;\n          normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n          normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n          tVec = this.m_localPoint;\n          tMat = transformB.R;\n          pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n          pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n          tVec = localPointA;\n          tMat = transformA.R;\n          pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n          pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n          sgn = (pointAX - pointBX) * normalX + (pointAY - pointBY) * normalY;\n\n          if (s < 0) {\n            this.m_axis.NegativeSelf();\n          }\n        } else {\n          this.m_type = b2SeparationFunction.e_faceA;\n          this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointA2, localPointA1), 1);\n          this.m_localPoint = localPointA;\n          tVec = this.m_axis;\n          tMat = transformA.R;\n          normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n          normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n          tVec = this.m_localPoint;\n          tMat = transformA.R;\n          pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n          pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n          tVec = localPointB;\n          tMat = transformB.R;\n          pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n          pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n          sgn = (pointBX - pointAX) * normalX + (pointBY - pointAY) * normalY;\n\n          if (s < 0) {\n            this.m_axis.NegativeSelf();\n          }\n        }\n      }\n    }\n  }\n};\n\nb2SeparationFunction.prototype.Evaluate = function (transformA, transformB) {\n  var axisA;\n  var axisB;\n  var localPointA;\n  var localPointB;\n  var pointA;\n  var pointB;\n  var seperation;\n  var normal;\n\n  switch (this.m_type) {\n    case b2SeparationFunction.e_points:\n      axisA = b2Math.MulTMV(transformA.R, this.m_axis);\n      axisB = b2Math.MulTMV(transformB.R, this.m_axis.GetNegative());\n      localPointA = this.m_proxyA.GetSupportVertex(axisA);\n      localPointB = this.m_proxyB.GetSupportVertex(axisB);\n      pointA = b2Math.MulX(transformA, localPointA);\n      pointB = b2Math.MulX(transformB, localPointB);\n      seperation = (pointB.x - pointA.x) * this.m_axis.x + (pointB.y - pointA.y) * this.m_axis.y;\n      return seperation;\n\n    case b2SeparationFunction.e_faceA:\n      normal = b2Math.MulMV(transformA.R, this.m_axis);\n      pointA = b2Math.MulX(transformA, this.m_localPoint);\n      axisB = b2Math.MulTMV(transformB.R, normal.GetNegative());\n      localPointB = this.m_proxyB.GetSupportVertex(axisB);\n      pointB = b2Math.MulX(transformB, localPointB);\n      seperation = (pointB.x - pointA.x) * normal.x + (pointB.y - pointA.y) * normal.y;\n      return seperation;\n\n    case b2SeparationFunction.e_faceB:\n      normal = b2Math.MulMV(transformB.R, this.m_axis);\n      pointB = b2Math.MulX(transformB, this.m_localPoint);\n      axisA = b2Math.MulTMV(transformA.R, normal.GetNegative());\n      localPointA = this.m_proxyA.GetSupportVertex(axisA);\n      pointA = b2Math.MulX(transformA, localPointA);\n      seperation = (pointA.x - pointB.x) * normal.x + (pointA.y - pointB.y) * normal.y;\n      return seperation;\n\n    default:\n      b2Settings.b2Assert(false);\n      return 0;\n  }\n};\n\nb2SeparationFunction.prototype.m_proxyA = null;\nb2SeparationFunction.prototype.m_proxyB = null;\nb2SeparationFunction.prototype.m_type = 0;\nb2SeparationFunction.prototype.m_localPoint = new b2Vec2();\nb2SeparationFunction.prototype.m_axis = new b2Vec2();\n\nvar b2DynamicTreePair = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2DynamicTreePair.prototype.__constructor = function () {};\n\nb2DynamicTreePair.prototype.__varz = function () {};\n\nb2DynamicTreePair.prototype.proxyA = null;\nb2DynamicTreePair.prototype.proxyB = null;\n\nvar b2ContactConstraintPoint = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2ContactConstraintPoint.prototype.__constructor = function () {};\n\nb2ContactConstraintPoint.prototype.__varz = function () {\n  this.localPoint = new b2Vec2();\n  this.rA = new b2Vec2();\n  this.rB = new b2Vec2();\n};\n\nb2ContactConstraintPoint.prototype.localPoint = new b2Vec2();\nb2ContactConstraintPoint.prototype.rA = new b2Vec2();\nb2ContactConstraintPoint.prototype.rB = new b2Vec2();\nb2ContactConstraintPoint.prototype.normalImpulse = null;\nb2ContactConstraintPoint.prototype.tangentImpulse = null;\nb2ContactConstraintPoint.prototype.normalMass = null;\nb2ContactConstraintPoint.prototype.tangentMass = null;\nb2ContactConstraintPoint.prototype.equalizedMass = null;\nb2ContactConstraintPoint.prototype.velocityBias = null;\n\nvar b2ControllerEdge = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2ControllerEdge.prototype.__constructor = function () {};\n\nb2ControllerEdge.prototype.__varz = function () {};\n\nb2ControllerEdge.prototype.controller = null;\nb2ControllerEdge.prototype.body = null;\nb2ControllerEdge.prototype.prevBody = null;\nb2ControllerEdge.prototype.nextBody = null;\nb2ControllerEdge.prototype.prevController = null;\nb2ControllerEdge.prototype.nextController = null;\n\nvar b2DistanceInput = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2DistanceInput.prototype.__constructor = function () {};\n\nb2DistanceInput.prototype.__varz = function () {};\n\nb2DistanceInput.prototype.proxyA = null;\nb2DistanceInput.prototype.proxyB = null;\nb2DistanceInput.prototype.transformA = null;\nb2DistanceInput.prototype.transformB = null;\nb2DistanceInput.prototype.useRadii = null;\n\nvar b2Settings = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Settings.prototype.__constructor = function () {};\n\nb2Settings.prototype.__varz = function () {};\n\nb2Settings.b2MixFriction = function (friction1, friction2) {\n  return Math.sqrt(friction1 * friction2);\n};\n\nb2Settings.b2MixRestitution = function (restitution1, restitution2) {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n};\n\nb2Settings.b2Assert = function (a) {\n  if (!a) {\n    throw \"Assertion Failed\";\n  }\n};\n\nb2Settings.VERSION = \"2.1alpha\";\nb2Settings.USHRT_MAX = 65535;\nb2Settings.b2_pi = Math.PI;\nb2Settings.b2_maxManifoldPoints = 2;\nb2Settings.b2_aabbExtension = 0.1;\nb2Settings.b2_aabbMultiplier = 2;\nb2Settings.b2_polygonRadius = 2 * b2Settings.b2_linearSlop;\nb2Settings.b2_linearSlop = 0.0050;\nb2Settings.b2_angularSlop = 2 / 180 * b2Settings.b2_pi;\nb2Settings.b2_toiSlop = 8 * b2Settings.b2_linearSlop;\nb2Settings.b2_maxTOIContactsPerIsland = 32;\nb2Settings.b2_maxTOIJointsPerIsland = 32;\nb2Settings.b2_velocityThreshold = 1;\nb2Settings.b2_maxLinearCorrection = 0.2;\nb2Settings.b2_maxAngularCorrection = 8 / 180 * b2Settings.b2_pi;\nb2Settings.b2_maxTranslation = 2;\nb2Settings.b2_maxTranslationSquared = b2Settings.b2_maxTranslation * b2Settings.b2_maxTranslation;\nb2Settings.b2_maxRotation = 0.5 * b2Settings.b2_pi;\nb2Settings.b2_maxRotationSquared = b2Settings.b2_maxRotation * b2Settings.b2_maxRotation;\nb2Settings.b2_contactBaumgarte = 0.2;\nb2Settings.b2_timeToSleep = 0.5;\nb2Settings.b2_linearSleepTolerance = 0.01;\nb2Settings.b2_angularSleepTolerance = 2 / 180 * b2Settings.b2_pi;\n\nvar b2Proxy = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Proxy.prototype.__constructor = function () {};\n\nb2Proxy.prototype.__varz = function () {\n  this.lowerBounds = new Array(2);\n  this.upperBounds = new Array(2);\n  this.pairs = new Object();\n};\n\nb2Proxy.prototype.IsValid = function () {\n  return this.overlapCount != b2BroadPhase.b2_invalid;\n};\n\nb2Proxy.prototype.lowerBounds = new Array(2);\nb2Proxy.prototype.upperBounds = new Array(2);\nb2Proxy.prototype.overlapCount = 0;\nb2Proxy.prototype.timeStamp = 0;\nb2Proxy.prototype.pairs = new Object();\nb2Proxy.prototype.next = null;\nb2Proxy.prototype.userData = null;\n\nvar b2Point = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Point.prototype.__constructor = function () {};\n\nb2Point.prototype.__varz = function () {\n  this.p = new b2Vec2();\n};\n\nb2Point.prototype.Support = function (xf, vX, vY) {\n  return this.p;\n};\n\nb2Point.prototype.GetFirstVertex = function (xf) {\n  return this.p;\n};\n\nb2Point.prototype.p = new b2Vec2();\n\nvar b2WorldManifold = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2WorldManifold.prototype.__constructor = function () {\n  this.m_points = new Array(b2Settings.b2_maxManifoldPoints);\n\n  for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {\n    this.m_points[i] = new b2Vec2();\n  }\n};\n\nb2WorldManifold.prototype.__varz = function () {\n  this.m_normal = new b2Vec2();\n};\n\nb2WorldManifold.prototype.Initialize = function (manifold, xfA, radiusA, xfB, radiusB) {\n  if (manifold.m_pointCount == 0) {\n    return;\n  }\n\n  var i = 0;\n  var tVec;\n  var tMat;\n  var normalX;\n  var normalY;\n  var planePointX;\n  var planePointY;\n  var clipPointX;\n  var clipPointY;\n\n  switch (manifold.m_type) {\n    case b2Manifold.e_circles:\n      tMat = xfA.R;\n      tVec = manifold.m_localPoint;\n      var pointAX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n      var pointAY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n      tMat = xfB.R;\n      tVec = manifold.m_points[0].m_localPoint;\n      var pointBX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n      var pointBY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n      var dX = pointBX - pointAX;\n      var dY = pointBY - pointAY;\n      var d2 = dX * dX + dY * dY;\n\n      if (d2 > Number.MIN_VALUE * Number.MIN_VALUE) {\n        var d = Math.sqrt(d2);\n        this.m_normal.x = dX / d;\n        this.m_normal.y = dY / d;\n      } else {\n        this.m_normal.x = 1;\n        this.m_normal.y = 0;\n      }\n\n      var cAX = pointAX + radiusA * this.m_normal.x;\n      var cAY = pointAY + radiusA * this.m_normal.y;\n      var cBX = pointBX - radiusB * this.m_normal.x;\n      var cBY = pointBY - radiusB * this.m_normal.y;\n      this.m_points[0].x = 0.5 * (cAX + cBX);\n      this.m_points[0].y = 0.5 * (cAY + cBY);\n      break;\n\n    case b2Manifold.e_faceA:\n      tMat = xfA.R;\n      tVec = manifold.m_localPlaneNormal;\n      normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n      normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n      tMat = xfA.R;\n      tVec = manifold.m_localPoint;\n      planePointX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n      planePointY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n      this.m_normal.x = normalX;\n      this.m_normal.y = normalY;\n\n      for (i = 0; i < manifold.m_pointCount; i++) {\n        tMat = xfB.R;\n        tVec = manifold.m_points[i].m_localPoint;\n        clipPointX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n        clipPointY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n        this.m_points[i].x = clipPointX + 0.5 * (radiusA - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusB) * normalX;\n        this.m_points[i].y = clipPointY + 0.5 * (radiusA - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusB) * normalY;\n      }\n\n      break;\n\n    case b2Manifold.e_faceB:\n      tMat = xfB.R;\n      tVec = manifold.m_localPlaneNormal;\n      normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n      normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n      tMat = xfB.R;\n      tVec = manifold.m_localPoint;\n      planePointX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n      planePointY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n      this.m_normal.x = -normalX;\n      this.m_normal.y = -normalY;\n\n      for (i = 0; i < manifold.m_pointCount; i++) {\n        tMat = xfA.R;\n        tVec = manifold.m_points[i].m_localPoint;\n        clipPointX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n        clipPointY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n        this.m_points[i].x = clipPointX + 0.5 * (radiusB - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusA) * normalX;\n        this.m_points[i].y = clipPointY + 0.5 * (radiusB - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusA) * normalY;\n      }\n\n      break;\n  }\n};\n\nb2WorldManifold.prototype.m_normal = new b2Vec2();\nb2WorldManifold.prototype.m_points = null;\n\nvar b2RayCastOutput = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2RayCastOutput.prototype.__constructor = function () {};\n\nb2RayCastOutput.prototype.__varz = function () {\n  this.normal = new b2Vec2();\n};\n\nb2RayCastOutput.prototype.normal = new b2Vec2();\nb2RayCastOutput.prototype.fraction = null;\n\nvar b2ConstantForceController = function () {\n  b2Controller.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2ConstantForceController.prototype, b2Controller.prototype);\nb2ConstantForceController.prototype._super = b2Controller.prototype;\n\nb2ConstantForceController.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n};\n\nb2ConstantForceController.prototype.__varz = function () {\n  this.F = new b2Vec2(0, 0);\n};\n\nb2ConstantForceController.prototype.Step = function (step) {\n  for (var i = m_bodyList; i; i = i.nextBody) {\n    var body = i.body;\n\n    if (!body.IsAwake()) {\n      continue;\n    }\n\n    body.ApplyForce(this.F, body.GetWorldCenter());\n  }\n};\n\nb2ConstantForceController.prototype.F = new b2Vec2(0, 0);\n\nvar b2MassData = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2MassData.prototype.__constructor = function () {};\n\nb2MassData.prototype.__varz = function () {\n  this.center = new b2Vec2(0, 0);\n};\n\nb2MassData.prototype.mass = 0;\nb2MassData.prototype.center = new b2Vec2(0, 0);\nb2MassData.prototype.I = 0;\n\nvar b2DynamicTree = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2DynamicTree.prototype.__constructor = function () {\n  this.m_root = null;\n  this.m_freeList = null;\n  this.m_path = 0;\n  this.m_insertionCount = 0;\n};\n\nb2DynamicTree.prototype.__varz = function () {};\n\nb2DynamicTree.prototype.AllocateNode = function () {\n  if (this.m_freeList) {\n    var node = this.m_freeList;\n    this.m_freeList = node.parent;\n    node.parent = null;\n    node.child1 = null;\n    node.child2 = null;\n    return node;\n  }\n\n  return new b2DynamicTreeNode();\n};\n\nb2DynamicTree.prototype.FreeNode = function (node) {\n  node.parent = this.m_freeList;\n  this.m_freeList = node;\n};\n\nb2DynamicTree.prototype.InsertLeaf = function (leaf) {\n  ++this.m_insertionCount;\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  var center = leaf.aabb.GetCenter();\n  var sibling = this.m_root;\n\n  if (sibling.IsLeaf() == false) {\n    do {\n      var child1 = sibling.child1;\n      var child2 = sibling.child2;\n      var norm1 = Math.abs((child1.aabb.lowerBound.x + child1.aabb.upperBound.x) / 2 - center.x) + Math.abs((child1.aabb.lowerBound.y + child1.aabb.upperBound.y) / 2 - center.y);\n      var norm2 = Math.abs((child2.aabb.lowerBound.x + child2.aabb.upperBound.x) / 2 - center.x) + Math.abs((child2.aabb.lowerBound.y + child2.aabb.upperBound.y) / 2 - center.y);\n\n      if (norm1 < norm2) {\n        sibling = child1;\n      } else {\n        sibling = child2;\n      }\n    } while (sibling.IsLeaf() == false);\n  }\n\n  var node1 = sibling.parent;\n  var node2 = this.AllocateNode();\n  node2.parent = node1;\n  node2.userData = null;\n  node2.aabb.Combine(leaf.aabb, sibling.aabb);\n\n  if (node1) {\n    if (sibling.parent.child1 == sibling) {\n      node1.child1 = node2;\n    } else {\n      node1.child2 = node2;\n    }\n\n    node2.child1 = sibling;\n    node2.child2 = leaf;\n    sibling.parent = node2;\n    leaf.parent = node2;\n\n    do {\n      if (node1.aabb.Contains(node2.aabb)) {\n        break;\n      }\n\n      node1.aabb.Combine(node1.child1.aabb, node1.child2.aabb);\n      node2 = node1;\n      node1 = node1.parent;\n    } while (node1);\n  } else {\n    node2.child1 = sibling;\n    node2.child2 = leaf;\n    sibling.parent = node2;\n    leaf.parent = node2;\n    this.m_root = node2;\n  }\n};\n\nb2DynamicTree.prototype.RemoveLeaf = function (leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var node2 = leaf.parent;\n  var node1 = node2.parent;\n  var sibling;\n\n  if (node2.child1 == leaf) {\n    sibling = node2.child2;\n  } else {\n    sibling = node2.child1;\n  }\n\n  if (node1) {\n    if (node1.child1 == node2) {\n      node1.child1 = sibling;\n    } else {\n      node1.child2 = sibling;\n    }\n\n    sibling.parent = node1;\n    this.FreeNode(node2);\n\n    while (node1) {\n      var oldAABB = node1.aabb;\n      node1.aabb = b2AABB.Combine(node1.child1.aabb, node1.child2.aabb);\n\n      if (oldAABB.Contains(node1.aabb)) {\n        break;\n      }\n\n      node1 = node1.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.FreeNode(node2);\n  }\n};\n\nb2DynamicTree.prototype.CreateProxy = function (aabb, userData) {\n  var node = this.AllocateNode();\n  var extendX = b2Settings.b2_aabbExtension;\n  var extendY = b2Settings.b2_aabbExtension;\n  node.aabb.lowerBound.x = aabb.lowerBound.x - extendX;\n  node.aabb.lowerBound.y = aabb.lowerBound.y - extendY;\n  node.aabb.upperBound.x = aabb.upperBound.x + extendX;\n  node.aabb.upperBound.y = aabb.upperBound.y + extendY;\n  node.userData = userData;\n  this.InsertLeaf(node);\n  return node;\n};\n\nb2DynamicTree.prototype.DestroyProxy = function (proxy) {\n  this.RemoveLeaf(proxy);\n  this.FreeNode(proxy);\n};\n\nb2DynamicTree.prototype.MoveProxy = function (proxy, aabb, displacement) {\n  b2Settings.b2Assert(proxy.IsLeaf());\n\n  if (proxy.aabb.Contains(aabb)) {\n    return false;\n  }\n\n  this.RemoveLeaf(proxy);\n  var extendX = b2Settings.b2_aabbExtension + b2Settings.b2_aabbMultiplier * (displacement.x > 0 ? displacement.x : -displacement.x);\n  var extendY = b2Settings.b2_aabbExtension + b2Settings.b2_aabbMultiplier * (displacement.y > 0 ? displacement.y : -displacement.y);\n  proxy.aabb.lowerBound.x = aabb.lowerBound.x - extendX;\n  proxy.aabb.lowerBound.y = aabb.lowerBound.y - extendY;\n  proxy.aabb.upperBound.x = aabb.upperBound.x + extendX;\n  proxy.aabb.upperBound.y = aabb.upperBound.y + extendY;\n  this.InsertLeaf(proxy);\n  return true;\n};\n\nb2DynamicTree.prototype.Rebalance = function (iterations) {\n  if (this.m_root == null) {\n    return;\n  }\n\n  for (var i = 0; i < iterations; i++) {\n    var node = this.m_root;\n    var bit = 0;\n\n    while (node.IsLeaf() == false) {\n      node = this.m_path >> bit & 1 ? node.child2 : node.child1;\n      bit = bit + 1 & 31;\n    }\n\n    ++this.m_path;\n    this.RemoveLeaf(node);\n    this.InsertLeaf(node);\n  }\n};\n\nb2DynamicTree.prototype.GetFatAABB = function (proxy) {\n  return proxy.aabb;\n};\n\nb2DynamicTree.prototype.GetUserData = function (proxy) {\n  return proxy.userData;\n};\n\nb2DynamicTree.prototype.Query = function (callback, aabb) {\n  if (this.m_root == null) {\n    return;\n  }\n\n  var stack = new Array();\n  var count = 0;\n  stack[count++] = this.m_root;\n\n  while (count > 0) {\n    var node = stack[--count];\n\n    if (node.aabb.TestOverlap(aabb)) {\n      if (node.IsLeaf()) {\n        var proceed = callback(node);\n\n        if (!proceed) {\n          return;\n        }\n      } else {\n        stack[count++] = node.child1;\n        stack[count++] = node.child2;\n      }\n    }\n  }\n};\n\nb2DynamicTree.prototype.RayCast = function (callback, input) {\n  if (this.m_root == null) {\n    return;\n  }\n\n  var p1 = input.p1;\n  var p2 = input.p2;\n  var r = b2Math.SubtractVV(p1, p2);\n  r.Normalize();\n  var v = b2Math.CrossFV(1, r);\n  var abs_v = b2Math.AbsV(v);\n  var maxFraction = input.maxFraction;\n  var segmentAABB = new b2AABB();\n  var tX;\n  var tY;\n  tX = p1.x + maxFraction * (p2.x - p1.x);\n  tY = p1.y + maxFraction * (p2.y - p1.y);\n  segmentAABB.lowerBound.x = Math.min(p1.x, tX);\n  segmentAABB.lowerBound.y = Math.min(p1.y, tY);\n  segmentAABB.upperBound.x = Math.max(p1.x, tX);\n  segmentAABB.upperBound.y = Math.max(p1.y, tY);\n  var stack = new Array();\n  var count = 0;\n  stack[count++] = this.m_root;\n\n  while (count > 0) {\n    var node = stack[--count];\n\n    if (node.aabb.TestOverlap(segmentAABB) == false) {\n      continue;\n    }\n\n    var c = node.aabb.GetCenter();\n    var h = node.aabb.GetExtents();\n    var separation = Math.abs(v.x * (p1.x - c.x) + v.y * (p1.y - c.y)) - abs_v.x * h.x - abs_v.y * h.y;\n\n    if (separation > 0) {\n      continue;\n    }\n\n    if (node.IsLeaf()) {\n      var subInput = new b2RayCastInput();\n      subInput.p1 = input.p1;\n      subInput.p2 = input.p2;\n      subInput.maxFraction = input.maxFraction;\n      maxFraction = callback(subInput, node);\n\n      if (maxFraction == 0) {\n        return;\n      }\n\n      tX = p1.x + maxFraction * (p2.x - p1.x);\n      tY = p1.y + maxFraction * (p2.y - p1.y);\n      segmentAABB.lowerBound.x = Math.min(p1.x, tX);\n      segmentAABB.lowerBound.y = Math.min(p1.y, tY);\n      segmentAABB.upperBound.x = Math.max(p1.x, tX);\n      segmentAABB.upperBound.y = Math.max(p1.y, tY);\n    } else {\n      stack[count++] = node.child1;\n      stack[count++] = node.child2;\n    }\n  }\n};\n\nb2DynamicTree.prototype.m_root = null;\nb2DynamicTree.prototype.m_freeList = null;\nb2DynamicTree.prototype.m_path = 0;\nb2DynamicTree.prototype.m_insertionCount = 0;\n\nvar b2JointEdge = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2JointEdge.prototype.__constructor = function () {};\n\nb2JointEdge.prototype.__varz = function () {};\n\nb2JointEdge.prototype.other = null;\nb2JointEdge.prototype.joint = null;\nb2JointEdge.prototype.prev = null;\nb2JointEdge.prototype.next = null;\n\nvar b2RayCastInput = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2RayCastInput.prototype.__constructor = function (p1, p2, maxFraction) {\n  if (p1) {\n    this.p1.SetV(p1);\n  }\n\n  if (p2) {\n    this.p2.SetV(p2);\n  }\n\n  if (maxFraction) {\n    this.maxFraction = maxFraction;\n  }\n};\n\nb2RayCastInput.prototype.__varz = function () {\n  this.p1 = new b2Vec2();\n  this.p2 = new b2Vec2();\n};\n\nb2RayCastInput.prototype.p1 = new b2Vec2();\nb2RayCastInput.prototype.p2 = new b2Vec2();\nb2RayCastInput.prototype.maxFraction = null;\n\nvar Features = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nFeatures.prototype.__constructor = function () {};\n\nFeatures.prototype.__varz = function () {};\n\nFeatures.prototype.__defineGetter__(\"referenceEdge\", function () {\n  return this._referenceEdge;\n});\n\nFeatures.prototype.__defineSetter__(\"referenceEdge\", function (value) {\n  this._referenceEdge = value;\n  this._m_id._key = this._m_id._key & 4294967040 | this._referenceEdge & 255;\n});\n\nFeatures.prototype.__defineGetter__(\"incidentEdge\", function () {\n  return this._incidentEdge;\n});\n\nFeatures.prototype.__defineSetter__(\"incidentEdge\", function (value) {\n  this._incidentEdge = value;\n  this._m_id._key = this._m_id._key & 4294902015 | this._incidentEdge << 8 & 65280;\n});\n\nFeatures.prototype.__defineGetter__(\"incidentVertex\", function () {\n  return this._incidentVertex;\n});\n\nFeatures.prototype.__defineSetter__(\"incidentVertex\", function (value) {\n  this._incidentVertex = value;\n  this._m_id._key = this._m_id._key & 4278255615 | this._incidentVertex << 16 & 16711680;\n});\n\nFeatures.prototype.__defineGetter__(\"flip\", function () {\n  return this._flip;\n});\n\nFeatures.prototype.__defineSetter__(\"flip\", function (value) {\n  this._flip = value;\n  this._m_id._key = this._m_id._key & 16777215 | this._flip << 24 & 4278190080;\n});\n\nFeatures.prototype._referenceEdge = 0;\nFeatures.prototype._incidentEdge = 0;\nFeatures.prototype._incidentVertex = 0;\nFeatures.prototype._flip = 0;\nFeatures.prototype._m_id = null;\n\nvar b2FilterData = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2FilterData.prototype.__constructor = function () {};\n\nb2FilterData.prototype.__varz = function () {\n  this.categoryBits = 1;\n  this.maskBits = 65535;\n};\n\nb2FilterData.prototype.Copy = function () {\n  var copy = new b2FilterData();\n  copy.categoryBits = this.categoryBits;\n  copy.maskBits = this.maskBits;\n  copy.groupIndex = this.groupIndex;\n  return copy;\n};\n\nb2FilterData.prototype.categoryBits = 1;\nb2FilterData.prototype.maskBits = 65535;\nb2FilterData.prototype.groupIndex = 0;\n\nvar b2AABB = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2AABB.prototype.__constructor = function () {};\n\nb2AABB.prototype.__varz = function () {\n  this.lowerBound = new b2Vec2();\n  this.upperBound = new b2Vec2();\n};\n\nb2AABB.Combine = function (aabb1, aabb2) {\n  var aabb = new b2AABB();\n  aabb.Combine(aabb1, aabb2);\n  return aabb;\n};\n\nb2AABB.prototype.IsValid = function () {\n  var dX = this.upperBound.x - this.lowerBound.x;\n  var dY = this.upperBound.y - this.lowerBound.y;\n  var valid = dX >= 0 && dY >= 0;\n  valid = valid && this.lowerBound.IsValid() && this.upperBound.IsValid();\n  return valid;\n};\n\nb2AABB.prototype.GetCenter = function () {\n  return new b2Vec2((this.lowerBound.x + this.upperBound.x) / 2, (this.lowerBound.y + this.upperBound.y) / 2);\n};\n\nb2AABB.prototype.GetExtents = function () {\n  return new b2Vec2((this.upperBound.x - this.lowerBound.x) / 2, (this.upperBound.y - this.lowerBound.y) / 2);\n};\n\nb2AABB.prototype.Contains = function (aabb) {\n  var result = true && this.lowerBound.x <= aabb.lowerBound.x && this.lowerBound.y <= aabb.lowerBound.y && aabb.upperBound.x <= this.upperBound.x && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n};\n\nb2AABB.prototype.RayCast = function (output, input) {\n  var tmin = -Number.MAX_VALUE;\n  var tmax = Number.MAX_VALUE;\n  var pX = input.p1.x;\n  var pY = input.p1.y;\n  var dX = input.p2.x - input.p1.x;\n  var dY = input.p2.y - input.p1.y;\n  var absDX = Math.abs(dX);\n  var absDY = Math.abs(dY);\n  var normal = output.normal;\n  var inv_d;\n  var t1;\n  var t2;\n  var t3;\n  var s;\n\n  if (absDX < Number.MIN_VALUE) {\n    if (pX < this.lowerBound.x || this.upperBound.x < pX) {\n      return false;\n    }\n  } else {\n    inv_d = 1 / dX;\n    t1 = (this.lowerBound.x - pX) * inv_d;\n    t2 = (this.upperBound.x - pX) * inv_d;\n    s = -1;\n\n    if (t1 > t2) {\n      t3 = t1;\n      t1 = t2;\n      t2 = t3;\n      s = 1;\n    }\n\n    if (t1 > tmin) {\n      normal.x = s;\n      normal.y = 0;\n      tmin = t1;\n    }\n\n    tmax = Math.min(tmax, t2);\n\n    if (tmin > tmax) {\n      return false;\n    }\n  }\n\n  if (absDY < Number.MIN_VALUE) {\n    if (pY < this.lowerBound.y || this.upperBound.y < pY) {\n      return false;\n    }\n  } else {\n    inv_d = 1 / dY;\n    t1 = (this.lowerBound.y - pY) * inv_d;\n    t2 = (this.upperBound.y - pY) * inv_d;\n    s = -1;\n\n    if (t1 > t2) {\n      t3 = t1;\n      t1 = t2;\n      t2 = t3;\n      s = 1;\n    }\n\n    if (t1 > tmin) {\n      normal.y = s;\n      normal.x = 0;\n      tmin = t1;\n    }\n\n    tmax = Math.min(tmax, t2);\n\n    if (tmin > tmax) {\n      return false;\n    }\n  }\n\n  output.fraction = tmin;\n  return true;\n};\n\nb2AABB.prototype.TestOverlap = function (other) {\n  var d1X = other.lowerBound.x - this.upperBound.x;\n  var d1Y = other.lowerBound.y - this.upperBound.y;\n  var d2X = this.lowerBound.x - other.upperBound.x;\n  var d2Y = this.lowerBound.y - other.upperBound.y;\n\n  if (d1X > 0 || d1Y > 0) {\n    return false;\n  }\n\n  if (d2X > 0 || d2Y > 0) {\n    return false;\n  }\n\n  return true;\n};\n\nb2AABB.prototype.Combine = function (aabb1, aabb2) {\n  this.lowerBound.x = Math.min(aabb1.lowerBound.x, aabb2.lowerBound.x);\n  this.lowerBound.y = Math.min(aabb1.lowerBound.y, aabb2.lowerBound.y);\n  this.upperBound.x = Math.max(aabb1.upperBound.x, aabb2.upperBound.x);\n  this.upperBound.y = Math.max(aabb1.upperBound.y, aabb2.upperBound.y);\n};\n\nb2AABB.prototype.lowerBound = new b2Vec2();\nb2AABB.prototype.upperBound = new b2Vec2();\n\nvar b2Jacobian = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Jacobian.prototype.__constructor = function () {};\n\nb2Jacobian.prototype.__varz = function () {\n  this.linearA = new b2Vec2();\n  this.linearB = new b2Vec2();\n};\n\nb2Jacobian.prototype.SetZero = function () {\n  this.linearA.SetZero();\n  this.angularA = 0;\n  this.linearB.SetZero();\n  this.angularB = 0;\n};\n\nb2Jacobian.prototype.Set = function (x1, a1, x2, a2) {\n  this.linearA.SetV(x1);\n  this.angularA = a1;\n  this.linearB.SetV(x2);\n  this.angularB = a2;\n};\n\nb2Jacobian.prototype.Compute = function (x1, a1, x2, a2) {\n  return this.linearA.x * x1.x + this.linearA.y * x1.y + this.angularA * a1 + (this.linearB.x * x2.x + this.linearB.y * x2.y) + this.angularB * a2;\n};\n\nb2Jacobian.prototype.linearA = new b2Vec2();\nb2Jacobian.prototype.angularA = null;\nb2Jacobian.prototype.linearB = new b2Vec2();\nb2Jacobian.prototype.angularB = null;\n\nvar b2Bound = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Bound.prototype.__constructor = function () {};\n\nb2Bound.prototype.__varz = function () {};\n\nb2Bound.prototype.IsLower = function () {\n  return (this.value & 1) == 0;\n};\n\nb2Bound.prototype.IsUpper = function () {\n  return (this.value & 1) == 1;\n};\n\nb2Bound.prototype.Swap = function (b) {\n  var tempValue = this.value;\n  var tempProxy = this.proxy;\n  var tempStabbingCount = this.stabbingCount;\n  this.value = b.value;\n  this.proxy = b.proxy;\n  this.stabbingCount = b.stabbingCount;\n  b.value = tempValue;\n  b.proxy = tempProxy;\n  b.stabbingCount = tempStabbingCount;\n};\n\nb2Bound.prototype.value = 0;\nb2Bound.prototype.proxy = null;\nb2Bound.prototype.stabbingCount = 0;\n\nvar b2SimplexVertex = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2SimplexVertex.prototype.__constructor = function () {};\n\nb2SimplexVertex.prototype.__varz = function () {};\n\nb2SimplexVertex.prototype.Set = function (other) {\n  this.wA.SetV(other.wA);\n  this.wB.SetV(other.wB);\n  this.w.SetV(other.w);\n  this.a = other.a;\n  this.indexA = other.indexA;\n  this.indexB = other.indexB;\n};\n\nb2SimplexVertex.prototype.wA = null;\nb2SimplexVertex.prototype.wB = null;\nb2SimplexVertex.prototype.w = null;\nb2SimplexVertex.prototype.a = null;\nb2SimplexVertex.prototype.indexA = 0;\nb2SimplexVertex.prototype.indexB = 0;\n\nvar b2Mat22 = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Mat22.prototype.__constructor = function () {\n  this.col1.x = this.col2.y = 1;\n};\n\nb2Mat22.prototype.__varz = function () {\n  this.col1 = new b2Vec2();\n  this.col2 = new b2Vec2();\n};\n\nb2Mat22.FromAngle = function (angle) {\n  var mat = new b2Mat22();\n  mat.Set(angle);\n  return mat;\n};\n\nb2Mat22.FromVV = function (c1, c2) {\n  var mat = new b2Mat22();\n  mat.SetVV(c1, c2);\n  return mat;\n};\n\nb2Mat22.prototype.Set = function (angle) {\n  var c = Math.cos(angle);\n  var s = Math.sin(angle);\n  this.col1.x = c;\n  this.col2.x = -s;\n  this.col1.y = s;\n  this.col2.y = c;\n};\n\nb2Mat22.prototype.SetVV = function (c1, c2) {\n  this.col1.SetV(c1);\n  this.col2.SetV(c2);\n};\n\nb2Mat22.prototype.Copy = function () {\n  var mat = new b2Mat22();\n  mat.SetM(this);\n  return mat;\n};\n\nb2Mat22.prototype.SetM = function (m) {\n  this.col1.SetV(m.col1);\n  this.col2.SetV(m.col2);\n};\n\nb2Mat22.prototype.AddM = function (m) {\n  this.col1.x += m.col1.x;\n  this.col1.y += m.col1.y;\n  this.col2.x += m.col2.x;\n  this.col2.y += m.col2.y;\n};\n\nb2Mat22.prototype.SetIdentity = function () {\n  this.col1.x = 1;\n  this.col2.x = 0;\n  this.col1.y = 0;\n  this.col2.y = 1;\n};\n\nb2Mat22.prototype.SetZero = function () {\n  this.col1.x = 0;\n  this.col2.x = 0;\n  this.col1.y = 0;\n  this.col2.y = 0;\n};\n\nb2Mat22.prototype.GetAngle = function () {\n  return Math.atan2(this.col1.y, this.col1.x);\n};\n\nb2Mat22.prototype.GetInverse = function (out) {\n  var a = this.col1.x;\n  var b = this.col2.x;\n  var c = this.col1.y;\n  var d = this.col2.y;\n  var det = a * d - b * c;\n\n  if (det != 0) {\n    det = 1 / det;\n  }\n\n  out.col1.x = det * d;\n  out.col2.x = -det * b;\n  out.col1.y = -det * c;\n  out.col2.y = det * a;\n  return out;\n};\n\nb2Mat22.prototype.Solve = function (out, bX, bY) {\n  var a11 = this.col1.x;\n  var a12 = this.col2.x;\n  var a21 = this.col1.y;\n  var a22 = this.col2.y;\n  var det = a11 * a22 - a12 * a21;\n\n  if (det != 0) {\n    det = 1 / det;\n  }\n\n  out.x = det * (a22 * bX - a12 * bY);\n  out.y = det * (a11 * bY - a21 * bX);\n  return out;\n};\n\nb2Mat22.prototype.Abs = function () {\n  this.col1.Abs();\n  this.col2.Abs();\n};\n\nb2Mat22.prototype.col1 = new b2Vec2();\nb2Mat22.prototype.col2 = new b2Vec2();\n\nvar b2SimplexCache = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2SimplexCache.prototype.__constructor = function () {};\n\nb2SimplexCache.prototype.__varz = function () {\n  this.indexA = new Array(3);\n  this.indexB = new Array(3);\n};\n\nb2SimplexCache.prototype.metric = null;\nb2SimplexCache.prototype.count = 0;\nb2SimplexCache.prototype.indexA = new Array(3);\nb2SimplexCache.prototype.indexB = new Array(3);\n\nvar b2Shape = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Shape.prototype.__constructor = function () {\n  this.m_type = b2Shape.e_unknownShape;\n  this.m_radius = b2Settings.b2_linearSlop;\n};\n\nb2Shape.prototype.__varz = function () {};\n\nb2Shape.TestOverlap = function (shape1, transform1, shape2, transform2) {\n  var input = new b2DistanceInput();\n  input.proxyA = new b2DistanceProxy();\n  input.proxyA.Set(shape1);\n  input.proxyB = new b2DistanceProxy();\n  input.proxyB.Set(shape2);\n  input.transformA = transform1;\n  input.transformB = transform2;\n  input.useRadii = true;\n  var simplexCache = new b2SimplexCache();\n  simplexCache.count = 0;\n  var output = new b2DistanceOutput();\n  b2Distance.Distance(output, simplexCache, input);\n  return output.distance < 10 * Number.MIN_VALUE;\n};\n\nb2Shape.e_hitCollide = 1;\nb2Shape.e_missCollide = 0;\nb2Shape.e_startsInsideCollide = -1;\nb2Shape.e_unknownShape = -1;\nb2Shape.e_circleShape = 0;\nb2Shape.e_polygonShape = 1;\nb2Shape.e_edgeShape = 2;\nb2Shape.e_shapeTypeCount = 3;\n\nb2Shape.prototype.Copy = function () {\n  return null;\n};\n\nb2Shape.prototype.Set = function (other) {\n  this.m_radius = other.m_radius;\n};\n\nb2Shape.prototype.GetType = function () {\n  return this.m_type;\n};\n\nb2Shape.prototype.TestPoint = function (xf, p) {\n  return false;\n};\n\nb2Shape.prototype.RayCast = function (output, input, transform) {\n  return false;\n};\n\nb2Shape.prototype.ComputeAABB = function (aabb, xf) {};\n\nb2Shape.prototype.ComputeMass = function (massData, density) {};\n\nb2Shape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {\n  return 0;\n};\n\nb2Shape.prototype.m_type = 0;\nb2Shape.prototype.m_radius = null;\n\nvar b2Segment = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Segment.prototype.__constructor = function () {};\n\nb2Segment.prototype.__varz = function () {\n  this.p1 = new b2Vec2();\n  this.p2 = new b2Vec2();\n};\n\nb2Segment.prototype.TestSegment = function (lambda, normal, segment, maxLambda) {\n  var s = segment.p1;\n  var rX = segment.p2.x - s.x;\n  var rY = segment.p2.y - s.y;\n  var dX = this.p2.x - this.p1.x;\n  var dY = this.p2.y - this.p1.y;\n  var nX = dY;\n  var nY = -dX;\n  var k_slop = 100 * Number.MIN_VALUE;\n  var denom = -(rX * nX + rY * nY);\n\n  if (denom > k_slop) {\n    var bX = s.x - this.p1.x;\n    var bY = s.y - this.p1.y;\n    var a = bX * nX + bY * nY;\n\n    if (0 <= a && a <= maxLambda * denom) {\n      var mu2 = -rX * bY + rY * bX;\n\n      if (-k_slop * denom <= mu2 && mu2 <= denom * (1 + k_slop)) {\n        a /= denom;\n        var nLen = Math.sqrt(nX * nX + nY * nY);\n        nX /= nLen;\n        nY /= nLen;\n        lambda[0] = a;\n        normal.Set(nX, nY);\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nb2Segment.prototype.Extend = function (aabb) {\n  this.ExtendForward(aabb);\n  this.ExtendBackward(aabb);\n};\n\nb2Segment.prototype.ExtendForward = function (aabb) {\n  var dX = this.p2.x - this.p1.x;\n  var dY = this.p2.y - this.p1.y;\n  var lambda = Math.min(dX > 0 ? (aabb.upperBound.x - this.p1.x) / dX : dX < 0 ? (aabb.lowerBound.x - this.p1.x) / dX : Number.POSITIVE_INFINITY, dY > 0 ? (aabb.upperBound.y - this.p1.y) / dY : dY < 0 ? (aabb.lowerBound.y - this.p1.y) / dY : Number.POSITIVE_INFINITY);\n  this.p2.x = this.p1.x + dX * lambda;\n  this.p2.y = this.p1.y + dY * lambda;\n};\n\nb2Segment.prototype.ExtendBackward = function (aabb) {\n  var dX = -this.p2.x + this.p1.x;\n  var dY = -this.p2.y + this.p1.y;\n  var lambda = Math.min(dX > 0 ? (aabb.upperBound.x - this.p2.x) / dX : dX < 0 ? (aabb.lowerBound.x - this.p2.x) / dX : Number.POSITIVE_INFINITY, dY > 0 ? (aabb.upperBound.y - this.p2.y) / dY : dY < 0 ? (aabb.lowerBound.y - this.p2.y) / dY : Number.POSITIVE_INFINITY);\n  this.p1.x = this.p2.x + dX * lambda;\n  this.p1.y = this.p2.y + dY * lambda;\n};\n\nb2Segment.prototype.p1 = new b2Vec2();\nb2Segment.prototype.p2 = new b2Vec2();\n\nvar b2ContactRegister = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2ContactRegister.prototype.__constructor = function () {};\n\nb2ContactRegister.prototype.__varz = function () {};\n\nb2ContactRegister.prototype.createFcn = null;\nb2ContactRegister.prototype.destroyFcn = null;\nb2ContactRegister.prototype.primary = null;\nb2ContactRegister.prototype.pool = null;\nb2ContactRegister.prototype.poolCount = 0;\n\nvar b2DebugDraw = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2DebugDraw.prototype.__constructor = function () {\n  this.m_drawFlags = 0;\n};\n\nb2DebugDraw.prototype.__varz = function () {};\n\nb2DebugDraw.e_shapeBit = 1;\nb2DebugDraw.e_jointBit = 2;\nb2DebugDraw.e_aabbBit = 4;\nb2DebugDraw.e_pairBit = 8;\nb2DebugDraw.e_centerOfMassBit = 16;\nb2DebugDraw.e_controllerBit = 32;\n\nb2DebugDraw.prototype.SetFlags = function (flags) {\n  this.m_drawFlags = flags;\n};\n\nb2DebugDraw.prototype.GetFlags = function () {\n  return this.m_drawFlags;\n};\n\nb2DebugDraw.prototype.AppendFlags = function (flags) {\n  this.m_drawFlags |= flags;\n};\n\nb2DebugDraw.prototype.ClearFlags = function (flags) {\n  this.m_drawFlags &= ~flags;\n};\n\nb2DebugDraw.prototype.SetSprite = function (sprite) {\n  this.m_sprite = sprite;\n};\n\nb2DebugDraw.prototype.GetSprite = function () {\n  return this.m_sprite;\n};\n\nb2DebugDraw.prototype.SetDrawScale = function (drawScale) {\n  this.m_drawScale = drawScale;\n};\n\nb2DebugDraw.prototype.GetDrawScale = function () {\n  return this.m_drawScale;\n};\n\nb2DebugDraw.prototype.SetLineThickness = function (lineThickness) {\n  this.m_lineThickness = lineThickness;\n};\n\nb2DebugDraw.prototype.GetLineThickness = function () {\n  return this.m_lineThickness;\n};\n\nb2DebugDraw.prototype.SetAlpha = function (alpha) {\n  this.m_alpha = alpha;\n};\n\nb2DebugDraw.prototype.GetAlpha = function () {\n  return this.m_alpha;\n};\n\nb2DebugDraw.prototype.SetFillAlpha = function (alpha) {\n  this.m_fillAlpha = alpha;\n};\n\nb2DebugDraw.prototype.GetFillAlpha = function () {\n  return this.m_fillAlpha;\n};\n\nb2DebugDraw.prototype.SetXFormScale = function (xformScale) {\n  this.m_xformScale = xformScale;\n};\n\nb2DebugDraw.prototype.GetXFormScale = function () {\n  return this.m_xformScale;\n};\n\nb2DebugDraw.prototype.Clear = function () {\n  this.m_sprite.clearRect(0, 0, this.m_sprite.canvas.width, this.m_sprite.canvas.height);\n};\n\nb2DebugDraw.prototype.Y = function (y) {\n  return this.m_sprite.canvas.height - y;\n};\n\nb2DebugDraw.prototype.ToWorldPoint = function (localPoint) {\n  return new b2Vec2(localPoint.x / this.m_drawScale, this.Y(localPoint.y) / this.m_drawScale);\n};\n\nb2DebugDraw.prototype.ColorStyle = function (color, alpha) {\n  return \"rgba(\" + color.r + \", \" + color.g + \", \" + color.b + \", \" + alpha + \")\";\n};\n\nb2DebugDraw.prototype.DrawPolygon = function (vertices, vertexCount, color) {\n  this.m_sprite.graphics.lineStyle(this.m_lineThickness, color.color, this.m_alpha);\n  this.m_sprite.graphics.moveTo(vertices[0].x * this.m_drawScale, vertices[0].y * this.m_drawScale);\n\n  for (var i = 1; i < vertexCount; i++) {\n    this.m_sprite.graphics.lineTo(vertices[i].x * this.m_drawScale, vertices[i].y * this.m_drawScale);\n  }\n\n  this.m_sprite.graphics.lineTo(vertices[0].x * this.m_drawScale, vertices[0].y * this.m_drawScale);\n};\n\nb2DebugDraw.prototype.DrawSolidPolygon = function (vertices, vertexCount, color) {\n  this.m_sprite.strokeSyle = this.ColorStyle(color, this.m_alpha);\n  this.m_sprite.lineWidth = this.m_lineThickness;\n  this.m_sprite.fillStyle = this.ColorStyle(color, this.m_fillAlpha);\n  this.m_sprite.beginPath();\n  this.m_sprite.moveTo(vertices[0].x * this.m_drawScale, this.Y(vertices[0].y * this.m_drawScale));\n\n  for (var i = 1; i < vertexCount; i++) {\n    this.m_sprite.lineTo(vertices[i].x * this.m_drawScale, this.Y(vertices[i].y * this.m_drawScale));\n  }\n\n  this.m_sprite.lineTo(vertices[0].x * this.m_drawScale, this.Y(vertices[0].y * this.m_drawScale));\n  this.m_sprite.fill();\n  this.m_sprite.stroke();\n  this.m_sprite.closePath();\n};\n\nb2DebugDraw.prototype.DrawCircle = function (center, radius, color) {\n  this.m_sprite.graphics.lineStyle(this.m_lineThickness, color.color, this.m_alpha);\n  this.m_sprite.graphics.drawCircle(center.x * this.m_drawScale, center.y * this.m_drawScale, radius * this.m_drawScale);\n};\n\nb2DebugDraw.prototype.DrawSolidCircle = function (center, radius, axis, color) {\n  this.m_sprite.strokeSyle = this.ColorStyle(color, this.m_alpha);\n  this.m_sprite.lineWidth = this.m_lineThickness;\n  this.m_sprite.fillStyle = this.ColorStyle(color, this.m_fillAlpha);\n  this.m_sprite.beginPath();\n  this.m_sprite.arc(center.x * this.m_drawScale, this.Y(center.y * this.m_drawScale), radius * this.m_drawScale, 0, Math.PI * 2, true);\n  this.m_sprite.fill();\n  this.m_sprite.stroke();\n  this.m_sprite.closePath();\n};\n\nb2DebugDraw.prototype.DrawSegment = function (p1, p2, color) {\n  this.m_sprite.lineWidth = this.m_lineThickness;\n  this.m_sprite.strokeSyle = this.ColorStyle(color, this.m_alpha);\n  this.m_sprite.beginPath();\n  this.m_sprite.moveTo(p1.x * this.m_drawScale, this.Y(p1.y * this.m_drawScale));\n  this.m_sprite.lineTo(p2.x * this.m_drawScale, this.Y(p2.y * this.m_drawScale));\n  this.m_sprite.stroke();\n  this.m_sprite.closePath();\n};\n\nb2DebugDraw.prototype.DrawTransform = function (xf) {\n  this.m_sprite.lineWidth = this.m_lineThickness;\n  this.m_sprite.strokeSyle = this.ColorStyle(new b2Color(255, 0, 0), this.m_alpha);\n  this.m_sprite.beginPath();\n  this.m_sprite.moveTo(xf.position.x * this.m_drawScale, this.Y(xf.position.y * this.m_drawScale));\n  this.m_sprite.lineTo((xf.position.x + this.m_xformScale * xf.R.col1.x) * this.m_drawScale, this.Y((xf.position.y + this.m_xformScale * xf.R.col1.y) * this.m_drawScale));\n  this.m_sprite.stroke();\n  this.m_sprite.closePath();\n  this.m_sprite.strokeSyle = this.ColorStyle(new b2Color(0, 255, 0), this.m_alpha);\n  this.m_sprite.beginPath();\n  this.m_sprite.moveTo(xf.position.x * this.m_drawScale, this.Y(xf.position.y * this.m_drawScale));\n  this.m_sprite.lineTo((xf.position.x + this.m_xformScale * xf.R.col2.x) * this.m_drawScale, this.Y((xf.position.y + this.m_xformScale * xf.R.col2.y) * this.m_drawScale));\n  this.m_sprite.stroke();\n  this.m_sprite.closePath();\n};\n\nb2DebugDraw.prototype.m_drawFlags = 0;\nb2DebugDraw.prototype.m_sprite = null;\nb2DebugDraw.prototype.m_drawScale = 1;\nb2DebugDraw.prototype.m_lineThickness = 1;\nb2DebugDraw.prototype.m_alpha = 1;\nb2DebugDraw.prototype.m_fillAlpha = 1;\nb2DebugDraw.prototype.m_xformScale = 1;\n\nvar b2Sweep = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Sweep.prototype.__constructor = function () {};\n\nb2Sweep.prototype.__varz = function () {\n  this.localCenter = new b2Vec2();\n  this.c0 = new b2Vec2();\n  this.c = new b2Vec2();\n};\n\nb2Sweep.prototype.Set = function (other) {\n  this.localCenter.SetV(other.localCenter);\n  this.c0.SetV(other.c0);\n  this.c.SetV(other.c);\n  this.a0 = other.a0;\n  this.a = other.a;\n  this.t0 = other.t0;\n};\n\nb2Sweep.prototype.Copy = function () {\n  var copy = new b2Sweep();\n  copy.localCenter.SetV(this.localCenter);\n  copy.c0.SetV(this.c0);\n  copy.c.SetV(this.c);\n  copy.a0 = this.a0;\n  copy.a = this.a;\n  copy.t0 = this.t0;\n  return copy;\n};\n\nb2Sweep.prototype.GetTransform = function (xf, alpha) {\n  xf.position.x = (1 - alpha) * this.c0.x + alpha * this.c.x;\n  xf.position.y = (1 - alpha) * this.c0.y + alpha * this.c.y;\n  var angle = (1 - alpha) * this.a0 + alpha * this.a;\n  xf.R.Set(angle);\n  var tMat = xf.R;\n  xf.position.x -= tMat.col1.x * this.localCenter.x + tMat.col2.x * this.localCenter.y;\n  xf.position.y -= tMat.col1.y * this.localCenter.x + tMat.col2.y * this.localCenter.y;\n};\n\nb2Sweep.prototype.Advance = function (t) {\n  if (this.t0 < t && 1 - this.t0 > Number.MIN_VALUE) {\n    var alpha = (t - this.t0) / (1 - this.t0);\n    this.c0.x = (1 - alpha) * this.c0.x + alpha * this.c.x;\n    this.c0.y = (1 - alpha) * this.c0.y + alpha * this.c.y;\n    this.a0 = (1 - alpha) * this.a0 + alpha * this.a;\n    this.t0 = t;\n  }\n};\n\nb2Sweep.prototype.localCenter = new b2Vec2();\nb2Sweep.prototype.c0 = new b2Vec2();\nb2Sweep.prototype.c = new b2Vec2();\nb2Sweep.prototype.a0 = null;\nb2Sweep.prototype.a = null;\nb2Sweep.prototype.t0 = null;\n\nvar b2DistanceOutput = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2DistanceOutput.prototype.__constructor = function () {};\n\nb2DistanceOutput.prototype.__varz = function () {\n  this.pointA = new b2Vec2();\n  this.pointB = new b2Vec2();\n};\n\nb2DistanceOutput.prototype.pointA = new b2Vec2();\nb2DistanceOutput.prototype.pointB = new b2Vec2();\nb2DistanceOutput.prototype.distance = null;\nb2DistanceOutput.prototype.iterations = 0;\n\nvar b2Mat33 = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Mat33.prototype.__constructor = function (c1, c2, c3) {\n  if (!c1 && !c2 && !c3) {\n    this.col1.SetZero();\n    this.col2.SetZero();\n    this.col3.SetZero();\n  } else {\n    this.col1.SetV(c1);\n    this.col2.SetV(c2);\n    this.col3.SetV(c3);\n  }\n};\n\nb2Mat33.prototype.__varz = function () {\n  this.col1 = new b2Vec3();\n  this.col2 = new b2Vec3();\n  this.col3 = new b2Vec3();\n};\n\nb2Mat33.prototype.SetVVV = function (c1, c2, c3) {\n  this.col1.SetV(c1);\n  this.col2.SetV(c2);\n  this.col3.SetV(c3);\n};\n\nb2Mat33.prototype.Copy = function () {\n  return new b2Mat33(this.col1, this.col2, this.col3);\n};\n\nb2Mat33.prototype.SetM = function (m) {\n  this.col1.SetV(m.col1);\n  this.col2.SetV(m.col2);\n  this.col3.SetV(m.col3);\n};\n\nb2Mat33.prototype.AddM = function (m) {\n  this.col1.x += m.col1.x;\n  this.col1.y += m.col1.y;\n  this.col1.z += m.col1.z;\n  this.col2.x += m.col2.x;\n  this.col2.y += m.col2.y;\n  this.col2.z += m.col2.z;\n  this.col3.x += m.col3.x;\n  this.col3.y += m.col3.y;\n  this.col3.z += m.col3.z;\n};\n\nb2Mat33.prototype.SetIdentity = function () {\n  this.col1.x = 1;\n  this.col2.x = 0;\n  this.col3.x = 0;\n  this.col1.y = 0;\n  this.col2.y = 1;\n  this.col3.y = 0;\n  this.col1.z = 0;\n  this.col2.z = 0;\n  this.col3.z = 1;\n};\n\nb2Mat33.prototype.SetZero = function () {\n  this.col1.x = 0;\n  this.col2.x = 0;\n  this.col3.x = 0;\n  this.col1.y = 0;\n  this.col2.y = 0;\n  this.col3.y = 0;\n  this.col1.z = 0;\n  this.col2.z = 0;\n  this.col3.z = 0;\n};\n\nb2Mat33.prototype.Solve22 = function (out, bX, bY) {\n  var a11 = this.col1.x;\n  var a12 = this.col2.x;\n  var a21 = this.col1.y;\n  var a22 = this.col2.y;\n  var det = a11 * a22 - a12 * a21;\n\n  if (det != 0) {\n    det = 1 / det;\n  }\n\n  out.x = det * (a22 * bX - a12 * bY);\n  out.y = det * (a11 * bY - a21 * bX);\n  return out;\n};\n\nb2Mat33.prototype.Solve33 = function (out, bX, bY, bZ) {\n  var a11 = this.col1.x;\n  var a21 = this.col1.y;\n  var a31 = this.col1.z;\n  var a12 = this.col2.x;\n  var a22 = this.col2.y;\n  var a32 = this.col2.z;\n  var a13 = this.col3.x;\n  var a23 = this.col3.y;\n  var a33 = this.col3.z;\n  var det = a11 * (a22 * a33 - a32 * a23) + a21 * (a32 * a13 - a12 * a33) + a31 * (a12 * a23 - a22 * a13);\n\n  if (det != 0) {\n    det = 1 / det;\n  }\n\n  out.x = det * (bX * (a22 * a33 - a32 * a23) + bY * (a32 * a13 - a12 * a33) + bZ * (a12 * a23 - a22 * a13));\n  out.y = det * (a11 * (bY * a33 - bZ * a23) + a21 * (bZ * a13 - bX * a33) + a31 * (bX * a23 - bY * a13));\n  out.z = det * (a11 * (a22 * bZ - a32 * bY) + a21 * (a32 * bX - a12 * bZ) + a31 * (a12 * bY - a22 * bX));\n  return out;\n};\n\nb2Mat33.prototype.col1 = new b2Vec3();\nb2Mat33.prototype.col2 = new b2Vec3();\nb2Mat33.prototype.col3 = new b2Vec3();\n\nvar b2PositionSolverManifold = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2PositionSolverManifold.prototype.__constructor = function () {\n  this.m_normal = new b2Vec2();\n  this.m_separations = new Array(b2Settings.b2_maxManifoldPoints);\n  this.m_points = new Array(b2Settings.b2_maxManifoldPoints);\n\n  for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {\n    this.m_points[i] = new b2Vec2();\n  }\n};\n\nb2PositionSolverManifold.prototype.__varz = function () {};\n\nb2PositionSolverManifold.circlePointA = new b2Vec2();\nb2PositionSolverManifold.circlePointB = new b2Vec2();\n\nb2PositionSolverManifold.prototype.Initialize = function (cc) {\n  b2Settings.b2Assert(cc.pointCount > 0);\n  var i = 0;\n  var clipPointX;\n  var clipPointY;\n  var tMat;\n  var tVec;\n  var planePointX;\n  var planePointY;\n\n  switch (cc.type) {\n    case b2Manifold.e_circles:\n      tMat = cc.bodyA.m_xf.R;\n      tVec = cc.localPoint;\n      var pointAX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      var pointAY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      tMat = cc.bodyB.m_xf.R;\n      tVec = cc.points[0].localPoint;\n      var pointBX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      var pointBY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      var dX = pointBX - pointAX;\n      var dY = pointBY - pointAY;\n      var d2 = dX * dX + dY * dY;\n\n      if (d2 > Number.MIN_VALUE * Number.MIN_VALUE) {\n        var d = Math.sqrt(d2);\n        this.m_normal.x = dX / d;\n        this.m_normal.y = dY / d;\n      } else {\n        this.m_normal.x = 1;\n        this.m_normal.y = 0;\n      }\n\n      this.m_points[0].x = 0.5 * (pointAX + pointBX);\n      this.m_points[0].y = 0.5 * (pointAY + pointBY);\n      this.m_separations[0] = dX * this.m_normal.x + dY * this.m_normal.y - cc.radius;\n      break;\n\n    case b2Manifold.e_faceA:\n      tMat = cc.bodyA.m_xf.R;\n      tVec = cc.localPlaneNormal;\n      this.m_normal.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n      this.m_normal.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n      tMat = cc.bodyA.m_xf.R;\n      tVec = cc.localPoint;\n      planePointX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      planePointY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      tMat = cc.bodyB.m_xf.R;\n\n      for (i = 0; i < cc.pointCount; ++i) {\n        tVec = cc.points[i].localPoint;\n        clipPointX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n        clipPointY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n        this.m_separations[i] = (clipPointX - planePointX) * this.m_normal.x + (clipPointY - planePointY) * this.m_normal.y - cc.radius;\n        this.m_points[i].x = clipPointX;\n        this.m_points[i].y = clipPointY;\n      }\n\n      break;\n\n    case b2Manifold.e_faceB:\n      tMat = cc.bodyB.m_xf.R;\n      tVec = cc.localPlaneNormal;\n      this.m_normal.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n      this.m_normal.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n      tMat = cc.bodyB.m_xf.R;\n      tVec = cc.localPoint;\n      planePointX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      planePointY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      tMat = cc.bodyA.m_xf.R;\n\n      for (i = 0; i < cc.pointCount; ++i) {\n        tVec = cc.points[i].localPoint;\n        clipPointX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n        clipPointY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n        this.m_separations[i] = (clipPointX - planePointX) * this.m_normal.x + (clipPointY - planePointY) * this.m_normal.y - cc.radius;\n        this.m_points[i].Set(clipPointX, clipPointY);\n      }\n\n      this.m_normal.x *= -1;\n      this.m_normal.y *= -1;\n      break;\n  }\n};\n\nb2PositionSolverManifold.prototype.m_normal = null;\nb2PositionSolverManifold.prototype.m_points = null;\nb2PositionSolverManifold.prototype.m_separations = null;\n\nvar b2OBB = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2OBB.prototype.__constructor = function () {};\n\nb2OBB.prototype.__varz = function () {\n  this.R = new b2Mat22();\n  this.center = new b2Vec2();\n  this.extents = new b2Vec2();\n};\n\nb2OBB.prototype.R = new b2Mat22();\nb2OBB.prototype.center = new b2Vec2();\nb2OBB.prototype.extents = new b2Vec2();\n\nvar b2Pair = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Pair.prototype.__constructor = function () {};\n\nb2Pair.prototype.__varz = function () {};\n\nb2Pair.b2_nullProxy = b2Settings.USHRT_MAX;\nb2Pair.e_pairBuffered = 1;\nb2Pair.e_pairRemoved = 2;\nb2Pair.e_pairFinal = 4;\n\nb2Pair.prototype.SetBuffered = function () {\n  this.status |= b2Pair.e_pairBuffered;\n};\n\nb2Pair.prototype.ClearBuffered = function () {\n  this.status &= ~b2Pair.e_pairBuffered;\n};\n\nb2Pair.prototype.IsBuffered = function () {\n  return (this.status & b2Pair.e_pairBuffered) == b2Pair.e_pairBuffered;\n};\n\nb2Pair.prototype.SetRemoved = function () {\n  this.status |= b2Pair.e_pairRemoved;\n};\n\nb2Pair.prototype.ClearRemoved = function () {\n  this.status &= ~b2Pair.e_pairRemoved;\n};\n\nb2Pair.prototype.IsRemoved = function () {\n  return (this.status & b2Pair.e_pairRemoved) == b2Pair.e_pairRemoved;\n};\n\nb2Pair.prototype.SetFinal = function () {\n  this.status |= b2Pair.e_pairFinal;\n};\n\nb2Pair.prototype.IsFinal = function () {\n  return (this.status & b2Pair.e_pairFinal) == b2Pair.e_pairFinal;\n};\n\nb2Pair.prototype.userData = null;\nb2Pair.prototype.proxy1 = null;\nb2Pair.prototype.proxy2 = null;\nb2Pair.prototype.next = null;\nb2Pair.prototype.status = 0;\n\nvar b2FixtureDef = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2FixtureDef.prototype.__constructor = function () {\n  this.shape = null;\n  this.userData = null;\n  this.friction = 0.2;\n  this.restitution = 0;\n  this.density = 0;\n  this.filter.categoryBits = 1;\n  this.filter.maskBits = 65535;\n  this.filter.groupIndex = 0;\n  this.isSensor = false;\n};\n\nb2FixtureDef.prototype.__varz = function () {\n  this.filter = new b2FilterData();\n};\n\nb2FixtureDef.prototype.shape = null;\nb2FixtureDef.prototype.userData = null;\nb2FixtureDef.prototype.friction = null;\nb2FixtureDef.prototype.restitution = null;\nb2FixtureDef.prototype.density = null;\nb2FixtureDef.prototype.isSensor = null;\nb2FixtureDef.prototype.filter = new b2FilterData();\n\nvar b2ContactID = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2ContactID.prototype.__constructor = function () {\n  this.features._m_id = this;\n};\n\nb2ContactID.prototype.__varz = function () {\n  this.features = new Features();\n};\n\nb2ContactID.prototype.Set = function (id) {\n  key = id._key;\n};\n\nb2ContactID.prototype.Copy = function () {\n  var id = new b2ContactID();\n  id.key = key;\n  return id;\n};\n\nb2ContactID.prototype.__defineSetter__(\"key\", function () {\n  return this._key;\n});\n\nb2ContactID.prototype.__defineSetter__(\"key\", function (value) {\n  this._key = value;\n  this.features._referenceEdge = this._key & 255;\n  this.features._incidentEdge = (this._key & 65280) >> 8 & 255;\n  this.features._incidentVertex = (this._key & 16711680) >> 16 & 255;\n  this.features._flip = (this._key & 4278190080) >> 24 & 255;\n});\n\nb2ContactID.prototype._key = 0;\nb2ContactID.prototype.features = new Features();\n\nvar b2Transform = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Transform.prototype.__constructor = function (pos, r) {\n  if (pos) {\n    this.position.SetV(pos);\n    this.R.SetM(r);\n  }\n};\n\nb2Transform.prototype.__varz = function () {\n  this.position = new b2Vec2();\n  this.R = new b2Mat22();\n};\n\nb2Transform.prototype.Initialize = function (pos, r) {\n  this.position.SetV(pos);\n  this.R.SetM(r);\n};\n\nb2Transform.prototype.SetIdentity = function () {\n  this.position.SetZero();\n  this.R.SetIdentity();\n};\n\nb2Transform.prototype.Set = function (x) {\n  this.position.SetV(x.position);\n  this.R.SetM(x.R);\n};\n\nb2Transform.prototype.GetAngle = function () {\n  return Math.atan2(this.R.col1.y, this.R.col1.x);\n};\n\nb2Transform.prototype.position = new b2Vec2();\nb2Transform.prototype.R = new b2Mat22();\n\nvar b2EdgeShape = function () {\n  b2Shape.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2EdgeShape.prototype, b2Shape.prototype);\nb2EdgeShape.prototype._super = b2Shape.prototype;\n\nb2EdgeShape.prototype.__constructor = function (v1, v2) {\n  this._super.__constructor.apply(this, []);\n\n  this.m_type = b2Shape.e_edgeShape;\n  this.m_prevEdge = null;\n  this.m_nextEdge = null;\n  this.m_v1 = v1;\n  this.m_v2 = v2;\n  this.m_direction.Set(this.m_v2.x - this.m_v1.x, this.m_v2.y - this.m_v1.y);\n  this.m_length = this.m_direction.Normalize();\n  this.m_normal.Set(this.m_direction.y, -this.m_direction.x);\n  this.m_coreV1.Set(-b2Settings.b2_toiSlop * (this.m_normal.x - this.m_direction.x) + this.m_v1.x, -b2Settings.b2_toiSlop * (this.m_normal.y - this.m_direction.y) + this.m_v1.y);\n  this.m_coreV2.Set(-b2Settings.b2_toiSlop * (this.m_normal.x + this.m_direction.x) + this.m_v2.x, -b2Settings.b2_toiSlop * (this.m_normal.y + this.m_direction.y) + this.m_v2.y);\n  this.m_cornerDir1 = this.m_normal;\n  this.m_cornerDir2.Set(-this.m_normal.x, -this.m_normal.y);\n};\n\nb2EdgeShape.prototype.__varz = function () {\n  this.s_supportVec = new b2Vec2();\n  this.m_v1 = new b2Vec2();\n  this.m_v2 = new b2Vec2();\n  this.m_coreV1 = new b2Vec2();\n  this.m_coreV2 = new b2Vec2();\n  this.m_normal = new b2Vec2();\n  this.m_direction = new b2Vec2();\n  this.m_cornerDir1 = new b2Vec2();\n  this.m_cornerDir2 = new b2Vec2();\n};\n\nb2EdgeShape.prototype.SetPrevEdge = function (edge, core, cornerDir, convex) {\n  this.m_prevEdge = edge;\n  this.m_coreV1 = core;\n  this.m_cornerDir1 = cornerDir;\n  this.m_cornerConvex1 = convex;\n};\n\nb2EdgeShape.prototype.SetNextEdge = function (edge, core, cornerDir, convex) {\n  this.m_nextEdge = edge;\n  this.m_coreV2 = core;\n  this.m_cornerDir2 = cornerDir;\n  this.m_cornerConvex2 = convex;\n};\n\nb2EdgeShape.prototype.TestPoint = function (transform, p) {\n  return false;\n};\n\nb2EdgeShape.prototype.RayCast = function (output, input, transform) {\n  var tMat;\n  var rX = input.p2.x - input.p1.x;\n  var rY = input.p2.y - input.p1.y;\n  tMat = transform.R;\n  var v1X = transform.position.x + (tMat.col1.x * this.m_v1.x + tMat.col2.x * this.m_v1.y);\n  var v1Y = transform.position.y + (tMat.col1.y * this.m_v1.x + tMat.col2.y * this.m_v1.y);\n  var nX = transform.position.y + (tMat.col1.y * this.m_v2.x + tMat.col2.y * this.m_v2.y) - v1Y;\n  var nY = -(transform.position.x + (tMat.col1.x * this.m_v2.x + tMat.col2.x * this.m_v2.y) - v1X);\n  var k_slop = 100 * Number.MIN_VALUE;\n  var denom = -(rX * nX + rY * nY);\n\n  if (denom > k_slop) {\n    var bX = input.p1.x - v1X;\n    var bY = input.p1.y - v1Y;\n    var a = bX * nX + bY * nY;\n\n    if (0 <= a && a <= input.maxFraction * denom) {\n      var mu2 = -rX * bY + rY * bX;\n\n      if (-k_slop * denom <= mu2 && mu2 <= denom * (1 + k_slop)) {\n        a /= denom;\n        output.fraction = a;\n        var nLen = Math.sqrt(nX * nX + nY * nY);\n        output.normal.x = nX / nLen;\n        output.normal.y = nY / nLen;\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nb2EdgeShape.prototype.ComputeAABB = function (aabb, transform) {\n  var tMat = transform.R;\n  var v1X = transform.position.x + (tMat.col1.x * this.m_v1.x + tMat.col2.x * this.m_v1.y);\n  var v1Y = transform.position.y + (tMat.col1.y * this.m_v1.x + tMat.col2.y * this.m_v1.y);\n  var v2X = transform.position.x + (tMat.col1.x * this.m_v2.x + tMat.col2.x * this.m_v2.y);\n  var v2Y = transform.position.y + (tMat.col1.y * this.m_v2.x + tMat.col2.y * this.m_v2.y);\n\n  if (v1X < v2X) {\n    aabb.lowerBound.x = v1X;\n    aabb.upperBound.x = v2X;\n  } else {\n    aabb.lowerBound.x = v2X;\n    aabb.upperBound.x = v1X;\n  }\n\n  if (v1Y < v2Y) {\n    aabb.lowerBound.y = v1Y;\n    aabb.upperBound.y = v2Y;\n  } else {\n    aabb.lowerBound.y = v2Y;\n    aabb.upperBound.y = v1Y;\n  }\n};\n\nb2EdgeShape.prototype.ComputeMass = function (massData, density) {\n  massData.mass = 0;\n  massData.center.SetV(this.m_v1);\n  massData.I = 0;\n};\n\nb2EdgeShape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {\n  var v0 = new b2Vec2(normal.x * offset, normal.y * offset);\n  var v1 = b2Math.MulX(xf, this.m_v1);\n  var v2 = b2Math.MulX(xf, this.m_v2);\n  var d1 = b2Math.Dot(normal, v1) - offset;\n  var d2 = b2Math.Dot(normal, v2) - offset;\n\n  if (d1 > 0) {\n    if (d2 > 0) {\n      return 0;\n    } else {\n      v1.x = -d2 / (d1 - d2) * v1.x + d1 / (d1 - d2) * v2.x;\n      v1.y = -d2 / (d1 - d2) * v1.y + d1 / (d1 - d2) * v2.y;\n    }\n  } else {\n    if (d2 > 0) {\n      v2.x = -d2 / (d1 - d2) * v1.x + d1 / (d1 - d2) * v2.x;\n      v2.y = -d2 / (d1 - d2) * v1.y + d1 / (d1 - d2) * v2.y;\n    } else {}\n  }\n\n  c.x = (v0.x + v1.x + v2.x) / 3;\n  c.y = (v0.y + v1.y + v2.y) / 3;\n  return 0.5 * ((v1.x - v0.x) * (v2.y - v0.y) - (v1.y - v0.y) * (v2.x - v0.x));\n};\n\nb2EdgeShape.prototype.GetLength = function () {\n  return this.m_length;\n};\n\nb2EdgeShape.prototype.GetVertex1 = function () {\n  return this.m_v1;\n};\n\nb2EdgeShape.prototype.GetVertex2 = function () {\n  return this.m_v2;\n};\n\nb2EdgeShape.prototype.GetCoreVertex1 = function () {\n  return this.m_coreV1;\n};\n\nb2EdgeShape.prototype.GetCoreVertex2 = function () {\n  return this.m_coreV2;\n};\n\nb2EdgeShape.prototype.GetNormalVector = function () {\n  return this.m_normal;\n};\n\nb2EdgeShape.prototype.GetDirectionVector = function () {\n  return this.m_direction;\n};\n\nb2EdgeShape.prototype.GetCorner1Vector = function () {\n  return this.m_cornerDir1;\n};\n\nb2EdgeShape.prototype.GetCorner2Vector = function () {\n  return this.m_cornerDir2;\n};\n\nb2EdgeShape.prototype.Corner1IsConvex = function () {\n  return this.m_cornerConvex1;\n};\n\nb2EdgeShape.prototype.Corner2IsConvex = function () {\n  return this.m_cornerConvex2;\n};\n\nb2EdgeShape.prototype.GetFirstVertex = function (xf) {\n  var tMat = xf.R;\n  return new b2Vec2(xf.position.x + (tMat.col1.x * this.m_coreV1.x + tMat.col2.x * this.m_coreV1.y), xf.position.y + (tMat.col1.y * this.m_coreV1.x + tMat.col2.y * this.m_coreV1.y));\n};\n\nb2EdgeShape.prototype.GetNextEdge = function () {\n  return this.m_nextEdge;\n};\n\nb2EdgeShape.prototype.GetPrevEdge = function () {\n  return this.m_prevEdge;\n};\n\nb2EdgeShape.prototype.Support = function (xf, dX, dY) {\n  var tMat = xf.R;\n  var v1X = xf.position.x + (tMat.col1.x * this.m_coreV1.x + tMat.col2.x * this.m_coreV1.y);\n  var v1Y = xf.position.y + (tMat.col1.y * this.m_coreV1.x + tMat.col2.y * this.m_coreV1.y);\n  var v2X = xf.position.x + (tMat.col1.x * this.m_coreV2.x + tMat.col2.x * this.m_coreV2.y);\n  var v2Y = xf.position.y + (tMat.col1.y * this.m_coreV2.x + tMat.col2.y * this.m_coreV2.y);\n\n  if (v1X * dX + v1Y * dY > v2X * dX + v2Y * dY) {\n    this.s_supportVec.x = v1X;\n    this.s_supportVec.y = v1Y;\n  } else {\n    this.s_supportVec.x = v2X;\n    this.s_supportVec.y = v2Y;\n  }\n\n  return this.s_supportVec;\n};\n\nb2EdgeShape.prototype.s_supportVec = new b2Vec2();\nb2EdgeShape.prototype.m_v1 = new b2Vec2();\nb2EdgeShape.prototype.m_v2 = new b2Vec2();\nb2EdgeShape.prototype.m_coreV1 = new b2Vec2();\nb2EdgeShape.prototype.m_coreV2 = new b2Vec2();\nb2EdgeShape.prototype.m_length = null;\nb2EdgeShape.prototype.m_normal = new b2Vec2();\nb2EdgeShape.prototype.m_direction = new b2Vec2();\nb2EdgeShape.prototype.m_cornerDir1 = new b2Vec2();\nb2EdgeShape.prototype.m_cornerDir2 = new b2Vec2();\nb2EdgeShape.prototype.m_cornerConvex1 = null;\nb2EdgeShape.prototype.m_cornerConvex2 = null;\nb2EdgeShape.prototype.m_nextEdge = null;\nb2EdgeShape.prototype.m_prevEdge = null;\n\nvar b2BuoyancyController = function () {\n  b2Controller.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2BuoyancyController.prototype, b2Controller.prototype);\nb2BuoyancyController.prototype._super = b2Controller.prototype;\n\nb2BuoyancyController.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n};\n\nb2BuoyancyController.prototype.__varz = function () {\n  this.normal = new b2Vec2(0, -1);\n  this.velocity = new b2Vec2(0, 0);\n};\n\nb2BuoyancyController.prototype.Step = function (step) {\n  if (!m_bodyList) {\n    return;\n  }\n\n  if (this.useWorldGravity) {\n    this.gravity = this.GetWorld().GetGravity().Copy();\n  }\n\n  for (var i = m_bodyList; i; i = i.nextBody) {\n    var body = i.body;\n\n    if (body.IsAwake() == false) {\n      continue;\n    }\n\n    var areac = new b2Vec2();\n    var massc = new b2Vec2();\n    var area = 0;\n    var mass = 0;\n\n    for (var fixture = body.GetFixtureList(); fixture; fixture = fixture.GetNext()) {\n      var sc = new b2Vec2();\n      var sarea = fixture.GetShape().ComputeSubmergedArea(this.normal, this.offset, body.GetTransform(), sc);\n      area += sarea;\n      areac.x += sarea * sc.x;\n      areac.y += sarea * sc.y;\n      var shapeDensity;\n\n      if (this.useDensity) {\n        shapeDensity = 1;\n      } else {\n        shapeDensity = 1;\n      }\n\n      mass += sarea * shapeDensity;\n      massc.x += sarea * sc.x * shapeDensity;\n      massc.y += sarea * sc.y * shapeDensity;\n    }\n\n    areac.x /= area;\n    areac.y /= area;\n    massc.x /= mass;\n    massc.y /= mass;\n\n    if (area < Number.MIN_VALUE) {\n      continue;\n    }\n\n    var buoyancyForce = this.gravity.GetNegative();\n    buoyancyForce.Multiply(this.density * area);\n    body.ApplyForce(buoyancyForce, massc);\n    var dragForce = body.GetLinearVelocityFromWorldPoint(areac);\n    dragForce.Subtract(this.velocity);\n    dragForce.Multiply(-this.linearDrag * area);\n    body.ApplyForce(dragForce, areac);\n    body.ApplyTorque(-body.GetInertia() / body.GetMass() * area * body.GetAngularVelocity() * this.angularDrag);\n  }\n};\n\nb2BuoyancyController.prototype.Draw = function (debugDraw) {\n  var r = 1E3;\n  var p1 = new b2Vec2();\n  var p2 = new b2Vec2();\n  p1.x = this.normal.x * this.offset + this.normal.y * r;\n  p1.y = this.normal.y * this.offset - this.normal.x * r;\n  p2.x = this.normal.x * this.offset - this.normal.y * r;\n  p2.y = this.normal.y * this.offset + this.normal.x * r;\n  var color = new b2Color(0, 0, 1);\n  debugDraw.DrawSegment(p1, p2, color);\n};\n\nb2BuoyancyController.prototype.normal = new b2Vec2(0, -1);\nb2BuoyancyController.prototype.offset = 0;\nb2BuoyancyController.prototype.density = 0;\nb2BuoyancyController.prototype.velocity = new b2Vec2(0, 0);\nb2BuoyancyController.prototype.linearDrag = 2;\nb2BuoyancyController.prototype.angularDrag = 1;\nb2BuoyancyController.prototype.useDensity = false;\nb2BuoyancyController.prototype.useWorldGravity = true;\nb2BuoyancyController.prototype.gravity = null;\n\nvar b2Body = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Body.prototype.__constructor = function (bd, world) {\n  this.m_flags = 0;\n\n  if (bd.bullet) {\n    this.m_flags |= b2Body.e_bulletFlag;\n  }\n\n  if (bd.fixedRotation) {\n    this.m_flags |= b2Body.e_fixedRotationFlag;\n  }\n\n  if (bd.allowSleep) {\n    this.m_flags |= b2Body.e_allowSleepFlag;\n  }\n\n  if (bd.awake) {\n    this.m_flags |= b2Body.e_awakeFlag;\n  }\n\n  if (bd.active) {\n    this.m_flags |= b2Body.e_activeFlag;\n  }\n\n  this.m_world = world;\n  this.m_xf.position.SetV(bd.position);\n  this.m_xf.R.Set(bd.angle);\n  this.m_sweep.localCenter.SetZero();\n  this.m_sweep.t0 = 1;\n  this.m_sweep.a0 = this.m_sweep.a = bd.angle;\n  var tMat = this.m_xf.R;\n  var tVec = this.m_sweep.localCenter;\n  this.m_sweep.c.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n  this.m_sweep.c.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n  this.m_sweep.c.x += this.m_xf.position.x;\n  this.m_sweep.c.y += this.m_xf.position.y;\n  this.m_sweep.c0.SetV(this.m_sweep.c);\n  this.m_jointList = null;\n  this.m_controllerList = null;\n  this.m_contactList = null;\n  this.m_controllerCount = 0;\n  this.m_prev = null;\n  this.m_next = null;\n  this.m_linearVelocity.SetV(bd.linearVelocity);\n  this.m_angularVelocity = bd.angularVelocity;\n  this.m_linearDamping = bd.linearDamping;\n  this.m_angularDamping = bd.angularDamping;\n  this.m_force.Set(0, 0);\n  this.m_torque = 0;\n  this.m_sleepTime = 0;\n  this.m_type = bd.type;\n\n  if (this.m_type == b2Body.b2_dynamicBody) {\n    this.m_mass = 1;\n    this.m_invMass = 1;\n  } else {\n    this.m_mass = 0;\n    this.m_invMass = 0;\n  }\n\n  this.m_I = 0;\n  this.m_invI = 0;\n  this.m_inertiaScale = bd.inertiaScale;\n  this.m_userData = bd.userData;\n  this.m_fixtureList = null;\n  this.m_fixtureCount = 0;\n};\n\nb2Body.prototype.__varz = function () {\n  this.m_xf = new b2Transform();\n  this.m_sweep = new b2Sweep();\n  this.m_linearVelocity = new b2Vec2();\n  this.m_force = new b2Vec2();\n};\n\nb2Body.b2_staticBody = 0;\nb2Body.b2_kinematicBody = 1;\nb2Body.b2_dynamicBody = 2;\nb2Body.s_xf1 = new b2Transform();\nb2Body.e_islandFlag = 1;\nb2Body.e_awakeFlag = 2;\nb2Body.e_allowSleepFlag = 4;\nb2Body.e_bulletFlag = 8;\nb2Body.e_fixedRotationFlag = 16;\nb2Body.e_activeFlag = 32;\n\nb2Body.prototype.connectEdges = function (s1, s2, angle1) {\n  var angle2 = Math.atan2(s2.GetDirectionVector().y, s2.GetDirectionVector().x);\n  var coreOffset = Math.tan((angle2 - angle1) * 0.5);\n  var core = b2Math.MulFV(coreOffset, s2.GetDirectionVector());\n  core = b2Math.SubtractVV(core, s2.GetNormalVector());\n  core = b2Math.MulFV(b2Settings.b2_toiSlop, core);\n  core = b2Math.AddVV(core, s2.GetVertex1());\n  var cornerDir = b2Math.AddVV(s1.GetDirectionVector(), s2.GetDirectionVector());\n  cornerDir.Normalize();\n  var convex = b2Math.Dot(s1.GetDirectionVector(), s2.GetNormalVector()) > 0;\n  s1.SetNextEdge(s2, core, cornerDir, convex);\n  s2.SetPrevEdge(s1, core, cornerDir, convex);\n  return angle2;\n};\n\nb2Body.prototype.SynchronizeFixtures = function () {\n  var xf1 = b2Body.s_xf1;\n  xf1.R.Set(this.m_sweep.a0);\n  var tMat = xf1.R;\n  var tVec = this.m_sweep.localCenter;\n  xf1.position.x = this.m_sweep.c0.x - (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n  xf1.position.y = this.m_sweep.c0.y - (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n  var f;\n  var broadPhase = this.m_world.m_contactManager.m_broadPhase;\n\n  for (f = this.m_fixtureList; f; f = f.m_next) {\n    f.Synchronize(broadPhase, xf1, this.m_xf);\n  }\n};\n\nb2Body.prototype.SynchronizeTransform = function () {\n  this.m_xf.R.Set(this.m_sweep.a);\n  var tMat = this.m_xf.R;\n  var tVec = this.m_sweep.localCenter;\n  this.m_xf.position.x = this.m_sweep.c.x - (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n  this.m_xf.position.y = this.m_sweep.c.y - (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n};\n\nb2Body.prototype.ShouldCollide = function (other) {\n  if (this.m_type != b2Body.b2_dynamicBody && other.m_type != b2Body.b2_dynamicBody) {\n    return false;\n  }\n\n  for (var jn = this.m_jointList; jn; jn = jn.next) {\n    if (jn.other == other) {\n      if (jn.joint.m_collideConnected == false) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nb2Body.prototype.Advance = function (t) {\n  this.m_sweep.Advance(t);\n  this.m_sweep.c.SetV(this.m_sweep.c0);\n  this.m_sweep.a = this.m_sweep.a0;\n  this.SynchronizeTransform();\n};\n\nb2Body.prototype.CreateFixture = function (def) {\n  if (this.m_world.IsLocked() == true) {\n    return null;\n  }\n\n  var fixture = new b2Fixture();\n  fixture.Create(this, this.m_xf, def);\n\n  if (this.m_flags & b2Body.e_activeFlag) {\n    var broadPhase = this.m_world.m_contactManager.m_broadPhase;\n    fixture.CreateProxy(broadPhase, this.m_xf);\n  }\n\n  fixture.m_next = this.m_fixtureList;\n  this.m_fixtureList = fixture;\n  ++this.m_fixtureCount;\n  fixture.m_body = this;\n\n  if (fixture.m_density > 0) {\n    this.ResetMassData();\n  }\n\n  this.m_world.m_flags |= b2World.e_newFixture;\n  return fixture;\n};\n\nb2Body.prototype.CreateFixture2 = function (shape, density) {\n  var def = new b2FixtureDef();\n  def.shape = shape;\n  def.density = density;\n  return this.CreateFixture(def);\n};\n\nb2Body.prototype.DestroyFixture = function (fixture) {\n  if (this.m_world.IsLocked() == true) {\n    return;\n  }\n\n  var node = this.m_fixtureList;\n  var ppF = null;\n  var found = false;\n\n  while (node != null) {\n    if (node == fixture) {\n      if (ppF) {\n        ppF.m_next = fixture.m_next;\n      } else {\n        this.m_fixtureList = fixture.m_next;\n      }\n\n      found = true;\n      break;\n    }\n\n    ppF = node;\n    node = node.m_next;\n  }\n\n  var edge = this.m_contactList;\n\n  while (edge) {\n    var c = edge.contact;\n    edge = edge.next;\n    var fixtureA = c.GetFixtureA();\n    var fixtureB = c.GetFixtureB();\n\n    if (fixture == fixtureA || fixture == fixtureB) {\n      this.m_world.m_contactManager.Destroy(c);\n    }\n  }\n\n  if (this.m_flags & b2Body.e_activeFlag) {\n    var broadPhase = this.m_world.m_contactManager.m_broadPhase;\n    fixture.DestroyProxy(broadPhase);\n  } else {}\n\n  fixture.Destroy();\n  fixture.m_body = null;\n  fixture.m_next = null;\n  --this.m_fixtureCount;\n  this.ResetMassData();\n};\n\nb2Body.prototype.SetPositionAndAngle = function (position, angle) {\n  var f;\n\n  if (this.m_world.IsLocked() == true) {\n    return;\n  }\n\n  this.m_xf.R.Set(angle);\n  this.m_xf.position.SetV(position);\n  var tMat = this.m_xf.R;\n  var tVec = this.m_sweep.localCenter;\n  this.m_sweep.c.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n  this.m_sweep.c.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n  this.m_sweep.c.x += this.m_xf.position.x;\n  this.m_sweep.c.y += this.m_xf.position.y;\n  this.m_sweep.c0.SetV(this.m_sweep.c);\n  this.m_sweep.a0 = this.m_sweep.a = angle;\n  var broadPhase = this.m_world.m_contactManager.m_broadPhase;\n\n  for (f = this.m_fixtureList; f; f = f.m_next) {\n    f.Synchronize(broadPhase, this.m_xf, this.m_xf);\n  }\n\n  this.m_world.m_contactManager.FindNewContacts();\n};\n\nb2Body.prototype.SetTransform = function (xf) {\n  this.SetPositionAndAngle(xf.position, xf.GetAngle());\n};\n\nb2Body.prototype.GetTransform = function () {\n  return this.m_xf;\n};\n/**\n * @returns {b2Vec2}\n */\n\n\nb2Body.prototype.GetPosition = function () {\n  return this.m_xf.position;\n};\n\nb2Body.prototype.SetPosition = function (position) {\n  this.SetPositionAndAngle(position, this.GetAngle());\n};\n\nb2Body.prototype.GetAngle = function () {\n  return this.m_sweep.a;\n};\n\nb2Body.prototype.SetAngle = function (angle) {\n  this.SetPositionAndAngle(this.GetPosition(), angle);\n};\n\nb2Body.prototype.GetWorldCenter = function () {\n  return this.m_sweep.c;\n};\n\nb2Body.prototype.GetLocalCenter = function () {\n  return this.m_sweep.localCenter;\n};\n\nb2Body.prototype.SetLinearVelocity = function (v) {\n  if (this.m_type == b2Body.b2_staticBody) {\n    return;\n  }\n\n  this.m_linearVelocity.SetV(v);\n};\n\nb2Body.prototype.GetLinearVelocity = function () {\n  return this.m_linearVelocity;\n};\n\nb2Body.prototype.SetAngularVelocity = function (omega) {\n  if (this.m_type == b2Body.b2_staticBody) {\n    return;\n  }\n\n  this.m_angularVelocity = omega;\n};\n\nb2Body.prototype.GetAngularVelocity = function () {\n  return this.m_angularVelocity;\n};\n\nb2Body.prototype.GetDefinition = function () {\n  var bd = new b2BodyDef();\n  bd.type = this.GetType();\n  bd.allowSleep = (this.m_flags & b2Body.e_allowSleepFlag) == b2Body.e_allowSleepFlag;\n  bd.angle = this.GetAngle();\n  bd.angularDamping = this.m_angularDamping;\n  bd.angularVelocity = this.m_angularVelocity;\n  bd.fixedRotation = (this.m_flags & b2Body.e_fixedRotationFlag) == b2Body.e_fixedRotationFlag;\n  bd.bullet = (this.m_flags & b2Body.e_bulletFlag) == b2Body.e_bulletFlag;\n  bd.awake = (this.m_flags & b2Body.e_awakeFlag) == b2Body.e_awakeFlag;\n  bd.linearDamping = this.m_linearDamping;\n  bd.linearVelocity.SetV(this.GetLinearVelocity());\n  bd.position = this.GetPosition();\n  bd.userData = this.GetUserData();\n  return bd;\n};\n\nb2Body.prototype.ApplyForce = function (force, point) {\n  if (this.m_type != b2Body.b2_dynamicBody) {\n    return;\n  }\n\n  if (this.IsAwake() == false) {\n    this.SetAwake(true);\n  }\n\n  this.m_force.x += force.x;\n  this.m_force.y += force.y;\n  this.m_torque += (point.x - this.m_sweep.c.x) * force.y - (point.y - this.m_sweep.c.y) * force.x;\n};\n\nb2Body.prototype.ApplyTorque = function (torque) {\n  if (this.m_type != b2Body.b2_dynamicBody) {\n    return;\n  }\n\n  if (this.IsAwake() == false) {\n    this.SetAwake(true);\n  }\n\n  this.m_torque += torque;\n};\n\nb2Body.prototype.ApplyImpulse = function (impulse, point) {\n  if (this.m_type != b2Body.b2_dynamicBody) {\n    return;\n  }\n\n  if (this.IsAwake() == false) {\n    this.SetAwake(true);\n  }\n\n  this.m_linearVelocity.x += this.m_invMass * impulse.x;\n  this.m_linearVelocity.y += this.m_invMass * impulse.y;\n  this.m_angularVelocity += this.m_invI * ((point.x - this.m_sweep.c.x) * impulse.y - (point.y - this.m_sweep.c.y) * impulse.x);\n};\n\nb2Body.prototype.Split = function (callback) {\n  var linearVelocity = this.GetLinearVelocity().Copy();\n  var angularVelocity = this.GetAngularVelocity();\n  var center = this.GetWorldCenter();\n  var body1 = this;\n  var body2 = this.m_world.CreateBody(this.GetDefinition());\n  var prev;\n\n  for (var f = body1.m_fixtureList; f;) {\n    if (callback(f)) {\n      var next = f.m_next;\n\n      if (prev) {\n        prev.m_next = next;\n      } else {\n        body1.m_fixtureList = next;\n      }\n\n      body1.m_fixtureCount--;\n      f.m_next = body2.m_fixtureList;\n      body2.m_fixtureList = f;\n      body2.m_fixtureCount++;\n      f.m_body = body2;\n      f = next;\n    } else {\n      prev = f;\n      f = f.m_next;\n    }\n  }\n\n  body1.ResetMassData();\n  body2.ResetMassData();\n  var center1 = body1.GetWorldCenter();\n  var center2 = body2.GetWorldCenter();\n  var velocity1 = b2Math.AddVV(linearVelocity, b2Math.CrossFV(angularVelocity, b2Math.SubtractVV(center1, center)));\n  var velocity2 = b2Math.AddVV(linearVelocity, b2Math.CrossFV(angularVelocity, b2Math.SubtractVV(center2, center)));\n  body1.SetLinearVelocity(velocity1);\n  body2.SetLinearVelocity(velocity2);\n  body1.SetAngularVelocity(angularVelocity);\n  body2.SetAngularVelocity(angularVelocity);\n  body1.SynchronizeFixtures();\n  body2.SynchronizeFixtures();\n  return body2;\n};\n\nb2Body.prototype.Merge = function (other) {\n  var f;\n\n  for (f = other.m_fixtureList; f;) {\n    var next = f.m_next;\n    other.m_fixtureCount--;\n    f.m_next = this.m_fixtureList;\n    this.m_fixtureList = f;\n    this.m_fixtureCount++;\n    f.m_body = body2;\n    f = next;\n  }\n\n  body1.m_fixtureCount = 0;\n  var body1 = this;\n  var body2 = other;\n  var center1 = body1.GetWorldCenter();\n  var center2 = body2.GetWorldCenter();\n  var velocity1 = body1.GetLinearVelocity().Copy();\n  var velocity2 = body2.GetLinearVelocity().Copy();\n  var angular1 = body1.GetAngularVelocity();\n  var angular = body2.GetAngularVelocity();\n  body1.ResetMassData();\n  this.SynchronizeFixtures();\n};\n\nb2Body.prototype.GetMass = function () {\n  return this.m_mass;\n};\n\nb2Body.prototype.GetInertia = function () {\n  return this.m_I;\n};\n\nb2Body.prototype.GetMassData = function (data) {\n  data.mass = this.m_mass;\n  data.I = this.m_I;\n  data.center.SetV(this.m_sweep.localCenter);\n};\n\nb2Body.prototype.SetMassData = function (massData) {\n  b2Settings.b2Assert(this.m_world.IsLocked() == false);\n\n  if (this.m_world.IsLocked() == true) {\n    return;\n  }\n\n  if (this.m_type != b2Body.b2_dynamicBody) {\n    return;\n  }\n\n  this.m_invMass = 0;\n  this.m_I = 0;\n  this.m_invI = 0;\n  this.m_mass = massData.mass;\n\n  if (this.m_mass <= 0) {\n    this.m_mass = 1;\n  }\n\n  this.m_invMass = 1 / this.m_mass;\n\n  if (massData.I > 0 && (this.m_flags & b2Body.e_fixedRotationFlag) == 0) {\n    this.m_I = massData.I - this.m_mass * (massData.center.x * massData.center.x + massData.center.y * massData.center.y);\n    this.m_invI = 1 / this.m_I;\n  }\n\n  var oldCenter = this.m_sweep.c.Copy();\n  this.m_sweep.localCenter.SetV(massData.center);\n  this.m_sweep.c0.SetV(b2Math.MulX(this.m_xf, this.m_sweep.localCenter));\n  this.m_sweep.c.SetV(this.m_sweep.c0);\n  this.m_linearVelocity.x += this.m_angularVelocity * -(this.m_sweep.c.y - oldCenter.y);\n  this.m_linearVelocity.y += this.m_angularVelocity * +(this.m_sweep.c.x - oldCenter.x);\n};\n\nb2Body.prototype.ResetMassData = function () {\n  this.m_mass = 0;\n  this.m_invMass = 0;\n  this.m_I = 0;\n  this.m_invI = 0;\n  this.m_sweep.localCenter.SetZero();\n\n  if (this.m_type == b2Body.b2_staticBody || this.m_type == b2Body.b2_kinematicBody) {\n    return;\n  }\n\n  var center = b2Vec2.Make(0, 0);\n\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    if (f.m_density == 0) {\n      continue;\n    }\n\n    var massData = f.GetMassData();\n    this.m_mass += massData.mass;\n    center.x += massData.center.x * massData.mass;\n    center.y += massData.center.y * massData.mass;\n    this.m_I += massData.I;\n  }\n\n  if (this.m_mass > 0) {\n    this.m_invMass = 1 / this.m_mass;\n    center.x *= this.m_invMass;\n    center.y *= this.m_invMass;\n  } else {\n    this.m_mass = 1;\n    this.m_invMass = 1;\n  }\n\n  if (this.m_I > 0 && (this.m_flags & b2Body.e_fixedRotationFlag) == 0) {\n    this.m_I -= this.m_mass * (center.x * center.x + center.y * center.y);\n    this.m_I *= this.m_inertiaScale;\n    b2Settings.b2Assert(this.m_I > 0);\n    this.m_invI = 1 / this.m_I;\n  } else {\n    this.m_I = 0;\n    this.m_invI = 0;\n  }\n\n  var oldCenter = this.m_sweep.c.Copy();\n  this.m_sweep.localCenter.SetV(center);\n  this.m_sweep.c0.SetV(b2Math.MulX(this.m_xf, this.m_sweep.localCenter));\n  this.m_sweep.c.SetV(this.m_sweep.c0);\n  this.m_linearVelocity.x += this.m_angularVelocity * -(this.m_sweep.c.y - oldCenter.y);\n  this.m_linearVelocity.y += this.m_angularVelocity * +(this.m_sweep.c.x - oldCenter.x);\n};\n\nb2Body.prototype.GetWorldPoint = function (localPoint) {\n  var A = this.m_xf.R;\n  var u = new b2Vec2(A.col1.x * localPoint.x + A.col2.x * localPoint.y, A.col1.y * localPoint.x + A.col2.y * localPoint.y);\n  u.x += this.m_xf.position.x;\n  u.y += this.m_xf.position.y;\n  return u;\n};\n\nb2Body.prototype.GetWorldVector = function (localVector) {\n  return b2Math.MulMV(this.m_xf.R, localVector);\n};\n\nb2Body.prototype.GetLocalPoint = function (worldPoint) {\n  return b2Math.MulXT(this.m_xf, worldPoint);\n};\n\nb2Body.prototype.GetLocalVector = function (worldVector) {\n  return b2Math.MulTMV(this.m_xf.R, worldVector);\n};\n\nb2Body.prototype.GetLinearVelocityFromWorldPoint = function (worldPoint) {\n  return new b2Vec2(this.m_linearVelocity.x - this.m_angularVelocity * (worldPoint.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (worldPoint.x - this.m_sweep.c.x));\n};\n\nb2Body.prototype.GetLinearVelocityFromLocalPoint = function (localPoint) {\n  var A = this.m_xf.R;\n  var worldPoint = new b2Vec2(A.col1.x * localPoint.x + A.col2.x * localPoint.y, A.col1.y * localPoint.x + A.col2.y * localPoint.y);\n  worldPoint.x += this.m_xf.position.x;\n  worldPoint.y += this.m_xf.position.y;\n  return new b2Vec2(this.m_linearVelocity.x - this.m_angularVelocity * (worldPoint.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (worldPoint.x - this.m_sweep.c.x));\n};\n\nb2Body.prototype.GetLinearDamping = function () {\n  return this.m_linearDamping;\n};\n\nb2Body.prototype.SetLinearDamping = function (linearDamping) {\n  this.m_linearDamping = linearDamping;\n};\n\nb2Body.prototype.GetAngularDamping = function () {\n  return this.m_angularDamping;\n};\n\nb2Body.prototype.SetAngularDamping = function (angularDamping) {\n  this.m_angularDamping = angularDamping;\n};\n\nb2Body.prototype.SetType = function (type) {\n  if (this.m_type == type) {\n    return;\n  }\n\n  this.m_type = type;\n  this.ResetMassData();\n\n  if (this.m_type == b2Body.b2_staticBody) {\n    this.m_linearVelocity.SetZero();\n    this.m_angularVelocity = 0;\n  }\n\n  this.SetAwake(true);\n  this.m_force.SetZero();\n  this.m_torque = 0;\n\n  for (var ce = this.m_contactList; ce; ce = ce.next) {\n    ce.contact.FlagForFiltering();\n  }\n};\n\nb2Body.prototype.GetType = function () {\n  return this.m_type;\n};\n\nb2Body.prototype.SetBullet = function (flag) {\n  if (flag) {\n    this.m_flags |= b2Body.e_bulletFlag;\n  } else {\n    this.m_flags &= ~b2Body.e_bulletFlag;\n  }\n};\n\nb2Body.prototype.IsBullet = function () {\n  return (this.m_flags & b2Body.e_bulletFlag) == b2Body.e_bulletFlag;\n};\n\nb2Body.prototype.SetSleepingAllowed = function (flag) {\n  if (flag) {\n    this.m_flags |= b2Body.e_allowSleepFlag;\n  } else {\n    this.m_flags &= ~b2Body.e_allowSleepFlag;\n    this.SetAwake(true);\n  }\n};\n\nb2Body.prototype.SetAwake = function (flag) {\n  if (flag) {\n    this.m_flags |= b2Body.e_awakeFlag;\n    this.m_sleepTime = 0;\n  } else {\n    this.m_flags &= ~b2Body.e_awakeFlag;\n    this.m_sleepTime = 0;\n    this.m_linearVelocity.SetZero();\n    this.m_angularVelocity = 0;\n    this.m_force.SetZero();\n    this.m_torque = 0;\n  }\n};\n\nb2Body.prototype.IsAwake = function () {\n  return (this.m_flags & b2Body.e_awakeFlag) == b2Body.e_awakeFlag;\n};\n\nb2Body.prototype.SetFixedRotation = function (fixed) {\n  if (fixed) {\n    this.m_flags |= b2Body.e_fixedRotationFlag;\n  } else {\n    this.m_flags &= ~b2Body.e_fixedRotationFlag;\n  }\n\n  this.ResetMassData();\n};\n\nb2Body.prototype.IsFixedRotation = function () {\n  return (this.m_flags & b2Body.e_fixedRotationFlag) == b2Body.e_fixedRotationFlag;\n};\n\nb2Body.prototype.SetActive = function (flag) {\n  if (flag == this.IsActive()) {\n    return;\n  }\n\n  var broadPhase;\n  var f;\n\n  if (flag) {\n    this.m_flags |= b2Body.e_activeFlag;\n    broadPhase = this.m_world.m_contactManager.m_broadPhase;\n\n    for (f = this.m_fixtureList; f; f = f.m_next) {\n      f.CreateProxy(broadPhase, this.m_xf);\n    }\n  } else {\n    this.m_flags &= ~b2Body.e_activeFlag;\n    broadPhase = this.m_world.m_contactManager.m_broadPhase;\n\n    for (f = this.m_fixtureList; f; f = f.m_next) {\n      f.DestroyProxy(broadPhase);\n    }\n\n    var ce = this.m_contactList;\n\n    while (ce) {\n      var ce0 = ce;\n      ce = ce.next;\n      this.m_world.m_contactManager.Destroy(ce0.contact);\n    }\n\n    this.m_contactList = null;\n  }\n};\n\nb2Body.prototype.IsActive = function () {\n  return (this.m_flags & b2Body.e_activeFlag) == b2Body.e_activeFlag;\n};\n\nb2Body.prototype.IsSleepingAllowed = function () {\n  return (this.m_flags & b2Body.e_allowSleepFlag) == b2Body.e_allowSleepFlag;\n};\n\nb2Body.prototype.GetFixtureList = function () {\n  return this.m_fixtureList;\n};\n\nb2Body.prototype.GetJointList = function () {\n  return this.m_jointList;\n};\n\nb2Body.prototype.GetControllerList = function () {\n  return this.m_controllerList;\n};\n\nb2Body.prototype.GetContactList = function () {\n  return this.m_contactList;\n};\n\nb2Body.prototype.GetNext = function () {\n  return this.m_next;\n};\n\nb2Body.prototype.GetUserData = function () {\n  return this.m_userData;\n};\n\nb2Body.prototype.SetUserData = function (data) {\n  this.m_userData = data;\n};\n\nb2Body.prototype.GetWorld = function () {\n  return this.m_world;\n};\n\nb2Body.prototype.m_flags = 0;\nb2Body.prototype.m_type = 0;\nb2Body.prototype.m_islandIndex = 0;\nb2Body.prototype.m_xf = new b2Transform();\nb2Body.prototype.m_sweep = new b2Sweep();\nb2Body.prototype.m_linearVelocity = new b2Vec2();\nb2Body.prototype.m_angularVelocity = null;\nb2Body.prototype.m_force = new b2Vec2();\nb2Body.prototype.m_torque = null;\nb2Body.prototype.m_world = null;\nb2Body.prototype.m_prev = null;\nb2Body.prototype.m_next = null;\nb2Body.prototype.m_fixtureList = null;\nb2Body.prototype.m_fixtureCount = 0;\nb2Body.prototype.m_controllerList = null;\nb2Body.prototype.m_controllerCount = 0;\nb2Body.prototype.m_jointList = null;\nb2Body.prototype.m_contactList = null;\nb2Body.prototype.m_mass = null;\nb2Body.prototype.m_invMass = null;\nb2Body.prototype.m_I = null;\nb2Body.prototype.m_invI = null;\nb2Body.prototype.m_inertiaScale = null;\nb2Body.prototype.m_linearDamping = null;\nb2Body.prototype.m_angularDamping = null;\nb2Body.prototype.m_sleepTime = null;\nb2Body.prototype.m_userData = null;\n\nvar b2ContactImpulse = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2ContactImpulse.prototype.__constructor = function () {};\n\nb2ContactImpulse.prototype.__varz = function () {\n  this.normalImpulses = new Array(b2Settings.b2_maxManifoldPoints);\n  this.tangentImpulses = new Array(b2Settings.b2_maxManifoldPoints);\n};\n\nb2ContactImpulse.prototype.normalImpulses = new Array(b2Settings.b2_maxManifoldPoints);\nb2ContactImpulse.prototype.tangentImpulses = new Array(b2Settings.b2_maxManifoldPoints);\n\nvar b2TensorDampingController = function () {\n  b2Controller.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2TensorDampingController.prototype, b2Controller.prototype);\nb2TensorDampingController.prototype._super = b2Controller.prototype;\n\nb2TensorDampingController.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n};\n\nb2TensorDampingController.prototype.__varz = function () {\n  this.T = new b2Mat22();\n};\n\nb2TensorDampingController.prototype.SetAxisAligned = function (xDamping, yDamping) {\n  this.T.col1.x = -xDamping;\n  this.T.col1.y = 0;\n  this.T.col2.x = 0;\n  this.T.col2.y = -yDamping;\n\n  if (xDamping > 0 || yDamping > 0) {\n    this.maxTimestep = 1 / Math.max(xDamping, yDamping);\n  } else {\n    this.maxTimestep = 0;\n  }\n};\n\nb2TensorDampingController.prototype.Step = function (step) {\n  var timestep = step.dt;\n\n  if (timestep <= Number.MIN_VALUE) {\n    return;\n  }\n\n  if (timestep > this.maxTimestep && this.maxTimestep > 0) {\n    timestep = this.maxTimestep;\n  }\n\n  for (var i = m_bodyList; i; i = i.nextBody) {\n    var body = i.body;\n\n    if (!body.IsAwake()) {\n      continue;\n    }\n\n    var damping = body.GetWorldVector(b2Math.MulMV(this.T, body.GetLocalVector(body.GetLinearVelocity())));\n    body.SetLinearVelocity(new b2Vec2(body.GetLinearVelocity().x + damping.x * timestep, body.GetLinearVelocity().y + damping.y * timestep));\n  }\n};\n\nb2TensorDampingController.prototype.T = new b2Mat22();\nb2TensorDampingController.prototype.maxTimestep = 0;\n\nvar b2ManifoldPoint = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2ManifoldPoint.prototype.__constructor = function () {\n  this.Reset();\n};\n\nb2ManifoldPoint.prototype.__varz = function () {\n  this.m_localPoint = new b2Vec2();\n  this.m_id = new b2ContactID();\n};\n\nb2ManifoldPoint.prototype.Reset = function () {\n  this.m_localPoint.SetZero();\n  this.m_normalImpulse = 0;\n  this.m_tangentImpulse = 0;\n  this.m_id.key = 0;\n};\n\nb2ManifoldPoint.prototype.Set = function (m) {\n  this.m_localPoint.SetV(m.m_localPoint);\n  this.m_normalImpulse = m.m_normalImpulse;\n  this.m_tangentImpulse = m.m_tangentImpulse;\n  this.m_id.Set(m.m_id);\n};\n\nb2ManifoldPoint.prototype.m_localPoint = new b2Vec2();\nb2ManifoldPoint.prototype.m_normalImpulse = null;\nb2ManifoldPoint.prototype.m_tangentImpulse = null;\nb2ManifoldPoint.prototype.m_id = new b2ContactID();\n\nvar b2PolygonShape = function () {\n  b2Shape.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2PolygonShape.prototype, b2Shape.prototype);\nb2PolygonShape.prototype._super = b2Shape.prototype;\n\nb2PolygonShape.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n\n  this.m_type = b2Shape.e_polygonShape;\n  this.m_centroid = new b2Vec2();\n  this.m_vertices = new Array();\n  this.m_normals = new Array();\n};\n\nb2PolygonShape.prototype.__varz = function () {};\n\nb2PolygonShape.AsArray = function (vertices, vertexCount) {\n  var polygonShape = new b2PolygonShape();\n  polygonShape.SetAsArray(vertices, vertexCount);\n  return polygonShape;\n};\n\nb2PolygonShape.AsVector = function (vertices, vertexCount) {\n  var polygonShape = new b2PolygonShape();\n  polygonShape.SetAsVector(vertices, vertexCount);\n  return polygonShape;\n};\n\nb2PolygonShape.AsBox = function (hx, hy) {\n  var polygonShape = new b2PolygonShape();\n  polygonShape.SetAsBox(hx, hy);\n  return polygonShape;\n};\n\nb2PolygonShape.AsOrientedBox = function (hx, hy, center, angle) {\n  var polygonShape = new b2PolygonShape();\n  polygonShape.SetAsOrientedBox(hx, hy, center, angle);\n  return polygonShape;\n};\n\nb2PolygonShape.AsEdge = function (v1, v2) {\n  var polygonShape = new b2PolygonShape();\n  polygonShape.SetAsEdge(v1, v2);\n  return polygonShape;\n};\n\nb2PolygonShape.ComputeCentroid = function (vs, count) {\n  var c = new b2Vec2();\n  var area = 0;\n  var p1X = 0;\n  var p1Y = 0;\n  var inv3 = 1 / 3;\n\n  for (var i = 0; i < count; ++i) {\n    var p2 = vs[i];\n    var p3 = i + 1 < count ? vs[parseInt(i + 1)] : vs[0];\n    var e1X = p2.x - p1X;\n    var e1Y = p2.y - p1Y;\n    var e2X = p3.x - p1X;\n    var e2Y = p3.y - p1Y;\n    var D = e1X * e2Y - e1Y * e2X;\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n    c.x += triangleArea * inv3 * (p1X + p2.x + p3.x);\n    c.y += triangleArea * inv3 * (p1Y + p2.y + p3.y);\n  }\n\n  c.x *= 1 / area;\n  c.y *= 1 / area;\n  return c;\n};\n\nb2PolygonShape.ComputeOBB = function (obb, vs, count) {\n  var i = 0;\n  var p = new Array(count + 1);\n\n  for (i = 0; i < count; ++i) {\n    p[i] = vs[i];\n  }\n\n  p[count] = p[0];\n  var minArea = Number.MAX_VALUE;\n\n  for (i = 1; i <= count; ++i) {\n    var root = p[parseInt(i - 1)];\n    var uxX = p[i].x - root.x;\n    var uxY = p[i].y - root.y;\n    var length = Math.sqrt(uxX * uxX + uxY * uxY);\n    uxX /= length;\n    uxY /= length;\n    var uyX = -uxY;\n    var uyY = uxX;\n    var lowerX = Number.MAX_VALUE;\n    var lowerY = Number.MAX_VALUE;\n    var upperX = -Number.MAX_VALUE;\n    var upperY = -Number.MAX_VALUE;\n\n    for (var j = 0; j < count; ++j) {\n      var dX = p[j].x - root.x;\n      var dY = p[j].y - root.y;\n      var rX = uxX * dX + uxY * dY;\n      var rY = uyX * dX + uyY * dY;\n\n      if (rX < lowerX) {\n        lowerX = rX;\n      }\n\n      if (rY < lowerY) {\n        lowerY = rY;\n      }\n\n      if (rX > upperX) {\n        upperX = rX;\n      }\n\n      if (rY > upperY) {\n        upperY = rY;\n      }\n    }\n\n    var area = (upperX - lowerX) * (upperY - lowerY);\n\n    if (area < 0.95 * minArea) {\n      minArea = area;\n      obb.R.col1.x = uxX;\n      obb.R.col1.y = uxY;\n      obb.R.col2.x = uyX;\n      obb.R.col2.y = uyY;\n      var centerX = 0.5 * (lowerX + upperX);\n      var centerY = 0.5 * (lowerY + upperY);\n      var tMat = obb.R;\n      obb.center.x = root.x + (tMat.col1.x * centerX + tMat.col2.x * centerY);\n      obb.center.y = root.y + (tMat.col1.y * centerX + tMat.col2.y * centerY);\n      obb.extents.x = 0.5 * (upperX - lowerX);\n      obb.extents.y = 0.5 * (upperY - lowerY);\n    }\n  }\n};\n\nb2PolygonShape.s_mat = new b2Mat22();\n\nb2PolygonShape.prototype.Validate = function () {\n  return false;\n};\n\nb2PolygonShape.prototype.Reserve = function (count) {\n  for (var i = this.m_vertices.length; i < count; i++) {\n    this.m_vertices[i] = new b2Vec2();\n    this.m_normals[i] = new b2Vec2();\n  }\n};\n\nb2PolygonShape.prototype.Copy = function () {\n  var s = new b2PolygonShape();\n  s.Set(this);\n  return s;\n};\n\nb2PolygonShape.prototype.Set = function (other) {\n  this._super.Set.apply(this, [other]);\n\n  if (isInstanceOf(other, b2PolygonShape)) {\n    var other2 = other;\n    this.m_centroid.SetV(other2.m_centroid);\n    this.m_vertexCount = other2.m_vertexCount;\n    this.Reserve(this.m_vertexCount);\n\n    for (var i = 0; i < this.m_vertexCount; i++) {\n      this.m_vertices[i].SetV(other2.m_vertices[i]);\n      this.m_normals[i].SetV(other2.m_normals[i]);\n    }\n  }\n};\n\nb2PolygonShape.prototype.SetAsArray = function (vertices, vertexCount) {\n  var v = new Array();\n\n  for (var i = 0, tVec = null; i < vertices.length, tVec = vertices[i]; i++) {\n    v.push(tVec);\n  }\n\n  this.SetAsVector(v, vertexCount);\n};\n\nb2PolygonShape.prototype.SetAsVector = function (vertices, vertexCount) {\n  if (typeof vertexCount == \"undefined\") {\n    vertexCount = vertices.length;\n  }\n\n  b2Settings.b2Assert(2 <= vertexCount);\n  this.m_vertexCount = vertexCount;\n  this.Reserve(vertexCount);\n  var i = 0;\n\n  for (i = 0; i < this.m_vertexCount; i++) {\n    this.m_vertices[i].SetV(vertices[i]);\n  }\n\n  for (i = 0; i < this.m_vertexCount; ++i) {\n    var i1 = i;\n    var i2 = i + 1 < this.m_vertexCount ? i + 1 : 0;\n    var edge = b2Math.SubtractVV(this.m_vertices[i2], this.m_vertices[i1]);\n    b2Settings.b2Assert(edge.LengthSquared() > Number.MIN_VALUE);\n    this.m_normals[i].SetV(b2Math.CrossVF(edge, 1));\n    this.m_normals[i].Normalize();\n  }\n\n  this.m_centroid = b2PolygonShape.ComputeCentroid(this.m_vertices, this.m_vertexCount);\n};\n\nb2PolygonShape.prototype.SetAsBox = function (hx, hy) {\n  this.m_vertexCount = 4;\n  this.Reserve(4);\n  this.m_vertices[0].Set(-hx, -hy);\n  this.m_vertices[1].Set(hx, -hy);\n  this.m_vertices[2].Set(hx, hy);\n  this.m_vertices[3].Set(-hx, hy);\n  this.m_normals[0].Set(0, -1);\n  this.m_normals[1].Set(1, 0);\n  this.m_normals[2].Set(0, 1);\n  this.m_normals[3].Set(-1, 0);\n  this.m_centroid.SetZero();\n};\n\nb2PolygonShape.prototype.SetAsOrientedBox = function (hx, hy, center, angle) {\n  this.m_vertexCount = 4;\n  this.Reserve(4);\n  this.m_vertices[0].Set(-hx, -hy);\n  this.m_vertices[1].Set(hx, -hy);\n  this.m_vertices[2].Set(hx, hy);\n  this.m_vertices[3].Set(-hx, hy);\n  this.m_normals[0].Set(0, -1);\n  this.m_normals[1].Set(1, 0);\n  this.m_normals[2].Set(0, 1);\n  this.m_normals[3].Set(-1, 0);\n  this.m_centroid = center;\n  var xf = new b2Transform();\n  xf.position = center;\n  xf.R.Set(angle);\n\n  for (var i = 0; i < this.m_vertexCount; ++i) {\n    this.m_vertices[i] = b2Math.MulX(xf, this.m_vertices[i]);\n    this.m_normals[i] = b2Math.MulMV(xf.R, this.m_normals[i]);\n  }\n};\n\nb2PolygonShape.prototype.SetAsEdge = function (v1, v2) {\n  this.m_vertexCount = 2;\n  this.Reserve(2);\n  this.m_vertices[0].SetV(v1);\n  this.m_vertices[1].SetV(v2);\n  this.m_centroid.x = 0.5 * (v1.x + v2.x);\n  this.m_centroid.y = 0.5 * (v1.y + v2.y);\n  this.m_normals[0] = b2Math.CrossVF(b2Math.SubtractVV(v2, v1), 1);\n  this.m_normals[0].Normalize();\n  this.m_normals[1].x = -this.m_normals[0].x;\n  this.m_normals[1].y = -this.m_normals[0].y;\n};\n\nb2PolygonShape.prototype.TestPoint = function (xf, p) {\n  var tVec;\n  var tMat = xf.R;\n  var tX = p.x - xf.position.x;\n  var tY = p.y - xf.position.y;\n  var pLocalX = tX * tMat.col1.x + tY * tMat.col1.y;\n  var pLocalY = tX * tMat.col2.x + tY * tMat.col2.y;\n\n  for (var i = 0; i < this.m_vertexCount; ++i) {\n    tVec = this.m_vertices[i];\n    tX = pLocalX - tVec.x;\n    tY = pLocalY - tVec.y;\n    tVec = this.m_normals[i];\n    var dot = tVec.x * tX + tVec.y * tY;\n\n    if (dot > 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nb2PolygonShape.prototype.RayCast = function (output, input, transform) {\n  var lower = 0;\n  var upper = input.maxFraction;\n  var tX;\n  var tY;\n  var tMat;\n  var tVec;\n  tX = input.p1.x - transform.position.x;\n  tY = input.p1.y - transform.position.y;\n  tMat = transform.R;\n  var p1X = tX * tMat.col1.x + tY * tMat.col1.y;\n  var p1Y = tX * tMat.col2.x + tY * tMat.col2.y;\n  tX = input.p2.x - transform.position.x;\n  tY = input.p2.y - transform.position.y;\n  tMat = transform.R;\n  var p2X = tX * tMat.col1.x + tY * tMat.col1.y;\n  var p2Y = tX * tMat.col2.x + tY * tMat.col2.y;\n  var dX = p2X - p1X;\n  var dY = p2Y - p1Y;\n  var index = -1;\n\n  for (var i = 0; i < this.m_vertexCount; ++i) {\n    tVec = this.m_vertices[i];\n    tX = tVec.x - p1X;\n    tY = tVec.y - p1Y;\n    tVec = this.m_normals[i];\n    var numerator = tVec.x * tX + tVec.y * tY;\n    var denominator = tVec.x * dX + tVec.y * dY;\n\n    if (denominator == 0) {\n      if (numerator < 0) {\n        return false;\n      }\n    } else {\n      if (denominator < 0 && numerator < lower * denominator) {\n        lower = numerator / denominator;\n        index = i;\n      } else {\n        if (denominator > 0 && numerator < upper * denominator) {\n          upper = numerator / denominator;\n        }\n      }\n    }\n\n    if (upper < lower - Number.MIN_VALUE) {\n      return false;\n    }\n  }\n\n  if (index >= 0) {\n    output.fraction = lower;\n    tMat = transform.R;\n    tVec = this.m_normals[index];\n    output.normal.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n    output.normal.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n    return true;\n  }\n\n  return false;\n};\n\nb2PolygonShape.prototype.ComputeAABB = function (aabb, xf) {\n  var tMat = xf.R;\n  var tVec = this.m_vertices[0];\n  var lowerX = xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n  var lowerY = xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n  var upperX = lowerX;\n  var upperY = lowerY;\n\n  for (var i = 1; i < this.m_vertexCount; ++i) {\n    tVec = this.m_vertices[i];\n    var vX = xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n    var vY = xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n    lowerX = lowerX < vX ? lowerX : vX;\n    lowerY = lowerY < vY ? lowerY : vY;\n    upperX = upperX > vX ? upperX : vX;\n    upperY = upperY > vY ? upperY : vY;\n  }\n\n  aabb.lowerBound.x = lowerX - this.m_radius;\n  aabb.lowerBound.y = lowerY - this.m_radius;\n  aabb.upperBound.x = upperX + this.m_radius;\n  aabb.upperBound.y = upperY + this.m_radius;\n};\n\nb2PolygonShape.prototype.ComputeMass = function (massData, density) {\n  if (this.m_vertexCount == 2) {\n    massData.center.x = 0.5 * (this.m_vertices[0].x + this.m_vertices[1].x);\n    massData.center.y = 0.5 * (this.m_vertices[0].y + this.m_vertices[1].y);\n    massData.mass = 0;\n    massData.I = 0;\n    return;\n  }\n\n  var centerX = 0;\n  var centerY = 0;\n  var area = 0;\n  var I = 0;\n  var p1X = 0;\n  var p1Y = 0;\n  var k_inv3 = 1 / 3;\n\n  for (var i = 0; i < this.m_vertexCount; ++i) {\n    var p2 = this.m_vertices[i];\n    var p3 = i + 1 < this.m_vertexCount ? this.m_vertices[parseInt(i + 1)] : this.m_vertices[0];\n    var e1X = p2.x - p1X;\n    var e1Y = p2.y - p1Y;\n    var e2X = p3.x - p1X;\n    var e2Y = p3.y - p1Y;\n    var D = e1X * e2Y - e1Y * e2X;\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n    centerX += triangleArea * k_inv3 * (p1X + p2.x + p3.x);\n    centerY += triangleArea * k_inv3 * (p1Y + p2.y + p3.y);\n    var px = p1X;\n    var py = p1Y;\n    var ex1 = e1X;\n    var ey1 = e1Y;\n    var ex2 = e2X;\n    var ey2 = e2Y;\n    var intx2 = k_inv3 * (0.25 * (ex1 * ex1 + ex2 * ex1 + ex2 * ex2) + (px * ex1 + px * ex2)) + 0.5 * px * px;\n    var inty2 = k_inv3 * (0.25 * (ey1 * ey1 + ey2 * ey1 + ey2 * ey2) + (py * ey1 + py * ey2)) + 0.5 * py * py;\n    I += D * (intx2 + inty2);\n  }\n\n  massData.mass = density * area;\n  centerX *= 1 / area;\n  centerY *= 1 / area;\n  massData.center.Set(centerX, centerY);\n  massData.I = density * I;\n};\n\nb2PolygonShape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {\n  var normalL = b2Math.MulTMV(xf.R, normal);\n  var offsetL = offset - b2Math.Dot(normal, xf.position);\n  var depths = new Array();\n  var diveCount = 0;\n  var intoIndex = -1;\n  var outoIndex = -1;\n  var lastSubmerged = false;\n  var i = 0;\n\n  for (i = 0; i < this.m_vertexCount; ++i) {\n    depths[i] = b2Math.Dot(normalL, this.m_vertices[i]) - offsetL;\n    var isSubmerged = depths[i] < -Number.MIN_VALUE;\n\n    if (i > 0) {\n      if (isSubmerged) {\n        if (!lastSubmerged) {\n          intoIndex = i - 1;\n          diveCount++;\n        }\n      } else {\n        if (lastSubmerged) {\n          outoIndex = i - 1;\n          diveCount++;\n        }\n      }\n    }\n\n    lastSubmerged = isSubmerged;\n  }\n\n  switch (diveCount) {\n    case 0:\n      if (lastSubmerged) {\n        var md = new b2MassData();\n        this.ComputeMass(md, 1);\n        c.SetV(b2Math.MulX(xf, md.center));\n        return md.mass;\n      } else {\n        return 0;\n      }\n\n      break;\n\n    case 1:\n      if (intoIndex == -1) {\n        intoIndex = this.m_vertexCount - 1;\n      } else {\n        outoIndex = this.m_vertexCount - 1;\n      }\n\n      break;\n  }\n\n  var intoIndex2 = (intoIndex + 1) % this.m_vertexCount;\n  var outoIndex2 = (outoIndex + 1) % this.m_vertexCount;\n  var intoLamdda = (0 - depths[intoIndex]) / (depths[intoIndex2] - depths[intoIndex]);\n  var outoLamdda = (0 - depths[outoIndex]) / (depths[outoIndex2] - depths[outoIndex]);\n  var intoVec = new b2Vec2(this.m_vertices[intoIndex].x * (1 - intoLamdda) + this.m_vertices[intoIndex2].x * intoLamdda, this.m_vertices[intoIndex].y * (1 - intoLamdda) + this.m_vertices[intoIndex2].y * intoLamdda);\n  var outoVec = new b2Vec2(this.m_vertices[outoIndex].x * (1 - outoLamdda) + this.m_vertices[outoIndex2].x * outoLamdda, this.m_vertices[outoIndex].y * (1 - outoLamdda) + this.m_vertices[outoIndex2].y * outoLamdda);\n  var area = 0;\n  var center = new b2Vec2();\n  var p2 = this.m_vertices[intoIndex2];\n  var p3;\n  i = intoIndex2;\n\n  while (i != outoIndex2) {\n    i = (i + 1) % this.m_vertexCount;\n\n    if (i == outoIndex2) {\n      p3 = outoVec;\n    } else {\n      p3 = this.m_vertices[i];\n    }\n\n    var triangleArea = 0.5 * ((p2.x - intoVec.x) * (p3.y - intoVec.y) - (p2.y - intoVec.y) * (p3.x - intoVec.x));\n    area += triangleArea;\n    center.x += triangleArea * (intoVec.x + p2.x + p3.x) / 3;\n    center.y += triangleArea * (intoVec.y + p2.y + p3.y) / 3;\n    p2 = p3;\n  }\n\n  center.Multiply(1 / area);\n  c.SetV(b2Math.MulX(xf, center));\n  return area;\n};\n\nb2PolygonShape.prototype.GetVertexCount = function () {\n  return this.m_vertexCount;\n};\n\nb2PolygonShape.prototype.GetVertices = function () {\n  return this.m_vertices;\n};\n\nb2PolygonShape.prototype.GetNormals = function () {\n  return this.m_normals;\n};\n\nb2PolygonShape.prototype.GetSupport = function (d) {\n  var bestIndex = 0;\n  var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;\n\n  for (var i = 1; i < this.m_vertexCount; ++i) {\n    var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;\n\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n\n  return bestIndex;\n};\n\nb2PolygonShape.prototype.GetSupportVertex = function (d) {\n  var bestIndex = 0;\n  var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;\n\n  for (var i = 1; i < this.m_vertexCount; ++i) {\n    var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;\n\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n\n  return this.m_vertices[bestIndex];\n};\n\nb2PolygonShape.prototype.m_centroid = null;\nb2PolygonShape.prototype.m_vertices = null;\nb2PolygonShape.prototype.m_normals = null;\nb2PolygonShape.prototype.m_vertexCount = 0;\n\nvar b2Fixture = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Fixture.prototype.__constructor = function () {\n  this.m_aabb = new b2AABB();\n  this.m_userData = null;\n  this.m_body = null;\n  this.m_next = null;\n  this.m_shape = null;\n  this.m_density = 0;\n  this.m_friction = 0;\n  this.m_restitution = 0;\n};\n\nb2Fixture.prototype.__varz = function () {\n  this.m_filter = new b2FilterData();\n};\n\nb2Fixture.prototype.Create = function (body, xf, def) {\n  this.m_userData = def.userData;\n  this.m_friction = def.friction;\n  this.m_restitution = def.restitution;\n  this.m_body = body;\n  this.m_next = null;\n  this.m_filter = def.filter.Copy();\n  this.m_isSensor = def.isSensor;\n  this.m_shape = def.shape.Copy();\n  this.m_density = def.density;\n};\n\nb2Fixture.prototype.Destroy = function () {\n  this.m_shape = null;\n};\n\nb2Fixture.prototype.CreateProxy = function (broadPhase, xf) {\n  this.m_shape.ComputeAABB(this.m_aabb, xf);\n  this.m_proxy = broadPhase.CreateProxy(this.m_aabb, this);\n};\n\nb2Fixture.prototype.DestroyProxy = function (broadPhase) {\n  if (this.m_proxy == null) {\n    return;\n  }\n\n  broadPhase.DestroyProxy(this.m_proxy);\n  this.m_proxy = null;\n};\n\nb2Fixture.prototype.Synchronize = function (broadPhase, transform1, transform2) {\n  if (!this.m_proxy) {\n    return;\n  }\n\n  var aabb1 = new b2AABB();\n  var aabb2 = new b2AABB();\n  this.m_shape.ComputeAABB(aabb1, transform1);\n  this.m_shape.ComputeAABB(aabb2, transform2);\n  this.m_aabb.Combine(aabb1, aabb2);\n  var displacement = b2Math.SubtractVV(transform2.position, transform1.position);\n  broadPhase.MoveProxy(this.m_proxy, this.m_aabb, displacement);\n};\n\nb2Fixture.prototype.GetType = function () {\n  return this.m_shape.GetType();\n};\n\nb2Fixture.prototype.GetShape = function () {\n  return this.m_shape;\n};\n\nb2Fixture.prototype.SetSensor = function (sensor) {\n  if (this.m_isSensor == sensor) {\n    return;\n  }\n\n  this.m_isSensor = sensor;\n\n  if (this.m_body == null) {\n    return;\n  }\n\n  var edge = this.m_body.GetContactList();\n\n  while (edge) {\n    var contact = edge.contact;\n    var fixtureA = contact.GetFixtureA();\n    var fixtureB = contact.GetFixtureB();\n\n    if (fixtureA == this || fixtureB == this) {\n      contact.SetSensor(fixtureA.IsSensor() || fixtureB.IsSensor());\n    }\n\n    edge = edge.next;\n  }\n};\n\nb2Fixture.prototype.IsSensor = function () {\n  return this.m_isSensor;\n};\n\nb2Fixture.prototype.SetFilterData = function (filter) {\n  this.m_filter = filter.Copy();\n  this.Refilter();\n};\n\nb2Fixture.prototype.Refilter = function () {\n  if (!this.m_body) {\n    return;\n  }\n\n  var edge = this.m_body.GetContactList();\n\n  while (edge) {\n    var contact = edge.contact;\n    var fixtureA = contact.GetFixtureA();\n    var fixtureB = contact.GetFixtureB();\n\n    if (fixtureA == this || fixtureB == this) {\n      contact.FlagForFiltering();\n    }\n\n    edge = edge.next;\n  }\n};\n\nb2Fixture.prototype.GetFilterData = function () {\n  return this.m_filter.Copy();\n};\n\nb2Fixture.prototype.GetBody = function () {\n  return this.m_body;\n};\n\nb2Fixture.prototype.GetNext = function () {\n  return this.m_next;\n};\n\nb2Fixture.prototype.GetUserData = function () {\n  return this.m_userData;\n};\n\nb2Fixture.prototype.SetUserData = function (data) {\n  this.m_userData = data;\n};\n\nb2Fixture.prototype.TestPoint = function (p) {\n  return this.m_shape.TestPoint(this.m_body.GetTransform(), p);\n};\n\nb2Fixture.prototype.RayCast = function (output, input) {\n  return this.m_shape.RayCast(output, input, this.m_body.GetTransform());\n};\n\nb2Fixture.prototype.GetMassData = function (massData) {\n  if (massData == null) {\n    massData = new b2MassData();\n  }\n\n  this.m_shape.ComputeMass(massData, this.m_density);\n  return massData;\n};\n\nb2Fixture.prototype.SetDensity = function (density) {\n  this.m_density = density;\n};\n\nb2Fixture.prototype.GetDensity = function () {\n  return this.m_density;\n};\n\nb2Fixture.prototype.GetFriction = function () {\n  return this.m_friction;\n};\n\nb2Fixture.prototype.SetFriction = function (friction) {\n  this.m_friction = friction;\n};\n\nb2Fixture.prototype.GetRestitution = function () {\n  return this.m_restitution;\n};\n\nb2Fixture.prototype.SetRestitution = function (restitution) {\n  this.m_restitution = restitution;\n};\n\nb2Fixture.prototype.GetAABB = function () {\n  return this.m_aabb;\n};\n\nb2Fixture.prototype.m_massData = null;\nb2Fixture.prototype.m_aabb = null;\nb2Fixture.prototype.m_density = null;\nb2Fixture.prototype.m_next = null;\nb2Fixture.prototype.m_body = null;\nb2Fixture.prototype.m_shape = null;\nb2Fixture.prototype.m_friction = null;\nb2Fixture.prototype.m_restitution = null;\nb2Fixture.prototype.m_proxy = null;\nb2Fixture.prototype.m_filter = new b2FilterData();\nb2Fixture.prototype.m_isSensor = null;\nb2Fixture.prototype.m_userData = null;\n\nvar b2DynamicTreeNode = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2DynamicTreeNode.prototype.__constructor = function () {};\n\nb2DynamicTreeNode.prototype.__varz = function () {\n  this.aabb = new b2AABB();\n};\n\nb2DynamicTreeNode.prototype.IsLeaf = function () {\n  return this.child1 == null;\n};\n\nb2DynamicTreeNode.prototype.userData = null;\nb2DynamicTreeNode.prototype.aabb = new b2AABB();\nb2DynamicTreeNode.prototype.parent = null;\nb2DynamicTreeNode.prototype.child1 = null;\nb2DynamicTreeNode.prototype.child2 = null;\n\nvar b2BodyDef = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2BodyDef.prototype.__constructor = function () {\n  this.userData = null;\n  this.position.Set(0, 0);\n  this.angle = 0;\n  this.linearVelocity.Set(0, 0);\n  this.angularVelocity = 0;\n  this.linearDamping = 0;\n  this.angularDamping = 0;\n  this.allowSleep = true;\n  this.awake = true;\n  this.fixedRotation = false;\n  this.bullet = false;\n  this.type = b2Body.b2_staticBody;\n  this.active = true;\n  this.inertiaScale = 1;\n};\n\nb2BodyDef.prototype.__varz = function () {\n  this.position = new b2Vec2();\n  this.linearVelocity = new b2Vec2();\n};\n\nb2BodyDef.prototype.type = 0;\nb2BodyDef.prototype.position = new b2Vec2();\nb2BodyDef.prototype.angle = null;\nb2BodyDef.prototype.linearVelocity = new b2Vec2();\nb2BodyDef.prototype.angularVelocity = null;\nb2BodyDef.prototype.linearDamping = null;\nb2BodyDef.prototype.angularDamping = null;\nb2BodyDef.prototype.allowSleep = null;\nb2BodyDef.prototype.awake = null;\nb2BodyDef.prototype.fixedRotation = null;\nb2BodyDef.prototype.bullet = null;\nb2BodyDef.prototype.active = null;\nb2BodyDef.prototype.userData = null;\nb2BodyDef.prototype.inertiaScale = null;\n\nvar b2DynamicTreeBroadPhase = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2DynamicTreeBroadPhase.prototype.__constructor = function () {};\n\nb2DynamicTreeBroadPhase.prototype.__varz = function () {\n  this.m_tree = new b2DynamicTree();\n  this.m_moveBuffer = new Array();\n  this.m_pairBuffer = new Array();\n};\n\nb2DynamicTreeBroadPhase.prototype.BufferMove = function (proxy) {\n  this.m_moveBuffer[this.m_moveBuffer.length] = proxy;\n};\n\nb2DynamicTreeBroadPhase.prototype.UnBufferMove = function (proxy) {\n  var i = this.m_moveBuffer.indexOf(proxy);\n  this.m_moveBuffer.splice(i, 1);\n};\n\nb2DynamicTreeBroadPhase.prototype.ComparePairs = function (pair1, pair2) {\n  return 0;\n};\n\nb2DynamicTreeBroadPhase.prototype.CreateProxy = function (aabb, userData) {\n  var proxy = this.m_tree.CreateProxy(aabb, userData);\n  ++this.m_proxyCount;\n  this.BufferMove(proxy);\n  return proxy;\n};\n\nb2DynamicTreeBroadPhase.prototype.DestroyProxy = function (proxy) {\n  this.UnBufferMove(proxy);\n  --this.m_proxyCount;\n  this.m_tree.DestroyProxy(proxy);\n};\n\nb2DynamicTreeBroadPhase.prototype.MoveProxy = function (proxy, aabb, displacement) {\n  var buffer = this.m_tree.MoveProxy(proxy, aabb, displacement);\n\n  if (buffer) {\n    this.BufferMove(proxy);\n  }\n};\n\nb2DynamicTreeBroadPhase.prototype.TestOverlap = function (proxyA, proxyB) {\n  var aabbA = this.m_tree.GetFatAABB(proxyA);\n  var aabbB = this.m_tree.GetFatAABB(proxyB);\n  return aabbA.TestOverlap(aabbB);\n};\n\nb2DynamicTreeBroadPhase.prototype.GetUserData = function (proxy) {\n  return this.m_tree.GetUserData(proxy);\n};\n\nb2DynamicTreeBroadPhase.prototype.GetFatAABB = function (proxy) {\n  return this.m_tree.GetFatAABB(proxy);\n};\n\nb2DynamicTreeBroadPhase.prototype.GetProxyCount = function () {\n  return this.m_proxyCount;\n};\n\nb2DynamicTreeBroadPhase.prototype.UpdatePairs = function (callback) {\n  this.m_pairCount = 0;\n\n  for (var i = 0, queryProxy = null; i < this.m_moveBuffer.length, queryProxy = this.m_moveBuffer[i]; i++) {\n    var that = this;\n\n    function QueryCallback(proxy) {\n      if (proxy == queryProxy) {\n        return true;\n      }\n\n      if (that.m_pairCount == that.m_pairBuffer.length) {\n        that.m_pairBuffer[that.m_pairCount] = new b2DynamicTreePair();\n      }\n\n      var pair = that.m_pairBuffer[that.m_pairCount];\n      pair.proxyA = proxy < queryProxy ? proxy : queryProxy;\n      pair.proxyB = proxy >= queryProxy ? proxy : queryProxy;\n      ++that.m_pairCount;\n      return true;\n    }\n\n    var fatAABB = this.m_tree.GetFatAABB(queryProxy);\n    this.m_tree.Query(QueryCallback, fatAABB);\n  }\n\n  this.m_moveBuffer.length = 0;\n\n  for (var i = 0; i < this.m_pairCount;) {\n    var primaryPair = this.m_pairBuffer[i];\n    var userDataA = this.m_tree.GetUserData(primaryPair.proxyA);\n    var userDataB = this.m_tree.GetUserData(primaryPair.proxyB);\n    callback(userDataA, userDataB);\n    ++i;\n\n    while (i < this.m_pairCount) {\n      var pair = this.m_pairBuffer[i];\n\n      if (pair.proxyA != primaryPair.proxyA || pair.proxyB != primaryPair.proxyB) {\n        break;\n      }\n\n      ++i;\n    }\n  }\n};\n\nb2DynamicTreeBroadPhase.prototype.Query = function (callback, aabb) {\n  this.m_tree.Query(callback, aabb);\n};\n\nb2DynamicTreeBroadPhase.prototype.RayCast = function (callback, input) {\n  this.m_tree.RayCast(callback, input);\n};\n\nb2DynamicTreeBroadPhase.prototype.Validate = function () {};\n\nb2DynamicTreeBroadPhase.prototype.Rebalance = function (iterations) {\n  this.m_tree.Rebalance(iterations);\n};\n\nb2DynamicTreeBroadPhase.prototype.m_tree = new b2DynamicTree();\nb2DynamicTreeBroadPhase.prototype.m_proxyCount = 0;\nb2DynamicTreeBroadPhase.prototype.m_moveBuffer = new Array();\nb2DynamicTreeBroadPhase.prototype.m_pairBuffer = new Array();\nb2DynamicTreeBroadPhase.prototype.m_pairCount = 0;\n\nvar b2BroadPhase = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2BroadPhase.prototype.__constructor = function (worldAABB) {\n  var i = 0;\n  this.m_pairManager.Initialize(this);\n  this.m_worldAABB = worldAABB;\n  this.m_proxyCount = 0;\n  this.m_bounds = new Array();\n\n  for (i = 0; i < 2; i++) {\n    this.m_bounds[i] = new Array();\n  }\n\n  var dX = worldAABB.upperBound.x - worldAABB.lowerBound.x;\n  var dY = worldAABB.upperBound.y - worldAABB.lowerBound.y;\n  this.m_quantizationFactor.x = b2Settings.USHRT_MAX / dX;\n  this.m_quantizationFactor.y = b2Settings.USHRT_MAX / dY;\n  this.m_timeStamp = 1;\n  this.m_queryResultCount = 0;\n};\n\nb2BroadPhase.prototype.__varz = function () {\n  this.m_pairManager = new b2PairManager();\n  this.m_proxyPool = new Array();\n  this.m_querySortKeys = new Array();\n  this.m_queryResults = new Array();\n  this.m_quantizationFactor = new b2Vec2();\n};\n\nb2BroadPhase.BinarySearch = function (bounds, count, value) {\n  var low = 0;\n  var high = count - 1;\n\n  while (low <= high) {\n    var mid = Math.round((low + high) / 2);\n    var bound = bounds[mid];\n\n    if (bound.value > value) {\n      high = mid - 1;\n    } else {\n      if (bound.value < value) {\n        low = mid + 1;\n      } else {\n        return parseInt(mid);\n      }\n    }\n  }\n\n  return parseInt(low);\n};\n\nb2BroadPhase.s_validate = false;\nb2BroadPhase.b2_invalid = b2Settings.USHRT_MAX;\nb2BroadPhase.b2_nullEdge = b2Settings.USHRT_MAX;\n\nb2BroadPhase.prototype.ComputeBounds = function (lowerValues, upperValues, aabb) {\n  var minVertexX = aabb.lowerBound.x;\n  var minVertexY = aabb.lowerBound.y;\n  minVertexX = b2Math.Min(minVertexX, this.m_worldAABB.upperBound.x);\n  minVertexY = b2Math.Min(minVertexY, this.m_worldAABB.upperBound.y);\n  minVertexX = b2Math.Max(minVertexX, this.m_worldAABB.lowerBound.x);\n  minVertexY = b2Math.Max(minVertexY, this.m_worldAABB.lowerBound.y);\n  var maxVertexX = aabb.upperBound.x;\n  var maxVertexY = aabb.upperBound.y;\n  maxVertexX = b2Math.Min(maxVertexX, this.m_worldAABB.upperBound.x);\n  maxVertexY = b2Math.Min(maxVertexY, this.m_worldAABB.upperBound.y);\n  maxVertexX = b2Math.Max(maxVertexX, this.m_worldAABB.lowerBound.x);\n  maxVertexY = b2Math.Max(maxVertexY, this.m_worldAABB.lowerBound.y);\n  lowerValues[0] = parseInt(this.m_quantizationFactor.x * (minVertexX - this.m_worldAABB.lowerBound.x)) & b2Settings.USHRT_MAX - 1;\n  upperValues[0] = parseInt(this.m_quantizationFactor.x * (maxVertexX - this.m_worldAABB.lowerBound.x)) % 65535 | 1;\n  lowerValues[1] = parseInt(this.m_quantizationFactor.y * (minVertexY - this.m_worldAABB.lowerBound.y)) & b2Settings.USHRT_MAX - 1;\n  upperValues[1] = parseInt(this.m_quantizationFactor.y * (maxVertexY - this.m_worldAABB.lowerBound.y)) % 65535 | 1;\n};\n\nb2BroadPhase.prototype.TestOverlapValidate = function (p1, p2) {\n  for (var axis = 0; axis < 2; ++axis) {\n    var bounds = this.m_bounds[axis];\n    var bound1 = bounds[p1.lowerBounds[axis]];\n    var bound2 = bounds[p2.upperBounds[axis]];\n\n    if (bound1.value > bound2.value) {\n      return false;\n    }\n\n    bound1 = bounds[p1.upperBounds[axis]];\n    bound2 = bounds[p2.lowerBounds[axis]];\n\n    if (bound1.value < bound2.value) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nb2BroadPhase.prototype.QueryAxis = function (lowerQueryOut, upperQueryOut, lowerValue, upperValue, bounds, boundCount, axis) {\n  var lowerQuery = b2BroadPhase.BinarySearch(bounds, boundCount, lowerValue);\n  var upperQuery = b2BroadPhase.BinarySearch(bounds, boundCount, upperValue);\n  var bound;\n\n  for (var j = lowerQuery; j < upperQuery; ++j) {\n    bound = bounds[j];\n\n    if (bound.IsLower()) {\n      this.IncrementOverlapCount(bound.proxy);\n    }\n  }\n\n  if (lowerQuery > 0) {\n    var i = lowerQuery - 1;\n    bound = bounds[i];\n    var s = bound.stabbingCount;\n\n    while (s) {\n      bound = bounds[i];\n\n      if (bound.IsLower()) {\n        var proxy = bound.proxy;\n\n        if (lowerQuery <= proxy.upperBounds[axis]) {\n          this.IncrementOverlapCount(bound.proxy);\n          --s;\n        }\n      }\n\n      --i;\n    }\n  }\n\n  lowerQueryOut[0] = lowerQuery;\n  upperQueryOut[0] = upperQuery;\n};\n\nb2BroadPhase.prototype.IncrementOverlapCount = function (proxy) {\n  if (proxy.timeStamp < this.m_timeStamp) {\n    proxy.timeStamp = this.m_timeStamp;\n    proxy.overlapCount = 1;\n  } else {\n    proxy.overlapCount = 2;\n    this.m_queryResults[this.m_queryResultCount] = proxy;\n    ++this.m_queryResultCount;\n  }\n};\n\nb2BroadPhase.prototype.IncrementTimeStamp = function () {\n  if (this.m_timeStamp == b2Settings.USHRT_MAX) {\n    for (var i = 0; i < this.m_proxyPool.length; ++i) {\n      this.m_proxyPool[i].timeStamp = 0;\n    }\n\n    this.m_timeStamp = 1;\n  } else {\n    ++this.m_timeStamp;\n  }\n};\n\nb2BroadPhase.prototype.InRange = function (aabb) {\n  var dX;\n  var dY;\n  var d2X;\n  var d2Y;\n  dX = aabb.lowerBound.x;\n  dY = aabb.lowerBound.y;\n  dX -= this.m_worldAABB.upperBound.x;\n  dY -= this.m_worldAABB.upperBound.y;\n  d2X = this.m_worldAABB.lowerBound.x;\n  d2Y = this.m_worldAABB.lowerBound.y;\n  d2X -= aabb.upperBound.x;\n  d2Y -= aabb.upperBound.y;\n  dX = b2Math.Max(dX, d2X);\n  dY = b2Math.Max(dY, d2Y);\n  return b2Math.Max(dX, dY) < 0;\n};\n\nb2BroadPhase.prototype.CreateProxy = function (aabb, userData) {\n  var index = 0;\n  var proxy;\n  var i = 0;\n  var j = 0;\n\n  if (!this.m_freeProxy) {\n    this.m_freeProxy = this.m_proxyPool[this.m_proxyCount] = new b2Proxy();\n    this.m_freeProxy.next = null;\n    this.m_freeProxy.timeStamp = 0;\n    this.m_freeProxy.overlapCount = b2BroadPhase.b2_invalid;\n    this.m_freeProxy.userData = null;\n\n    for (i = 0; i < 2; i++) {\n      j = this.m_proxyCount * 2;\n      this.m_bounds[i][j++] = new b2Bound();\n      this.m_bounds[i][j] = new b2Bound();\n    }\n  }\n\n  proxy = this.m_freeProxy;\n  this.m_freeProxy = proxy.next;\n  proxy.overlapCount = 0;\n  proxy.userData = userData;\n  var boundCount = 2 * this.m_proxyCount;\n  var lowerValues = new Array();\n  var upperValues = new Array();\n  this.ComputeBounds(lowerValues, upperValues, aabb);\n\n  for (var axis = 0; axis < 2; ++axis) {\n    var bounds = this.m_bounds[axis];\n    var lowerIndex = 0;\n    var upperIndex = 0;\n    var lowerIndexOut = new Array();\n    lowerIndexOut.push(lowerIndex);\n    var upperIndexOut = new Array();\n    upperIndexOut.push(upperIndex);\n    this.QueryAxis(lowerIndexOut, upperIndexOut, lowerValues[axis], upperValues[axis], bounds, boundCount, axis);\n    lowerIndex = lowerIndexOut[0];\n    upperIndex = upperIndexOut[0];\n    bounds.splice(upperIndex, 0, bounds[bounds.length - 1]);\n    bounds.length--;\n    bounds.splice(lowerIndex, 0, bounds[bounds.length - 1]);\n    bounds.length--;\n    ++upperIndex;\n    var tBound1 = bounds[lowerIndex];\n    var tBound2 = bounds[upperIndex];\n    tBound1.value = lowerValues[axis];\n    tBound1.proxy = proxy;\n    tBound2.value = upperValues[axis];\n    tBound2.proxy = proxy;\n    var tBoundAS3 = bounds[parseInt(lowerIndex - 1)];\n    tBound1.stabbingCount = lowerIndex == 0 ? 0 : tBoundAS3.stabbingCount;\n    tBoundAS3 = bounds[parseInt(upperIndex - 1)];\n    tBound2.stabbingCount = tBoundAS3.stabbingCount;\n\n    for (index = lowerIndex; index < upperIndex; ++index) {\n      tBoundAS3 = bounds[index];\n      tBoundAS3.stabbingCount++;\n    }\n\n    for (index = lowerIndex; index < boundCount + 2; ++index) {\n      tBound1 = bounds[index];\n      var proxy2 = tBound1.proxy;\n\n      if (tBound1.IsLower()) {\n        proxy2.lowerBounds[axis] = index;\n      } else {\n        proxy2.upperBounds[axis] = index;\n      }\n    }\n  }\n\n  ++this.m_proxyCount;\n\n  for (i = 0; i < this.m_queryResultCount; ++i) {\n    this.m_pairManager.AddBufferedPair(proxy, this.m_queryResults[i]);\n  }\n\n  this.m_queryResultCount = 0;\n  this.IncrementTimeStamp();\n  return proxy;\n};\n\nb2BroadPhase.prototype.DestroyProxy = function (proxy_) {\n  var proxy = proxy_;\n  var tBound1;\n  var tBound2;\n  var boundCount = 2 * this.m_proxyCount;\n\n  for (var axis = 0; axis < 2; ++axis) {\n    var bounds = this.m_bounds[axis];\n    var lowerIndex = proxy.lowerBounds[axis];\n    var upperIndex = proxy.upperBounds[axis];\n    tBound1 = bounds[lowerIndex];\n    var lowerValue = tBound1.value;\n    tBound2 = bounds[upperIndex];\n    var upperValue = tBound2.value;\n    bounds.splice(upperIndex, 1);\n    bounds.splice(lowerIndex, 1);\n    bounds.push(tBound1);\n    bounds.push(tBound2);\n    var tEnd = boundCount - 2;\n\n    for (var index = lowerIndex; index < tEnd; ++index) {\n      tBound1 = bounds[index];\n      var proxy2 = tBound1.proxy;\n\n      if (tBound1.IsLower()) {\n        proxy2.lowerBounds[axis] = index;\n      } else {\n        proxy2.upperBounds[axis] = index;\n      }\n    }\n\n    tEnd = upperIndex - 1;\n\n    for (var index2 = lowerIndex; index2 < tEnd; ++index2) {\n      tBound1 = bounds[index2];\n      tBound1.stabbingCount--;\n    }\n\n    var ignore = new Array();\n    this.QueryAxis(ignore, ignore, lowerValue, upperValue, bounds, boundCount - 2, axis);\n  }\n\n  for (var i = 0; i < this.m_queryResultCount; ++i) {\n    this.m_pairManager.RemoveBufferedPair(proxy, this.m_queryResults[i]);\n  }\n\n  this.m_queryResultCount = 0;\n  this.IncrementTimeStamp();\n  proxy.userData = null;\n  proxy.overlapCount = b2BroadPhase.b2_invalid;\n  proxy.lowerBounds[0] = b2BroadPhase.b2_invalid;\n  proxy.lowerBounds[1] = b2BroadPhase.b2_invalid;\n  proxy.upperBounds[0] = b2BroadPhase.b2_invalid;\n  proxy.upperBounds[1] = b2BroadPhase.b2_invalid;\n  proxy.next = this.m_freeProxy;\n  this.m_freeProxy = proxy;\n  --this.m_proxyCount;\n};\n\nb2BroadPhase.prototype.MoveProxy = function (proxy_, aabb, displacement) {\n  var proxy = proxy_;\n  var as3arr;\n  var as3int = 0;\n  var axis = 0;\n  var index = 0;\n  var bound;\n  var prevBound;\n  var nextBound;\n  var nextProxyId = 0;\n  var nextProxy;\n\n  if (proxy == null) {\n    return;\n  }\n\n  if (aabb.IsValid() == false) {\n    return;\n  }\n\n  var boundCount = 2 * this.m_proxyCount;\n  var newValues = new b2BoundValues();\n  this.ComputeBounds(newValues.lowerValues, newValues.upperValues, aabb);\n  var oldValues = new b2BoundValues();\n\n  for (axis = 0; axis < 2; ++axis) {\n    bound = this.m_bounds[axis][proxy.lowerBounds[axis]];\n    oldValues.lowerValues[axis] = bound.value;\n    bound = this.m_bounds[axis][proxy.upperBounds[axis]];\n    oldValues.upperValues[axis] = bound.value;\n  }\n\n  for (axis = 0; axis < 2; ++axis) {\n    var bounds = this.m_bounds[axis];\n    var lowerIndex = proxy.lowerBounds[axis];\n    var upperIndex = proxy.upperBounds[axis];\n    var lowerValue = newValues.lowerValues[axis];\n    var upperValue = newValues.upperValues[axis];\n    bound = bounds[lowerIndex];\n    var deltaLower = lowerValue - bound.value;\n    bound.value = lowerValue;\n    bound = bounds[upperIndex];\n    var deltaUpper = upperValue - bound.value;\n    bound.value = upperValue;\n\n    if (deltaLower < 0) {\n      index = lowerIndex;\n\n      while (index > 0 && lowerValue < bounds[parseInt(index - 1)].value) {\n        bound = bounds[index];\n        prevBound = bounds[parseInt(index - 1)];\n        var prevProxy = prevBound.proxy;\n        prevBound.stabbingCount++;\n\n        if (prevBound.IsUpper() == true) {\n          if (this.TestOverlapBound(newValues, prevProxy)) {\n            this.m_pairManager.AddBufferedPair(proxy, prevProxy);\n          }\n\n          as3arr = prevProxy.upperBounds;\n          as3int = as3arr[axis];\n          as3int++;\n          as3arr[axis] = as3int;\n          bound.stabbingCount++;\n        } else {\n          as3arr = prevProxy.lowerBounds;\n          as3int = as3arr[axis];\n          as3int++;\n          as3arr[axis] = as3int;\n          bound.stabbingCount--;\n        }\n\n        as3arr = proxy.lowerBounds;\n        as3int = as3arr[axis];\n        as3int--;\n        as3arr[axis] = as3int;\n        bound.Swap(prevBound);\n        --index;\n      }\n    }\n\n    if (deltaUpper > 0) {\n      index = upperIndex;\n\n      while (index < boundCount - 1 && bounds[parseInt(index + 1)].value <= upperValue) {\n        bound = bounds[index];\n        nextBound = bounds[parseInt(index + 1)];\n        nextProxy = nextBound.proxy;\n        nextBound.stabbingCount++;\n\n        if (nextBound.IsLower() == true) {\n          if (this.TestOverlapBound(newValues, nextProxy)) {\n            this.m_pairManager.AddBufferedPair(proxy, nextProxy);\n          }\n\n          as3arr = nextProxy.lowerBounds;\n          as3int = as3arr[axis];\n          as3int--;\n          as3arr[axis] = as3int;\n          bound.stabbingCount++;\n        } else {\n          as3arr = nextProxy.upperBounds;\n          as3int = as3arr[axis];\n          as3int--;\n          as3arr[axis] = as3int;\n          bound.stabbingCount--;\n        }\n\n        as3arr = proxy.upperBounds;\n        as3int = as3arr[axis];\n        as3int++;\n        as3arr[axis] = as3int;\n        bound.Swap(nextBound);\n        index++;\n      }\n    }\n\n    if (deltaLower > 0) {\n      index = lowerIndex;\n\n      while (index < boundCount - 1 && bounds[parseInt(index + 1)].value <= lowerValue) {\n        bound = bounds[index];\n        nextBound = bounds[parseInt(index + 1)];\n        nextProxy = nextBound.proxy;\n        nextBound.stabbingCount--;\n\n        if (nextBound.IsUpper()) {\n          if (this.TestOverlapBound(oldValues, nextProxy)) {\n            this.m_pairManager.RemoveBufferedPair(proxy, nextProxy);\n          }\n\n          as3arr = nextProxy.upperBounds;\n          as3int = as3arr[axis];\n          as3int--;\n          as3arr[axis] = as3int;\n          bound.stabbingCount--;\n        } else {\n          as3arr = nextProxy.lowerBounds;\n          as3int = as3arr[axis];\n          as3int--;\n          as3arr[axis] = as3int;\n          bound.stabbingCount++;\n        }\n\n        as3arr = proxy.lowerBounds;\n        as3int = as3arr[axis];\n        as3int++;\n        as3arr[axis] = as3int;\n        bound.Swap(nextBound);\n        index++;\n      }\n    }\n\n    if (deltaUpper < 0) {\n      index = upperIndex;\n\n      while (index > 0 && upperValue < bounds[parseInt(index - 1)].value) {\n        bound = bounds[index];\n        prevBound = bounds[parseInt(index - 1)];\n        prevProxy = prevBound.proxy;\n        prevBound.stabbingCount--;\n\n        if (prevBound.IsLower() == true) {\n          if (this.TestOverlapBound(oldValues, prevProxy)) {\n            this.m_pairManager.RemoveBufferedPair(proxy, prevProxy);\n          }\n\n          as3arr = prevProxy.lowerBounds;\n          as3int = as3arr[axis];\n          as3int++;\n          as3arr[axis] = as3int;\n          bound.stabbingCount--;\n        } else {\n          as3arr = prevProxy.upperBounds;\n          as3int = as3arr[axis];\n          as3int++;\n          as3arr[axis] = as3int;\n          bound.stabbingCount++;\n        }\n\n        as3arr = proxy.upperBounds;\n        as3int = as3arr[axis];\n        as3int--;\n        as3arr[axis] = as3int;\n        bound.Swap(prevBound);\n        index--;\n      }\n    }\n  }\n};\n\nb2BroadPhase.prototype.UpdatePairs = function (callback) {\n  this.m_pairManager.Commit(callback);\n};\n\nb2BroadPhase.prototype.TestOverlap = function (proxyA, proxyB) {\n  var proxyA_ = proxyA;\n  var proxyB_ = proxyB;\n\n  if (proxyA_.lowerBounds[0] > proxyB_.upperBounds[0]) {\n    return false;\n  }\n\n  if (proxyB_.lowerBounds[0] > proxyA_.upperBounds[0]) {\n    return false;\n  }\n\n  if (proxyA_.lowerBounds[1] > proxyB_.upperBounds[1]) {\n    return false;\n  }\n\n  if (proxyB_.lowerBounds[1] > proxyA_.upperBounds[1]) {\n    return false;\n  }\n\n  return true;\n};\n\nb2BroadPhase.prototype.GetUserData = function (proxy) {\n  return proxy.userData;\n};\n\nb2BroadPhase.prototype.GetFatAABB = function (proxy_) {\n  var aabb = new b2AABB();\n  var proxy = proxy_;\n  aabb.lowerBound.x = this.m_worldAABB.lowerBound.x + this.m_bounds[0][proxy.lowerBounds[0]].value / this.m_quantizationFactor.x;\n  aabb.lowerBound.y = this.m_worldAABB.lowerBound.y + this.m_bounds[1][proxy.lowerBounds[1]].value / this.m_quantizationFactor.y;\n  aabb.upperBound.x = this.m_worldAABB.lowerBound.x + this.m_bounds[0][proxy.upperBounds[0]].value / this.m_quantizationFactor.x;\n  aabb.upperBound.y = this.m_worldAABB.lowerBound.y + this.m_bounds[1][proxy.upperBounds[1]].value / this.m_quantizationFactor.y;\n  return aabb;\n};\n\nb2BroadPhase.prototype.GetProxyCount = function () {\n  return this.m_proxyCount;\n};\n\nb2BroadPhase.prototype.Query = function (callback, aabb) {\n  var lowerValues = new Array();\n  var upperValues = new Array();\n  this.ComputeBounds(lowerValues, upperValues, aabb);\n  var lowerIndex = 0;\n  var upperIndex = 0;\n  var lowerIndexOut = new Array();\n  lowerIndexOut.push(lowerIndex);\n  var upperIndexOut = new Array();\n  upperIndexOut.push(upperIndex);\n  this.QueryAxis(lowerIndexOut, upperIndexOut, lowerValues[0], upperValues[0], this.m_bounds[0], 2 * this.m_proxyCount, 0);\n  this.QueryAxis(lowerIndexOut, upperIndexOut, lowerValues[1], upperValues[1], this.m_bounds[1], 2 * this.m_proxyCount, 1);\n\n  for (var i = 0; i < this.m_queryResultCount; ++i) {\n    var proxy = this.m_queryResults[i];\n\n    if (!callback(proxy)) {\n      break;\n    }\n  }\n\n  this.m_queryResultCount = 0;\n  this.IncrementTimeStamp();\n};\n\nb2BroadPhase.prototype.Validate = function () {\n  var pair;\n  var proxy1;\n  var proxy2;\n  var overlap;\n\n  for (var axis = 0; axis < 2; ++axis) {\n    var bounds = this.m_bounds[axis];\n    var boundCount = 2 * this.m_proxyCount;\n    var stabbingCount = 0;\n\n    for (var i = 0; i < boundCount; ++i) {\n      var bound = bounds[i];\n\n      if (bound.IsLower() == true) {\n        stabbingCount++;\n      } else {\n        stabbingCount--;\n      }\n    }\n  }\n};\n\nb2BroadPhase.prototype.Rebalance = function (iterations) {};\n\nb2BroadPhase.prototype.RayCast = function (callback, input) {\n  var subInput = new b2RayCastInput();\n  subInput.p1.SetV(input.p1);\n  subInput.p2.SetV(input.p2);\n  subInput.maxFraction = input.maxFraction;\n  var dx = (input.p2.x - input.p1.x) * this.m_quantizationFactor.x;\n  var dy = (input.p2.y - input.p1.y) * this.m_quantizationFactor.y;\n  var sx = dx < -Number.MIN_VALUE ? -1 : dx > Number.MIN_VALUE ? 1 : 0;\n  var sy = dy < -Number.MIN_VALUE ? -1 : dy > Number.MIN_VALUE ? 1 : 0;\n  var p1x = this.m_quantizationFactor.x * (input.p1.x - this.m_worldAABB.lowerBound.x);\n  var p1y = this.m_quantizationFactor.y * (input.p1.y - this.m_worldAABB.lowerBound.y);\n  var startValues = new Array();\n  var startValues2 = new Array();\n  startValues[0] = parseInt(p1x) & b2Settings.USHRT_MAX - 1;\n  startValues[1] = parseInt(p1y) & b2Settings.USHRT_MAX - 1;\n  startValues2[0] = startValues[0] + 1;\n  startValues2[1] = startValues[1] + 1;\n  var startIndices = new Array();\n  var xIndex = 0;\n  var yIndex = 0;\n  var proxy;\n  var lowerIndex = 0;\n  var upperIndex = 0;\n  var lowerIndexOut = new Array();\n  lowerIndexOut.push(lowerIndex);\n  var upperIndexOut = new Array();\n  upperIndexOut.push(upperIndex);\n  this.QueryAxis(lowerIndexOut, upperIndexOut, startValues[0], startValues2[0], this.m_bounds[0], 2 * this.m_proxyCount, 0);\n\n  if (sx >= 0) {\n    xIndex = upperIndexOut[0] - 1;\n  } else {\n    xIndex = lowerIndexOut[0];\n  }\n\n  this.QueryAxis(lowerIndexOut, upperIndexOut, startValues[1], startValues2[1], this.m_bounds[1], 2 * this.m_proxyCount, 1);\n\n  if (sy >= 0) {\n    yIndex = upperIndexOut[0] - 1;\n  } else {\n    yIndex = lowerIndexOut[0];\n  }\n\n  for (var i = 0; i < this.m_queryResultCount; i++) {\n    subInput.maxFraction = callback(this.m_queryResults[i], subInput);\n  }\n\n  for (;;) {\n    var xProgress = 0;\n    var yProgress = 0;\n    xIndex += sx >= 0 ? 1 : -1;\n\n    if (xIndex < 0 || xIndex >= this.m_proxyCount * 2) {\n      break;\n    }\n\n    if (sx != 0) {\n      xProgress = (this.m_bounds[0][xIndex].value - p1x) / dx;\n    }\n\n    yIndex += sy >= 0 ? 1 : -1;\n\n    if (yIndex < 0 || yIndex >= this.m_proxyCount * 2) {\n      break;\n    }\n\n    if (sy != 0) {\n      yProgress = (this.m_bounds[1][yIndex].value - p1y) / dy;\n    }\n\n    for (;;) {\n      if (sy == 0 || sx != 0 && xProgress < yProgress) {\n        if (xProgress > subInput.maxFraction) {\n          break;\n        }\n\n        if (sx > 0 ? this.m_bounds[0][xIndex].IsLower() : this.m_bounds[0][xIndex].IsUpper()) {\n          proxy = this.m_bounds[0][xIndex].proxy;\n\n          if (sy >= 0) {\n            if (proxy.lowerBounds[1] <= yIndex - 1 && proxy.upperBounds[1] >= yIndex) {\n              subInput.maxFraction = callback(proxy, subInput);\n            }\n          } else {\n            if (proxy.lowerBounds[1] <= yIndex && proxy.upperBounds[1] >= yIndex + 1) {\n              subInput.maxFraction = callback(proxy, subInput);\n            }\n          }\n        }\n\n        if (subInput.maxFraction == 0) {\n          break;\n        }\n\n        if (sx > 0) {\n          xIndex++;\n\n          if (xIndex == this.m_proxyCount * 2) {\n            break;\n          }\n        } else {\n          xIndex--;\n\n          if (xIndex < 0) {\n            break;\n          }\n        }\n\n        xProgress = (this.m_bounds[0][xIndex].value - p1x) / dx;\n      } else {\n        if (yProgress > subInput.maxFraction) {\n          break;\n        }\n\n        if (sy > 0 ? this.m_bounds[1][yIndex].IsLower() : this.m_bounds[1][yIndex].IsUpper()) {\n          proxy = this.m_bounds[1][yIndex].proxy;\n\n          if (sx >= 0) {\n            if (proxy.lowerBounds[0] <= xIndex - 1 && proxy.upperBounds[0] >= xIndex) {\n              subInput.maxFraction = callback(proxy, subInput);\n            }\n          } else {\n            if (proxy.lowerBounds[0] <= xIndex && proxy.upperBounds[0] >= xIndex + 1) {\n              subInput.maxFraction = callback(proxy, subInput);\n            }\n          }\n        }\n\n        if (subInput.maxFraction == 0) {\n          break;\n        }\n\n        if (sy > 0) {\n          yIndex++;\n\n          if (yIndex == this.m_proxyCount * 2) {\n            break;\n          }\n        } else {\n          yIndex--;\n\n          if (yIndex < 0) {\n            break;\n          }\n        }\n\n        yProgress = (this.m_bounds[1][yIndex].value - p1y) / dy;\n      }\n    }\n\n    break;\n  }\n\n  this.m_queryResultCount = 0;\n  this.IncrementTimeStamp();\n  return;\n};\n\nb2BroadPhase.prototype.TestOverlapBound = function (b, p) {\n  for (var axis = 0; axis < 2; ++axis) {\n    var bounds = this.m_bounds[axis];\n    var bound = bounds[p.upperBounds[axis]];\n\n    if (b.lowerValues[axis] > bound.value) {\n      return false;\n    }\n\n    bound = bounds[p.lowerBounds[axis]];\n\n    if (b.upperValues[axis] < bound.value) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nb2BroadPhase.prototype.m_pairManager = new b2PairManager();\nb2BroadPhase.prototype.m_proxyPool = new Array();\nb2BroadPhase.prototype.m_freeProxy = null;\nb2BroadPhase.prototype.m_bounds = null;\nb2BroadPhase.prototype.m_querySortKeys = new Array();\nb2BroadPhase.prototype.m_queryResults = new Array();\nb2BroadPhase.prototype.m_queryResultCount = 0;\nb2BroadPhase.prototype.m_worldAABB = null;\nb2BroadPhase.prototype.m_quantizationFactor = new b2Vec2();\nb2BroadPhase.prototype.m_proxyCount = 0;\nb2BroadPhase.prototype.m_timeStamp = 0;\n\nvar b2Manifold = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Manifold.prototype.__constructor = function () {\n  this.m_points = new Array(b2Settings.b2_maxManifoldPoints);\n\n  for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {\n    this.m_points[i] = new b2ManifoldPoint();\n  }\n\n  this.m_localPlaneNormal = new b2Vec2();\n  this.m_localPoint = new b2Vec2();\n};\n\nb2Manifold.prototype.__varz = function () {};\n\nb2Manifold.e_circles = 1;\nb2Manifold.e_faceA = 2;\nb2Manifold.e_faceB = 4;\n\nb2Manifold.prototype.Reset = function () {\n  for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {\n    this.m_points[i].Reset();\n  }\n\n  this.m_localPlaneNormal.SetZero();\n  this.m_localPoint.SetZero();\n  this.m_type = 0;\n  this.m_pointCount = 0;\n};\n\nb2Manifold.prototype.Set = function (m) {\n  this.m_pointCount = m.m_pointCount;\n\n  for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {\n    this.m_points[i].Set(m.m_points[i]);\n  }\n\n  this.m_localPlaneNormal.SetV(m.m_localPlaneNormal);\n  this.m_localPoint.SetV(m.m_localPoint);\n  this.m_type = m.m_type;\n};\n\nb2Manifold.prototype.Copy = function () {\n  var copy = new b2Manifold();\n  copy.Set(this);\n  return copy;\n};\n\nb2Manifold.prototype.m_points = null;\nb2Manifold.prototype.m_localPlaneNormal = null;\nb2Manifold.prototype.m_localPoint = null;\nb2Manifold.prototype.m_type = 0;\nb2Manifold.prototype.m_pointCount = 0;\n\nvar b2CircleShape = function () {\n  b2Shape.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2CircleShape.prototype, b2Shape.prototype);\nb2CircleShape.prototype._super = b2Shape.prototype;\n\nb2CircleShape.prototype.__constructor = function (radius) {\n  this._super.__constructor.apply(this, []);\n\n  this.m_type = b2Shape.e_circleShape;\n  this.m_radius = radius;\n};\n\nb2CircleShape.prototype.__varz = function () {\n  this.m_p = new b2Vec2();\n};\n\nb2CircleShape.prototype.Copy = function () {\n  var s = new b2CircleShape();\n  s.Set(this);\n  return s;\n};\n\nb2CircleShape.prototype.Set = function (other) {\n  this._super.Set.apply(this, [other]);\n\n  if (isInstanceOf(other, b2CircleShape)) {\n    var other2 = other;\n    this.m_p.SetV(other2.m_p);\n  }\n};\n\nb2CircleShape.prototype.TestPoint = function (transform, p) {\n  var tMat = transform.R;\n  var dX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);\n  var dY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);\n  dX = p.x - dX;\n  dY = p.y - dY;\n  return dX * dX + dY * dY <= this.m_radius * this.m_radius;\n};\n\nb2CircleShape.prototype.RayCast = function (output, input, transform) {\n  var tMat = transform.R;\n  var positionX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);\n  var positionY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);\n  var sX = input.p1.x - positionX;\n  var sY = input.p1.y - positionY;\n  var b = sX * sX + sY * sY - this.m_radius * this.m_radius;\n  var rX = input.p2.x - input.p1.x;\n  var rY = input.p2.y - input.p1.y;\n  var c = sX * rX + sY * rY;\n  var rr = rX * rX + rY * rY;\n  var sigma = c * c - rr * b;\n\n  if (sigma < 0 || rr < Number.MIN_VALUE) {\n    return false;\n  }\n\n  var a = -(c + Math.sqrt(sigma));\n\n  if (0 <= a && a <= input.maxFraction * rr) {\n    a /= rr;\n    output.fraction = a;\n    output.normal.x = sX + a * rX;\n    output.normal.y = sY + a * rY;\n    output.normal.Normalize();\n    return true;\n  }\n\n  return false;\n};\n\nb2CircleShape.prototype.ComputeAABB = function (aabb, transform) {\n  var tMat = transform.R;\n  var pX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);\n  var pY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);\n  aabb.lowerBound.Set(pX - this.m_radius, pY - this.m_radius);\n  aabb.upperBound.Set(pX + this.m_radius, pY + this.m_radius);\n};\n\nb2CircleShape.prototype.ComputeMass = function (massData, density) {\n  massData.mass = density * b2Settings.b2_pi * this.m_radius * this.m_radius;\n  massData.center.SetV(this.m_p);\n  massData.I = massData.mass * (0.5 * this.m_radius * this.m_radius + (this.m_p.x * this.m_p.x + this.m_p.y * this.m_p.y));\n};\n\nb2CircleShape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {\n  var p = b2Math.MulX(xf, this.m_p);\n  var l = -(b2Math.Dot(normal, p) - offset);\n\n  if (l < -this.m_radius + Number.MIN_VALUE) {\n    return 0;\n  }\n\n  if (l > this.m_radius) {\n    c.SetV(p);\n    return Math.PI * this.m_radius * this.m_radius;\n  }\n\n  var r2 = this.m_radius * this.m_radius;\n  var l2 = l * l;\n  var area = r2 * (Math.asin(l / this.m_radius) + Math.PI / 2) + l * Math.sqrt(r2 - l2);\n  var com = -2 / 3 * Math.pow(r2 - l2, 1.5) / area;\n  c.x = p.x + normal.x * com;\n  c.y = p.y + normal.y * com;\n  return area;\n};\n\nb2CircleShape.prototype.GetLocalPosition = function () {\n  return this.m_p;\n};\n\nb2CircleShape.prototype.SetLocalPosition = function (position) {\n  this.m_p.SetV(position);\n};\n\nb2CircleShape.prototype.GetRadius = function () {\n  return this.m_radius;\n};\n\nb2CircleShape.prototype.SetRadius = function (radius) {\n  this.m_radius = radius;\n};\n\nb2CircleShape.prototype.m_p = new b2Vec2();\n\nvar b2Joint = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Joint.prototype.__constructor = function (def) {\n  b2Settings.b2Assert(def.bodyA != def.bodyB);\n  this.m_type = def.type;\n  this.m_prev = null;\n  this.m_next = null;\n  this.m_bodyA = def.bodyA;\n  this.m_bodyB = def.bodyB;\n  this.m_collideConnected = def.collideConnected;\n  this.m_islandFlag = false;\n  this.m_userData = def.userData;\n};\n\nb2Joint.prototype.__varz = function () {\n  this.m_edgeA = new b2JointEdge();\n  this.m_edgeB = new b2JointEdge();\n  this.m_localCenterA = new b2Vec2();\n  this.m_localCenterB = new b2Vec2();\n};\n\nb2Joint.Create = function (def, allocator) {\n  var joint = null;\n\n  switch (def.type) {\n    case b2Joint.e_distanceJoint:\n      joint = new b2DistanceJoint(def);\n      break;\n\n    case b2Joint.e_mouseJoint:\n      joint = new b2MouseJoint(def);\n      break;\n\n    case b2Joint.e_prismaticJoint:\n      joint = new b2PrismaticJoint(def);\n      break;\n\n    case b2Joint.e_revoluteJoint:\n      joint = new b2RevoluteJoint(def);\n      break;\n\n    case b2Joint.e_pulleyJoint:\n      joint = new b2PulleyJoint(def);\n      break;\n\n    case b2Joint.e_gearJoint:\n      joint = new b2GearJoint(def);\n      break;\n\n    case b2Joint.e_lineJoint:\n      joint = new b2LineJoint(def);\n      break;\n\n    case b2Joint.e_weldJoint:\n      joint = new b2WeldJoint(def);\n      break;\n\n    case b2Joint.e_frictionJoint:\n      joint = new b2FrictionJoint(def);\n      break;\n\n    default:\n      break;\n  }\n\n  return joint;\n};\n\nb2Joint.Destroy = function (joint, allocator) {};\n\nb2Joint.e_unknownJoint = 0;\nb2Joint.e_revoluteJoint = 1;\nb2Joint.e_prismaticJoint = 2;\nb2Joint.e_distanceJoint = 3;\nb2Joint.e_pulleyJoint = 4;\nb2Joint.e_mouseJoint = 5;\nb2Joint.e_gearJoint = 6;\nb2Joint.e_lineJoint = 7;\nb2Joint.e_weldJoint = 8;\nb2Joint.e_frictionJoint = 9;\nb2Joint.e_inactiveLimit = 0;\nb2Joint.e_atLowerLimit = 1;\nb2Joint.e_atUpperLimit = 2;\nb2Joint.e_equalLimits = 3;\n\nb2Joint.prototype.InitVelocityConstraints = function (step) {};\n\nb2Joint.prototype.SolveVelocityConstraints = function (step) {};\n\nb2Joint.prototype.FinalizeVelocityConstraints = function () {};\n\nb2Joint.prototype.SolvePositionConstraints = function (baumgarte) {\n  return false;\n};\n\nb2Joint.prototype.GetType = function () {\n  return this.m_type;\n};\n\nb2Joint.prototype.GetAnchorA = function () {\n  return null;\n};\n\nb2Joint.prototype.GetAnchorB = function () {\n  return null;\n};\n\nb2Joint.prototype.GetReactionForce = function (inv_dt) {\n  return null;\n};\n\nb2Joint.prototype.GetReactionTorque = function (inv_dt) {\n  return 0;\n};\n\nb2Joint.prototype.GetBodyA = function () {\n  return this.m_bodyA;\n};\n\nb2Joint.prototype.GetBodyB = function () {\n  return this.m_bodyB;\n};\n\nb2Joint.prototype.GetNext = function () {\n  return this.m_next;\n};\n\nb2Joint.prototype.GetUserData = function () {\n  return this.m_userData;\n};\n\nb2Joint.prototype.SetUserData = function (data) {\n  this.m_userData = data;\n};\n\nb2Joint.prototype.IsActive = function () {\n  return this.m_bodyA.IsActive() && this.m_bodyB.IsActive();\n};\n\nb2Joint.prototype.m_type = 0;\nb2Joint.prototype.m_prev = null;\nb2Joint.prototype.m_next = null;\nb2Joint.prototype.m_edgeA = new b2JointEdge();\nb2Joint.prototype.m_edgeB = new b2JointEdge();\nb2Joint.prototype.m_bodyA = null;\nb2Joint.prototype.m_bodyB = null;\nb2Joint.prototype.m_islandFlag = null;\nb2Joint.prototype.m_collideConnected = null;\nb2Joint.prototype.m_userData = null;\nb2Joint.prototype.m_localCenterA = new b2Vec2();\nb2Joint.prototype.m_localCenterB = new b2Vec2();\nb2Joint.prototype.m_invMassA = null;\nb2Joint.prototype.m_invMassB = null;\nb2Joint.prototype.m_invIA = null;\nb2Joint.prototype.m_invIB = null;\n\nvar b2LineJoint = function () {\n  b2Joint.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2LineJoint.prototype, b2Joint.prototype);\nb2LineJoint.prototype._super = b2Joint.prototype;\n\nb2LineJoint.prototype.__constructor = function (def) {\n  this._super.__constructor.apply(this, [def]);\n\n  var tMat;\n  var tX;\n  var tY;\n  this.m_localAnchor1.SetV(def.localAnchorA);\n  this.m_localAnchor2.SetV(def.localAnchorB);\n  this.m_localXAxis1.SetV(def.localAxisA);\n  this.m_localYAxis1.x = -this.m_localXAxis1.y;\n  this.m_localYAxis1.y = this.m_localXAxis1.x;\n  this.m_impulse.SetZero();\n  this.m_motorMass = 0;\n  this.m_motorImpulse = 0;\n  this.m_lowerTranslation = def.lowerTranslation;\n  this.m_upperTranslation = def.upperTranslation;\n  this.m_maxMotorForce = def.maxMotorForce;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = b2Joint.e_inactiveLimit;\n  this.m_axis.SetZero();\n  this.m_perp.SetZero();\n};\n\nb2LineJoint.prototype.__varz = function () {\n  this.m_localAnchor1 = new b2Vec2();\n  this.m_localAnchor2 = new b2Vec2();\n  this.m_localXAxis1 = new b2Vec2();\n  this.m_localYAxis1 = new b2Vec2();\n  this.m_axis = new b2Vec2();\n  this.m_perp = new b2Vec2();\n  this.m_K = new b2Mat22();\n  this.m_impulse = new b2Vec2();\n};\n\nb2LineJoint.prototype.InitVelocityConstraints = function (step) {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var tMat;\n  var tX;\n  this.m_localCenterA.SetV(bA.GetLocalCenter());\n  this.m_localCenterB.SetV(bB.GetLocalCenter());\n  var xf1 = bA.GetTransform();\n  var xf2 = bB.GetTransform();\n  tMat = bA.m_xf.R;\n  var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;\n  var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;\n  tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;\n  r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;\n  r1X = tX;\n  tMat = bB.m_xf.R;\n  var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;\n  var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;\n  tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;\n  r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;\n  r2X = tX;\n  var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;\n  var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;\n  this.m_invMassA = bA.m_invMass;\n  this.m_invMassB = bB.m_invMass;\n  this.m_invIA = bA.m_invI;\n  this.m_invIB = bB.m_invI;\n  this.m_axis.SetV(b2Math.MulMV(xf1.R, this.m_localXAxis1));\n  this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;\n  this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;\n  this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;\n  this.m_motorMass = this.m_motorMass > Number.MIN_VALUE ? 1 / this.m_motorMass : 0;\n  this.m_perp.SetV(b2Math.MulMV(xf1.R, this.m_localYAxis1));\n  this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;\n  this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;\n  var m1 = this.m_invMassA;\n  var m2 = this.m_invMassB;\n  var i1 = this.m_invIA;\n  var i2 = this.m_invIB;\n  this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;\n  this.m_K.col1.y = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;\n  this.m_K.col2.x = this.m_K.col1.y;\n  this.m_K.col2.y = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;\n\n  if (this.m_enableLimit) {\n    var jointTransition = this.m_axis.x * dX + this.m_axis.y * dY;\n\n    if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b2Settings.b2_linearSlop) {\n      this.m_limitState = b2Joint.e_equalLimits;\n    } else {\n      if (jointTransition <= this.m_lowerTranslation) {\n        if (this.m_limitState != b2Joint.e_atLowerLimit) {\n          this.m_limitState = b2Joint.e_atLowerLimit;\n          this.m_impulse.y = 0;\n        }\n      } else {\n        if (jointTransition >= this.m_upperTranslation) {\n          if (this.m_limitState != b2Joint.e_atUpperLimit) {\n            this.m_limitState = b2Joint.e_atUpperLimit;\n            this.m_impulse.y = 0;\n          }\n        } else {\n          this.m_limitState = b2Joint.e_inactiveLimit;\n          this.m_impulse.y = 0;\n        }\n      }\n    }\n  } else {\n    this.m_limitState = b2Joint.e_inactiveLimit;\n  }\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0;\n  }\n\n  if (step.warmStarting) {\n    this.m_impulse.x *= step.dtRatio;\n    this.m_impulse.y *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n    var PX = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x;\n    var PY = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y;\n    var L1 = this.m_impulse.x * this.m_s1 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a1;\n    var L2 = this.m_impulse.x * this.m_s2 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a2;\n    bA.m_linearVelocity.x -= this.m_invMassA * PX;\n    bA.m_linearVelocity.y -= this.m_invMassA * PY;\n    bA.m_angularVelocity -= this.m_invIA * L1;\n    bB.m_linearVelocity.x += this.m_invMassB * PX;\n    bB.m_linearVelocity.y += this.m_invMassB * PY;\n    bB.m_angularVelocity += this.m_invIB * L2;\n  } else {\n    this.m_impulse.SetZero();\n    this.m_motorImpulse = 0;\n  }\n};\n\nb2LineJoint.prototype.SolveVelocityConstraints = function (step) {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var v1 = bA.m_linearVelocity;\n  var w1 = bA.m_angularVelocity;\n  var v2 = bB.m_linearVelocity;\n  var w2 = bB.m_angularVelocity;\n  var PX;\n  var PY;\n  var L1;\n  var L2;\n\n  if (this.m_enableMotor && this.m_limitState != b2Joint.e_equalLimits) {\n    var Cdot = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;\n    var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorForce;\n    this.m_motorImpulse = b2Math.Clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n    PX = impulse * this.m_axis.x;\n    PY = impulse * this.m_axis.y;\n    L1 = impulse * this.m_a1;\n    L2 = impulse * this.m_a2;\n    v1.x -= this.m_invMassA * PX;\n    v1.y -= this.m_invMassA * PY;\n    w1 -= this.m_invIA * L1;\n    v2.x += this.m_invMassB * PX;\n    v2.y += this.m_invMassB * PY;\n    w2 += this.m_invIB * L2;\n  }\n\n  var Cdot1 = this.m_perp.x * (v2.x - v1.x) + this.m_perp.y * (v2.y - v1.y) + this.m_s2 * w2 - this.m_s1 * w1;\n\n  if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {\n    var Cdot2 = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;\n    var f1 = this.m_impulse.Copy();\n    var df = this.m_K.Solve(new b2Vec2(), -Cdot1, -Cdot2);\n    this.m_impulse.Add(df);\n\n    if (this.m_limitState == b2Joint.e_atLowerLimit) {\n      this.m_impulse.y = b2Math.Max(this.m_impulse.y, 0);\n    } else {\n      if (this.m_limitState == b2Joint.e_atUpperLimit) {\n        this.m_impulse.y = b2Math.Min(this.m_impulse.y, 0);\n      }\n    }\n\n    var b = -Cdot1 - (this.m_impulse.y - f1.y) * this.m_K.col2.x;\n    var f2r;\n\n    if (this.m_K.col1.x != 0) {\n      f2r = b / this.m_K.col1.x + f1.x;\n    } else {\n      f2r = f1.x;\n    }\n\n    this.m_impulse.x = f2r;\n    df.x = this.m_impulse.x - f1.x;\n    df.y = this.m_impulse.y - f1.y;\n    PX = df.x * this.m_perp.x + df.y * this.m_axis.x;\n    PY = df.x * this.m_perp.y + df.y * this.m_axis.y;\n    L1 = df.x * this.m_s1 + df.y * this.m_a1;\n    L2 = df.x * this.m_s2 + df.y * this.m_a2;\n    v1.x -= this.m_invMassA * PX;\n    v1.y -= this.m_invMassA * PY;\n    w1 -= this.m_invIA * L1;\n    v2.x += this.m_invMassB * PX;\n    v2.y += this.m_invMassB * PY;\n    w2 += this.m_invIB * L2;\n  } else {\n    var df2;\n\n    if (this.m_K.col1.x != 0) {\n      df2 = -Cdot1 / this.m_K.col1.x;\n    } else {\n      df2 = 0;\n    }\n\n    this.m_impulse.x += df2;\n    PX = df2 * this.m_perp.x;\n    PY = df2 * this.m_perp.y;\n    L1 = df2 * this.m_s1;\n    L2 = df2 * this.m_s2;\n    v1.x -= this.m_invMassA * PX;\n    v1.y -= this.m_invMassA * PY;\n    w1 -= this.m_invIA * L1;\n    v2.x += this.m_invMassB * PX;\n    v2.y += this.m_invMassB * PY;\n    w2 += this.m_invIB * L2;\n  }\n\n  bA.m_linearVelocity.SetV(v1);\n  bA.m_angularVelocity = w1;\n  bB.m_linearVelocity.SetV(v2);\n  bB.m_angularVelocity = w2;\n};\n\nb2LineJoint.prototype.SolvePositionConstraints = function (baumgarte) {\n  var limitC;\n  var oldLimitImpulse;\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var c1 = bA.m_sweep.c;\n  var a1 = bA.m_sweep.a;\n  var c2 = bB.m_sweep.c;\n  var a2 = bB.m_sweep.a;\n  var tMat;\n  var tX;\n  var m1;\n  var m2;\n  var i1;\n  var i2;\n  var linearError = 0;\n  var angularError = 0;\n  var active = false;\n  var C2 = 0;\n  var R1 = b2Mat22.FromAngle(a1);\n  var R2 = b2Mat22.FromAngle(a2);\n  tMat = R1;\n  var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;\n  var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;\n  tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;\n  r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;\n  r1X = tX;\n  tMat = R2;\n  var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;\n  var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;\n  tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;\n  r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;\n  r2X = tX;\n  var dX = c2.x + r2X - c1.x - r1X;\n  var dY = c2.y + r2Y - c1.y - r1Y;\n\n  if (this.m_enableLimit) {\n    this.m_axis = b2Math.MulMV(R1, this.m_localXAxis1);\n    this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;\n    this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;\n    var translation = this.m_axis.x * dX + this.m_axis.y * dY;\n\n    if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b2Settings.b2_linearSlop) {\n      C2 = b2Math.Clamp(translation, -b2Settings.b2_maxLinearCorrection, b2Settings.b2_maxLinearCorrection);\n      linearError = b2Math.Abs(translation);\n      active = true;\n    } else {\n      if (translation <= this.m_lowerTranslation) {\n        C2 = b2Math.Clamp(translation - this.m_lowerTranslation + b2Settings.b2_linearSlop, -b2Settings.b2_maxLinearCorrection, 0);\n        linearError = this.m_lowerTranslation - translation;\n        active = true;\n      } else {\n        if (translation >= this.m_upperTranslation) {\n          C2 = b2Math.Clamp(translation - this.m_upperTranslation + b2Settings.b2_linearSlop, 0, b2Settings.b2_maxLinearCorrection);\n          linearError = translation - this.m_upperTranslation;\n          active = true;\n        }\n      }\n    }\n  }\n\n  this.m_perp = b2Math.MulMV(R1, this.m_localYAxis1);\n  this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;\n  this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;\n  var impulse = new b2Vec2();\n  var C1 = this.m_perp.x * dX + this.m_perp.y * dY;\n  linearError = b2Math.Max(linearError, b2Math.Abs(C1));\n  angularError = 0;\n\n  if (active) {\n    m1 = this.m_invMassA;\n    m2 = this.m_invMassB;\n    i1 = this.m_invIA;\n    i2 = this.m_invIB;\n    this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;\n    this.m_K.col1.y = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;\n    this.m_K.col2.x = this.m_K.col1.y;\n    this.m_K.col2.y = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;\n    this.m_K.Solve(impulse, -C1, -C2);\n  } else {\n    m1 = this.m_invMassA;\n    m2 = this.m_invMassB;\n    i1 = this.m_invIA;\n    i2 = this.m_invIB;\n    var k11 = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;\n    var impulse1;\n\n    if (k11 != 0) {\n      impulse1 = -C1 / k11;\n    } else {\n      impulse1 = 0;\n    }\n\n    impulse.x = impulse1;\n    impulse.y = 0;\n  }\n\n  var PX = impulse.x * this.m_perp.x + impulse.y * this.m_axis.x;\n  var PY = impulse.x * this.m_perp.y + impulse.y * this.m_axis.y;\n  var L1 = impulse.x * this.m_s1 + impulse.y * this.m_a1;\n  var L2 = impulse.x * this.m_s2 + impulse.y * this.m_a2;\n  c1.x -= this.m_invMassA * PX;\n  c1.y -= this.m_invMassA * PY;\n  a1 -= this.m_invIA * L1;\n  c2.x += this.m_invMassB * PX;\n  c2.y += this.m_invMassB * PY;\n  a2 += this.m_invIB * L2;\n  bA.m_sweep.a = a1;\n  bB.m_sweep.a = a2;\n  bA.SynchronizeTransform();\n  bB.SynchronizeTransform();\n  return linearError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;\n};\n\nb2LineJoint.prototype.GetAnchorA = function () {\n  return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);\n};\n\nb2LineJoint.prototype.GetAnchorB = function () {\n  return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);\n};\n\nb2LineJoint.prototype.GetReactionForce = function (inv_dt) {\n  return new b2Vec2(inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x), inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y));\n};\n\nb2LineJoint.prototype.GetReactionTorque = function (inv_dt) {\n  return inv_dt * this.m_impulse.y;\n};\n\nb2LineJoint.prototype.GetJointTranslation = function () {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var tMat;\n  var p1 = bA.GetWorldPoint(this.m_localAnchor1);\n  var p2 = bB.GetWorldPoint(this.m_localAnchor2);\n  var dX = p2.x - p1.x;\n  var dY = p2.y - p1.y;\n  var axis = bA.GetWorldVector(this.m_localXAxis1);\n  var translation = axis.x * dX + axis.y * dY;\n  return translation;\n};\n\nb2LineJoint.prototype.GetJointSpeed = function () {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var tMat;\n  tMat = bA.m_xf.R;\n  var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n  var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n  var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;\n  r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;\n  r1X = tX;\n  tMat = bB.m_xf.R;\n  var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n  var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n  tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;\n  r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;\n  r2X = tX;\n  var p1X = bA.m_sweep.c.x + r1X;\n  var p1Y = bA.m_sweep.c.y + r1Y;\n  var p2X = bB.m_sweep.c.x + r2X;\n  var p2Y = bB.m_sweep.c.y + r2Y;\n  var dX = p2X - p1X;\n  var dY = p2Y - p1Y;\n  var axis = bA.GetWorldVector(this.m_localXAxis1);\n  var v1 = bA.m_linearVelocity;\n  var v2 = bB.m_linearVelocity;\n  var w1 = bA.m_angularVelocity;\n  var w2 = bB.m_angularVelocity;\n  var speed = dX * -w1 * axis.y + dY * w1 * axis.x + (axis.x * (v2.x + -w2 * r2Y - v1.x - -w1 * r1Y) + axis.y * (v2.y + w2 * r2X - v1.y - w1 * r1X));\n  return speed;\n};\n\nb2LineJoint.prototype.IsLimitEnabled = function () {\n  return this.m_enableLimit;\n};\n\nb2LineJoint.prototype.EnableLimit = function (flag) {\n  this.m_bodyA.SetAwake(true);\n  this.m_bodyB.SetAwake(true);\n  this.m_enableLimit = flag;\n};\n\nb2LineJoint.prototype.GetLowerLimit = function () {\n  return this.m_lowerTranslation;\n};\n\nb2LineJoint.prototype.GetUpperLimit = function () {\n  return this.m_upperTranslation;\n};\n\nb2LineJoint.prototype.SetLimits = function (lower, upper) {\n  this.m_bodyA.SetAwake(true);\n  this.m_bodyB.SetAwake(true);\n  this.m_lowerTranslation = lower;\n  this.m_upperTranslation = upper;\n};\n\nb2LineJoint.prototype.IsMotorEnabled = function () {\n  return this.m_enableMotor;\n};\n\nb2LineJoint.prototype.EnableMotor = function (flag) {\n  this.m_bodyA.SetAwake(true);\n  this.m_bodyB.SetAwake(true);\n  this.m_enableMotor = flag;\n};\n\nb2LineJoint.prototype.SetMotorSpeed = function (speed) {\n  this.m_bodyA.SetAwake(true);\n  this.m_bodyB.SetAwake(true);\n  this.m_motorSpeed = speed;\n};\n\nb2LineJoint.prototype.GetMotorSpeed = function () {\n  return this.m_motorSpeed;\n};\n\nb2LineJoint.prototype.SetMaxMotorForce = function (force) {\n  this.m_bodyA.SetAwake(true);\n  this.m_bodyB.SetAwake(true);\n  this.m_maxMotorForce = force;\n};\n\nb2LineJoint.prototype.GetMaxMotorForce = function () {\n  return this.m_maxMotorForce;\n};\n\nb2LineJoint.prototype.GetMotorForce = function () {\n  return this.m_motorImpulse;\n};\n\nb2LineJoint.prototype.m_localAnchor1 = new b2Vec2();\nb2LineJoint.prototype.m_localAnchor2 = new b2Vec2();\nb2LineJoint.prototype.m_localXAxis1 = new b2Vec2();\nb2LineJoint.prototype.m_localYAxis1 = new b2Vec2();\nb2LineJoint.prototype.m_axis = new b2Vec2();\nb2LineJoint.prototype.m_perp = new b2Vec2();\nb2LineJoint.prototype.m_s1 = null;\nb2LineJoint.prototype.m_s2 = null;\nb2LineJoint.prototype.m_a1 = null;\nb2LineJoint.prototype.m_a2 = null;\nb2LineJoint.prototype.m_K = new b2Mat22();\nb2LineJoint.prototype.m_impulse = new b2Vec2();\nb2LineJoint.prototype.m_motorMass = null;\nb2LineJoint.prototype.m_motorImpulse = null;\nb2LineJoint.prototype.m_lowerTranslation = null;\nb2LineJoint.prototype.m_upperTranslation = null;\nb2LineJoint.prototype.m_maxMotorForce = null;\nb2LineJoint.prototype.m_motorSpeed = null;\nb2LineJoint.prototype.m_enableLimit = null;\nb2LineJoint.prototype.m_enableMotor = null;\nb2LineJoint.prototype.m_limitState = 0;\n\nvar b2ContactSolver = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2ContactSolver.prototype.__constructor = function () {};\n\nb2ContactSolver.prototype.__varz = function () {\n  this.m_step = new b2TimeStep();\n  this.m_constraints = new Array();\n};\n\nb2ContactSolver.s_worldManifold = new b2WorldManifold();\nb2ContactSolver.s_psm = new b2PositionSolverManifold();\n\nb2ContactSolver.prototype.Initialize = function (step, contacts, contactCount, allocator) {\n  var contact;\n  this.m_step.Set(step);\n  this.m_allocator = allocator;\n  var i = 0;\n  var tVec;\n  var tMat;\n  this.m_constraintCount = contactCount;\n\n  while (this.m_constraints.length < this.m_constraintCount) {\n    this.m_constraints[this.m_constraints.length] = new b2ContactConstraint();\n  }\n\n  for (i = 0; i < contactCount; ++i) {\n    contact = contacts[i];\n    var fixtureA = contact.m_fixtureA;\n    var fixtureB = contact.m_fixtureB;\n    var shapeA = fixtureA.m_shape;\n    var shapeB = fixtureB.m_shape;\n    var radiusA = shapeA.m_radius;\n    var radiusB = shapeB.m_radius;\n    var bodyA = fixtureA.m_body;\n    var bodyB = fixtureB.m_body;\n    var manifold = contact.GetManifold();\n    var friction = b2Settings.b2MixFriction(fixtureA.GetFriction(), fixtureB.GetFriction());\n    var restitution = b2Settings.b2MixRestitution(fixtureA.GetRestitution(), fixtureB.GetRestitution());\n    var vAX = bodyA.m_linearVelocity.x;\n    var vAY = bodyA.m_linearVelocity.y;\n    var vBX = bodyB.m_linearVelocity.x;\n    var vBY = bodyB.m_linearVelocity.y;\n    var wA = bodyA.m_angularVelocity;\n    var wB = bodyB.m_angularVelocity;\n    b2Settings.b2Assert(manifold.m_pointCount > 0);\n    b2ContactSolver.s_worldManifold.Initialize(manifold, bodyA.m_xf, radiusA, bodyB.m_xf, radiusB);\n    var normalX = b2ContactSolver.s_worldManifold.m_normal.x;\n    var normalY = b2ContactSolver.s_worldManifold.m_normal.y;\n    var cc = this.m_constraints[i];\n    cc.bodyA = bodyA;\n    cc.bodyB = bodyB;\n    cc.manifold = manifold;\n    cc.normal.x = normalX;\n    cc.normal.y = normalY;\n    cc.pointCount = manifold.m_pointCount;\n    cc.friction = friction;\n    cc.restitution = restitution;\n    cc.localPlaneNormal.x = manifold.m_localPlaneNormal.x;\n    cc.localPlaneNormal.y = manifold.m_localPlaneNormal.y;\n    cc.localPoint.x = manifold.m_localPoint.x;\n    cc.localPoint.y = manifold.m_localPoint.y;\n    cc.radius = radiusA + radiusB;\n    cc.type = manifold.m_type;\n\n    for (var k = 0; k < cc.pointCount; ++k) {\n      var cp = manifold.m_points[k];\n      var ccp = cc.points[k];\n      ccp.normalImpulse = cp.m_normalImpulse;\n      ccp.tangentImpulse = cp.m_tangentImpulse;\n      ccp.localPoint.SetV(cp.m_localPoint);\n      var rAX = ccp.rA.x = b2ContactSolver.s_worldManifold.m_points[k].x - bodyA.m_sweep.c.x;\n      var rAY = ccp.rA.y = b2ContactSolver.s_worldManifold.m_points[k].y - bodyA.m_sweep.c.y;\n      var rBX = ccp.rB.x = b2ContactSolver.s_worldManifold.m_points[k].x - bodyB.m_sweep.c.x;\n      var rBY = ccp.rB.y = b2ContactSolver.s_worldManifold.m_points[k].y - bodyB.m_sweep.c.y;\n      var rnA = rAX * normalY - rAY * normalX;\n      var rnB = rBX * normalY - rBY * normalX;\n      rnA *= rnA;\n      rnB *= rnB;\n      var kNormal = bodyA.m_invMass + bodyB.m_invMass + bodyA.m_invI * rnA + bodyB.m_invI * rnB;\n      ccp.normalMass = 1 / kNormal;\n      var kEqualized = bodyA.m_mass * bodyA.m_invMass + bodyB.m_mass * bodyB.m_invMass;\n      kEqualized += bodyA.m_mass * bodyA.m_invI * rnA + bodyB.m_mass * bodyB.m_invI * rnB;\n      ccp.equalizedMass = 1 / kEqualized;\n      var tangentX = normalY;\n      var tangentY = -normalX;\n      var rtA = rAX * tangentY - rAY * tangentX;\n      var rtB = rBX * tangentY - rBY * tangentX;\n      rtA *= rtA;\n      rtB *= rtB;\n      var kTangent = bodyA.m_invMass + bodyB.m_invMass + bodyA.m_invI * rtA + bodyB.m_invI * rtB;\n      ccp.tangentMass = 1 / kTangent;\n      ccp.velocityBias = 0;\n      var tX = vBX + -wB * rBY - vAX - -wA * rAY;\n      var tY = vBY + wB * rBX - vAY - wA * rAX;\n      var vRel = cc.normal.x * tX + cc.normal.y * tY;\n\n      if (vRel < -b2Settings.b2_velocityThreshold) {\n        ccp.velocityBias += -cc.restitution * vRel;\n      }\n    }\n\n    if (cc.pointCount == 2) {\n      var ccp1 = cc.points[0];\n      var ccp2 = cc.points[1];\n      var invMassA = bodyA.m_invMass;\n      var invIA = bodyA.m_invI;\n      var invMassB = bodyB.m_invMass;\n      var invIB = bodyB.m_invI;\n      var rn1A = ccp1.rA.x * normalY - ccp1.rA.y * normalX;\n      var rn1B = ccp1.rB.x * normalY - ccp1.rB.y * normalX;\n      var rn2A = ccp2.rA.x * normalY - ccp2.rA.y * normalX;\n      var rn2B = ccp2.rB.x * normalY - ccp2.rB.y * normalX;\n      var k11 = invMassA + invMassB + invIA * rn1A * rn1A + invIB * rn1B * rn1B;\n      var k22 = invMassA + invMassB + invIA * rn2A * rn2A + invIB * rn2B * rn2B;\n      var k12 = invMassA + invMassB + invIA * rn1A * rn2A + invIB * rn1B * rn2B;\n      var k_maxConditionNumber = 100;\n\n      if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n        cc.K.col1.Set(k11, k12);\n        cc.K.col2.Set(k12, k22);\n        cc.K.GetInverse(cc.normalMass);\n      } else {\n        cc.pointCount = 1;\n      }\n    }\n  }\n};\n\nb2ContactSolver.prototype.InitVelocityConstraints = function (step) {\n  var tVec;\n  var tVec2;\n  var tMat;\n\n  for (var i = 0; i < this.m_constraintCount; ++i) {\n    var c = this.m_constraints[i];\n    var bodyA = c.bodyA;\n    var bodyB = c.bodyB;\n    var invMassA = bodyA.m_invMass;\n    var invIA = bodyA.m_invI;\n    var invMassB = bodyB.m_invMass;\n    var invIB = bodyB.m_invI;\n    var normalX = c.normal.x;\n    var normalY = c.normal.y;\n    var tangentX = normalY;\n    var tangentY = -normalX;\n    var tX;\n    var j = 0;\n    var tCount = 0;\n\n    if (step.warmStarting) {\n      tCount = c.pointCount;\n\n      for (j = 0; j < tCount; ++j) {\n        var ccp = c.points[j];\n        ccp.normalImpulse *= step.dtRatio;\n        ccp.tangentImpulse *= step.dtRatio;\n        var PX = ccp.normalImpulse * normalX + ccp.tangentImpulse * tangentX;\n        var PY = ccp.normalImpulse * normalY + ccp.tangentImpulse * tangentY;\n        bodyA.m_angularVelocity -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);\n        bodyA.m_linearVelocity.x -= invMassA * PX;\n        bodyA.m_linearVelocity.y -= invMassA * PY;\n        bodyB.m_angularVelocity += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);\n        bodyB.m_linearVelocity.x += invMassB * PX;\n        bodyB.m_linearVelocity.y += invMassB * PY;\n      }\n    } else {\n      tCount = c.pointCount;\n\n      for (j = 0; j < tCount; ++j) {\n        var ccp2 = c.points[j];\n        ccp2.normalImpulse = 0;\n        ccp2.tangentImpulse = 0;\n      }\n    }\n  }\n};\n\nb2ContactSolver.prototype.SolveVelocityConstraints = function () {\n  var j = 0;\n  var ccp;\n  var rAX;\n  var rAY;\n  var rBX;\n  var rBY;\n  var dvX;\n  var dvY;\n  var vn;\n  var vt;\n  var lambda;\n  var maxFriction;\n  var newImpulse;\n  var PX;\n  var PY;\n  var dX;\n  var dY;\n  var P1X;\n  var P1Y;\n  var P2X;\n  var P2Y;\n  var tMat;\n  var tVec;\n\n  for (var i = 0; i < this.m_constraintCount; ++i) {\n    var c = this.m_constraints[i];\n    var bodyA = c.bodyA;\n    var bodyB = c.bodyB;\n    var wA = bodyA.m_angularVelocity;\n    var wB = bodyB.m_angularVelocity;\n    var vA = bodyA.m_linearVelocity;\n    var vB = bodyB.m_linearVelocity;\n    var invMassA = bodyA.m_invMass;\n    var invIA = bodyA.m_invI;\n    var invMassB = bodyB.m_invMass;\n    var invIB = bodyB.m_invI;\n    var normalX = c.normal.x;\n    var normalY = c.normal.y;\n    var tangentX = normalY;\n    var tangentY = -normalX;\n    var friction = c.friction;\n    var tX;\n\n    for (j = 0; j < c.pointCount; j++) {\n      ccp = c.points[j];\n      dvX = vB.x - wB * ccp.rB.y - vA.x + wA * ccp.rA.y;\n      dvY = vB.y + wB * ccp.rB.x - vA.y - wA * ccp.rA.x;\n      vt = dvX * tangentX + dvY * tangentY;\n      lambda = ccp.tangentMass * -vt;\n      maxFriction = friction * ccp.normalImpulse;\n      newImpulse = b2Math.Clamp(ccp.tangentImpulse + lambda, -maxFriction, maxFriction);\n      lambda = newImpulse - ccp.tangentImpulse;\n      PX = lambda * tangentX;\n      PY = lambda * tangentY;\n      vA.x -= invMassA * PX;\n      vA.y -= invMassA * PY;\n      wA -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);\n      vB.x += invMassB * PX;\n      vB.y += invMassB * PY;\n      wB += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);\n      ccp.tangentImpulse = newImpulse;\n    }\n\n    var tCount = c.pointCount;\n\n    if (c.pointCount == 1) {\n      ccp = c.points[0];\n      dvX = vB.x + -wB * ccp.rB.y - vA.x - -wA * ccp.rA.y;\n      dvY = vB.y + wB * ccp.rB.x - vA.y - wA * ccp.rA.x;\n      vn = dvX * normalX + dvY * normalY;\n      lambda = -ccp.normalMass * (vn - ccp.velocityBias);\n      newImpulse = ccp.normalImpulse + lambda;\n      newImpulse = newImpulse > 0 ? newImpulse : 0;\n      lambda = newImpulse - ccp.normalImpulse;\n      PX = lambda * normalX;\n      PY = lambda * normalY;\n      vA.x -= invMassA * PX;\n      vA.y -= invMassA * PY;\n      wA -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);\n      vB.x += invMassB * PX;\n      vB.y += invMassB * PY;\n      wB += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);\n      ccp.normalImpulse = newImpulse;\n    } else {\n      var cp1 = c.points[0];\n      var cp2 = c.points[1];\n      var aX = cp1.normalImpulse;\n      var aY = cp2.normalImpulse;\n      var dv1X = vB.x - wB * cp1.rB.y - vA.x + wA * cp1.rA.y;\n      var dv1Y = vB.y + wB * cp1.rB.x - vA.y - wA * cp1.rA.x;\n      var dv2X = vB.x - wB * cp2.rB.y - vA.x + wA * cp2.rA.y;\n      var dv2Y = vB.y + wB * cp2.rB.x - vA.y - wA * cp2.rA.x;\n      var vn1 = dv1X * normalX + dv1Y * normalY;\n      var vn2 = dv2X * normalX + dv2Y * normalY;\n      var bX = vn1 - cp1.velocityBias;\n      var bY = vn2 - cp2.velocityBias;\n      tMat = c.K;\n      bX -= tMat.col1.x * aX + tMat.col2.x * aY;\n      bY -= tMat.col1.y * aX + tMat.col2.y * aY;\n      var k_errorTol = 0.0010;\n\n      for (;;) {\n        tMat = c.normalMass;\n        var xX = -(tMat.col1.x * bX + tMat.col2.x * bY);\n        var xY = -(tMat.col1.y * bX + tMat.col2.y * bY);\n\n        if (xX >= 0 && xY >= 0) {\n          dX = xX - aX;\n          dY = xY - aY;\n          P1X = dX * normalX;\n          P1Y = dX * normalY;\n          P2X = dY * normalX;\n          P2Y = dY * normalY;\n          vA.x -= invMassA * (P1X + P2X);\n          vA.y -= invMassA * (P1Y + P2Y);\n          wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);\n          vB.x += invMassB * (P1X + P2X);\n          vB.y += invMassB * (P1Y + P2Y);\n          wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);\n          cp1.normalImpulse = xX;\n          cp2.normalImpulse = xY;\n          break;\n        }\n\n        xX = -cp1.normalMass * bX;\n        xY = 0;\n        vn1 = 0;\n        vn2 = c.K.col1.y * xX + bY;\n\n        if (xX >= 0 && vn2 >= 0) {\n          dX = xX - aX;\n          dY = xY - aY;\n          P1X = dX * normalX;\n          P1Y = dX * normalY;\n          P2X = dY * normalX;\n          P2Y = dY * normalY;\n          vA.x -= invMassA * (P1X + P2X);\n          vA.y -= invMassA * (P1Y + P2Y);\n          wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);\n          vB.x += invMassB * (P1X + P2X);\n          vB.y += invMassB * (P1Y + P2Y);\n          wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);\n          cp1.normalImpulse = xX;\n          cp2.normalImpulse = xY;\n          break;\n        }\n\n        xX = 0;\n        xY = -cp2.normalMass * bY;\n        vn1 = c.K.col2.x * xY + bX;\n        vn2 = 0;\n\n        if (xY >= 0 && vn1 >= 0) {\n          dX = xX - aX;\n          dY = xY - aY;\n          P1X = dX * normalX;\n          P1Y = dX * normalY;\n          P2X = dY * normalX;\n          P2Y = dY * normalY;\n          vA.x -= invMassA * (P1X + P2X);\n          vA.y -= invMassA * (P1Y + P2Y);\n          wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);\n          vB.x += invMassB * (P1X + P2X);\n          vB.y += invMassB * (P1Y + P2Y);\n          wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);\n          cp1.normalImpulse = xX;\n          cp2.normalImpulse = xY;\n          break;\n        }\n\n        xX = 0;\n        xY = 0;\n        vn1 = bX;\n        vn2 = bY;\n\n        if (vn1 >= 0 && vn2 >= 0) {\n          dX = xX - aX;\n          dY = xY - aY;\n          P1X = dX * normalX;\n          P1Y = dX * normalY;\n          P2X = dY * normalX;\n          P2Y = dY * normalY;\n          vA.x -= invMassA * (P1X + P2X);\n          vA.y -= invMassA * (P1Y + P2Y);\n          wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);\n          vB.x += invMassB * (P1X + P2X);\n          vB.y += invMassB * (P1Y + P2Y);\n          wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);\n          cp1.normalImpulse = xX;\n          cp2.normalImpulse = xY;\n          break;\n        }\n\n        break;\n      }\n    }\n\n    bodyA.m_angularVelocity = wA;\n    bodyB.m_angularVelocity = wB;\n  }\n};\n\nb2ContactSolver.prototype.FinalizeVelocityConstraints = function () {\n  for (var i = 0; i < this.m_constraintCount; ++i) {\n    var c = this.m_constraints[i];\n    var m = c.manifold;\n\n    for (var j = 0; j < c.pointCount; ++j) {\n      var point1 = m.m_points[j];\n      var point2 = c.points[j];\n      point1.m_normalImpulse = point2.normalImpulse;\n      point1.m_tangentImpulse = point2.tangentImpulse;\n    }\n  }\n};\n\nb2ContactSolver.prototype.SolvePositionConstraints = function (baumgarte) {\n  var minSeparation = 0;\n\n  for (var i = 0; i < this.m_constraintCount; i++) {\n    var c = this.m_constraints[i];\n    var bodyA = c.bodyA;\n    var bodyB = c.bodyB;\n    var invMassA = bodyA.m_mass * bodyA.m_invMass;\n    var invIA = bodyA.m_mass * bodyA.m_invI;\n    var invMassB = bodyB.m_mass * bodyB.m_invMass;\n    var invIB = bodyB.m_mass * bodyB.m_invI;\n    b2ContactSolver.s_psm.Initialize(c);\n    var normal = b2ContactSolver.s_psm.m_normal;\n\n    for (var j = 0; j < c.pointCount; j++) {\n      var ccp = c.points[j];\n      var point = b2ContactSolver.s_psm.m_points[j];\n      var separation = b2ContactSolver.s_psm.m_separations[j];\n      var rAX = point.x - bodyA.m_sweep.c.x;\n      var rAY = point.y - bodyA.m_sweep.c.y;\n      var rBX = point.x - bodyB.m_sweep.c.x;\n      var rBY = point.y - bodyB.m_sweep.c.y;\n      minSeparation = minSeparation < separation ? minSeparation : separation;\n      var C = b2Math.Clamp(baumgarte * (separation + b2Settings.b2_linearSlop), -b2Settings.b2_maxLinearCorrection, 0);\n      var impulse = -ccp.equalizedMass * C;\n      var PX = impulse * normal.x;\n      var PY = impulse * normal.y;\n      bodyA.m_sweep.c.x -= invMassA * PX;\n      bodyA.m_sweep.c.y -= invMassA * PY;\n      bodyA.m_sweep.a -= invIA * (rAX * PY - rAY * PX);\n      bodyA.SynchronizeTransform();\n      bodyB.m_sweep.c.x += invMassB * PX;\n      bodyB.m_sweep.c.y += invMassB * PY;\n      bodyB.m_sweep.a += invIB * (rBX * PY - rBY * PX);\n      bodyB.SynchronizeTransform();\n    }\n  }\n\n  return minSeparation > -1.5 * b2Settings.b2_linearSlop;\n};\n\nb2ContactSolver.prototype.m_step = new b2TimeStep();\nb2ContactSolver.prototype.m_allocator = null;\nb2ContactSolver.prototype.m_constraints = new Array();\nb2ContactSolver.prototype.m_constraintCount = 0;\n\nvar b2Simplex = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Simplex.prototype.__constructor = function () {\n  this.m_vertices[0] = this.m_v1;\n  this.m_vertices[1] = this.m_v2;\n  this.m_vertices[2] = this.m_v3;\n};\n\nb2Simplex.prototype.__varz = function () {\n  this.m_v1 = new b2SimplexVertex();\n  this.m_v2 = new b2SimplexVertex();\n  this.m_v3 = new b2SimplexVertex();\n  this.m_vertices = new Array(3);\n};\n\nb2Simplex.prototype.ReadCache = function (cache, proxyA, transformA, proxyB, transformB) {\n  b2Settings.b2Assert(0 <= cache.count && cache.count <= 3);\n  var wALocal;\n  var wBLocal;\n  this.m_count = cache.count;\n  var vertices = this.m_vertices;\n\n  for (var i = 0; i < this.m_count; i++) {\n    var v = vertices[i];\n    v.indexA = cache.indexA[i];\n    v.indexB = cache.indexB[i];\n    wALocal = proxyA.GetVertex(v.indexA);\n    wBLocal = proxyB.GetVertex(v.indexB);\n    v.wA = b2Math.MulX(transformA, wALocal);\n    v.wB = b2Math.MulX(transformB, wBLocal);\n    v.w = b2Math.SubtractVV(v.wB, v.wA);\n    v.a = 0;\n  }\n\n  if (this.m_count > 1) {\n    var metric1 = cache.metric;\n    var metric2 = this.GetMetric();\n\n    if (metric2 < 0.5 * metric1 || 2 * metric1 < metric2 || metric2 < Number.MIN_VALUE) {\n      this.m_count = 0;\n    }\n  }\n\n  if (this.m_count == 0) {\n    v = vertices[0];\n    v.indexA = 0;\n    v.indexB = 0;\n    wALocal = proxyA.GetVertex(0);\n    wBLocal = proxyB.GetVertex(0);\n    v.wA = b2Math.MulX(transformA, wALocal);\n    v.wB = b2Math.MulX(transformB, wBLocal);\n    v.w = b2Math.SubtractVV(v.wB, v.wA);\n    this.m_count = 1;\n  }\n};\n\nb2Simplex.prototype.WriteCache = function (cache) {\n  cache.metric = this.GetMetric();\n  cache.count = parseInt(this.m_count);\n  var vertices = this.m_vertices;\n\n  for (var i = 0; i < this.m_count; i++) {\n    cache.indexA[i] = parseInt(vertices[i].indexA);\n    cache.indexB[i] = parseInt(vertices[i].indexB);\n  }\n};\n\nb2Simplex.prototype.GetSearchDirection = function () {\n  switch (this.m_count) {\n    case 1:\n      return this.m_v1.w.GetNegative();\n\n    case 2:\n      var e12 = b2Math.SubtractVV(this.m_v2.w, this.m_v1.w);\n      var sgn = b2Math.CrossVV(e12, this.m_v1.w.GetNegative());\n\n      if (sgn > 0) {\n        return b2Math.CrossFV(1, e12);\n      } else {\n        return b2Math.CrossVF(e12, 1);\n      }\n\n      ;\n\n    default:\n      b2Settings.b2Assert(false);\n      return new b2Vec2();\n  }\n};\n\nb2Simplex.prototype.GetClosestPoint = function () {\n  switch (this.m_count) {\n    case 0:\n      b2Settings.b2Assert(false);\n      return new b2Vec2();\n\n    case 1:\n      return this.m_v1.w;\n\n    case 2:\n      return new b2Vec2(this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x, this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y);\n\n    default:\n      b2Settings.b2Assert(false);\n      return new b2Vec2();\n  }\n};\n\nb2Simplex.prototype.GetWitnessPoints = function (pA, pB) {\n  switch (this.m_count) {\n    case 0:\n      b2Settings.b2Assert(false);\n      break;\n\n    case 1:\n      pA.SetV(this.m_v1.wA);\n      pB.SetV(this.m_v1.wB);\n      break;\n\n    case 2:\n      pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x;\n      pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y;\n      pB.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x;\n      pB.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y;\n      break;\n\n    case 3:\n      pB.x = pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x + this.m_v3.a * this.m_v3.wA.x;\n      pB.y = pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y + this.m_v3.a * this.m_v3.wA.y;\n      break;\n\n    default:\n      b2Settings.b2Assert(false);\n      break;\n  }\n};\n\nb2Simplex.prototype.GetMetric = function () {\n  switch (this.m_count) {\n    case 0:\n      b2Settings.b2Assert(false);\n      return 0;\n\n    case 1:\n      return 0;\n\n    case 2:\n      return b2Math.SubtractVV(this.m_v1.w, this.m_v2.w).Length();\n\n    case 3:\n      return b2Math.CrossVV(b2Math.SubtractVV(this.m_v2.w, this.m_v1.w), b2Math.SubtractVV(this.m_v3.w, this.m_v1.w));\n\n    default:\n      b2Settings.b2Assert(false);\n      return 0;\n  }\n};\n\nb2Simplex.prototype.Solve2 = function () {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var e12 = b2Math.SubtractVV(w2, w1);\n  var d12_2 = -(w1.x * e12.x + w1.y * e12.y);\n\n  if (d12_2 <= 0) {\n    this.m_v1.a = 1;\n    this.m_count = 1;\n    return;\n  }\n\n  var d12_1 = w2.x * e12.x + w2.y * e12.y;\n\n  if (d12_1 <= 0) {\n    this.m_v2.a = 1;\n    this.m_count = 1;\n    this.m_v1.Set(this.m_v2);\n    return;\n  }\n\n  var inv_d12 = 1 / (d12_1 + d12_2);\n  this.m_v1.a = d12_1 * inv_d12;\n  this.m_v2.a = d12_2 * inv_d12;\n  this.m_count = 2;\n};\n\nb2Simplex.prototype.Solve3 = function () {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var w3 = this.m_v3.w;\n  var e12 = b2Math.SubtractVV(w2, w1);\n  var w1e12 = b2Math.Dot(w1, e12);\n  var w2e12 = b2Math.Dot(w2, e12);\n  var d12_1 = w2e12;\n  var d12_2 = -w1e12;\n  var e13 = b2Math.SubtractVV(w3, w1);\n  var w1e13 = b2Math.Dot(w1, e13);\n  var w3e13 = b2Math.Dot(w3, e13);\n  var d13_1 = w3e13;\n  var d13_2 = -w1e13;\n  var e23 = b2Math.SubtractVV(w3, w2);\n  var w2e23 = b2Math.Dot(w2, e23);\n  var w3e23 = b2Math.Dot(w3, e23);\n  var d23_1 = w3e23;\n  var d23_2 = -w2e23;\n  var n123 = b2Math.CrossVV(e12, e13);\n  var d123_1 = n123 * b2Math.CrossVV(w2, w3);\n  var d123_2 = n123 * b2Math.CrossVV(w3, w1);\n  var d123_3 = n123 * b2Math.CrossVV(w1, w2);\n\n  if (d12_2 <= 0 && d13_2 <= 0) {\n    this.m_v1.a = 1;\n    this.m_count = 1;\n    return;\n  }\n\n  if (d12_1 > 0 && d12_2 > 0 && d123_3 <= 0) {\n    var inv_d12 = 1 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n    return;\n  }\n\n  if (d13_1 > 0 && d13_2 > 0 && d123_2 <= 0) {\n    var inv_d13 = 1 / (d13_1 + d13_2);\n    this.m_v1.a = d13_1 * inv_d13;\n    this.m_v3.a = d13_2 * inv_d13;\n    this.m_count = 2;\n    this.m_v2.Set(this.m_v3);\n    return;\n  }\n\n  if (d12_1 <= 0 && d23_2 <= 0) {\n    this.m_v2.a = 1;\n    this.m_count = 1;\n    this.m_v1.Set(this.m_v2);\n    return;\n  }\n\n  if (d13_1 <= 0 && d23_1 <= 0) {\n    this.m_v3.a = 1;\n    this.m_count = 1;\n    this.m_v1.Set(this.m_v3);\n    return;\n  }\n\n  if (d23_1 > 0 && d23_2 > 0 && d123_1 <= 0) {\n    var inv_d23 = 1 / (d23_1 + d23_2);\n    this.m_v2.a = d23_1 * inv_d23;\n    this.m_v3.a = d23_2 * inv_d23;\n    this.m_count = 2;\n    this.m_v1.Set(this.m_v3);\n    return;\n  }\n\n  var inv_d123 = 1 / (d123_1 + d123_2 + d123_3);\n  this.m_v1.a = d123_1 * inv_d123;\n  this.m_v2.a = d123_2 * inv_d123;\n  this.m_v3.a = d123_3 * inv_d123;\n  this.m_count = 3;\n};\n\nb2Simplex.prototype.m_v1 = new b2SimplexVertex();\nb2Simplex.prototype.m_v2 = new b2SimplexVertex();\nb2Simplex.prototype.m_v3 = new b2SimplexVertex();\nb2Simplex.prototype.m_vertices = new Array(3);\nb2Simplex.prototype.m_count = 0;\n\nvar b2WeldJoint = function () {\n  b2Joint.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2WeldJoint.prototype, b2Joint.prototype);\nb2WeldJoint.prototype._super = b2Joint.prototype;\n\nb2WeldJoint.prototype.__constructor = function (def) {\n  this._super.__constructor.apply(this, [def]);\n\n  this.m_localAnchorA.SetV(def.localAnchorA);\n  this.m_localAnchorB.SetV(def.localAnchorB);\n  this.m_referenceAngle = def.referenceAngle;\n  this.m_impulse.SetZero();\n  this.m_mass = new b2Mat33();\n};\n\nb2WeldJoint.prototype.__varz = function () {\n  this.m_localAnchorA = new b2Vec2();\n  this.m_localAnchorB = new b2Vec2();\n  this.m_impulse = new b2Vec3();\n  this.m_mass = new b2Mat33();\n};\n\nb2WeldJoint.prototype.InitVelocityConstraints = function (step) {\n  var tMat;\n  var tX;\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  tMat = bA.m_xf.R;\n  var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;\n  var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;\n  tX = tMat.col1.x * rAX + tMat.col2.x * rAY;\n  rAY = tMat.col1.y * rAX + tMat.col2.y * rAY;\n  rAX = tX;\n  tMat = bB.m_xf.R;\n  var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;\n  var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;\n  tX = tMat.col1.x * rBX + tMat.col2.x * rBY;\n  rBY = tMat.col1.y * rBX + tMat.col2.y * rBY;\n  rBX = tX;\n  var mA = bA.m_invMass;\n  var mB = bB.m_invMass;\n  var iA = bA.m_invI;\n  var iB = bB.m_invI;\n  this.m_mass.col1.x = mA + mB + rAY * rAY * iA + rBY * rBY * iB;\n  this.m_mass.col2.x = -rAY * rAX * iA - rBY * rBX * iB;\n  this.m_mass.col3.x = -rAY * iA - rBY * iB;\n  this.m_mass.col1.y = this.m_mass.col2.x;\n  this.m_mass.col2.y = mA + mB + rAX * rAX * iA + rBX * rBX * iB;\n  this.m_mass.col3.y = rAX * iA + rBX * iB;\n  this.m_mass.col1.z = this.m_mass.col3.x;\n  this.m_mass.col2.z = this.m_mass.col3.y;\n  this.m_mass.col3.z = iA + iB;\n\n  if (step.warmStarting) {\n    this.m_impulse.x *= step.dtRatio;\n    this.m_impulse.y *= step.dtRatio;\n    this.m_impulse.z *= step.dtRatio;\n    bA.m_linearVelocity.x -= mA * this.m_impulse.x;\n    bA.m_linearVelocity.y -= mA * this.m_impulse.y;\n    bA.m_angularVelocity -= iA * (rAX * this.m_impulse.y - rAY * this.m_impulse.x + this.m_impulse.z);\n    bB.m_linearVelocity.x += mB * this.m_impulse.x;\n    bB.m_linearVelocity.y += mB * this.m_impulse.y;\n    bB.m_angularVelocity += iB * (rBX * this.m_impulse.y - rBY * this.m_impulse.x + this.m_impulse.z);\n  } else {\n    this.m_impulse.SetZero();\n  }\n};\n\nb2WeldJoint.prototype.SolveVelocityConstraints = function (step) {\n  var tMat;\n  var tX;\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var vA = bA.m_linearVelocity;\n  var wA = bA.m_angularVelocity;\n  var vB = bB.m_linearVelocity;\n  var wB = bB.m_angularVelocity;\n  var mA = bA.m_invMass;\n  var mB = bB.m_invMass;\n  var iA = bA.m_invI;\n  var iB = bB.m_invI;\n  tMat = bA.m_xf.R;\n  var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;\n  var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;\n  tX = tMat.col1.x * rAX + tMat.col2.x * rAY;\n  rAY = tMat.col1.y * rAX + tMat.col2.y * rAY;\n  rAX = tX;\n  tMat = bB.m_xf.R;\n  var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;\n  var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;\n  tX = tMat.col1.x * rBX + tMat.col2.x * rBY;\n  rBY = tMat.col1.y * rBX + tMat.col2.y * rBY;\n  rBX = tX;\n  var Cdot1X = vB.x - wB * rBY - vA.x + wA * rAY;\n  var Cdot1Y = vB.y + wB * rBX - vA.y - wA * rAX;\n  var Cdot2 = wB - wA;\n  var impulse = new b2Vec3();\n  this.m_mass.Solve33(impulse, -Cdot1X, -Cdot1Y, -Cdot2);\n  this.m_impulse.Add(impulse);\n  vA.x -= mA * impulse.x;\n  vA.y -= mA * impulse.y;\n  wA -= iA * (rAX * impulse.y - rAY * impulse.x + impulse.z);\n  vB.x += mB * impulse.x;\n  vB.y += mB * impulse.y;\n  wB += iB * (rBX * impulse.y - rBY * impulse.x + impulse.z);\n  bA.m_angularVelocity = wA;\n  bB.m_angularVelocity = wB;\n};\n\nb2WeldJoint.prototype.SolvePositionConstraints = function (baumgarte) {\n  var tMat;\n  var tX;\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  tMat = bA.m_xf.R;\n  var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;\n  var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;\n  tX = tMat.col1.x * rAX + tMat.col2.x * rAY;\n  rAY = tMat.col1.y * rAX + tMat.col2.y * rAY;\n  rAX = tX;\n  tMat = bB.m_xf.R;\n  var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;\n  var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;\n  tX = tMat.col1.x * rBX + tMat.col2.x * rBY;\n  rBY = tMat.col1.y * rBX + tMat.col2.y * rBY;\n  rBX = tX;\n  var mA = bA.m_invMass;\n  var mB = bB.m_invMass;\n  var iA = bA.m_invI;\n  var iB = bB.m_invI;\n  var C1X = bB.m_sweep.c.x + rBX - bA.m_sweep.c.x - rAX;\n  var C1Y = bB.m_sweep.c.y + rBY - bA.m_sweep.c.y - rAY;\n  var C2 = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n  var k_allowedStretch = 10 * b2Settings.b2_linearSlop;\n  var positionError = Math.sqrt(C1X * C1X + C1Y * C1Y);\n  var angularError = b2Math.Abs(C2);\n\n  if (positionError > k_allowedStretch) {\n    iA *= 1;\n    iB *= 1;\n  }\n\n  this.m_mass.col1.x = mA + mB + rAY * rAY * iA + rBY * rBY * iB;\n  this.m_mass.col2.x = -rAY * rAX * iA - rBY * rBX * iB;\n  this.m_mass.col3.x = -rAY * iA - rBY * iB;\n  this.m_mass.col1.y = this.m_mass.col2.x;\n  this.m_mass.col2.y = mA + mB + rAX * rAX * iA + rBX * rBX * iB;\n  this.m_mass.col3.y = rAX * iA + rBX * iB;\n  this.m_mass.col1.z = this.m_mass.col3.x;\n  this.m_mass.col2.z = this.m_mass.col3.y;\n  this.m_mass.col3.z = iA + iB;\n  var impulse = new b2Vec3();\n  this.m_mass.Solve33(impulse, -C1X, -C1Y, -C2);\n  bA.m_sweep.c.x -= mA * impulse.x;\n  bA.m_sweep.c.y -= mA * impulse.y;\n  bA.m_sweep.a -= iA * (rAX * impulse.y - rAY * impulse.x + impulse.z);\n  bB.m_sweep.c.x += mB * impulse.x;\n  bB.m_sweep.c.y += mB * impulse.y;\n  bB.m_sweep.a += iB * (rBX * impulse.y - rBY * impulse.x + impulse.z);\n  bA.SynchronizeTransform();\n  bB.SynchronizeTransform();\n  return positionError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;\n};\n\nb2WeldJoint.prototype.GetAnchorA = function () {\n  return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);\n};\n\nb2WeldJoint.prototype.GetAnchorB = function () {\n  return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);\n};\n\nb2WeldJoint.prototype.GetReactionForce = function (inv_dt) {\n  return new b2Vec2(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);\n};\n\nb2WeldJoint.prototype.GetReactionTorque = function (inv_dt) {\n  return inv_dt * this.m_impulse.z;\n};\n\nb2WeldJoint.prototype.m_localAnchorA = new b2Vec2();\nb2WeldJoint.prototype.m_localAnchorB = new b2Vec2();\nb2WeldJoint.prototype.m_referenceAngle = null;\nb2WeldJoint.prototype.m_impulse = new b2Vec3();\nb2WeldJoint.prototype.m_mass = new b2Mat33();\n\nvar b2Math = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Math.prototype.__constructor = function () {};\n\nb2Math.prototype.__varz = function () {};\n\nb2Math.IsValid = function (x) {\n  return isFinite(x);\n};\n\nb2Math.Dot = function (a, b) {\n  return a.x * b.x + a.y * b.y;\n};\n\nb2Math.CrossVV = function (a, b) {\n  return a.x * b.y - a.y * b.x;\n};\n\nb2Math.CrossVF = function (a, s) {\n  var v = new b2Vec2(s * a.y, -s * a.x);\n  return v;\n};\n\nb2Math.CrossFV = function (s, a) {\n  var v = new b2Vec2(-s * a.y, s * a.x);\n  return v;\n};\n\nb2Math.MulMV = function (A, v) {\n  var u = new b2Vec2(A.col1.x * v.x + A.col2.x * v.y, A.col1.y * v.x + A.col2.y * v.y);\n  return u;\n};\n\nb2Math.MulTMV = function (A, v) {\n  var u = new b2Vec2(b2Math.Dot(v, A.col1), b2Math.Dot(v, A.col2));\n  return u;\n};\n\nb2Math.MulX = function (T, v) {\n  var a = b2Math.MulMV(T.R, v);\n  a.x += T.position.x;\n  a.y += T.position.y;\n  return a;\n};\n\nb2Math.MulXT = function (T, v) {\n  var a = b2Math.SubtractVV(v, T.position);\n  var tX = a.x * T.R.col1.x + a.y * T.R.col1.y;\n  a.y = a.x * T.R.col2.x + a.y * T.R.col2.y;\n  a.x = tX;\n  return a;\n};\n\nb2Math.AddVV = function (a, b) {\n  var v = new b2Vec2(a.x + b.x, a.y + b.y);\n  return v;\n};\n\nb2Math.SubtractVV = function (a, b) {\n  var v = new b2Vec2(a.x - b.x, a.y - b.y);\n  return v;\n};\n\nb2Math.Distance = function (a, b) {\n  var cX = a.x - b.x;\n  var cY = a.y - b.y;\n  return Math.sqrt(cX * cX + cY * cY);\n};\n\nb2Math.DistanceSquared = function (a, b) {\n  var cX = a.x - b.x;\n  var cY = a.y - b.y;\n  return cX * cX + cY * cY;\n};\n\nb2Math.MulFV = function (s, a) {\n  var v = new b2Vec2(s * a.x, s * a.y);\n  return v;\n};\n\nb2Math.AddMM = function (A, B) {\n  var C = b2Mat22.FromVV(b2Math.AddVV(A.col1, B.col1), b2Math.AddVV(A.col2, B.col2));\n  return C;\n};\n\nb2Math.MulMM = function (A, B) {\n  var C = b2Mat22.FromVV(b2Math.MulMV(A, B.col1), b2Math.MulMV(A, B.col2));\n  return C;\n};\n\nb2Math.MulTMM = function (A, B) {\n  var c1 = new b2Vec2(b2Math.Dot(A.col1, B.col1), b2Math.Dot(A.col2, B.col1));\n  var c2 = new b2Vec2(b2Math.Dot(A.col1, B.col2), b2Math.Dot(A.col2, B.col2));\n  var C = b2Mat22.FromVV(c1, c2);\n  return C;\n};\n\nb2Math.Abs = function (a) {\n  return a > 0 ? a : -a;\n};\n\nb2Math.AbsV = function (a) {\n  var b = new b2Vec2(b2Math.Abs(a.x), b2Math.Abs(a.y));\n  return b;\n};\n\nb2Math.AbsM = function (A) {\n  var B = b2Mat22.FromVV(b2Math.AbsV(A.col1), b2Math.AbsV(A.col2));\n  return B;\n};\n\nb2Math.Min = function (a, b) {\n  return a < b ? a : b;\n};\n\nb2Math.MinV = function (a, b) {\n  var c = new b2Vec2(b2Math.Min(a.x, b.x), b2Math.Min(a.y, b.y));\n  return c;\n};\n\nb2Math.Max = function (a, b) {\n  return a > b ? a : b;\n};\n\nb2Math.MaxV = function (a, b) {\n  var c = new b2Vec2(b2Math.Max(a.x, b.x), b2Math.Max(a.y, b.y));\n  return c;\n};\n\nb2Math.Clamp = function (a, low, high) {\n  return a < low ? low : a > high ? high : a;\n};\n\nb2Math.ClampV = function (a, low, high) {\n  return b2Math.MaxV(low, b2Math.MinV(a, high));\n};\n\nb2Math.Swap = function (a, b) {\n  var tmp = a[0];\n  a[0] = b[0];\n  b[0] = tmp;\n};\n\nb2Math.Random = function () {\n  return Math.random() * 2 - 1;\n};\n\nb2Math.RandomRange = function (lo, hi) {\n  var r = Math.random();\n  r = (hi - lo) * r + lo;\n  return r;\n};\n\nb2Math.NextPowerOfTwo = function (x) {\n  x |= x >> 1 & 2147483647;\n  x |= x >> 2 & 1073741823;\n  x |= x >> 4 & 268435455;\n  x |= x >> 8 & 16777215;\n  x |= x >> 16 & 65535;\n  return x + 1;\n};\n\nb2Math.IsPowerOfTwo = function (x) {\n  var result = x > 0 && (x & x - 1) == 0;\n  return result;\n};\n\nb2Math.b2Vec2_zero = new b2Vec2(0, 0);\nb2Math.b2Mat22_identity = b2Mat22.FromVV(new b2Vec2(1, 0), new b2Vec2(0, 1));\nb2Math.b2Transform_identity = new b2Transform(b2Math.b2Vec2_zero, b2Math.b2Mat22_identity);\n\nvar b2PulleyJoint = function () {\n  b2Joint.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2PulleyJoint.prototype, b2Joint.prototype);\nb2PulleyJoint.prototype._super = b2Joint.prototype;\n\nb2PulleyJoint.prototype.__constructor = function (def) {\n  this._super.__constructor.apply(this, [def]);\n\n  var tMat;\n  var tX;\n  var tY;\n  this.m_ground = this.m_bodyA.m_world.m_groundBody;\n  this.m_groundAnchor1.x = def.groundAnchorA.x - this.m_ground.m_xf.position.x;\n  this.m_groundAnchor1.y = def.groundAnchorA.y - this.m_ground.m_xf.position.y;\n  this.m_groundAnchor2.x = def.groundAnchorB.x - this.m_ground.m_xf.position.x;\n  this.m_groundAnchor2.y = def.groundAnchorB.y - this.m_ground.m_xf.position.y;\n  this.m_localAnchor1.SetV(def.localAnchorA);\n  this.m_localAnchor2.SetV(def.localAnchorB);\n  this.m_ratio = def.ratio;\n  this.m_constant = def.lengthA + this.m_ratio * def.lengthB;\n  this.m_maxLength1 = b2Math.Min(def.maxLengthA, this.m_constant - this.m_ratio * b2PulleyJoint.b2_minPulleyLength);\n  this.m_maxLength2 = b2Math.Min(def.maxLengthB, (this.m_constant - b2PulleyJoint.b2_minPulleyLength) / this.m_ratio);\n  this.m_impulse = 0;\n  this.m_limitImpulse1 = 0;\n  this.m_limitImpulse2 = 0;\n};\n\nb2PulleyJoint.prototype.__varz = function () {\n  this.m_groundAnchor1 = new b2Vec2();\n  this.m_groundAnchor2 = new b2Vec2();\n  this.m_localAnchor1 = new b2Vec2();\n  this.m_localAnchor2 = new b2Vec2();\n  this.m_u1 = new b2Vec2();\n  this.m_u2 = new b2Vec2();\n};\n\nb2PulleyJoint.b2_minPulleyLength = 2;\n\nb2PulleyJoint.prototype.InitVelocityConstraints = function (step) {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var tMat;\n  tMat = bA.m_xf.R;\n  var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n  var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n  var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;\n  r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;\n  r1X = tX;\n  tMat = bB.m_xf.R;\n  var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n  var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n  tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;\n  r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;\n  r2X = tX;\n  var p1X = bA.m_sweep.c.x + r1X;\n  var p1Y = bA.m_sweep.c.y + r1Y;\n  var p2X = bB.m_sweep.c.x + r2X;\n  var p2Y = bB.m_sweep.c.y + r2Y;\n  var s1X = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;\n  var s1Y = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;\n  var s2X = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;\n  var s2Y = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;\n  this.m_u1.Set(p1X - s1X, p1Y - s1Y);\n  this.m_u2.Set(p2X - s2X, p2Y - s2Y);\n  var length1 = this.m_u1.Length();\n  var length2 = this.m_u2.Length();\n\n  if (length1 > b2Settings.b2_linearSlop) {\n    this.m_u1.Multiply(1 / length1);\n  } else {\n    this.m_u1.SetZero();\n  }\n\n  if (length2 > b2Settings.b2_linearSlop) {\n    this.m_u2.Multiply(1 / length2);\n  } else {\n    this.m_u2.SetZero();\n  }\n\n  var C = this.m_constant - length1 - this.m_ratio * length2;\n\n  if (C > 0) {\n    this.m_state = b2Joint.e_inactiveLimit;\n    this.m_impulse = 0;\n  } else {\n    this.m_state = b2Joint.e_atUpperLimit;\n  }\n\n  if (length1 < this.m_maxLength1) {\n    this.m_limitState1 = b2Joint.e_inactiveLimit;\n    this.m_limitImpulse1 = 0;\n  } else {\n    this.m_limitState1 = b2Joint.e_atUpperLimit;\n  }\n\n  if (length2 < this.m_maxLength2) {\n    this.m_limitState2 = b2Joint.e_inactiveLimit;\n    this.m_limitImpulse2 = 0;\n  } else {\n    this.m_limitState2 = b2Joint.e_atUpperLimit;\n  }\n\n  var cr1u1 = r1X * this.m_u1.y - r1Y * this.m_u1.x;\n  var cr2u2 = r2X * this.m_u2.y - r2Y * this.m_u2.x;\n  this.m_limitMass1 = bA.m_invMass + bA.m_invI * cr1u1 * cr1u1;\n  this.m_limitMass2 = bB.m_invMass + bB.m_invI * cr2u2 * cr2u2;\n  this.m_pulleyMass = this.m_limitMass1 + this.m_ratio * this.m_ratio * this.m_limitMass2;\n  this.m_limitMass1 = 1 / this.m_limitMass1;\n  this.m_limitMass2 = 1 / this.m_limitMass2;\n  this.m_pulleyMass = 1 / this.m_pulleyMass;\n\n  if (step.warmStarting) {\n    this.m_impulse *= step.dtRatio;\n    this.m_limitImpulse1 *= step.dtRatio;\n    this.m_limitImpulse2 *= step.dtRatio;\n    var P1X = (-this.m_impulse - this.m_limitImpulse1) * this.m_u1.x;\n    var P1Y = (-this.m_impulse - this.m_limitImpulse1) * this.m_u1.y;\n    var P2X = (-this.m_ratio * this.m_impulse - this.m_limitImpulse2) * this.m_u2.x;\n    var P2Y = (-this.m_ratio * this.m_impulse - this.m_limitImpulse2) * this.m_u2.y;\n    bA.m_linearVelocity.x += bA.m_invMass * P1X;\n    bA.m_linearVelocity.y += bA.m_invMass * P1Y;\n    bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);\n    bB.m_linearVelocity.x += bB.m_invMass * P2X;\n    bB.m_linearVelocity.y += bB.m_invMass * P2Y;\n    bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);\n  } else {\n    this.m_impulse = 0;\n    this.m_limitImpulse1 = 0;\n    this.m_limitImpulse2 = 0;\n  }\n};\n\nb2PulleyJoint.prototype.SolveVelocityConstraints = function (step) {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var tMat;\n  tMat = bA.m_xf.R;\n  var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n  var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n  var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;\n  r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;\n  r1X = tX;\n  tMat = bB.m_xf.R;\n  var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n  var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n  tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;\n  r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;\n  r2X = tX;\n  var v1X;\n  var v1Y;\n  var v2X;\n  var v2Y;\n  var P1X;\n  var P1Y;\n  var P2X;\n  var P2Y;\n  var Cdot;\n  var impulse;\n  var oldImpulse;\n\n  if (this.m_state == b2Joint.e_atUpperLimit) {\n    v1X = bA.m_linearVelocity.x + -bA.m_angularVelocity * r1Y;\n    v1Y = bA.m_linearVelocity.y + bA.m_angularVelocity * r1X;\n    v2X = bB.m_linearVelocity.x + -bB.m_angularVelocity * r2Y;\n    v2Y = bB.m_linearVelocity.y + bB.m_angularVelocity * r2X;\n    Cdot = -(this.m_u1.x * v1X + this.m_u1.y * v1Y) - this.m_ratio * (this.m_u2.x * v2X + this.m_u2.y * v2Y);\n    impulse = this.m_pulleyMass * -Cdot;\n    oldImpulse = this.m_impulse;\n    this.m_impulse = b2Math.Max(0, this.m_impulse + impulse);\n    impulse = this.m_impulse - oldImpulse;\n    P1X = -impulse * this.m_u1.x;\n    P1Y = -impulse * this.m_u1.y;\n    P2X = -this.m_ratio * impulse * this.m_u2.x;\n    P2Y = -this.m_ratio * impulse * this.m_u2.y;\n    bA.m_linearVelocity.x += bA.m_invMass * P1X;\n    bA.m_linearVelocity.y += bA.m_invMass * P1Y;\n    bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);\n    bB.m_linearVelocity.x += bB.m_invMass * P2X;\n    bB.m_linearVelocity.y += bB.m_invMass * P2Y;\n    bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);\n  }\n\n  if (this.m_limitState1 == b2Joint.e_atUpperLimit) {\n    v1X = bA.m_linearVelocity.x + -bA.m_angularVelocity * r1Y;\n    v1Y = bA.m_linearVelocity.y + bA.m_angularVelocity * r1X;\n    Cdot = -(this.m_u1.x * v1X + this.m_u1.y * v1Y);\n    impulse = -this.m_limitMass1 * Cdot;\n    oldImpulse = this.m_limitImpulse1;\n    this.m_limitImpulse1 = b2Math.Max(0, this.m_limitImpulse1 + impulse);\n    impulse = this.m_limitImpulse1 - oldImpulse;\n    P1X = -impulse * this.m_u1.x;\n    P1Y = -impulse * this.m_u1.y;\n    bA.m_linearVelocity.x += bA.m_invMass * P1X;\n    bA.m_linearVelocity.y += bA.m_invMass * P1Y;\n    bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);\n  }\n\n  if (this.m_limitState2 == b2Joint.e_atUpperLimit) {\n    v2X = bB.m_linearVelocity.x + -bB.m_angularVelocity * r2Y;\n    v2Y = bB.m_linearVelocity.y + bB.m_angularVelocity * r2X;\n    Cdot = -(this.m_u2.x * v2X + this.m_u2.y * v2Y);\n    impulse = -this.m_limitMass2 * Cdot;\n    oldImpulse = this.m_limitImpulse2;\n    this.m_limitImpulse2 = b2Math.Max(0, this.m_limitImpulse2 + impulse);\n    impulse = this.m_limitImpulse2 - oldImpulse;\n    P2X = -impulse * this.m_u2.x;\n    P2Y = -impulse * this.m_u2.y;\n    bB.m_linearVelocity.x += bB.m_invMass * P2X;\n    bB.m_linearVelocity.y += bB.m_invMass * P2Y;\n    bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);\n  }\n};\n\nb2PulleyJoint.prototype.SolvePositionConstraints = function (baumgarte) {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var tMat;\n  var s1X = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;\n  var s1Y = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;\n  var s2X = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;\n  var s2Y = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;\n  var r1X;\n  var r1Y;\n  var r2X;\n  var r2Y;\n  var p1X;\n  var p1Y;\n  var p2X;\n  var p2Y;\n  var length1;\n  var length2;\n  var C;\n  var impulse;\n  var oldImpulse;\n  var oldLimitPositionImpulse;\n  var tX;\n  var linearError = 0;\n\n  if (this.m_state == b2Joint.e_atUpperLimit) {\n    tMat = bA.m_xf.R;\n    r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n    r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n    tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;\n    r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;\n    r1X = tX;\n    tMat = bB.m_xf.R;\n    r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n    r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n    tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;\n    r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;\n    r2X = tX;\n    p1X = bA.m_sweep.c.x + r1X;\n    p1Y = bA.m_sweep.c.y + r1Y;\n    p2X = bB.m_sweep.c.x + r2X;\n    p2Y = bB.m_sweep.c.y + r2Y;\n    this.m_u1.Set(p1X - s1X, p1Y - s1Y);\n    this.m_u2.Set(p2X - s2X, p2Y - s2Y);\n    length1 = this.m_u1.Length();\n    length2 = this.m_u2.Length();\n\n    if (length1 > b2Settings.b2_linearSlop) {\n      this.m_u1.Multiply(1 / length1);\n    } else {\n      this.m_u1.SetZero();\n    }\n\n    if (length2 > b2Settings.b2_linearSlop) {\n      this.m_u2.Multiply(1 / length2);\n    } else {\n      this.m_u2.SetZero();\n    }\n\n    C = this.m_constant - length1 - this.m_ratio * length2;\n    linearError = b2Math.Max(linearError, -C);\n    C = b2Math.Clamp(C + b2Settings.b2_linearSlop, -b2Settings.b2_maxLinearCorrection, 0);\n    impulse = -this.m_pulleyMass * C;\n    p1X = -impulse * this.m_u1.x;\n    p1Y = -impulse * this.m_u1.y;\n    p2X = -this.m_ratio * impulse * this.m_u2.x;\n    p2Y = -this.m_ratio * impulse * this.m_u2.y;\n    bA.m_sweep.c.x += bA.m_invMass * p1X;\n    bA.m_sweep.c.y += bA.m_invMass * p1Y;\n    bA.m_sweep.a += bA.m_invI * (r1X * p1Y - r1Y * p1X);\n    bB.m_sweep.c.x += bB.m_invMass * p2X;\n    bB.m_sweep.c.y += bB.m_invMass * p2Y;\n    bB.m_sweep.a += bB.m_invI * (r2X * p2Y - r2Y * p2X);\n    bA.SynchronizeTransform();\n    bB.SynchronizeTransform();\n  }\n\n  if (this.m_limitState1 == b2Joint.e_atUpperLimit) {\n    tMat = bA.m_xf.R;\n    r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n    r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n    tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;\n    r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;\n    r1X = tX;\n    p1X = bA.m_sweep.c.x + r1X;\n    p1Y = bA.m_sweep.c.y + r1Y;\n    this.m_u1.Set(p1X - s1X, p1Y - s1Y);\n    length1 = this.m_u1.Length();\n\n    if (length1 > b2Settings.b2_linearSlop) {\n      this.m_u1.x *= 1 / length1;\n      this.m_u1.y *= 1 / length1;\n    } else {\n      this.m_u1.SetZero();\n    }\n\n    C = this.m_maxLength1 - length1;\n    linearError = b2Math.Max(linearError, -C);\n    C = b2Math.Clamp(C + b2Settings.b2_linearSlop, -b2Settings.b2_maxLinearCorrection, 0);\n    impulse = -this.m_limitMass1 * C;\n    p1X = -impulse * this.m_u1.x;\n    p1Y = -impulse * this.m_u1.y;\n    bA.m_sweep.c.x += bA.m_invMass * p1X;\n    bA.m_sweep.c.y += bA.m_invMass * p1Y;\n    bA.m_sweep.a += bA.m_invI * (r1X * p1Y - r1Y * p1X);\n    bA.SynchronizeTransform();\n  }\n\n  if (this.m_limitState2 == b2Joint.e_atUpperLimit) {\n    tMat = bB.m_xf.R;\n    r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n    r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n    tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;\n    r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;\n    r2X = tX;\n    p2X = bB.m_sweep.c.x + r2X;\n    p2Y = bB.m_sweep.c.y + r2Y;\n    this.m_u2.Set(p2X - s2X, p2Y - s2Y);\n    length2 = this.m_u2.Length();\n\n    if (length2 > b2Settings.b2_linearSlop) {\n      this.m_u2.x *= 1 / length2;\n      this.m_u2.y *= 1 / length2;\n    } else {\n      this.m_u2.SetZero();\n    }\n\n    C = this.m_maxLength2 - length2;\n    linearError = b2Math.Max(linearError, -C);\n    C = b2Math.Clamp(C + b2Settings.b2_linearSlop, -b2Settings.b2_maxLinearCorrection, 0);\n    impulse = -this.m_limitMass2 * C;\n    p2X = -impulse * this.m_u2.x;\n    p2Y = -impulse * this.m_u2.y;\n    bB.m_sweep.c.x += bB.m_invMass * p2X;\n    bB.m_sweep.c.y += bB.m_invMass * p2Y;\n    bB.m_sweep.a += bB.m_invI * (r2X * p2Y - r2Y * p2X);\n    bB.SynchronizeTransform();\n  }\n\n  return linearError < b2Settings.b2_linearSlop;\n};\n\nb2PulleyJoint.prototype.GetAnchorA = function () {\n  return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);\n};\n\nb2PulleyJoint.prototype.GetAnchorB = function () {\n  return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);\n};\n\nb2PulleyJoint.prototype.GetReactionForce = function (inv_dt) {\n  return new b2Vec2(inv_dt * this.m_impulse * this.m_u2.x, inv_dt * this.m_impulse * this.m_u2.y);\n};\n\nb2PulleyJoint.prototype.GetReactionTorque = function (inv_dt) {\n  return 0;\n};\n\nb2PulleyJoint.prototype.GetGroundAnchorA = function () {\n  var a = this.m_ground.m_xf.position.Copy();\n  a.Add(this.m_groundAnchor1);\n  return a;\n};\n\nb2PulleyJoint.prototype.GetGroundAnchorB = function () {\n  var a = this.m_ground.m_xf.position.Copy();\n  a.Add(this.m_groundAnchor2);\n  return a;\n};\n\nb2PulleyJoint.prototype.GetLength1 = function () {\n  var p = this.m_bodyA.GetWorldPoint(this.m_localAnchor1);\n  var sX = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;\n  var sY = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;\n  var dX = p.x - sX;\n  var dY = p.y - sY;\n  return Math.sqrt(dX * dX + dY * dY);\n};\n\nb2PulleyJoint.prototype.GetLength2 = function () {\n  var p = this.m_bodyB.GetWorldPoint(this.m_localAnchor2);\n  var sX = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;\n  var sY = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;\n  var dX = p.x - sX;\n  var dY = p.y - sY;\n  return Math.sqrt(dX * dX + dY * dY);\n};\n\nb2PulleyJoint.prototype.GetRatio = function () {\n  return this.m_ratio;\n};\n\nb2PulleyJoint.prototype.m_ground = null;\nb2PulleyJoint.prototype.m_groundAnchor1 = new b2Vec2();\nb2PulleyJoint.prototype.m_groundAnchor2 = new b2Vec2();\nb2PulleyJoint.prototype.m_localAnchor1 = new b2Vec2();\nb2PulleyJoint.prototype.m_localAnchor2 = new b2Vec2();\nb2PulleyJoint.prototype.m_u1 = new b2Vec2();\nb2PulleyJoint.prototype.m_u2 = new b2Vec2();\nb2PulleyJoint.prototype.m_constant = null;\nb2PulleyJoint.prototype.m_ratio = null;\nb2PulleyJoint.prototype.m_maxLength1 = null;\nb2PulleyJoint.prototype.m_maxLength2 = null;\nb2PulleyJoint.prototype.m_pulleyMass = null;\nb2PulleyJoint.prototype.m_limitMass1 = null;\nb2PulleyJoint.prototype.m_limitMass2 = null;\nb2PulleyJoint.prototype.m_impulse = null;\nb2PulleyJoint.prototype.m_limitImpulse1 = null;\nb2PulleyJoint.prototype.m_limitImpulse2 = null;\nb2PulleyJoint.prototype.m_state = 0;\nb2PulleyJoint.prototype.m_limitState1 = 0;\nb2PulleyJoint.prototype.m_limitState2 = 0;\n\nvar b2PrismaticJoint = function () {\n  b2Joint.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2PrismaticJoint.prototype, b2Joint.prototype);\nb2PrismaticJoint.prototype._super = b2Joint.prototype;\n\nb2PrismaticJoint.prototype.__constructor = function (def) {\n  this._super.__constructor.apply(this, [def]);\n\n  var tMat;\n  var tX;\n  var tY;\n  this.m_localAnchor1.SetV(def.localAnchorA);\n  this.m_localAnchor2.SetV(def.localAnchorB);\n  this.m_localXAxis1.SetV(def.localAxisA);\n  this.m_localYAxis1.x = -this.m_localXAxis1.y;\n  this.m_localYAxis1.y = this.m_localXAxis1.x;\n  this.m_refAngle = def.referenceAngle;\n  this.m_impulse.SetZero();\n  this.m_motorMass = 0;\n  this.m_motorImpulse = 0;\n  this.m_lowerTranslation = def.lowerTranslation;\n  this.m_upperTranslation = def.upperTranslation;\n  this.m_maxMotorForce = def.maxMotorForce;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = b2Joint.e_inactiveLimit;\n  this.m_axis.SetZero();\n  this.m_perp.SetZero();\n};\n\nb2PrismaticJoint.prototype.__varz = function () {\n  this.m_localAnchor1 = new b2Vec2();\n  this.m_localAnchor2 = new b2Vec2();\n  this.m_localXAxis1 = new b2Vec2();\n  this.m_localYAxis1 = new b2Vec2();\n  this.m_axis = new b2Vec2();\n  this.m_perp = new b2Vec2();\n  this.m_K = new b2Mat33();\n  this.m_impulse = new b2Vec3();\n};\n\nb2PrismaticJoint.prototype.InitVelocityConstraints = function (step) {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var tMat;\n  var tX;\n  this.m_localCenterA.SetV(bA.GetLocalCenter());\n  this.m_localCenterB.SetV(bB.GetLocalCenter());\n  var xf1 = bA.GetTransform();\n  var xf2 = bB.GetTransform();\n  tMat = bA.m_xf.R;\n  var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;\n  var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;\n  tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;\n  r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;\n  r1X = tX;\n  tMat = bB.m_xf.R;\n  var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;\n  var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;\n  tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;\n  r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;\n  r2X = tX;\n  var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;\n  var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;\n  this.m_invMassA = bA.m_invMass;\n  this.m_invMassB = bB.m_invMass;\n  this.m_invIA = bA.m_invI;\n  this.m_invIB = bB.m_invI;\n  this.m_axis.SetV(b2Math.MulMV(xf1.R, this.m_localXAxis1));\n  this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;\n  this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;\n  this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;\n\n  if (this.m_motorMass > Number.MIN_VALUE) {\n    this.m_motorMass = 1 / this.m_motorMass;\n  }\n\n  this.m_perp.SetV(b2Math.MulMV(xf1.R, this.m_localYAxis1));\n  this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;\n  this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;\n  var m1 = this.m_invMassA;\n  var m2 = this.m_invMassB;\n  var i1 = this.m_invIA;\n  var i2 = this.m_invIB;\n  this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;\n  this.m_K.col1.y = i1 * this.m_s1 + i2 * this.m_s2;\n  this.m_K.col1.z = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;\n  this.m_K.col2.x = this.m_K.col1.y;\n  this.m_K.col2.y = i1 + i2;\n  this.m_K.col2.z = i1 * this.m_a1 + i2 * this.m_a2;\n  this.m_K.col3.x = this.m_K.col1.z;\n  this.m_K.col3.y = this.m_K.col2.z;\n  this.m_K.col3.z = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;\n\n  if (this.m_enableLimit) {\n    var jointTransition = this.m_axis.x * dX + this.m_axis.y * dY;\n\n    if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b2Settings.b2_linearSlop) {\n      this.m_limitState = b2Joint.e_equalLimits;\n    } else {\n      if (jointTransition <= this.m_lowerTranslation) {\n        if (this.m_limitState != b2Joint.e_atLowerLimit) {\n          this.m_limitState = b2Joint.e_atLowerLimit;\n          this.m_impulse.z = 0;\n        }\n      } else {\n        if (jointTransition >= this.m_upperTranslation) {\n          if (this.m_limitState != b2Joint.e_atUpperLimit) {\n            this.m_limitState = b2Joint.e_atUpperLimit;\n            this.m_impulse.z = 0;\n          }\n        } else {\n          this.m_limitState = b2Joint.e_inactiveLimit;\n          this.m_impulse.z = 0;\n        }\n      }\n    }\n  } else {\n    this.m_limitState = b2Joint.e_inactiveLimit;\n  }\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0;\n  }\n\n  if (step.warmStarting) {\n    this.m_impulse.x *= step.dtRatio;\n    this.m_impulse.y *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n    var PX = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x;\n    var PY = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y;\n    var L1 = this.m_impulse.x * this.m_s1 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n    var L2 = this.m_impulse.x * this.m_s2 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n    bA.m_linearVelocity.x -= this.m_invMassA * PX;\n    bA.m_linearVelocity.y -= this.m_invMassA * PY;\n    bA.m_angularVelocity -= this.m_invIA * L1;\n    bB.m_linearVelocity.x += this.m_invMassB * PX;\n    bB.m_linearVelocity.y += this.m_invMassB * PY;\n    bB.m_angularVelocity += this.m_invIB * L2;\n  } else {\n    this.m_impulse.SetZero();\n    this.m_motorImpulse = 0;\n  }\n};\n\nb2PrismaticJoint.prototype.SolveVelocityConstraints = function (step) {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var v1 = bA.m_linearVelocity;\n  var w1 = bA.m_angularVelocity;\n  var v2 = bB.m_linearVelocity;\n  var w2 = bB.m_angularVelocity;\n  var PX;\n  var PY;\n  var L1;\n  var L2;\n\n  if (this.m_enableMotor && this.m_limitState != b2Joint.e_equalLimits) {\n    var Cdot = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;\n    var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorForce;\n    this.m_motorImpulse = b2Math.Clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n    PX = impulse * this.m_axis.x;\n    PY = impulse * this.m_axis.y;\n    L1 = impulse * this.m_a1;\n    L2 = impulse * this.m_a2;\n    v1.x -= this.m_invMassA * PX;\n    v1.y -= this.m_invMassA * PY;\n    w1 -= this.m_invIA * L1;\n    v2.x += this.m_invMassB * PX;\n    v2.y += this.m_invMassB * PY;\n    w2 += this.m_invIB * L2;\n  }\n\n  var Cdot1X = this.m_perp.x * (v2.x - v1.x) + this.m_perp.y * (v2.y - v1.y) + this.m_s2 * w2 - this.m_s1 * w1;\n  var Cdot1Y = w2 - w1;\n\n  if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {\n    var Cdot2 = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;\n    var f1 = this.m_impulse.Copy();\n    var df = this.m_K.Solve33(new b2Vec3(), -Cdot1X, -Cdot1Y, -Cdot2);\n    this.m_impulse.Add(df);\n\n    if (this.m_limitState == b2Joint.e_atLowerLimit) {\n      this.m_impulse.z = b2Math.Max(this.m_impulse.z, 0);\n    } else {\n      if (this.m_limitState == b2Joint.e_atUpperLimit) {\n        this.m_impulse.z = b2Math.Min(this.m_impulse.z, 0);\n      }\n    }\n\n    var bX = -Cdot1X - (this.m_impulse.z - f1.z) * this.m_K.col3.x;\n    var bY = -Cdot1Y - (this.m_impulse.z - f1.z) * this.m_K.col3.y;\n    var f2r = this.m_K.Solve22(new b2Vec2(), bX, bY);\n    f2r.x += f1.x;\n    f2r.y += f1.y;\n    this.m_impulse.x = f2r.x;\n    this.m_impulse.y = f2r.y;\n    df.x = this.m_impulse.x - f1.x;\n    df.y = this.m_impulse.y - f1.y;\n    df.z = this.m_impulse.z - f1.z;\n    PX = df.x * this.m_perp.x + df.z * this.m_axis.x;\n    PY = df.x * this.m_perp.y + df.z * this.m_axis.y;\n    L1 = df.x * this.m_s1 + df.y + df.z * this.m_a1;\n    L2 = df.x * this.m_s2 + df.y + df.z * this.m_a2;\n    v1.x -= this.m_invMassA * PX;\n    v1.y -= this.m_invMassA * PY;\n    w1 -= this.m_invIA * L1;\n    v2.x += this.m_invMassB * PX;\n    v2.y += this.m_invMassB * PY;\n    w2 += this.m_invIB * L2;\n  } else {\n    var df2 = this.m_K.Solve22(new b2Vec2(), -Cdot1X, -Cdot1Y);\n    this.m_impulse.x += df2.x;\n    this.m_impulse.y += df2.y;\n    PX = df2.x * this.m_perp.x;\n    PY = df2.x * this.m_perp.y;\n    L1 = df2.x * this.m_s1 + df2.y;\n    L2 = df2.x * this.m_s2 + df2.y;\n    v1.x -= this.m_invMassA * PX;\n    v1.y -= this.m_invMassA * PY;\n    w1 -= this.m_invIA * L1;\n    v2.x += this.m_invMassB * PX;\n    v2.y += this.m_invMassB * PY;\n    w2 += this.m_invIB * L2;\n  }\n\n  bA.m_linearVelocity.SetV(v1);\n  bA.m_angularVelocity = w1;\n  bB.m_linearVelocity.SetV(v2);\n  bB.m_angularVelocity = w2;\n};\n\nb2PrismaticJoint.prototype.SolvePositionConstraints = function (baumgarte) {\n  var limitC;\n  var oldLimitImpulse;\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var c1 = bA.m_sweep.c;\n  var a1 = bA.m_sweep.a;\n  var c2 = bB.m_sweep.c;\n  var a2 = bB.m_sweep.a;\n  var tMat;\n  var tX;\n  var m1;\n  var m2;\n  var i1;\n  var i2;\n  var linearError = 0;\n  var angularError = 0;\n  var active = false;\n  var C2 = 0;\n  var R1 = b2Mat22.FromAngle(a1);\n  var R2 = b2Mat22.FromAngle(a2);\n  tMat = R1;\n  var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;\n  var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;\n  tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;\n  r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;\n  r1X = tX;\n  tMat = R2;\n  var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;\n  var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;\n  tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;\n  r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;\n  r2X = tX;\n  var dX = c2.x + r2X - c1.x - r1X;\n  var dY = c2.y + r2Y - c1.y - r1Y;\n\n  if (this.m_enableLimit) {\n    this.m_axis = b2Math.MulMV(R1, this.m_localXAxis1);\n    this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;\n    this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;\n    var translation = this.m_axis.x * dX + this.m_axis.y * dY;\n\n    if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b2Settings.b2_linearSlop) {\n      C2 = b2Math.Clamp(translation, -b2Settings.b2_maxLinearCorrection, b2Settings.b2_maxLinearCorrection);\n      linearError = b2Math.Abs(translation);\n      active = true;\n    } else {\n      if (translation <= this.m_lowerTranslation) {\n        C2 = b2Math.Clamp(translation - this.m_lowerTranslation + b2Settings.b2_linearSlop, -b2Settings.b2_maxLinearCorrection, 0);\n        linearError = this.m_lowerTranslation - translation;\n        active = true;\n      } else {\n        if (translation >= this.m_upperTranslation) {\n          C2 = b2Math.Clamp(translation - this.m_upperTranslation + b2Settings.b2_linearSlop, 0, b2Settings.b2_maxLinearCorrection);\n          linearError = translation - this.m_upperTranslation;\n          active = true;\n        }\n      }\n    }\n  }\n\n  this.m_perp = b2Math.MulMV(R1, this.m_localYAxis1);\n  this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;\n  this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;\n  var impulse = new b2Vec3();\n  var C1X = this.m_perp.x * dX + this.m_perp.y * dY;\n  var C1Y = a2 - a1 - this.m_refAngle;\n  linearError = b2Math.Max(linearError, b2Math.Abs(C1X));\n  angularError = b2Math.Abs(C1Y);\n\n  if (active) {\n    m1 = this.m_invMassA;\n    m2 = this.m_invMassB;\n    i1 = this.m_invIA;\n    i2 = this.m_invIB;\n    this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;\n    this.m_K.col1.y = i1 * this.m_s1 + i2 * this.m_s2;\n    this.m_K.col1.z = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;\n    this.m_K.col2.x = this.m_K.col1.y;\n    this.m_K.col2.y = i1 + i2;\n    this.m_K.col2.z = i1 * this.m_a1 + i2 * this.m_a2;\n    this.m_K.col3.x = this.m_K.col1.z;\n    this.m_K.col3.y = this.m_K.col2.z;\n    this.m_K.col3.z = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;\n    this.m_K.Solve33(impulse, -C1X, -C1Y, -C2);\n  } else {\n    m1 = this.m_invMassA;\n    m2 = this.m_invMassB;\n    i1 = this.m_invIA;\n    i2 = this.m_invIB;\n    var k11 = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;\n    var k12 = i1 * this.m_s1 + i2 * this.m_s2;\n    var k22 = i1 + i2;\n    this.m_K.col1.Set(k11, k12, 0);\n    this.m_K.col2.Set(k12, k22, 0);\n    var impulse1 = this.m_K.Solve22(new b2Vec2(), -C1X, -C1Y);\n    impulse.x = impulse1.x;\n    impulse.y = impulse1.y;\n    impulse.z = 0;\n  }\n\n  var PX = impulse.x * this.m_perp.x + impulse.z * this.m_axis.x;\n  var PY = impulse.x * this.m_perp.y + impulse.z * this.m_axis.y;\n  var L1 = impulse.x * this.m_s1 + impulse.y + impulse.z * this.m_a1;\n  var L2 = impulse.x * this.m_s2 + impulse.y + impulse.z * this.m_a2;\n  c1.x -= this.m_invMassA * PX;\n  c1.y -= this.m_invMassA * PY;\n  a1 -= this.m_invIA * L1;\n  c2.x += this.m_invMassB * PX;\n  c2.y += this.m_invMassB * PY;\n  a2 += this.m_invIB * L2;\n  bA.m_sweep.a = a1;\n  bB.m_sweep.a = a2;\n  bA.SynchronizeTransform();\n  bB.SynchronizeTransform();\n  return linearError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;\n};\n\nb2PrismaticJoint.prototype.GetAnchorA = function () {\n  return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);\n};\n\nb2PrismaticJoint.prototype.GetAnchorB = function () {\n  return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);\n};\n\nb2PrismaticJoint.prototype.GetReactionForce = function (inv_dt) {\n  return new b2Vec2(inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x), inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y));\n};\n\nb2PrismaticJoint.prototype.GetReactionTorque = function (inv_dt) {\n  return inv_dt * this.m_impulse.y;\n};\n\nb2PrismaticJoint.prototype.GetJointTranslation = function () {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var tMat;\n  var p1 = bA.GetWorldPoint(this.m_localAnchor1);\n  var p2 = bB.GetWorldPoint(this.m_localAnchor2);\n  var dX = p2.x - p1.x;\n  var dY = p2.y - p1.y;\n  var axis = bA.GetWorldVector(this.m_localXAxis1);\n  var translation = axis.x * dX + axis.y * dY;\n  return translation;\n};\n\nb2PrismaticJoint.prototype.GetJointSpeed = function () {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var tMat;\n  tMat = bA.m_xf.R;\n  var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n  var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n  var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;\n  r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;\n  r1X = tX;\n  tMat = bB.m_xf.R;\n  var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n  var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n  tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;\n  r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;\n  r2X = tX;\n  var p1X = bA.m_sweep.c.x + r1X;\n  var p1Y = bA.m_sweep.c.y + r1Y;\n  var p2X = bB.m_sweep.c.x + r2X;\n  var p2Y = bB.m_sweep.c.y + r2Y;\n  var dX = p2X - p1X;\n  var dY = p2Y - p1Y;\n  var axis = bA.GetWorldVector(this.m_localXAxis1);\n  var v1 = bA.m_linearVelocity;\n  var v2 = bB.m_linearVelocity;\n  var w1 = bA.m_angularVelocity;\n  var w2 = bB.m_angularVelocity;\n  var speed = dX * -w1 * axis.y + dY * w1 * axis.x + (axis.x * (v2.x + -w2 * r2Y - v1.x - -w1 * r1Y) + axis.y * (v2.y + w2 * r2X - v1.y - w1 * r1X));\n  return speed;\n};\n\nb2PrismaticJoint.prototype.IsLimitEnabled = function () {\n  return this.m_enableLimit;\n};\n\nb2PrismaticJoint.prototype.EnableLimit = function (flag) {\n  this.m_bodyA.SetAwake(true);\n  this.m_bodyB.SetAwake(true);\n  this.m_enableLimit = flag;\n};\n\nb2PrismaticJoint.prototype.GetLowerLimit = function () {\n  return this.m_lowerTranslation;\n};\n\nb2PrismaticJoint.prototype.GetUpperLimit = function () {\n  return this.m_upperTranslation;\n};\n\nb2PrismaticJoint.prototype.SetLimits = function (lower, upper) {\n  this.m_bodyA.SetAwake(true);\n  this.m_bodyB.SetAwake(true);\n  this.m_lowerTranslation = lower;\n  this.m_upperTranslation = upper;\n};\n\nb2PrismaticJoint.prototype.IsMotorEnabled = function () {\n  return this.m_enableMotor;\n};\n\nb2PrismaticJoint.prototype.EnableMotor = function (flag) {\n  this.m_bodyA.SetAwake(true);\n  this.m_bodyB.SetAwake(true);\n  this.m_enableMotor = flag;\n};\n\nb2PrismaticJoint.prototype.SetMotorSpeed = function (speed) {\n  this.m_bodyA.SetAwake(true);\n  this.m_bodyB.SetAwake(true);\n  this.m_motorSpeed = speed;\n};\n\nb2PrismaticJoint.prototype.GetMotorSpeed = function () {\n  return this.m_motorSpeed;\n};\n\nb2PrismaticJoint.prototype.SetMaxMotorForce = function (force) {\n  this.m_bodyA.SetAwake(true);\n  this.m_bodyB.SetAwake(true);\n  this.m_maxMotorForce = force;\n};\n\nb2PrismaticJoint.prototype.GetMotorForce = function () {\n  return this.m_motorImpulse;\n};\n\nb2PrismaticJoint.prototype.m_localAnchor1 = new b2Vec2();\nb2PrismaticJoint.prototype.m_localAnchor2 = new b2Vec2();\nb2PrismaticJoint.prototype.m_localXAxis1 = new b2Vec2();\nb2PrismaticJoint.prototype.m_localYAxis1 = new b2Vec2();\nb2PrismaticJoint.prototype.m_refAngle = null;\nb2PrismaticJoint.prototype.m_axis = new b2Vec2();\nb2PrismaticJoint.prototype.m_perp = new b2Vec2();\nb2PrismaticJoint.prototype.m_s1 = null;\nb2PrismaticJoint.prototype.m_s2 = null;\nb2PrismaticJoint.prototype.m_a1 = null;\nb2PrismaticJoint.prototype.m_a2 = null;\nb2PrismaticJoint.prototype.m_K = new b2Mat33();\nb2PrismaticJoint.prototype.m_impulse = new b2Vec3();\nb2PrismaticJoint.prototype.m_motorMass = null;\nb2PrismaticJoint.prototype.m_motorImpulse = null;\nb2PrismaticJoint.prototype.m_lowerTranslation = null;\nb2PrismaticJoint.prototype.m_upperTranslation = null;\nb2PrismaticJoint.prototype.m_maxMotorForce = null;\nb2PrismaticJoint.prototype.m_motorSpeed = null;\nb2PrismaticJoint.prototype.m_enableLimit = null;\nb2PrismaticJoint.prototype.m_enableMotor = null;\nb2PrismaticJoint.prototype.m_limitState = 0;\n\nvar b2RevoluteJoint = function () {\n  b2Joint.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2RevoluteJoint.prototype, b2Joint.prototype);\nb2RevoluteJoint.prototype._super = b2Joint.prototype;\n\nb2RevoluteJoint.prototype.__constructor = function (def) {\n  this._super.__constructor.apply(this, [def]);\n\n  this.m_localAnchor1.SetV(def.localAnchorA);\n  this.m_localAnchor2.SetV(def.localAnchorB);\n  this.m_referenceAngle = def.referenceAngle;\n  this.m_impulse.SetZero();\n  this.m_motorImpulse = 0;\n  this.m_lowerAngle = def.lowerAngle;\n  this.m_upperAngle = def.upperAngle;\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = b2Joint.e_inactiveLimit;\n};\n\nb2RevoluteJoint.prototype.__varz = function () {\n  this.K = new b2Mat22();\n  this.K1 = new b2Mat22();\n  this.K2 = new b2Mat22();\n  this.K3 = new b2Mat22();\n  this.impulse3 = new b2Vec3();\n  this.impulse2 = new b2Vec2();\n  this.reduced = new b2Vec2();\n  this.m_localAnchor1 = new b2Vec2();\n  this.m_localAnchor2 = new b2Vec2();\n  this.m_impulse = new b2Vec3();\n  this.m_mass = new b2Mat33();\n};\n\nb2RevoluteJoint.tImpulse = new b2Vec2();\n\nb2RevoluteJoint.prototype.InitVelocityConstraints = function (step) {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var tMat;\n  var tX;\n\n  if (this.m_enableMotor || this.m_enableLimit) {}\n\n  tMat = bA.m_xf.R;\n  var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n  var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n  tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;\n  r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;\n  r1X = tX;\n  tMat = bB.m_xf.R;\n  var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n  var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n  tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;\n  r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;\n  r2X = tX;\n  var m1 = bA.m_invMass;\n  var m2 = bB.m_invMass;\n  var i1 = bA.m_invI;\n  var i2 = bB.m_invI;\n  this.m_mass.col1.x = m1 + m2 + r1Y * r1Y * i1 + r2Y * r2Y * i2;\n  this.m_mass.col2.x = -r1Y * r1X * i1 - r2Y * r2X * i2;\n  this.m_mass.col3.x = -r1Y * i1 - r2Y * i2;\n  this.m_mass.col1.y = this.m_mass.col2.x;\n  this.m_mass.col2.y = m1 + m2 + r1X * r1X * i1 + r2X * r2X * i2;\n  this.m_mass.col3.y = r1X * i1 + r2X * i2;\n  this.m_mass.col1.z = this.m_mass.col3.x;\n  this.m_mass.col2.z = this.m_mass.col3.y;\n  this.m_mass.col3.z = i1 + i2;\n  this.m_motorMass = 1 / (i1 + i2);\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0;\n  }\n\n  if (this.m_enableLimit) {\n    var jointAngle = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n\n    if (b2Math.Abs(this.m_upperAngle - this.m_lowerAngle) < 2 * b2Settings.b2_angularSlop) {\n      this.m_limitState = b2Joint.e_equalLimits;\n    } else {\n      if (jointAngle <= this.m_lowerAngle) {\n        if (this.m_limitState != b2Joint.e_atLowerLimit) {\n          this.m_impulse.z = 0;\n        }\n\n        this.m_limitState = b2Joint.e_atLowerLimit;\n      } else {\n        if (jointAngle >= this.m_upperAngle) {\n          if (this.m_limitState != b2Joint.e_atUpperLimit) {\n            this.m_impulse.z = 0;\n          }\n\n          this.m_limitState = b2Joint.e_atUpperLimit;\n        } else {\n          this.m_limitState = b2Joint.e_inactiveLimit;\n          this.m_impulse.z = 0;\n        }\n      }\n    }\n  } else {\n    this.m_limitState = b2Joint.e_inactiveLimit;\n  }\n\n  if (step.warmStarting) {\n    this.m_impulse.x *= step.dtRatio;\n    this.m_impulse.y *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n    var PX = this.m_impulse.x;\n    var PY = this.m_impulse.y;\n    bA.m_linearVelocity.x -= m1 * PX;\n    bA.m_linearVelocity.y -= m1 * PY;\n    bA.m_angularVelocity -= i1 * (r1X * PY - r1Y * PX + this.m_motorImpulse + this.m_impulse.z);\n    bB.m_linearVelocity.x += m2 * PX;\n    bB.m_linearVelocity.y += m2 * PY;\n    bB.m_angularVelocity += i2 * (r2X * PY - r2Y * PX + this.m_motorImpulse + this.m_impulse.z);\n  } else {\n    this.m_impulse.SetZero();\n    this.m_motorImpulse = 0;\n  }\n};\n\nb2RevoluteJoint.prototype.SolveVelocityConstraints = function (step) {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var tMat;\n  var tX;\n  var newImpulse;\n  var r1X;\n  var r1Y;\n  var r2X;\n  var r2Y;\n  var v1 = bA.m_linearVelocity;\n  var w1 = bA.m_angularVelocity;\n  var v2 = bB.m_linearVelocity;\n  var w2 = bB.m_angularVelocity;\n  var m1 = bA.m_invMass;\n  var m2 = bB.m_invMass;\n  var i1 = bA.m_invI;\n  var i2 = bB.m_invI;\n\n  if (this.m_enableMotor && this.m_limitState != b2Joint.e_equalLimits) {\n    var Cdot = w2 - w1 - this.m_motorSpeed;\n    var impulse = this.m_motorMass * -Cdot;\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorTorque;\n    this.m_motorImpulse = b2Math.Clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n    w1 -= i1 * impulse;\n    w2 += i2 * impulse;\n  }\n\n  if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {\n    tMat = bA.m_xf.R;\n    r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n    r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n    tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;\n    r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;\n    r1X = tX;\n    tMat = bB.m_xf.R;\n    r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n    r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n    tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;\n    r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;\n    r2X = tX;\n    var Cdot1X = v2.x + -w2 * r2Y - v1.x - -w1 * r1Y;\n    var Cdot1Y = v2.y + w2 * r2X - v1.y - w1 * r1X;\n    var Cdot2 = w2 - w1;\n    this.m_mass.Solve33(this.impulse3, -Cdot1X, -Cdot1Y, -Cdot2);\n\n    if (this.m_limitState == b2Joint.e_equalLimits) {\n      this.m_impulse.Add(this.impulse3);\n    } else {\n      if (this.m_limitState == b2Joint.e_atLowerLimit) {\n        newImpulse = this.m_impulse.z + this.impulse3.z;\n\n        if (newImpulse < 0) {\n          this.m_mass.Solve22(this.reduced, -Cdot1X, -Cdot1Y);\n          this.impulse3.x = this.reduced.x;\n          this.impulse3.y = this.reduced.y;\n          this.impulse3.z = -this.m_impulse.z;\n          this.m_impulse.x += this.reduced.x;\n          this.m_impulse.y += this.reduced.y;\n          this.m_impulse.z = 0;\n        }\n      } else {\n        if (this.m_limitState == b2Joint.e_atUpperLimit) {\n          newImpulse = this.m_impulse.z + this.impulse3.z;\n\n          if (newImpulse > 0) {\n            this.m_mass.Solve22(this.reduced, -Cdot1X, -Cdot1Y);\n            this.impulse3.x = this.reduced.x;\n            this.impulse3.y = this.reduced.y;\n            this.impulse3.z = -this.m_impulse.z;\n            this.m_impulse.x += this.reduced.x;\n            this.m_impulse.y += this.reduced.y;\n            this.m_impulse.z = 0;\n          }\n        }\n      }\n    }\n\n    v1.x -= m1 * this.impulse3.x;\n    v1.y -= m1 * this.impulse3.y;\n    w1 -= i1 * (r1X * this.impulse3.y - r1Y * this.impulse3.x + this.impulse3.z);\n    v2.x += m2 * this.impulse3.x;\n    v2.y += m2 * this.impulse3.y;\n    w2 += i2 * (r2X * this.impulse3.y - r2Y * this.impulse3.x + this.impulse3.z);\n  } else {\n    tMat = bA.m_xf.R;\n    r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n    r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n    tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;\n    r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;\n    r1X = tX;\n    tMat = bB.m_xf.R;\n    r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n    r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n    tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;\n    r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;\n    r2X = tX;\n    var CdotX = v2.x + -w2 * r2Y - v1.x - -w1 * r1Y;\n    var CdotY = v2.y + w2 * r2X - v1.y - w1 * r1X;\n    this.m_mass.Solve22(this.impulse2, -CdotX, -CdotY);\n    this.m_impulse.x += this.impulse2.x;\n    this.m_impulse.y += this.impulse2.y;\n    v1.x -= m1 * this.impulse2.x;\n    v1.y -= m1 * this.impulse2.y;\n    w1 -= i1 * (r1X * this.impulse2.y - r1Y * this.impulse2.x);\n    v2.x += m2 * this.impulse2.x;\n    v2.y += m2 * this.impulse2.y;\n    w2 += i2 * (r2X * this.impulse2.y - r2Y * this.impulse2.x);\n  }\n\n  bA.m_linearVelocity.SetV(v1);\n  bA.m_angularVelocity = w1;\n  bB.m_linearVelocity.SetV(v2);\n  bB.m_angularVelocity = w2;\n};\n\nb2RevoluteJoint.prototype.SolvePositionConstraints = function (baumgarte) {\n  var oldLimitImpulse;\n  var C;\n  var tMat;\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var angularError = 0;\n  var positionError = 0;\n  var tX;\n  var impulseX;\n  var impulseY;\n\n  if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {\n    var angle = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n    var limitImpulse = 0;\n\n    if (this.m_limitState == b2Joint.e_equalLimits) {\n      C = b2Math.Clamp(angle - this.m_lowerAngle, -b2Settings.b2_maxAngularCorrection, b2Settings.b2_maxAngularCorrection);\n      limitImpulse = -this.m_motorMass * C;\n      angularError = b2Math.Abs(C);\n    } else {\n      if (this.m_limitState == b2Joint.e_atLowerLimit) {\n        C = angle - this.m_lowerAngle;\n        angularError = -C;\n        C = b2Math.Clamp(C + b2Settings.b2_angularSlop, -b2Settings.b2_maxAngularCorrection, 0);\n        limitImpulse = -this.m_motorMass * C;\n      } else {\n        if (this.m_limitState == b2Joint.e_atUpperLimit) {\n          C = angle - this.m_upperAngle;\n          angularError = C;\n          C = b2Math.Clamp(C - b2Settings.b2_angularSlop, 0, b2Settings.b2_maxAngularCorrection);\n          limitImpulse = -this.m_motorMass * C;\n        }\n      }\n    }\n\n    bA.m_sweep.a -= bA.m_invI * limitImpulse;\n    bB.m_sweep.a += bB.m_invI * limitImpulse;\n    bA.SynchronizeTransform();\n    bB.SynchronizeTransform();\n  }\n\n  tMat = bA.m_xf.R;\n  var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n  var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n  tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;\n  r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;\n  r1X = tX;\n  tMat = bB.m_xf.R;\n  var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n  var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n  tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;\n  r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;\n  r2X = tX;\n  var CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;\n  var CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;\n  var CLengthSquared = CX * CX + CY * CY;\n  var CLength = Math.sqrt(CLengthSquared);\n  positionError = CLength;\n  var invMass1 = bA.m_invMass;\n  var invMass2 = bB.m_invMass;\n  var invI1 = bA.m_invI;\n  var invI2 = bB.m_invI;\n  var k_allowedStretch = 10 * b2Settings.b2_linearSlop;\n\n  if (CLengthSquared > k_allowedStretch * k_allowedStretch) {\n    var uX = CX / CLength;\n    var uY = CY / CLength;\n    var k = invMass1 + invMass2;\n    var m = 1 / k;\n    impulseX = m * -CX;\n    impulseY = m * -CY;\n    var k_beta = 0.5;\n    bA.m_sweep.c.x -= k_beta * invMass1 * impulseX;\n    bA.m_sweep.c.y -= k_beta * invMass1 * impulseY;\n    bB.m_sweep.c.x += k_beta * invMass2 * impulseX;\n    bB.m_sweep.c.y += k_beta * invMass2 * impulseY;\n    CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;\n    CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;\n  }\n\n  this.K1.col1.x = invMass1 + invMass2;\n  this.K1.col2.x = 0;\n  this.K1.col1.y = 0;\n  this.K1.col2.y = invMass1 + invMass2;\n  this.K2.col1.x = invI1 * r1Y * r1Y;\n  this.K2.col2.x = -invI1 * r1X * r1Y;\n  this.K2.col1.y = -invI1 * r1X * r1Y;\n  this.K2.col2.y = invI1 * r1X * r1X;\n  this.K3.col1.x = invI2 * r2Y * r2Y;\n  this.K3.col2.x = -invI2 * r2X * r2Y;\n  this.K3.col1.y = -invI2 * r2X * r2Y;\n  this.K3.col2.y = invI2 * r2X * r2X;\n  this.K.SetM(this.K1);\n  this.K.AddM(this.K2);\n  this.K.AddM(this.K3);\n  this.K.Solve(b2RevoluteJoint.tImpulse, -CX, -CY);\n  impulseX = b2RevoluteJoint.tImpulse.x;\n  impulseY = b2RevoluteJoint.tImpulse.y;\n  bA.m_sweep.c.x -= bA.m_invMass * impulseX;\n  bA.m_sweep.c.y -= bA.m_invMass * impulseY;\n  bA.m_sweep.a -= bA.m_invI * (r1X * impulseY - r1Y * impulseX);\n  bB.m_sweep.c.x += bB.m_invMass * impulseX;\n  bB.m_sweep.c.y += bB.m_invMass * impulseY;\n  bB.m_sweep.a += bB.m_invI * (r2X * impulseY - r2Y * impulseX);\n  bA.SynchronizeTransform();\n  bB.SynchronizeTransform();\n  return positionError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;\n};\n\nb2RevoluteJoint.prototype.GetAnchorA = function () {\n  return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);\n};\n\nb2RevoluteJoint.prototype.GetAnchorB = function () {\n  return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);\n};\n\nb2RevoluteJoint.prototype.GetReactionForce = function (inv_dt) {\n  return new b2Vec2(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);\n};\n\nb2RevoluteJoint.prototype.GetReactionTorque = function (inv_dt) {\n  return inv_dt * this.m_impulse.z;\n};\n\nb2RevoluteJoint.prototype.GetJointAngle = function () {\n  return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle;\n};\n\nb2RevoluteJoint.prototype.GetJointSpeed = function () {\n  return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity;\n};\n\nb2RevoluteJoint.prototype.IsLimitEnabled = function () {\n  return this.m_enableLimit;\n};\n\nb2RevoluteJoint.prototype.EnableLimit = function (flag) {\n  this.m_enableLimit = flag;\n};\n\nb2RevoluteJoint.prototype.GetLowerLimit = function () {\n  return this.m_lowerAngle;\n};\n\nb2RevoluteJoint.prototype.GetUpperLimit = function () {\n  return this.m_upperAngle;\n};\n\nb2RevoluteJoint.prototype.SetLimits = function (lower, upper) {\n  this.m_lowerAngle = lower;\n  this.m_upperAngle = upper;\n};\n\nb2RevoluteJoint.prototype.IsMotorEnabled = function () {\n  this.m_bodyA.SetAwake(true);\n  this.m_bodyB.SetAwake(true);\n  return this.m_enableMotor;\n};\n\nb2RevoluteJoint.prototype.EnableMotor = function (flag) {\n  this.m_enableMotor = flag;\n};\n\nb2RevoluteJoint.prototype.SetMotorSpeed = function (speed) {\n  this.m_bodyA.SetAwake(true);\n  this.m_bodyB.SetAwake(true);\n  this.m_motorSpeed = speed;\n};\n\nb2RevoluteJoint.prototype.GetMotorSpeed = function () {\n  return this.m_motorSpeed;\n};\n\nb2RevoluteJoint.prototype.SetMaxMotorTorque = function (torque) {\n  this.m_maxMotorTorque = torque;\n};\n\nb2RevoluteJoint.prototype.GetMotorTorque = function () {\n  return this.m_maxMotorTorque;\n};\n\nb2RevoluteJoint.prototype.K = new b2Mat22();\nb2RevoluteJoint.prototype.K1 = new b2Mat22();\nb2RevoluteJoint.prototype.K2 = new b2Mat22();\nb2RevoluteJoint.prototype.K3 = new b2Mat22();\nb2RevoluteJoint.prototype.impulse3 = new b2Vec3();\nb2RevoluteJoint.prototype.impulse2 = new b2Vec2();\nb2RevoluteJoint.prototype.reduced = new b2Vec2();\nb2RevoluteJoint.prototype.m_localAnchor1 = new b2Vec2();\nb2RevoluteJoint.prototype.m_localAnchor2 = new b2Vec2();\nb2RevoluteJoint.prototype.m_impulse = new b2Vec3();\nb2RevoluteJoint.prototype.m_motorImpulse = null;\nb2RevoluteJoint.prototype.m_mass = new b2Mat33();\nb2RevoluteJoint.prototype.m_motorMass = null;\nb2RevoluteJoint.prototype.m_enableMotor = null;\nb2RevoluteJoint.prototype.m_maxMotorTorque = null;\nb2RevoluteJoint.prototype.m_motorSpeed = null;\nb2RevoluteJoint.prototype.m_enableLimit = null;\nb2RevoluteJoint.prototype.m_referenceAngle = null;\nb2RevoluteJoint.prototype.m_lowerAngle = null;\nb2RevoluteJoint.prototype.m_upperAngle = null;\nb2RevoluteJoint.prototype.m_limitState = 0;\n\nvar b2JointDef = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2JointDef.prototype.__constructor = function () {\n  this.type = b2Joint.e_unknownJoint;\n  this.userData = null;\n  this.bodyA = null;\n  this.bodyB = null;\n  this.collideConnected = false;\n};\n\nb2JointDef.prototype.__varz = function () {};\n\nb2JointDef.prototype.type = 0;\nb2JointDef.prototype.userData = null;\nb2JointDef.prototype.bodyA = null;\nb2JointDef.prototype.bodyB = null;\nb2JointDef.prototype.collideConnected = null;\n\nvar b2LineJointDef = function () {\n  b2JointDef.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2LineJointDef.prototype, b2JointDef.prototype);\nb2LineJointDef.prototype._super = b2JointDef.prototype;\n\nb2LineJointDef.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n\n  this.type = b2Joint.e_lineJoint;\n  this.localAxisA.Set(1, 0);\n  this.enableLimit = false;\n  this.lowerTranslation = 0;\n  this.upperTranslation = 0;\n  this.enableMotor = false;\n  this.maxMotorForce = 0;\n  this.motorSpeed = 0;\n};\n\nb2LineJointDef.prototype.__varz = function () {\n  this.localAnchorA = new b2Vec2();\n  this.localAnchorB = new b2Vec2();\n  this.localAxisA = new b2Vec2();\n};\n\nb2LineJointDef.prototype.Initialize = function (bA, bB, anchor, axis) {\n  this.bodyA = bA;\n  this.bodyB = bB;\n  this.localAnchorA = this.bodyA.GetLocalPoint(anchor);\n  this.localAnchorB = this.bodyB.GetLocalPoint(anchor);\n  this.localAxisA = this.bodyA.GetLocalVector(axis);\n};\n\nb2LineJointDef.prototype.localAnchorA = new b2Vec2();\nb2LineJointDef.prototype.localAnchorB = new b2Vec2();\nb2LineJointDef.prototype.localAxisA = new b2Vec2();\nb2LineJointDef.prototype.enableLimit = null;\nb2LineJointDef.prototype.lowerTranslation = null;\nb2LineJointDef.prototype.upperTranslation = null;\nb2LineJointDef.prototype.enableMotor = null;\nb2LineJointDef.prototype.maxMotorForce = null;\nb2LineJointDef.prototype.motorSpeed = null;\n\nvar b2DistanceJoint = function () {\n  b2Joint.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2DistanceJoint.prototype, b2Joint.prototype);\nb2DistanceJoint.prototype._super = b2Joint.prototype;\n\nb2DistanceJoint.prototype.__constructor = function (def) {\n  this._super.__constructor.apply(this, [def]);\n\n  var tMat;\n  var tX;\n  var tY;\n  this.m_localAnchor1.SetV(def.localAnchorA);\n  this.m_localAnchor2.SetV(def.localAnchorB);\n  this.m_length = def.length;\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n  this.m_impulse = 0;\n  this.m_gamma = 0;\n  this.m_bias = 0;\n};\n\nb2DistanceJoint.prototype.__varz = function () {\n  this.m_localAnchor1 = new b2Vec2();\n  this.m_localAnchor2 = new b2Vec2();\n  this.m_u = new b2Vec2();\n};\n\nb2DistanceJoint.prototype.InitVelocityConstraints = function (step) {\n  var tMat;\n  var tX;\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  tMat = bA.m_xf.R;\n  var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n  var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n  tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;\n  r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;\n  r1X = tX;\n  tMat = bB.m_xf.R;\n  var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n  var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n  tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;\n  r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;\n  r2X = tX;\n  this.m_u.x = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;\n  this.m_u.y = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;\n  var length = Math.sqrt(this.m_u.x * this.m_u.x + this.m_u.y * this.m_u.y);\n\n  if (length > b2Settings.b2_linearSlop) {\n    this.m_u.Multiply(1 / length);\n  } else {\n    this.m_u.SetZero();\n  }\n\n  var cr1u = r1X * this.m_u.y - r1Y * this.m_u.x;\n  var cr2u = r2X * this.m_u.y - r2Y * this.m_u.x;\n  var invMass = bA.m_invMass + bA.m_invI * cr1u * cr1u + bB.m_invMass + bB.m_invI * cr2u * cr2u;\n  this.m_mass = invMass != 0 ? 1 / invMass : 0;\n\n  if (this.m_frequencyHz > 0) {\n    var C = length - this.m_length;\n    var omega = 2 * Math.PI * this.m_frequencyHz;\n    var d = 2 * this.m_mass * this.m_dampingRatio * omega;\n    var k = this.m_mass * omega * omega;\n    this.m_gamma = step.dt * (d + step.dt * k);\n    this.m_gamma = this.m_gamma != 0 ? 1 / this.m_gamma : 0;\n    this.m_bias = C * step.dt * k * this.m_gamma;\n    this.m_mass = invMass + this.m_gamma;\n    this.m_mass = this.m_mass != 0 ? 1 / this.m_mass : 0;\n  }\n\n  if (step.warmStarting) {\n    this.m_impulse *= step.dtRatio;\n    var PX = this.m_impulse * this.m_u.x;\n    var PY = this.m_impulse * this.m_u.y;\n    bA.m_linearVelocity.x -= bA.m_invMass * PX;\n    bA.m_linearVelocity.y -= bA.m_invMass * PY;\n    bA.m_angularVelocity -= bA.m_invI * (r1X * PY - r1Y * PX);\n    bB.m_linearVelocity.x += bB.m_invMass * PX;\n    bB.m_linearVelocity.y += bB.m_invMass * PY;\n    bB.m_angularVelocity += bB.m_invI * (r2X * PY - r2Y * PX);\n  } else {\n    this.m_impulse = 0;\n  }\n};\n\nb2DistanceJoint.prototype.SolveVelocityConstraints = function (step) {\n  var tMat;\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  tMat = bA.m_xf.R;\n  var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n  var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n  var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;\n  r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;\n  r1X = tX;\n  tMat = bB.m_xf.R;\n  var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n  var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n  tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;\n  r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;\n  r2X = tX;\n  var v1X = bA.m_linearVelocity.x + -bA.m_angularVelocity * r1Y;\n  var v1Y = bA.m_linearVelocity.y + bA.m_angularVelocity * r1X;\n  var v2X = bB.m_linearVelocity.x + -bB.m_angularVelocity * r2Y;\n  var v2Y = bB.m_linearVelocity.y + bB.m_angularVelocity * r2X;\n  var Cdot = this.m_u.x * (v2X - v1X) + this.m_u.y * (v2Y - v1Y);\n  var impulse = -this.m_mass * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n  this.m_impulse += impulse;\n  var PX = impulse * this.m_u.x;\n  var PY = impulse * this.m_u.y;\n  bA.m_linearVelocity.x -= bA.m_invMass * PX;\n  bA.m_linearVelocity.y -= bA.m_invMass * PY;\n  bA.m_angularVelocity -= bA.m_invI * (r1X * PY - r1Y * PX);\n  bB.m_linearVelocity.x += bB.m_invMass * PX;\n  bB.m_linearVelocity.y += bB.m_invMass * PY;\n  bB.m_angularVelocity += bB.m_invI * (r2X * PY - r2Y * PX);\n};\n\nb2DistanceJoint.prototype.SolvePositionConstraints = function (baumgarte) {\n  var tMat;\n\n  if (this.m_frequencyHz > 0) {\n    return true;\n  }\n\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  tMat = bA.m_xf.R;\n  var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n  var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n  var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;\n  r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;\n  r1X = tX;\n  tMat = bB.m_xf.R;\n  var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n  var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n  tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;\n  r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;\n  r2X = tX;\n  var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;\n  var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;\n  var length = Math.sqrt(dX * dX + dY * dY);\n  dX /= length;\n  dY /= length;\n  var C = length - this.m_length;\n  C = b2Math.Clamp(C, -b2Settings.b2_maxLinearCorrection, b2Settings.b2_maxLinearCorrection);\n  var impulse = -this.m_mass * C;\n  this.m_u.Set(dX, dY);\n  var PX = impulse * this.m_u.x;\n  var PY = impulse * this.m_u.y;\n  bA.m_sweep.c.x -= bA.m_invMass * PX;\n  bA.m_sweep.c.y -= bA.m_invMass * PY;\n  bA.m_sweep.a -= bA.m_invI * (r1X * PY - r1Y * PX);\n  bB.m_sweep.c.x += bB.m_invMass * PX;\n  bB.m_sweep.c.y += bB.m_invMass * PY;\n  bB.m_sweep.a += bB.m_invI * (r2X * PY - r2Y * PX);\n  bA.SynchronizeTransform();\n  bB.SynchronizeTransform();\n  return b2Math.Abs(C) < b2Settings.b2_linearSlop;\n};\n\nb2DistanceJoint.prototype.GetAnchorA = function () {\n  return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);\n};\n\nb2DistanceJoint.prototype.GetAnchorB = function () {\n  return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);\n};\n\nb2DistanceJoint.prototype.GetReactionForce = function (inv_dt) {\n  return new b2Vec2(inv_dt * this.m_impulse * this.m_u.x, inv_dt * this.m_impulse * this.m_u.y);\n};\n\nb2DistanceJoint.prototype.GetReactionTorque = function (inv_dt) {\n  return 0;\n};\n\nb2DistanceJoint.prototype.GetLength = function () {\n  return this.m_length;\n};\n\nb2DistanceJoint.prototype.SetLength = function (length) {\n  this.m_length = length;\n};\n\nb2DistanceJoint.prototype.GetFrequency = function () {\n  return this.m_frequencyHz;\n};\n\nb2DistanceJoint.prototype.SetFrequency = function (hz) {\n  this.m_frequencyHz = hz;\n};\n\nb2DistanceJoint.prototype.GetDampingRatio = function () {\n  return this.m_dampingRatio;\n};\n\nb2DistanceJoint.prototype.SetDampingRatio = function (ratio) {\n  this.m_dampingRatio = ratio;\n};\n\nb2DistanceJoint.prototype.m_localAnchor1 = new b2Vec2();\nb2DistanceJoint.prototype.m_localAnchor2 = new b2Vec2();\nb2DistanceJoint.prototype.m_u = new b2Vec2();\nb2DistanceJoint.prototype.m_frequencyHz = null;\nb2DistanceJoint.prototype.m_dampingRatio = null;\nb2DistanceJoint.prototype.m_gamma = null;\nb2DistanceJoint.prototype.m_bias = null;\nb2DistanceJoint.prototype.m_impulse = null;\nb2DistanceJoint.prototype.m_mass = null;\nb2DistanceJoint.prototype.m_length = null;\n\nvar b2PulleyJointDef = function () {\n  b2JointDef.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2PulleyJointDef.prototype, b2JointDef.prototype);\nb2PulleyJointDef.prototype._super = b2JointDef.prototype;\n\nb2PulleyJointDef.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n\n  this.type = b2Joint.e_pulleyJoint;\n  this.groundAnchorA.Set(-1, 1);\n  this.groundAnchorB.Set(1, 1);\n  this.localAnchorA.Set(-1, 0);\n  this.localAnchorB.Set(1, 0);\n  this.lengthA = 0;\n  this.maxLengthA = 0;\n  this.lengthB = 0;\n  this.maxLengthB = 0;\n  this.ratio = 1;\n  this.collideConnected = true;\n};\n\nb2PulleyJointDef.prototype.__varz = function () {\n  this.groundAnchorA = new b2Vec2();\n  this.groundAnchorB = new b2Vec2();\n  this.localAnchorA = new b2Vec2();\n  this.localAnchorB = new b2Vec2();\n};\n\nb2PulleyJointDef.prototype.Initialize = function (bA, bB, gaA, gaB, anchorA, anchorB, r) {\n  this.bodyA = bA;\n  this.bodyB = bB;\n  this.groundAnchorA.SetV(gaA);\n  this.groundAnchorB.SetV(gaB);\n  this.localAnchorA = this.bodyA.GetLocalPoint(anchorA);\n  this.localAnchorB = this.bodyB.GetLocalPoint(anchorB);\n  var d1X = anchorA.x - gaA.x;\n  var d1Y = anchorA.y - gaA.y;\n  this.lengthA = Math.sqrt(d1X * d1X + d1Y * d1Y);\n  var d2X = anchorB.x - gaB.x;\n  var d2Y = anchorB.y - gaB.y;\n  this.lengthB = Math.sqrt(d2X * d2X + d2Y * d2Y);\n  this.ratio = r;\n  var C = this.lengthA + this.ratio * this.lengthB;\n  this.maxLengthA = C - this.ratio * b2PulleyJoint.b2_minPulleyLength;\n  this.maxLengthB = (C - b2PulleyJoint.b2_minPulleyLength) / this.ratio;\n};\n\nb2PulleyJointDef.prototype.groundAnchorA = new b2Vec2();\nb2PulleyJointDef.prototype.groundAnchorB = new b2Vec2();\nb2PulleyJointDef.prototype.localAnchorA = new b2Vec2();\nb2PulleyJointDef.prototype.localAnchorB = new b2Vec2();\nb2PulleyJointDef.prototype.lengthA = null;\nb2PulleyJointDef.prototype.maxLengthA = null;\nb2PulleyJointDef.prototype.lengthB = null;\nb2PulleyJointDef.prototype.maxLengthB = null;\nb2PulleyJointDef.prototype.ratio = null;\n\nvar b2DistanceJointDef = function () {\n  b2JointDef.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2DistanceJointDef.prototype, b2JointDef.prototype);\nb2DistanceJointDef.prototype._super = b2JointDef.prototype;\n\nb2DistanceJointDef.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n\n  this.type = b2Joint.e_distanceJoint;\n  this.length = 1;\n  this.frequencyHz = 0;\n  this.dampingRatio = 0;\n};\n\nb2DistanceJointDef.prototype.__varz = function () {\n  this.localAnchorA = new b2Vec2();\n  this.localAnchorB = new b2Vec2();\n};\n\nb2DistanceJointDef.prototype.Initialize = function (bA, bB, anchorA, anchorB) {\n  this.bodyA = bA;\n  this.bodyB = bB;\n  this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchorA));\n  this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchorB));\n  var dX = anchorB.x - anchorA.x;\n  var dY = anchorB.y - anchorA.y;\n  this.length = Math.sqrt(dX * dX + dY * dY);\n  this.frequencyHz = 0;\n  this.dampingRatio = 0;\n};\n\nb2DistanceJointDef.prototype.localAnchorA = new b2Vec2();\nb2DistanceJointDef.prototype.localAnchorB = new b2Vec2();\nb2DistanceJointDef.prototype.length = null;\nb2DistanceJointDef.prototype.frequencyHz = null;\nb2DistanceJointDef.prototype.dampingRatio = null;\n\nvar b2FrictionJointDef = function () {\n  b2JointDef.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2FrictionJointDef.prototype, b2JointDef.prototype);\nb2FrictionJointDef.prototype._super = b2JointDef.prototype;\n\nb2FrictionJointDef.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n\n  this.type = b2Joint.e_frictionJoint;\n  this.maxForce = 0;\n  this.maxTorque = 0;\n};\n\nb2FrictionJointDef.prototype.__varz = function () {\n  this.localAnchorA = new b2Vec2();\n  this.localAnchorB = new b2Vec2();\n};\n\nb2FrictionJointDef.prototype.Initialize = function (bA, bB, anchor) {\n  this.bodyA = bA;\n  this.bodyB = bB;\n  this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchor));\n  this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchor));\n};\n\nb2FrictionJointDef.prototype.localAnchorA = new b2Vec2();\nb2FrictionJointDef.prototype.localAnchorB = new b2Vec2();\nb2FrictionJointDef.prototype.maxForce = null;\nb2FrictionJointDef.prototype.maxTorque = null;\n\nvar b2WeldJointDef = function () {\n  b2JointDef.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2WeldJointDef.prototype, b2JointDef.prototype);\nb2WeldJointDef.prototype._super = b2JointDef.prototype;\n\nb2WeldJointDef.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n\n  this.type = b2Joint.e_weldJoint;\n  this.referenceAngle = 0;\n};\n\nb2WeldJointDef.prototype.__varz = function () {\n  this.localAnchorA = new b2Vec2();\n  this.localAnchorB = new b2Vec2();\n};\n\nb2WeldJointDef.prototype.Initialize = function (bA, bB, anchor) {\n  this.bodyA = bA;\n  this.bodyB = bB;\n  this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchor));\n  this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchor));\n  this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\n};\n\nb2WeldJointDef.prototype.localAnchorA = new b2Vec2();\nb2WeldJointDef.prototype.localAnchorB = new b2Vec2();\nb2WeldJointDef.prototype.referenceAngle = null;\n\nvar b2GearJointDef = function () {\n  b2JointDef.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2GearJointDef.prototype, b2JointDef.prototype);\nb2GearJointDef.prototype._super = b2JointDef.prototype;\n\nb2GearJointDef.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n\n  this.type = b2Joint.e_gearJoint;\n  this.joint1 = null;\n  this.joint2 = null;\n  this.ratio = 1;\n};\n\nb2GearJointDef.prototype.__varz = function () {};\n\nb2GearJointDef.prototype.joint1 = null;\nb2GearJointDef.prototype.joint2 = null;\nb2GearJointDef.prototype.ratio = null;\n\nvar b2Color = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Color.prototype.__constructor = function (rr, gg, bb) {\n  this._r = parseInt(255 * b2Math.Clamp(rr, 0, 1));\n  this._g = parseInt(255 * b2Math.Clamp(gg, 0, 1));\n  this._b = parseInt(255 * b2Math.Clamp(bb, 0, 1));\n};\n\nb2Color.prototype.__varz = function () {};\n\nb2Color.prototype.Set = function (rr, gg, bb) {\n  this._r = parseInt(255 * b2Math.Clamp(rr, 0, 1));\n  this._g = parseInt(255 * b2Math.Clamp(gg, 0, 1));\n  this._b = parseInt(255 * b2Math.Clamp(bb, 0, 1));\n};\n\nb2Color.prototype.__defineGetter__(\"r\", function () {\n  return this._r;\n});\n\nb2Color.prototype.__defineSetter__(\"r\", function (rr) {\n  this._r = parseInt(255 * b2Math.Clamp(rr, 0, 1));\n});\n\nb2Color.prototype.__defineGetter__(\"g\", function () {\n  return this._g;\n});\n\nb2Color.prototype.__defineSetter__(\"g\", function (gg) {\n  this._g = parseInt(255 * b2Math.Clamp(gg, 0, 1));\n});\n\nb2Color.prototype.__defineGetter__(\"b\", function () {\n  return this._b;\n});\n\nb2Color.prototype.__defineSetter__(\"b\", function (bb) {\n  this._b = parseInt(255 * b2Math.Clamp(bb, 0, 1));\n});\n\nb2Color.prototype.__defineGetter__(\"color\", function () {\n  return this._r << 16 | this._g << 8 | this._b;\n});\n\nb2Color.prototype._r = 0;\nb2Color.prototype._g = 0;\nb2Color.prototype._b = 0;\n\nvar b2FrictionJoint = function () {\n  b2Joint.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2FrictionJoint.prototype, b2Joint.prototype);\nb2FrictionJoint.prototype._super = b2Joint.prototype;\n\nb2FrictionJoint.prototype.__constructor = function (def) {\n  this._super.__constructor.apply(this, [def]);\n\n  this.m_localAnchorA.SetV(def.localAnchorA);\n  this.m_localAnchorB.SetV(def.localAnchorB);\n  this.m_linearMass.SetZero();\n  this.m_angularMass = 0;\n  this.m_linearImpulse.SetZero();\n  this.m_angularImpulse = 0;\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n};\n\nb2FrictionJoint.prototype.__varz = function () {\n  this.m_localAnchorA = new b2Vec2();\n  this.m_localAnchorB = new b2Vec2();\n  this.m_linearImpulse = new b2Vec2();\n  this.m_linearMass = new b2Mat22();\n};\n\nb2FrictionJoint.prototype.InitVelocityConstraints = function (step) {\n  var tMat;\n  var tX;\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  tMat = bA.m_xf.R;\n  var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;\n  var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;\n  tX = tMat.col1.x * rAX + tMat.col2.x * rAY;\n  rAY = tMat.col1.y * rAX + tMat.col2.y * rAY;\n  rAX = tX;\n  tMat = bB.m_xf.R;\n  var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;\n  var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;\n  tX = tMat.col1.x * rBX + tMat.col2.x * rBY;\n  rBY = tMat.col1.y * rBX + tMat.col2.y * rBY;\n  rBX = tX;\n  var mA = bA.m_invMass;\n  var mB = bB.m_invMass;\n  var iA = bA.m_invI;\n  var iB = bB.m_invI;\n  var K = new b2Mat22();\n  K.col1.x = mA + mB;\n  K.col2.x = 0;\n  K.col1.y = 0;\n  K.col2.y = mA + mB;\n  K.col1.x += iA * rAY * rAY;\n  K.col2.x += -iA * rAX * rAY;\n  K.col1.y += -iA * rAX * rAY;\n  K.col2.y += iA * rAX * rAX;\n  K.col1.x += iB * rBY * rBY;\n  K.col2.x += -iB * rBX * rBY;\n  K.col1.y += -iB * rBX * rBY;\n  K.col2.y += iB * rBX * rBX;\n  K.GetInverse(this.m_linearMass);\n  this.m_angularMass = iA + iB;\n\n  if (this.m_angularMass > 0) {\n    this.m_angularMass = 1 / this.m_angularMass;\n  }\n\n  if (step.warmStarting) {\n    this.m_linearImpulse.x *= step.dtRatio;\n    this.m_linearImpulse.y *= step.dtRatio;\n    this.m_angularImpulse *= step.dtRatio;\n    var P = this.m_linearImpulse;\n    bA.m_linearVelocity.x -= mA * P.x;\n    bA.m_linearVelocity.y -= mA * P.y;\n    bA.m_angularVelocity -= iA * (rAX * P.y - rAY * P.x + this.m_angularImpulse);\n    bB.m_linearVelocity.x += mB * P.x;\n    bB.m_linearVelocity.y += mB * P.y;\n    bB.m_angularVelocity += iB * (rBX * P.y - rBY * P.x + this.m_angularImpulse);\n  } else {\n    this.m_linearImpulse.SetZero();\n    this.m_angularImpulse = 0;\n  }\n};\n\nb2FrictionJoint.prototype.SolveVelocityConstraints = function (step) {\n  var tMat;\n  var tX;\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var vA = bA.m_linearVelocity;\n  var wA = bA.m_angularVelocity;\n  var vB = bB.m_linearVelocity;\n  var wB = bB.m_angularVelocity;\n  var mA = bA.m_invMass;\n  var mB = bB.m_invMass;\n  var iA = bA.m_invI;\n  var iB = bB.m_invI;\n  tMat = bA.m_xf.R;\n  var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;\n  var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;\n  tX = tMat.col1.x * rAX + tMat.col2.x * rAY;\n  rAY = tMat.col1.y * rAX + tMat.col2.y * rAY;\n  rAX = tX;\n  tMat = bB.m_xf.R;\n  var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;\n  var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;\n  tX = tMat.col1.x * rBX + tMat.col2.x * rBY;\n  rBY = tMat.col1.y * rBX + tMat.col2.y * rBY;\n  rBX = tX;\n  var maxImpulse;\n  var Cdot = wB - wA;\n  var impulse = -this.m_angularMass * Cdot;\n  var oldImpulse = this.m_angularImpulse;\n  maxImpulse = step.dt * this.m_maxTorque;\n  this.m_angularImpulse = b2Math.Clamp(this.m_angularImpulse + impulse, -maxImpulse, maxImpulse);\n  impulse = this.m_angularImpulse - oldImpulse;\n  wA -= iA * impulse;\n  wB += iB * impulse;\n  var CdotX = vB.x - wB * rBY - vA.x + wA * rAY;\n  var CdotY = vB.y + wB * rBX - vA.y - wA * rAX;\n  var impulseV = b2Math.MulMV(this.m_linearMass, new b2Vec2(-CdotX, -CdotY));\n  var oldImpulseV = this.m_linearImpulse.Copy();\n  this.m_linearImpulse.Add(impulseV);\n  maxImpulse = step.dt * this.m_maxForce;\n\n  if (this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse) {\n    this.m_linearImpulse.Normalize();\n    this.m_linearImpulse.Multiply(maxImpulse);\n  }\n\n  impulseV = b2Math.SubtractVV(this.m_linearImpulse, oldImpulseV);\n  vA.x -= mA * impulseV.x;\n  vA.y -= mA * impulseV.y;\n  wA -= iA * (rAX * impulseV.y - rAY * impulseV.x);\n  vB.x += mB * impulseV.x;\n  vB.y += mB * impulseV.y;\n  wB += iB * (rBX * impulseV.y - rBY * impulseV.x);\n  bA.m_angularVelocity = wA;\n  bB.m_angularVelocity = wB;\n};\n\nb2FrictionJoint.prototype.SolvePositionConstraints = function (baumgarte) {\n  return true;\n};\n\nb2FrictionJoint.prototype.GetAnchorA = function () {\n  return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);\n};\n\nb2FrictionJoint.prototype.GetAnchorB = function () {\n  return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);\n};\n\nb2FrictionJoint.prototype.GetReactionForce = function (inv_dt) {\n  return new b2Vec2(inv_dt * this.m_linearImpulse.x, inv_dt * this.m_linearImpulse.y);\n};\n\nb2FrictionJoint.prototype.GetReactionTorque = function (inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n};\n\nb2FrictionJoint.prototype.SetMaxForce = function (force) {\n  this.m_maxForce = force;\n};\n\nb2FrictionJoint.prototype.GetMaxForce = function () {\n  return this.m_maxForce;\n};\n\nb2FrictionJoint.prototype.SetMaxTorque = function (torque) {\n  this.m_maxTorque = torque;\n};\n\nb2FrictionJoint.prototype.GetMaxTorque = function () {\n  return this.m_maxTorque;\n};\n\nb2FrictionJoint.prototype.m_localAnchorA = new b2Vec2();\nb2FrictionJoint.prototype.m_localAnchorB = new b2Vec2();\nb2FrictionJoint.prototype.m_linearImpulse = new b2Vec2();\nb2FrictionJoint.prototype.m_angularImpulse = null;\nb2FrictionJoint.prototype.m_maxForce = null;\nb2FrictionJoint.prototype.m_maxTorque = null;\nb2FrictionJoint.prototype.m_linearMass = new b2Mat22();\nb2FrictionJoint.prototype.m_angularMass = null;\n\nvar b2Distance = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Distance.prototype.__constructor = function () {};\n\nb2Distance.prototype.__varz = function () {};\n\nb2Distance.Distance = function (output, cache, input) {\n  ++b2Distance.b2_gjkCalls;\n  var proxyA = input.proxyA;\n  var proxyB = input.proxyB;\n  var transformA = input.transformA;\n  var transformB = input.transformB;\n  var simplex = b2Distance.s_simplex;\n  simplex.ReadCache(cache, proxyA, transformA, proxyB, transformB);\n  var vertices = simplex.m_vertices;\n  var k_maxIters = 20;\n  var saveA = b2Distance.s_saveA;\n  var saveB = b2Distance.s_saveB;\n  var saveCount = 0;\n  var closestPoint = simplex.GetClosestPoint();\n  var distanceSqr1 = closestPoint.LengthSquared();\n  var distanceSqr2 = distanceSqr1;\n  var i = 0;\n  var p;\n  var iter = 0;\n\n  while (iter < k_maxIters) {\n    saveCount = simplex.m_count;\n\n    for (i = 0; i < saveCount; i++) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    switch (simplex.m_count) {\n      case 1:\n        break;\n\n      case 2:\n        simplex.Solve2();\n        break;\n\n      case 3:\n        simplex.Solve3();\n        break;\n\n      default:\n        b2Settings.b2Assert(false);\n    }\n\n    if (simplex.m_count == 3) {\n      break;\n    }\n\n    p = simplex.GetClosestPoint();\n    distanceSqr2 = p.LengthSquared();\n\n    if (distanceSqr2 > distanceSqr1) {}\n\n    distanceSqr1 = distanceSqr2;\n    var d = simplex.GetSearchDirection();\n\n    if (d.LengthSquared() < Number.MIN_VALUE * Number.MIN_VALUE) {\n      break;\n    }\n\n    var vertex = vertices[simplex.m_count];\n    vertex.indexA = proxyA.GetSupport(b2Math.MulTMV(transformA.R, d.GetNegative()));\n    vertex.wA = b2Math.MulX(transformA, proxyA.GetVertex(vertex.indexA));\n    vertex.indexB = proxyB.GetSupport(b2Math.MulTMV(transformB.R, d));\n    vertex.wB = b2Math.MulX(transformB, proxyB.GetVertex(vertex.indexB));\n    vertex.w = b2Math.SubtractVV(vertex.wB, vertex.wA);\n    ++iter;\n    ++b2Distance.b2_gjkIters;\n    var duplicate = false;\n\n    for (i = 0; i < saveCount; i++) {\n      if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    if (duplicate) {\n      break;\n    }\n\n    ++simplex.m_count;\n  }\n\n  b2Distance.b2_gjkMaxIters = b2Math.Max(b2Distance.b2_gjkMaxIters, iter);\n  simplex.GetWitnessPoints(output.pointA, output.pointB);\n  output.distance = b2Math.SubtractVV(output.pointA, output.pointB).Length();\n  output.iterations = iter;\n  simplex.WriteCache(cache);\n\n  if (input.useRadii) {\n    var rA = proxyA.m_radius;\n    var rB = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > Number.MIN_VALUE) {\n      output.distance -= rA + rB;\n      var normal = b2Math.SubtractVV(output.pointB, output.pointA);\n      normal.Normalize();\n      output.pointA.x += rA * normal.x;\n      output.pointA.y += rA * normal.y;\n      output.pointB.x -= rB * normal.x;\n      output.pointB.y -= rB * normal.y;\n    } else {\n      p = new b2Vec2();\n      p.x = 0.5 * (output.pointA.x + output.pointB.x);\n      p.y = 0.5 * (output.pointA.y + output.pointB.y);\n      output.pointA.x = output.pointB.x = p.x;\n      output.pointA.y = output.pointB.y = p.y;\n      output.distance = 0;\n    }\n  }\n};\n\nb2Distance.b2_gjkCalls = 0;\nb2Distance.b2_gjkIters = 0;\nb2Distance.b2_gjkMaxIters = 0;\nb2Distance.s_simplex = new b2Simplex();\nb2Distance.s_saveA = new Array(3);\nb2Distance.s_saveB = new Array(3);\n\nvar b2MouseJoint = function () {\n  b2Joint.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2MouseJoint.prototype, b2Joint.prototype);\nb2MouseJoint.prototype._super = b2Joint.prototype;\n\nb2MouseJoint.prototype.__constructor = function (def) {\n  this._super.__constructor.apply(this, [def]);\n\n  this.m_target.SetV(def.target);\n  var tX = this.m_target.x - this.m_bodyB.m_xf.position.x;\n  var tY = this.m_target.y - this.m_bodyB.m_xf.position.y;\n  var tMat = this.m_bodyB.m_xf.R;\n  this.m_localAnchor.x = tX * tMat.col1.x + tY * tMat.col1.y;\n  this.m_localAnchor.y = tX * tMat.col2.x + tY * tMat.col2.y;\n  this.m_maxForce = def.maxForce;\n  this.m_impulse.SetZero();\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n  this.m_beta = 0;\n  this.m_gamma = 0;\n};\n\nb2MouseJoint.prototype.__varz = function () {\n  this.K = new b2Mat22();\n  this.K1 = new b2Mat22();\n  this.K2 = new b2Mat22();\n  this.m_localAnchor = new b2Vec2();\n  this.m_target = new b2Vec2();\n  this.m_impulse = new b2Vec2();\n  this.m_mass = new b2Mat22();\n  this.m_C = new b2Vec2();\n};\n\nb2MouseJoint.prototype.InitVelocityConstraints = function (step) {\n  var b = this.m_bodyB;\n  var mass = b.GetMass();\n  var omega = 2 * Math.PI * this.m_frequencyHz;\n  var d = 2 * mass * this.m_dampingRatio * omega;\n  var k = mass * omega * omega;\n  this.m_gamma = step.dt * (d + step.dt * k);\n  this.m_gamma = this.m_gamma != 0 ? 1 / this.m_gamma : 0;\n  this.m_beta = step.dt * k * this.m_gamma;\n  var tMat;\n  tMat = b.m_xf.R;\n  var rX = this.m_localAnchor.x - b.m_sweep.localCenter.x;\n  var rY = this.m_localAnchor.y - b.m_sweep.localCenter.y;\n  var tX = tMat.col1.x * rX + tMat.col2.x * rY;\n  rY = tMat.col1.y * rX + tMat.col2.y * rY;\n  rX = tX;\n  var invMass = b.m_invMass;\n  var invI = b.m_invI;\n  this.K1.col1.x = invMass;\n  this.K1.col2.x = 0;\n  this.K1.col1.y = 0;\n  this.K1.col2.y = invMass;\n  this.K2.col1.x = invI * rY * rY;\n  this.K2.col2.x = -invI * rX * rY;\n  this.K2.col1.y = -invI * rX * rY;\n  this.K2.col2.y = invI * rX * rX;\n  this.K.SetM(this.K1);\n  this.K.AddM(this.K2);\n  this.K.col1.x += this.m_gamma;\n  this.K.col2.y += this.m_gamma;\n  this.K.GetInverse(this.m_mass);\n  this.m_C.x = b.m_sweep.c.x + rX - this.m_target.x;\n  this.m_C.y = b.m_sweep.c.y + rY - this.m_target.y;\n  b.m_angularVelocity *= 0.98;\n  this.m_impulse.x *= step.dtRatio;\n  this.m_impulse.y *= step.dtRatio;\n  b.m_linearVelocity.x += invMass * this.m_impulse.x;\n  b.m_linearVelocity.y += invMass * this.m_impulse.y;\n  b.m_angularVelocity += invI * (rX * this.m_impulse.y - rY * this.m_impulse.x);\n};\n\nb2MouseJoint.prototype.SolveVelocityConstraints = function (step) {\n  var b = this.m_bodyB;\n  var tMat;\n  var tX;\n  var tY;\n  tMat = b.m_xf.R;\n  var rX = this.m_localAnchor.x - b.m_sweep.localCenter.x;\n  var rY = this.m_localAnchor.y - b.m_sweep.localCenter.y;\n  tX = tMat.col1.x * rX + tMat.col2.x * rY;\n  rY = tMat.col1.y * rX + tMat.col2.y * rY;\n  rX = tX;\n  var CdotX = b.m_linearVelocity.x + -b.m_angularVelocity * rY;\n  var CdotY = b.m_linearVelocity.y + b.m_angularVelocity * rX;\n  tMat = this.m_mass;\n  tX = CdotX + this.m_beta * this.m_C.x + this.m_gamma * this.m_impulse.x;\n  tY = CdotY + this.m_beta * this.m_C.y + this.m_gamma * this.m_impulse.y;\n  var impulseX = -(tMat.col1.x * tX + tMat.col2.x * tY);\n  var impulseY = -(tMat.col1.y * tX + tMat.col2.y * tY);\n  var oldImpulseX = this.m_impulse.x;\n  var oldImpulseY = this.m_impulse.y;\n  this.m_impulse.x += impulseX;\n  this.m_impulse.y += impulseY;\n  var maxImpulse = step.dt * this.m_maxForce;\n\n  if (this.m_impulse.LengthSquared() > maxImpulse * maxImpulse) {\n    this.m_impulse.Multiply(maxImpulse / this.m_impulse.Length());\n  }\n\n  impulseX = this.m_impulse.x - oldImpulseX;\n  impulseY = this.m_impulse.y - oldImpulseY;\n  b.m_linearVelocity.x += b.m_invMass * impulseX;\n  b.m_linearVelocity.y += b.m_invMass * impulseY;\n  b.m_angularVelocity += b.m_invI * (rX * impulseY - rY * impulseX);\n};\n\nb2MouseJoint.prototype.SolvePositionConstraints = function (baumgarte) {\n  return true;\n};\n\nb2MouseJoint.prototype.GetAnchorA = function () {\n  return this.m_target;\n};\n\nb2MouseJoint.prototype.GetAnchorB = function () {\n  return this.m_bodyB.GetWorldPoint(this.m_localAnchor);\n};\n\nb2MouseJoint.prototype.GetReactionForce = function (inv_dt) {\n  return new b2Vec2(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);\n};\n\nb2MouseJoint.prototype.GetReactionTorque = function (inv_dt) {\n  return 0;\n};\n\nb2MouseJoint.prototype.GetTarget = function () {\n  return this.m_target;\n};\n\nb2MouseJoint.prototype.SetTarget = function (target) {\n  if (this.m_bodyB.IsAwake() == false) {\n    this.m_bodyB.SetAwake(true);\n  }\n\n  this.m_target = target;\n};\n\nb2MouseJoint.prototype.GetMaxForce = function () {\n  return this.m_maxForce;\n};\n\nb2MouseJoint.prototype.SetMaxForce = function (maxForce) {\n  this.m_maxForce = maxForce;\n};\n\nb2MouseJoint.prototype.GetFrequency = function () {\n  return this.m_frequencyHz;\n};\n\nb2MouseJoint.prototype.SetFrequency = function (hz) {\n  this.m_frequencyHz = hz;\n};\n\nb2MouseJoint.prototype.GetDampingRatio = function () {\n  return this.m_dampingRatio;\n};\n\nb2MouseJoint.prototype.SetDampingRatio = function (ratio) {\n  this.m_dampingRatio = ratio;\n};\n\nb2MouseJoint.prototype.K = new b2Mat22();\nb2MouseJoint.prototype.K1 = new b2Mat22();\nb2MouseJoint.prototype.K2 = new b2Mat22();\nb2MouseJoint.prototype.m_localAnchor = new b2Vec2();\nb2MouseJoint.prototype.m_target = new b2Vec2();\nb2MouseJoint.prototype.m_impulse = new b2Vec2();\nb2MouseJoint.prototype.m_mass = new b2Mat22();\nb2MouseJoint.prototype.m_C = new b2Vec2();\nb2MouseJoint.prototype.m_maxForce = null;\nb2MouseJoint.prototype.m_frequencyHz = null;\nb2MouseJoint.prototype.m_dampingRatio = null;\nb2MouseJoint.prototype.m_beta = null;\nb2MouseJoint.prototype.m_gamma = null;\n\nvar b2PrismaticJointDef = function () {\n  b2JointDef.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2PrismaticJointDef.prototype, b2JointDef.prototype);\nb2PrismaticJointDef.prototype._super = b2JointDef.prototype;\n\nb2PrismaticJointDef.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n\n  this.type = b2Joint.e_prismaticJoint;\n  this.localAxisA.Set(1, 0);\n  this.referenceAngle = 0;\n  this.enableLimit = false;\n  this.lowerTranslation = 0;\n  this.upperTranslation = 0;\n  this.enableMotor = false;\n  this.maxMotorForce = 0;\n  this.motorSpeed = 0;\n};\n\nb2PrismaticJointDef.prototype.__varz = function () {\n  this.localAnchorA = new b2Vec2();\n  this.localAnchorB = new b2Vec2();\n  this.localAxisA = new b2Vec2();\n};\n\nb2PrismaticJointDef.prototype.Initialize = function (bA, bB, anchor, axis) {\n  this.bodyA = bA;\n  this.bodyB = bB;\n  this.localAnchorA = this.bodyA.GetLocalPoint(anchor);\n  this.localAnchorB = this.bodyB.GetLocalPoint(anchor);\n  this.localAxisA = this.bodyA.GetLocalVector(axis);\n  this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\n};\n\nb2PrismaticJointDef.prototype.localAnchorA = new b2Vec2();\nb2PrismaticJointDef.prototype.localAnchorB = new b2Vec2();\nb2PrismaticJointDef.prototype.localAxisA = new b2Vec2();\nb2PrismaticJointDef.prototype.referenceAngle = null;\nb2PrismaticJointDef.prototype.enableLimit = null;\nb2PrismaticJointDef.prototype.lowerTranslation = null;\nb2PrismaticJointDef.prototype.upperTranslation = null;\nb2PrismaticJointDef.prototype.enableMotor = null;\nb2PrismaticJointDef.prototype.maxMotorForce = null;\nb2PrismaticJointDef.prototype.motorSpeed = null;\n\nvar b2TimeOfImpact = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2TimeOfImpact.prototype.__constructor = function () {};\n\nb2TimeOfImpact.prototype.__varz = function () {};\n\nb2TimeOfImpact.TimeOfImpact = function (input) {\n  ++b2TimeOfImpact.b2_toiCalls;\n  var proxyA = input.proxyA;\n  var proxyB = input.proxyB;\n  var sweepA = input.sweepA;\n  var sweepB = input.sweepB;\n  b2Settings.b2Assert(sweepA.t0 == sweepB.t0);\n  b2Settings.b2Assert(1 - sweepA.t0 > Number.MIN_VALUE);\n  var radius = proxyA.m_radius + proxyB.m_radius;\n  var tolerance = input.tolerance;\n  var alpha = 0;\n  var k_maxIterations = 1E3;\n  var iter = 0;\n  var target = 0;\n  b2TimeOfImpact.s_cache.count = 0;\n  b2TimeOfImpact.s_distanceInput.useRadii = false;\n\n  for (;;) {\n    sweepA.GetTransform(b2TimeOfImpact.s_xfA, alpha);\n    sweepB.GetTransform(b2TimeOfImpact.s_xfB, alpha);\n    b2TimeOfImpact.s_distanceInput.proxyA = proxyA;\n    b2TimeOfImpact.s_distanceInput.proxyB = proxyB;\n    b2TimeOfImpact.s_distanceInput.transformA = b2TimeOfImpact.s_xfA;\n    b2TimeOfImpact.s_distanceInput.transformB = b2TimeOfImpact.s_xfB;\n    b2Distance.Distance(b2TimeOfImpact.s_distanceOutput, b2TimeOfImpact.s_cache, b2TimeOfImpact.s_distanceInput);\n\n    if (b2TimeOfImpact.s_distanceOutput.distance <= 0) {\n      alpha = 1;\n      break;\n    }\n\n    b2TimeOfImpact.s_fcn.Initialize(b2TimeOfImpact.s_cache, proxyA, b2TimeOfImpact.s_xfA, proxyB, b2TimeOfImpact.s_xfB);\n    var separation = b2TimeOfImpact.s_fcn.Evaluate(b2TimeOfImpact.s_xfA, b2TimeOfImpact.s_xfB);\n\n    if (separation <= 0) {\n      alpha = 1;\n      break;\n    }\n\n    if (iter == 0) {\n      if (separation > radius) {\n        target = b2Math.Max(radius - tolerance, 0.75 * radius);\n      } else {\n        target = b2Math.Max(separation - tolerance, 0.02 * radius);\n      }\n    }\n\n    if (separation - target < 0.5 * tolerance) {\n      if (iter == 0) {\n        alpha = 1;\n        break;\n      }\n\n      break;\n    }\n\n    var newAlpha = alpha;\n    var x1 = alpha;\n    var x2 = 1;\n    var f1 = separation;\n    sweepA.GetTransform(b2TimeOfImpact.s_xfA, x2);\n    sweepB.GetTransform(b2TimeOfImpact.s_xfB, x2);\n    var f2 = b2TimeOfImpact.s_fcn.Evaluate(b2TimeOfImpact.s_xfA, b2TimeOfImpact.s_xfB);\n\n    if (f2 >= target) {\n      alpha = 1;\n      break;\n    }\n\n    var rootIterCount = 0;\n\n    for (;;) {\n      var x;\n\n      if (rootIterCount & 1) {\n        x = x1 + (target - f1) * (x2 - x1) / (f2 - f1);\n      } else {\n        x = 0.5 * (x1 + x2);\n      }\n\n      sweepA.GetTransform(b2TimeOfImpact.s_xfA, x);\n      sweepB.GetTransform(b2TimeOfImpact.s_xfB, x);\n      var f = b2TimeOfImpact.s_fcn.Evaluate(b2TimeOfImpact.s_xfA, b2TimeOfImpact.s_xfB);\n\n      if (b2Math.Abs(f - target) < 0.025 * tolerance) {\n        newAlpha = x;\n        break;\n      }\n\n      if (f > target) {\n        x1 = x;\n        f1 = f;\n      } else {\n        x2 = x;\n        f2 = f;\n      }\n\n      ++rootIterCount;\n      ++b2TimeOfImpact.b2_toiRootIters;\n\n      if (rootIterCount == 50) {\n        break;\n      }\n    }\n\n    b2TimeOfImpact.b2_toiMaxRootIters = b2Math.Max(b2TimeOfImpact.b2_toiMaxRootIters, rootIterCount);\n\n    if (newAlpha < (1 + 100 * Number.MIN_VALUE) * alpha) {\n      break;\n    }\n\n    alpha = newAlpha;\n    iter++;\n    ++b2TimeOfImpact.b2_toiIters;\n\n    if (iter == k_maxIterations) {\n      break;\n    }\n  }\n\n  b2TimeOfImpact.b2_toiMaxIters = b2Math.Max(b2TimeOfImpact.b2_toiMaxIters, iter);\n  return alpha;\n};\n\nb2TimeOfImpact.b2_toiCalls = 0;\nb2TimeOfImpact.b2_toiIters = 0;\nb2TimeOfImpact.b2_toiMaxIters = 0;\nb2TimeOfImpact.b2_toiRootIters = 0;\nb2TimeOfImpact.b2_toiMaxRootIters = 0;\nb2TimeOfImpact.s_cache = new b2SimplexCache();\nb2TimeOfImpact.s_distanceInput = new b2DistanceInput();\nb2TimeOfImpact.s_xfA = new b2Transform();\nb2TimeOfImpact.s_xfB = new b2Transform();\nb2TimeOfImpact.s_fcn = new b2SeparationFunction();\nb2TimeOfImpact.s_distanceOutput = new b2DistanceOutput();\n\nvar b2GearJoint = function () {\n  b2Joint.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2GearJoint.prototype, b2Joint.prototype);\nb2GearJoint.prototype._super = b2Joint.prototype;\n\nb2GearJoint.prototype.__constructor = function (def) {\n  this._super.__constructor.apply(this, [def]);\n\n  var type1 = def.joint1.m_type;\n  var type2 = def.joint2.m_type;\n  this.m_revolute1 = null;\n  this.m_prismatic1 = null;\n  this.m_revolute2 = null;\n  this.m_prismatic2 = null;\n  var coordinate1;\n  var coordinate2;\n  this.m_ground1 = def.joint1.GetBodyA();\n  this.m_bodyA = def.joint1.GetBodyB();\n\n  if (type1 == b2Joint.e_revoluteJoint) {\n    this.m_revolute1 = def.joint1;\n    this.m_groundAnchor1.SetV(this.m_revolute1.m_localAnchor1);\n    this.m_localAnchor1.SetV(this.m_revolute1.m_localAnchor2);\n    coordinate1 = this.m_revolute1.GetJointAngle();\n  } else {\n    this.m_prismatic1 = def.joint1;\n    this.m_groundAnchor1.SetV(this.m_prismatic1.m_localAnchor1);\n    this.m_localAnchor1.SetV(this.m_prismatic1.m_localAnchor2);\n    coordinate1 = this.m_prismatic1.GetJointTranslation();\n  }\n\n  this.m_ground2 = def.joint2.GetBodyA();\n  this.m_bodyB = def.joint2.GetBodyB();\n\n  if (type2 == b2Joint.e_revoluteJoint) {\n    this.m_revolute2 = def.joint2;\n    this.m_groundAnchor2.SetV(this.m_revolute2.m_localAnchor1);\n    this.m_localAnchor2.SetV(this.m_revolute2.m_localAnchor2);\n    coordinate2 = this.m_revolute2.GetJointAngle();\n  } else {\n    this.m_prismatic2 = def.joint2;\n    this.m_groundAnchor2.SetV(this.m_prismatic2.m_localAnchor1);\n    this.m_localAnchor2.SetV(this.m_prismatic2.m_localAnchor2);\n    coordinate2 = this.m_prismatic2.GetJointTranslation();\n  }\n\n  this.m_ratio = def.ratio;\n  this.m_constant = coordinate1 + this.m_ratio * coordinate2;\n  this.m_impulse = 0;\n};\n\nb2GearJoint.prototype.__varz = function () {\n  this.m_groundAnchor1 = new b2Vec2();\n  this.m_groundAnchor2 = new b2Vec2();\n  this.m_localAnchor1 = new b2Vec2();\n  this.m_localAnchor2 = new b2Vec2();\n  this.m_J = new b2Jacobian();\n};\n\nb2GearJoint.prototype.InitVelocityConstraints = function (step) {\n  var g1 = this.m_ground1;\n  var g2 = this.m_ground2;\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var ugX;\n  var ugY;\n  var rX;\n  var rY;\n  var tMat;\n  var tVec;\n  var crug;\n  var tX;\n  var K = 0;\n  this.m_J.SetZero();\n\n  if (this.m_revolute1) {\n    this.m_J.angularA = -1;\n    K += bA.m_invI;\n  } else {\n    tMat = g1.m_xf.R;\n    tVec = this.m_prismatic1.m_localXAxis1;\n    ugX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n    ugY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n    tMat = bA.m_xf.R;\n    rX = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n    rY = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n    tX = tMat.col1.x * rX + tMat.col2.x * rY;\n    rY = tMat.col1.y * rX + tMat.col2.y * rY;\n    rX = tX;\n    crug = rX * ugY - rY * ugX;\n    this.m_J.linearA.Set(-ugX, -ugY);\n    this.m_J.angularA = -crug;\n    K += bA.m_invMass + bA.m_invI * crug * crug;\n  }\n\n  if (this.m_revolute2) {\n    this.m_J.angularB = -this.m_ratio;\n    K += this.m_ratio * this.m_ratio * bB.m_invI;\n  } else {\n    tMat = g2.m_xf.R;\n    tVec = this.m_prismatic2.m_localXAxis1;\n    ugX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n    ugY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n    tMat = bB.m_xf.R;\n    rX = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n    rY = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n    tX = tMat.col1.x * rX + tMat.col2.x * rY;\n    rY = tMat.col1.y * rX + tMat.col2.y * rY;\n    rX = tX;\n    crug = rX * ugY - rY * ugX;\n    this.m_J.linearB.Set(-this.m_ratio * ugX, -this.m_ratio * ugY);\n    this.m_J.angularB = -this.m_ratio * crug;\n    K += this.m_ratio * this.m_ratio * (bB.m_invMass + bB.m_invI * crug * crug);\n  }\n\n  this.m_mass = K > 0 ? 1 / K : 0;\n\n  if (step.warmStarting) {\n    bA.m_linearVelocity.x += bA.m_invMass * this.m_impulse * this.m_J.linearA.x;\n    bA.m_linearVelocity.y += bA.m_invMass * this.m_impulse * this.m_J.linearA.y;\n    bA.m_angularVelocity += bA.m_invI * this.m_impulse * this.m_J.angularA;\n    bB.m_linearVelocity.x += bB.m_invMass * this.m_impulse * this.m_J.linearB.x;\n    bB.m_linearVelocity.y += bB.m_invMass * this.m_impulse * this.m_J.linearB.y;\n    bB.m_angularVelocity += bB.m_invI * this.m_impulse * this.m_J.angularB;\n  } else {\n    this.m_impulse = 0;\n  }\n};\n\nb2GearJoint.prototype.SolveVelocityConstraints = function (step) {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var Cdot = this.m_J.Compute(bA.m_linearVelocity, bA.m_angularVelocity, bB.m_linearVelocity, bB.m_angularVelocity);\n  var impulse = -this.m_mass * Cdot;\n  this.m_impulse += impulse;\n  bA.m_linearVelocity.x += bA.m_invMass * impulse * this.m_J.linearA.x;\n  bA.m_linearVelocity.y += bA.m_invMass * impulse * this.m_J.linearA.y;\n  bA.m_angularVelocity += bA.m_invI * impulse * this.m_J.angularA;\n  bB.m_linearVelocity.x += bB.m_invMass * impulse * this.m_J.linearB.x;\n  bB.m_linearVelocity.y += bB.m_invMass * impulse * this.m_J.linearB.y;\n  bB.m_angularVelocity += bB.m_invI * impulse * this.m_J.angularB;\n};\n\nb2GearJoint.prototype.SolvePositionConstraints = function (baumgarte) {\n  var linearError = 0;\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  var coordinate1;\n  var coordinate2;\n\n  if (this.m_revolute1) {\n    coordinate1 = this.m_revolute1.GetJointAngle();\n  } else {\n    coordinate1 = this.m_prismatic1.GetJointTranslation();\n  }\n\n  if (this.m_revolute2) {\n    coordinate2 = this.m_revolute2.GetJointAngle();\n  } else {\n    coordinate2 = this.m_prismatic2.GetJointTranslation();\n  }\n\n  var C = this.m_constant - (coordinate1 + this.m_ratio * coordinate2);\n  var impulse = -this.m_mass * C;\n  bA.m_sweep.c.x += bA.m_invMass * impulse * this.m_J.linearA.x;\n  bA.m_sweep.c.y += bA.m_invMass * impulse * this.m_J.linearA.y;\n  bA.m_sweep.a += bA.m_invI * impulse * this.m_J.angularA;\n  bB.m_sweep.c.x += bB.m_invMass * impulse * this.m_J.linearB.x;\n  bB.m_sweep.c.y += bB.m_invMass * impulse * this.m_J.linearB.y;\n  bB.m_sweep.a += bB.m_invI * impulse * this.m_J.angularB;\n  bA.SynchronizeTransform();\n  bB.SynchronizeTransform();\n  return linearError < b2Settings.b2_linearSlop;\n};\n\nb2GearJoint.prototype.GetAnchorA = function () {\n  return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);\n};\n\nb2GearJoint.prototype.GetAnchorB = function () {\n  return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);\n};\n\nb2GearJoint.prototype.GetReactionForce = function (inv_dt) {\n  return new b2Vec2(inv_dt * this.m_impulse * this.m_J.linearB.x, inv_dt * this.m_impulse * this.m_J.linearB.y);\n};\n\nb2GearJoint.prototype.GetReactionTorque = function (inv_dt) {\n  var tMat = this.m_bodyB.m_xf.R;\n  var rX = this.m_localAnchor1.x - this.m_bodyB.m_sweep.localCenter.x;\n  var rY = this.m_localAnchor1.y - this.m_bodyB.m_sweep.localCenter.y;\n  var tX = tMat.col1.x * rX + tMat.col2.x * rY;\n  rY = tMat.col1.y * rX + tMat.col2.y * rY;\n  rX = tX;\n  var PX = this.m_impulse * this.m_J.linearB.x;\n  var PY = this.m_impulse * this.m_J.linearB.y;\n  return inv_dt * (this.m_impulse * this.m_J.angularB - rX * PY + rY * PX);\n};\n\nb2GearJoint.prototype.GetRatio = function () {\n  return this.m_ratio;\n};\n\nb2GearJoint.prototype.SetRatio = function (ratio) {\n  this.m_ratio = ratio;\n};\n\nb2GearJoint.prototype.m_ground1 = null;\nb2GearJoint.prototype.m_ground2 = null;\nb2GearJoint.prototype.m_revolute1 = null;\nb2GearJoint.prototype.m_prismatic1 = null;\nb2GearJoint.prototype.m_revolute2 = null;\nb2GearJoint.prototype.m_prismatic2 = null;\nb2GearJoint.prototype.m_groundAnchor1 = new b2Vec2();\nb2GearJoint.prototype.m_groundAnchor2 = new b2Vec2();\nb2GearJoint.prototype.m_localAnchor1 = new b2Vec2();\nb2GearJoint.prototype.m_localAnchor2 = new b2Vec2();\nb2GearJoint.prototype.m_J = new b2Jacobian();\nb2GearJoint.prototype.m_constant = null;\nb2GearJoint.prototype.m_ratio = null;\nb2GearJoint.prototype.m_mass = null;\nb2GearJoint.prototype.m_impulse = null;\n\nvar b2TOIInput = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2TOIInput.prototype.__constructor = function () {};\n\nb2TOIInput.prototype.__varz = function () {\n  this.proxyA = new b2DistanceProxy();\n  this.proxyB = new b2DistanceProxy();\n  this.sweepA = new b2Sweep();\n  this.sweepB = new b2Sweep();\n};\n\nb2TOIInput.prototype.proxyA = new b2DistanceProxy();\nb2TOIInput.prototype.proxyB = new b2DistanceProxy();\nb2TOIInput.prototype.sweepA = new b2Sweep();\nb2TOIInput.prototype.sweepB = new b2Sweep();\nb2TOIInput.prototype.tolerance = null;\n\nvar b2RevoluteJointDef = function () {\n  b2JointDef.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2RevoluteJointDef.prototype, b2JointDef.prototype);\nb2RevoluteJointDef.prototype._super = b2JointDef.prototype;\n\nb2RevoluteJointDef.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n\n  this.type = b2Joint.e_revoluteJoint;\n  this.localAnchorA.Set(0, 0);\n  this.localAnchorB.Set(0, 0);\n  this.referenceAngle = 0;\n  this.lowerAngle = 0;\n  this.upperAngle = 0;\n  this.maxMotorTorque = 0;\n  this.motorSpeed = 0;\n  this.enableLimit = false;\n  this.enableMotor = false;\n};\n\nb2RevoluteJointDef.prototype.__varz = function () {\n  this.localAnchorA = new b2Vec2();\n  this.localAnchorB = new b2Vec2();\n};\n\nb2RevoluteJointDef.prototype.Initialize = function (bA, bB, anchor) {\n  this.bodyA = bA;\n  this.bodyB = bB;\n  this.localAnchorA = this.bodyA.GetLocalPoint(anchor);\n  this.localAnchorB = this.bodyB.GetLocalPoint(anchor);\n  this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\n};\n\nb2RevoluteJointDef.prototype.localAnchorA = new b2Vec2();\nb2RevoluteJointDef.prototype.localAnchorB = new b2Vec2();\nb2RevoluteJointDef.prototype.referenceAngle = null;\nb2RevoluteJointDef.prototype.enableLimit = null;\nb2RevoluteJointDef.prototype.lowerAngle = null;\nb2RevoluteJointDef.prototype.upperAngle = null;\nb2RevoluteJointDef.prototype.enableMotor = null;\nb2RevoluteJointDef.prototype.motorSpeed = null;\nb2RevoluteJointDef.prototype.maxMotorTorque = null;\n\nvar b2MouseJointDef = function () {\n  b2JointDef.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2MouseJointDef.prototype, b2JointDef.prototype);\nb2MouseJointDef.prototype._super = b2JointDef.prototype;\n\nb2MouseJointDef.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n\n  this.type = b2Joint.e_mouseJoint;\n  this.maxForce = 0;\n  this.frequencyHz = 5;\n  this.dampingRatio = 0.7;\n};\n\nb2MouseJointDef.prototype.__varz = function () {\n  this.target = new b2Vec2();\n};\n\nb2MouseJointDef.prototype.target = new b2Vec2();\nb2MouseJointDef.prototype.maxForce = null;\nb2MouseJointDef.prototype.frequencyHz = null;\nb2MouseJointDef.prototype.dampingRatio = null;\n\nvar b2Contact = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Contact.prototype.__constructor = function () {};\n\nb2Contact.prototype.__varz = function () {\n  this.m_nodeA = new b2ContactEdge();\n  this.m_nodeB = new b2ContactEdge();\n  this.m_manifold = new b2Manifold();\n  this.m_oldManifold = new b2Manifold();\n};\n\nb2Contact.s_input = new b2TOIInput();\nb2Contact.e_sensorFlag = 1;\nb2Contact.e_continuousFlag = 2;\nb2Contact.e_islandFlag = 4;\nb2Contact.e_toiFlag = 8;\nb2Contact.e_touchingFlag = 16;\nb2Contact.e_enabledFlag = 32;\nb2Contact.e_filterFlag = 64;\n\nb2Contact.prototype.Reset = function (fixtureA, fixtureB) {\n  this.m_flags = b2Contact.e_enabledFlag;\n\n  if (!fixtureA || !fixtureB) {\n    this.m_fixtureA = null;\n    this.m_fixtureB = null;\n    return;\n  }\n\n  if (fixtureA.IsSensor() || fixtureB.IsSensor()) {\n    this.m_flags |= b2Contact.e_sensorFlag;\n  }\n\n  var bodyA = fixtureA.GetBody();\n  var bodyB = fixtureB.GetBody();\n\n  if (bodyA.GetType() != b2Body.b2_dynamicBody || bodyA.IsBullet() || bodyB.GetType() != b2Body.b2_dynamicBody || bodyB.IsBullet()) {\n    this.m_flags |= b2Contact.e_continuousFlag;\n  }\n\n  this.m_fixtureA = fixtureA;\n  this.m_fixtureB = fixtureB;\n  this.m_manifold.m_pointCount = 0;\n  this.m_prev = null;\n  this.m_next = null;\n  this.m_nodeA.contact = null;\n  this.m_nodeA.prev = null;\n  this.m_nodeA.next = null;\n  this.m_nodeA.other = null;\n  this.m_nodeB.contact = null;\n  this.m_nodeB.prev = null;\n  this.m_nodeB.next = null;\n  this.m_nodeB.other = null;\n};\n\nb2Contact.prototype.Update = function (listener) {\n  var tManifold = this.m_oldManifold;\n  this.m_oldManifold = this.m_manifold;\n  this.m_manifold = tManifold;\n  this.m_flags |= b2Contact.e_enabledFlag;\n  var touching = false;\n  var wasTouching = (this.m_flags & b2Contact.e_touchingFlag) == b2Contact.e_touchingFlag;\n  var bodyA = this.m_fixtureA.m_body;\n  var bodyB = this.m_fixtureB.m_body;\n  var aabbOverlap = this.m_fixtureA.m_aabb.TestOverlap(this.m_fixtureB.m_aabb);\n\n  if (this.m_flags & b2Contact.e_sensorFlag) {\n    if (aabbOverlap) {\n      var shapeA = this.m_fixtureA.GetShape();\n      var shapeB = this.m_fixtureB.GetShape();\n      var xfA = bodyA.GetTransform();\n      var xfB = bodyB.GetTransform();\n      touching = b2Shape.TestOverlap(shapeA, xfA, shapeB, xfB);\n    }\n\n    this.m_manifold.m_pointCount = 0;\n  } else {\n    if (bodyA.GetType() != b2Body.b2_dynamicBody || bodyA.IsBullet() || bodyB.GetType() != b2Body.b2_dynamicBody || bodyB.IsBullet()) {\n      this.m_flags |= b2Contact.e_continuousFlag;\n    } else {\n      this.m_flags &= ~b2Contact.e_continuousFlag;\n    }\n\n    if (aabbOverlap) {\n      this.Evaluate();\n      touching = this.m_manifold.m_pointCount > 0;\n\n      for (var i = 0; i < this.m_manifold.m_pointCount; ++i) {\n        var mp2 = this.m_manifold.m_points[i];\n        mp2.m_normalImpulse = 0;\n        mp2.m_tangentImpulse = 0;\n        var id2 = mp2.m_id;\n\n        for (var j = 0; j < this.m_oldManifold.m_pointCount; ++j) {\n          var mp1 = this.m_oldManifold.m_points[j];\n\n          if (mp1.m_id.key == id2.key) {\n            mp2.m_normalImpulse = mp1.m_normalImpulse;\n            mp2.m_tangentImpulse = mp1.m_tangentImpulse;\n            break;\n          }\n        }\n      }\n    } else {\n      this.m_manifold.m_pointCount = 0;\n    }\n\n    if (touching != wasTouching) {\n      bodyA.SetAwake(true);\n      bodyB.SetAwake(true);\n    }\n  }\n\n  if (touching) {\n    this.m_flags |= b2Contact.e_touchingFlag;\n  } else {\n    this.m_flags &= ~b2Contact.e_touchingFlag;\n  }\n\n  if (wasTouching == false && touching == true) {\n    listener.BeginContact(this);\n  }\n\n  if (wasTouching == true && touching == false) {\n    listener.EndContact(this);\n  }\n\n  if ((this.m_flags & b2Contact.e_sensorFlag) == 0) {\n    listener.PreSolve(this, this.m_oldManifold);\n  }\n};\n\nb2Contact.prototype.Evaluate = function () {};\n\nb2Contact.prototype.ComputeTOI = function (sweepA, sweepB) {\n  b2Contact.s_input.proxyA.Set(this.m_fixtureA.GetShape());\n  b2Contact.s_input.proxyB.Set(this.m_fixtureB.GetShape());\n  b2Contact.s_input.sweepA = sweepA;\n  b2Contact.s_input.sweepB = sweepB;\n  b2Contact.s_input.tolerance = b2Settings.b2_linearSlop;\n  return b2TimeOfImpact.TimeOfImpact(b2Contact.s_input);\n};\n\nb2Contact.prototype.GetManifold = function () {\n  return this.m_manifold;\n};\n\nb2Contact.prototype.GetWorldManifold = function (worldManifold) {\n  var bodyA = this.m_fixtureA.GetBody();\n  var bodyB = this.m_fixtureB.GetBody();\n  var shapeA = this.m_fixtureA.GetShape();\n  var shapeB = this.m_fixtureB.GetShape();\n  worldManifold.Initialize(this.m_manifold, bodyA.GetTransform(), shapeA.m_radius, bodyB.GetTransform(), shapeB.m_radius);\n};\n\nb2Contact.prototype.IsTouching = function () {\n  return (this.m_flags & b2Contact.e_touchingFlag) == b2Contact.e_touchingFlag;\n};\n\nb2Contact.prototype.IsContinuous = function () {\n  return (this.m_flags & b2Contact.e_continuousFlag) == b2Contact.e_continuousFlag;\n};\n\nb2Contact.prototype.SetSensor = function (sensor) {\n  if (sensor) {\n    this.m_flags |= b2Contact.e_sensorFlag;\n  } else {\n    this.m_flags &= ~b2Contact.e_sensorFlag;\n  }\n};\n\nb2Contact.prototype.IsSensor = function () {\n  return (this.m_flags & b2Contact.e_sensorFlag) == b2Contact.e_sensorFlag;\n};\n\nb2Contact.prototype.SetEnabled = function (flag) {\n  if (flag) {\n    this.m_flags |= b2Contact.e_enabledFlag;\n  } else {\n    this.m_flags &= ~b2Contact.e_enabledFlag;\n  }\n};\n\nb2Contact.prototype.IsEnabled = function () {\n  return (this.m_flags & b2Contact.e_enabledFlag) == b2Contact.e_enabledFlag;\n};\n\nb2Contact.prototype.GetNext = function () {\n  return this.m_next;\n};\n\nb2Contact.prototype.GetFixtureA = function () {\n  return this.m_fixtureA;\n};\n\nb2Contact.prototype.GetFixtureB = function () {\n  return this.m_fixtureB;\n};\n\nb2Contact.prototype.FlagForFiltering = function () {\n  this.m_flags |= b2Contact.e_filterFlag;\n};\n\nb2Contact.prototype.m_flags = 0;\nb2Contact.prototype.m_prev = null;\nb2Contact.prototype.m_next = null;\nb2Contact.prototype.m_nodeA = new b2ContactEdge();\nb2Contact.prototype.m_nodeB = new b2ContactEdge();\nb2Contact.prototype.m_fixtureA = null;\nb2Contact.prototype.m_fixtureB = null;\nb2Contact.prototype.m_manifold = new b2Manifold();\nb2Contact.prototype.m_oldManifold = new b2Manifold();\nb2Contact.prototype.m_toi = null;\n\nvar b2ContactConstraint = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2ContactConstraint.prototype.__constructor = function () {\n  this.points = new Array(b2Settings.b2_maxManifoldPoints);\n\n  for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {\n    this.points[i] = new b2ContactConstraintPoint();\n  }\n};\n\nb2ContactConstraint.prototype.__varz = function () {\n  this.localPlaneNormal = new b2Vec2();\n  this.localPoint = new b2Vec2();\n  this.normal = new b2Vec2();\n  this.normalMass = new b2Mat22();\n  this.K = new b2Mat22();\n};\n\nb2ContactConstraint.prototype.points = null;\nb2ContactConstraint.prototype.localPlaneNormal = new b2Vec2();\nb2ContactConstraint.prototype.localPoint = new b2Vec2();\nb2ContactConstraint.prototype.normal = new b2Vec2();\nb2ContactConstraint.prototype.normalMass = new b2Mat22();\nb2ContactConstraint.prototype.K = new b2Mat22();\nb2ContactConstraint.prototype.bodyA = null;\nb2ContactConstraint.prototype.bodyB = null;\nb2ContactConstraint.prototype.type = 0;\nb2ContactConstraint.prototype.radius = null;\nb2ContactConstraint.prototype.friction = null;\nb2ContactConstraint.prototype.restitution = null;\nb2ContactConstraint.prototype.pointCount = 0;\nb2ContactConstraint.prototype.manifold = null;\n\nvar b2ContactResult = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2ContactResult.prototype.__constructor = function () {};\n\nb2ContactResult.prototype.__varz = function () {\n  this.position = new b2Vec2();\n  this.normal = new b2Vec2();\n  this.id = new b2ContactID();\n};\n\nb2ContactResult.prototype.shape1 = null;\nb2ContactResult.prototype.shape2 = null;\nb2ContactResult.prototype.position = new b2Vec2();\nb2ContactResult.prototype.normal = new b2Vec2();\nb2ContactResult.prototype.normalImpulse = null;\nb2ContactResult.prototype.tangentImpulse = null;\nb2ContactResult.prototype.id = new b2ContactID();\n\nvar b2PolygonContact = function () {\n  b2Contact.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2PolygonContact.prototype, b2Contact.prototype);\nb2PolygonContact.prototype._super = b2Contact.prototype;\n\nb2PolygonContact.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n};\n\nb2PolygonContact.prototype.__varz = function () {};\n\nb2PolygonContact.Create = function (allocator) {\n  return new b2PolygonContact();\n};\n\nb2PolygonContact.Destroy = function (contact, allocator) {};\n\nb2PolygonContact.prototype.Evaluate = function () {\n  var bA = this.m_fixtureA.GetBody();\n  var bB = this.m_fixtureB.GetBody();\n  b2Collision.CollidePolygons(this.m_manifold, this.m_fixtureA.GetShape(), bA.m_xf, this.m_fixtureB.GetShape(), bB.m_xf);\n};\n\nb2PolygonContact.prototype.Reset = function (fixtureA, fixtureB) {\n  this._super.Reset.apply(this, [fixtureA, fixtureB]);\n};\n\nvar ClipVertex = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nClipVertex.prototype.__constructor = function () {};\n\nClipVertex.prototype.__varz = function () {\n  this.v = new b2Vec2();\n  this.id = new b2ContactID();\n};\n\nClipVertex.prototype.Set = function (other) {\n  this.v.SetV(other.v);\n  this.id.Set(other.id);\n};\n\nClipVertex.prototype.v = new b2Vec2();\nClipVertex.prototype.id = new b2ContactID();\n\nvar b2ContactFilter = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2ContactFilter.prototype.__constructor = function () {};\n\nb2ContactFilter.prototype.__varz = function () {};\n\nb2ContactFilter.b2_defaultFilter = new b2ContactFilter();\n\nb2ContactFilter.prototype.ShouldCollide = function (fixtureA, fixtureB) {\n  var filter1 = fixtureA.GetFilterData();\n  var filter2 = fixtureB.GetFilterData();\n\n  if (filter1.groupIndex == filter2.groupIndex && filter1.groupIndex != 0) {\n    return filter1.groupIndex > 0;\n  }\n\n  var collide = (filter1.maskBits & filter2.categoryBits) != 0 && (filter1.categoryBits & filter2.maskBits) != 0;\n  return collide;\n};\n\nb2ContactFilter.prototype.RayCollide = function (userData, fixture) {\n  if (!userData) {\n    return true;\n  }\n\n  return this.ShouldCollide(userData, fixture);\n};\n\nvar b2NullContact = function () {\n  b2Contact.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2NullContact.prototype, b2Contact.prototype);\nb2NullContact.prototype._super = b2Contact.prototype;\n\nb2NullContact.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n};\n\nb2NullContact.prototype.__varz = function () {};\n\nb2NullContact.prototype.Evaluate = function () {};\n\nvar b2ContactListener = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2ContactListener.prototype.__constructor = function () {};\n\nb2ContactListener.prototype.__varz = function () {};\n\nb2ContactListener.b2_defaultListener = new b2ContactListener();\n\nb2ContactListener.prototype.BeginContact = function (contact) {};\n\nb2ContactListener.prototype.EndContact = function (contact) {};\n\nb2ContactListener.prototype.PreSolve = function (contact, oldManifold) {};\n\nb2ContactListener.prototype.PostSolve = function (contact, impulse) {};\n\nvar b2Island = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Island.prototype.__constructor = function () {\n  this.m_bodies = new Array();\n  this.m_contacts = new Array();\n  this.m_joints = new Array();\n};\n\nb2Island.prototype.__varz = function () {};\n\nb2Island.s_impulse = new b2ContactImpulse();\n\nb2Island.prototype.Initialize = function (bodyCapacity, contactCapacity, jointCapacity, allocator, listener, contactSolver) {\n  var i = 0;\n  this.m_bodyCapacity = bodyCapacity;\n  this.m_contactCapacity = contactCapacity;\n  this.m_jointCapacity = jointCapacity;\n  this.m_bodyCount = 0;\n  this.m_contactCount = 0;\n  this.m_jointCount = 0;\n  this.m_allocator = allocator;\n  this.m_listener = listener;\n  this.m_contactSolver = contactSolver;\n\n  for (i = this.m_bodies.length; i < bodyCapacity; i++) {\n    this.m_bodies[i] = null;\n  }\n\n  for (i = this.m_contacts.length; i < contactCapacity; i++) {\n    this.m_contacts[i] = null;\n  }\n\n  for (i = this.m_joints.length; i < jointCapacity; i++) {\n    this.m_joints[i] = null;\n  }\n};\n\nb2Island.prototype.Clear = function () {\n  this.m_bodyCount = 0;\n  this.m_contactCount = 0;\n  this.m_jointCount = 0;\n};\n\nb2Island.prototype.Solve = function (step, gravity, allowSleep) {\n  var i = 0;\n  var j = 0;\n  var b;\n  var joint;\n\n  for (i = 0; i < this.m_bodyCount; ++i) {\n    b = this.m_bodies[i];\n\n    if (b.GetType() != b2Body.b2_dynamicBody) {\n      continue;\n    }\n\n    b.m_linearVelocity.x += step.dt * (gravity.x + b.m_invMass * b.m_force.x);\n    b.m_linearVelocity.y += step.dt * (gravity.y + b.m_invMass * b.m_force.y);\n    b.m_angularVelocity += step.dt * b.m_invI * b.m_torque;\n    b.m_linearVelocity.Multiply(b2Math.Clamp(1 - step.dt * b.m_linearDamping, 0, 1));\n    b.m_angularVelocity *= b2Math.Clamp(1 - step.dt * b.m_angularDamping, 0, 1);\n  }\n\n  this.m_contactSolver.Initialize(step, this.m_contacts, this.m_contactCount, this.m_allocator);\n  var contactSolver = this.m_contactSolver;\n  contactSolver.InitVelocityConstraints(step);\n\n  for (i = 0; i < this.m_jointCount; ++i) {\n    joint = this.m_joints[i];\n    joint.InitVelocityConstraints(step);\n  }\n\n  for (i = 0; i < step.velocityIterations; ++i) {\n    for (j = 0; j < this.m_jointCount; ++j) {\n      joint = this.m_joints[j];\n      joint.SolveVelocityConstraints(step);\n    }\n\n    contactSolver.SolveVelocityConstraints();\n  }\n\n  for (i = 0; i < this.m_jointCount; ++i) {\n    joint = this.m_joints[i];\n    joint.FinalizeVelocityConstraints();\n  }\n\n  contactSolver.FinalizeVelocityConstraints();\n\n  for (i = 0; i < this.m_bodyCount; ++i) {\n    b = this.m_bodies[i];\n\n    if (b.GetType() == b2Body.b2_staticBody) {\n      continue;\n    }\n\n    var translationX = step.dt * b.m_linearVelocity.x;\n    var translationY = step.dt * b.m_linearVelocity.y;\n\n    if (translationX * translationX + translationY * translationY > b2Settings.b2_maxTranslationSquared) {\n      b.m_linearVelocity.Normalize();\n      b.m_linearVelocity.x *= b2Settings.b2_maxTranslation * step.inv_dt;\n      b.m_linearVelocity.y *= b2Settings.b2_maxTranslation * step.inv_dt;\n    }\n\n    var rotation = step.dt * b.m_angularVelocity;\n\n    if (rotation * rotation > b2Settings.b2_maxRotationSquared) {\n      if (b.m_angularVelocity < 0) {\n        b.m_angularVelocity = -b2Settings.b2_maxRotation * step.inv_dt;\n      } else {\n        b.m_angularVelocity = b2Settings.b2_maxRotation * step.inv_dt;\n      }\n    }\n\n    b.m_sweep.c0.SetV(b.m_sweep.c);\n    b.m_sweep.a0 = b.m_sweep.a;\n    b.m_sweep.c.x += step.dt * b.m_linearVelocity.x;\n    b.m_sweep.c.y += step.dt * b.m_linearVelocity.y;\n    b.m_sweep.a += step.dt * b.m_angularVelocity;\n    b.SynchronizeTransform();\n  }\n\n  for (i = 0; i < step.positionIterations; ++i) {\n    var contactsOkay = contactSolver.SolvePositionConstraints(b2Settings.b2_contactBaumgarte);\n    var jointsOkay = true;\n\n    for (j = 0; j < this.m_jointCount; ++j) {\n      joint = this.m_joints[j];\n      var jointOkay = joint.SolvePositionConstraints(b2Settings.b2_contactBaumgarte);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      break;\n    }\n  }\n\n  this.Report(contactSolver.m_constraints);\n\n  if (allowSleep) {\n    var minSleepTime = Number.MAX_VALUE;\n    var linTolSqr = b2Settings.b2_linearSleepTolerance * b2Settings.b2_linearSleepTolerance;\n    var angTolSqr = b2Settings.b2_angularSleepTolerance * b2Settings.b2_angularSleepTolerance;\n\n    for (i = 0; i < this.m_bodyCount; ++i) {\n      b = this.m_bodies[i];\n\n      if (b.GetType() == b2Body.b2_staticBody) {\n        continue;\n      }\n\n      if ((b.m_flags & b2Body.e_allowSleepFlag) == 0) {\n        b.m_sleepTime = 0;\n        minSleepTime = 0;\n      }\n\n      if ((b.m_flags & b2Body.e_allowSleepFlag) == 0 || b.m_angularVelocity * b.m_angularVelocity > angTolSqr || b2Math.Dot(b.m_linearVelocity, b.m_linearVelocity) > linTolSqr) {\n        b.m_sleepTime = 0;\n        minSleepTime = 0;\n      } else {\n        b.m_sleepTime += step.dt;\n        minSleepTime = b2Math.Min(minSleepTime, b.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= b2Settings.b2_timeToSleep) {\n      for (i = 0; i < this.m_bodyCount; ++i) {\n        b = this.m_bodies[i];\n        b.SetAwake(false);\n      }\n    }\n  }\n};\n\nb2Island.prototype.SolveTOI = function (subStep) {\n  var i = 0;\n  var j = 0;\n  this.m_contactSolver.Initialize(subStep, this.m_contacts, this.m_contactCount, this.m_allocator);\n  var contactSolver = this.m_contactSolver;\n\n  for (i = 0; i < this.m_jointCount; ++i) {\n    this.m_joints[i].InitVelocityConstraints(subStep);\n  }\n\n  for (i = 0; i < subStep.velocityIterations; ++i) {\n    contactSolver.SolveVelocityConstraints();\n\n    for (j = 0; j < this.m_jointCount; ++j) {\n      this.m_joints[j].SolveVelocityConstraints(subStep);\n    }\n  }\n\n  for (i = 0; i < this.m_bodyCount; ++i) {\n    var b = this.m_bodies[i];\n\n    if (b.GetType() == b2Body.b2_staticBody) {\n      continue;\n    }\n\n    var translationX = subStep.dt * b.m_linearVelocity.x;\n    var translationY = subStep.dt * b.m_linearVelocity.y;\n\n    if (translationX * translationX + translationY * translationY > b2Settings.b2_maxTranslationSquared) {\n      b.m_linearVelocity.Normalize();\n      b.m_linearVelocity.x *= b2Settings.b2_maxTranslation * subStep.inv_dt;\n      b.m_linearVelocity.y *= b2Settings.b2_maxTranslation * subStep.inv_dt;\n    }\n\n    var rotation = subStep.dt * b.m_angularVelocity;\n\n    if (rotation * rotation > b2Settings.b2_maxRotationSquared) {\n      if (b.m_angularVelocity < 0) {\n        b.m_angularVelocity = -b2Settings.b2_maxRotation * subStep.inv_dt;\n      } else {\n        b.m_angularVelocity = b2Settings.b2_maxRotation * subStep.inv_dt;\n      }\n    }\n\n    b.m_sweep.c0.SetV(b.m_sweep.c);\n    b.m_sweep.a0 = b.m_sweep.a;\n    b.m_sweep.c.x += subStep.dt * b.m_linearVelocity.x;\n    b.m_sweep.c.y += subStep.dt * b.m_linearVelocity.y;\n    b.m_sweep.a += subStep.dt * b.m_angularVelocity;\n    b.SynchronizeTransform();\n  }\n\n  var k_toiBaumgarte = 0.75;\n\n  for (i = 0; i < subStep.positionIterations; ++i) {\n    var contactsOkay = contactSolver.SolvePositionConstraints(k_toiBaumgarte);\n    var jointsOkay = true;\n\n    for (j = 0; j < this.m_jointCount; ++j) {\n      var jointOkay = this.m_joints[j].SolvePositionConstraints(b2Settings.b2_contactBaumgarte);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      break;\n    }\n  }\n\n  this.Report(contactSolver.m_constraints);\n};\n\nb2Island.prototype.Report = function (constraints) {\n  if (this.m_listener == null) {\n    return;\n  }\n\n  for (var i = 0; i < this.m_contactCount; ++i) {\n    var c = this.m_contacts[i];\n    var cc = constraints[i];\n\n    for (var j = 0; j < cc.pointCount; ++j) {\n      b2Island.s_impulse.normalImpulses[j] = cc.points[j].normalImpulse;\n      b2Island.s_impulse.tangentImpulses[j] = cc.points[j].tangentImpulse;\n    }\n\n    this.m_listener.PostSolve(c, b2Island.s_impulse);\n  }\n};\n\nb2Island.prototype.AddBody = function (body) {\n  body.m_islandIndex = this.m_bodyCount;\n  this.m_bodies[this.m_bodyCount++] = body;\n};\n\nb2Island.prototype.AddContact = function (contact) {\n  this.m_contacts[this.m_contactCount++] = contact;\n};\n\nb2Island.prototype.AddJoint = function (joint) {\n  this.m_joints[this.m_jointCount++] = joint;\n};\n\nb2Island.prototype.m_allocator = null;\nb2Island.prototype.m_listener = null;\nb2Island.prototype.m_contactSolver = null;\nb2Island.prototype.m_bodies = null;\nb2Island.prototype.m_contacts = null;\nb2Island.prototype.m_joints = null;\nb2Island.prototype.m_bodyCount = 0;\nb2Island.prototype.m_jointCount = 0;\nb2Island.prototype.m_contactCount = 0;\nb2Island.prototype.m_bodyCapacity = 0;\nb2Island.prototype.m_contactCapacity = 0;\nb2Island.prototype.m_jointCapacity = 0;\n\nvar b2PolyAndEdgeContact = function () {\n  b2Contact.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2PolyAndEdgeContact.prototype, b2Contact.prototype);\nb2PolyAndEdgeContact.prototype._super = b2Contact.prototype;\n\nb2PolyAndEdgeContact.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n};\n\nb2PolyAndEdgeContact.prototype.__varz = function () {};\n\nb2PolyAndEdgeContact.Create = function (allocator) {\n  return new b2PolyAndEdgeContact();\n};\n\nb2PolyAndEdgeContact.Destroy = function (contact, allocator) {};\n\nb2PolyAndEdgeContact.prototype.Evaluate = function () {\n  var bA = this.m_fixtureA.GetBody();\n  var bB = this.m_fixtureB.GetBody();\n  this.b2CollidePolyAndEdge(this.m_manifold, this.m_fixtureA.GetShape(), bA.m_xf, this.m_fixtureB.GetShape(), bB.m_xf);\n};\n\nb2PolyAndEdgeContact.prototype.b2CollidePolyAndEdge = function (manifold, polygon, xf1, edge, xf2) {};\n\nb2PolyAndEdgeContact.prototype.Reset = function (fixtureA, fixtureB) {\n  this._super.Reset.apply(this, [fixtureA, fixtureB]);\n\n  b2Settings.b2Assert(fixtureA.GetType() == b2Shape.e_polygonShape);\n  b2Settings.b2Assert(fixtureB.GetType() == b2Shape.e_edgeShape);\n};\n\nvar b2Collision = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2Collision.prototype.__constructor = function () {};\n\nb2Collision.prototype.__varz = function () {};\n\nb2Collision.MakeClipPointVector = function () {\n  var r = new Array(2);\n  r[0] = new ClipVertex();\n  r[1] = new ClipVertex();\n  return r;\n};\n\nb2Collision.ClipSegmentToLine = function (vOut, vIn, normal, offset) {\n  var cv;\n  var numOut = 0;\n  cv = vIn[0];\n  var vIn0 = cv.v;\n  cv = vIn[1];\n  var vIn1 = cv.v;\n  var distance0 = normal.x * vIn0.x + normal.y * vIn0.y - offset;\n  var distance1 = normal.x * vIn1.x + normal.y * vIn1.y - offset;\n\n  if (distance0 <= 0) {\n    vOut[numOut++].Set(vIn[0]);\n  }\n\n  if (distance1 <= 0) {\n    vOut[numOut++].Set(vIn[1]);\n  }\n\n  if (distance0 * distance1 < 0) {\n    var interp = distance0 / (distance0 - distance1);\n    cv = vOut[numOut];\n    var tVec = cv.v;\n    tVec.x = vIn0.x + interp * (vIn1.x - vIn0.x);\n    tVec.y = vIn0.y + interp * (vIn1.y - vIn0.y);\n    cv = vOut[numOut];\n    var cv2;\n\n    if (distance0 > 0) {\n      cv2 = vIn[0];\n      cv.id = cv2.id;\n    } else {\n      cv2 = vIn[1];\n      cv.id = cv2.id;\n    }\n\n    ++numOut;\n  }\n\n  return numOut;\n};\n\nb2Collision.EdgeSeparation = function (poly1, xf1, edge1, poly2, xf2) {\n  var count1 = poly1.m_vertexCount;\n  var vertices1 = poly1.m_vertices;\n  var normals1 = poly1.m_normals;\n  var count2 = poly2.m_vertexCount;\n  var vertices2 = poly2.m_vertices;\n  var tMat;\n  var tVec;\n  tMat = xf1.R;\n  tVec = normals1[edge1];\n  var normal1WorldX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n  var normal1WorldY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n  tMat = xf2.R;\n  var normal1X = tMat.col1.x * normal1WorldX + tMat.col1.y * normal1WorldY;\n  var normal1Y = tMat.col2.x * normal1WorldX + tMat.col2.y * normal1WorldY;\n  var index = 0;\n  var minDot = Number.MAX_VALUE;\n\n  for (var i = 0; i < count2; ++i) {\n    tVec = vertices2[i];\n    var dot = tVec.x * normal1X + tVec.y * normal1Y;\n\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  tVec = vertices1[edge1];\n  tMat = xf1.R;\n  var v1X = xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n  var v1Y = xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n  tVec = vertices2[index];\n  tMat = xf2.R;\n  var v2X = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n  var v2Y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n  v2X -= v1X;\n  v2Y -= v1Y;\n  var separation = v2X * normal1WorldX + v2Y * normal1WorldY;\n  return separation;\n};\n\nb2Collision.FindMaxSeparation = function (edgeIndex, poly1, xf1, poly2, xf2) {\n  var count1 = poly1.m_vertexCount;\n  var normals1 = poly1.m_normals;\n  var tVec;\n  var tMat;\n  tMat = xf2.R;\n  tVec = poly2.m_centroid;\n  var dX = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n  var dY = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n  tMat = xf1.R;\n  tVec = poly1.m_centroid;\n  dX -= xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n  dY -= xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n  var dLocal1X = dX * xf1.R.col1.x + dY * xf1.R.col1.y;\n  var dLocal1Y = dX * xf1.R.col2.x + dY * xf1.R.col2.y;\n  var edge = 0;\n  var maxDot = -Number.MAX_VALUE;\n\n  for (var i = 0; i < count1; ++i) {\n    tVec = normals1[i];\n    var dot = tVec.x * dLocal1X + tVec.y * dLocal1Y;\n\n    if (dot > maxDot) {\n      maxDot = dot;\n      edge = i;\n    }\n  }\n\n  var s = b2Collision.EdgeSeparation(poly1, xf1, edge, poly2, xf2);\n  var prevEdge = edge - 1 >= 0 ? edge - 1 : count1 - 1;\n  var sPrev = b2Collision.EdgeSeparation(poly1, xf1, prevEdge, poly2, xf2);\n  var nextEdge = edge + 1 < count1 ? edge + 1 : 0;\n  var sNext = b2Collision.EdgeSeparation(poly1, xf1, nextEdge, poly2, xf2);\n  var bestEdge = 0;\n  var bestSeparation;\n  var increment = 0;\n\n  if (sPrev > s && sPrev > sNext) {\n    increment = -1;\n    bestEdge = prevEdge;\n    bestSeparation = sPrev;\n  } else {\n    if (sNext > s) {\n      increment = 1;\n      bestEdge = nextEdge;\n      bestSeparation = sNext;\n    } else {\n      edgeIndex[0] = edge;\n      return s;\n    }\n  }\n\n  while (true) {\n    if (increment == -1) {\n      edge = bestEdge - 1 >= 0 ? bestEdge - 1 : count1 - 1;\n    } else {\n      edge = bestEdge + 1 < count1 ? bestEdge + 1 : 0;\n    }\n\n    s = b2Collision.EdgeSeparation(poly1, xf1, edge, poly2, xf2);\n\n    if (s > bestSeparation) {\n      bestEdge = edge;\n      bestSeparation = s;\n    } else {\n      break;\n    }\n  }\n\n  edgeIndex[0] = bestEdge;\n  return bestSeparation;\n};\n\nb2Collision.FindIncidentEdge = function (c, poly1, xf1, edge1, poly2, xf2) {\n  var count1 = poly1.m_vertexCount;\n  var normals1 = poly1.m_normals;\n  var count2 = poly2.m_vertexCount;\n  var vertices2 = poly2.m_vertices;\n  var normals2 = poly2.m_normals;\n  var tMat;\n  var tVec;\n  tMat = xf1.R;\n  tVec = normals1[edge1];\n  var normal1X = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n  var normal1Y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n  tMat = xf2.R;\n  var tX = tMat.col1.x * normal1X + tMat.col1.y * normal1Y;\n  normal1Y = tMat.col2.x * normal1X + tMat.col2.y * normal1Y;\n  normal1X = tX;\n  var index = 0;\n  var minDot = Number.MAX_VALUE;\n\n  for (var i = 0; i < count2; ++i) {\n    tVec = normals2[i];\n    var dot = normal1X * tVec.x + normal1Y * tVec.y;\n\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  var tClip;\n  var i1 = index;\n  var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n  tClip = c[0];\n  tVec = vertices2[i1];\n  tMat = xf2.R;\n  tClip.v.x = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n  tClip.v.y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n  tClip.id.features.referenceEdge = edge1;\n  tClip.id.features.incidentEdge = i1;\n  tClip.id.features.incidentVertex = 0;\n  tClip = c[1];\n  tVec = vertices2[i2];\n  tMat = xf2.R;\n  tClip.v.x = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n  tClip.v.y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n  tClip.id.features.referenceEdge = edge1;\n  tClip.id.features.incidentEdge = i2;\n  tClip.id.features.incidentVertex = 1;\n};\n\nb2Collision.CollidePolygons = function (manifold, polyA, xfA, polyB, xfB) {\n  var cv;\n  manifold.m_pointCount = 0;\n  var totalRadius = polyA.m_radius + polyB.m_radius;\n  var edgeA = 0;\n  b2Collision.s_edgeAO[0] = edgeA;\n  var separationA = b2Collision.FindMaxSeparation(b2Collision.s_edgeAO, polyA, xfA, polyB, xfB);\n  edgeA = b2Collision.s_edgeAO[0];\n\n  if (separationA > totalRadius) {\n    return;\n  }\n\n  var edgeB = 0;\n  b2Collision.s_edgeBO[0] = edgeB;\n  var separationB = b2Collision.FindMaxSeparation(b2Collision.s_edgeBO, polyB, xfB, polyA, xfA);\n  edgeB = b2Collision.s_edgeBO[0];\n\n  if (separationB > totalRadius) {\n    return;\n  }\n\n  var poly1;\n  var poly2;\n  var xf1;\n  var xf2;\n  var edge1 = 0;\n  var flip = 0;\n  var k_relativeTol = 0.98;\n  var k_absoluteTol = 0.0010;\n  var tMat;\n\n  if (separationB > k_relativeTol * separationA + k_absoluteTol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB;\n    manifold.m_type = b2Manifold.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA;\n    manifold.m_type = b2Manifold.e_faceA;\n    flip = 0;\n  }\n\n  var incidentEdge = b2Collision.s_incidentEdge;\n  b2Collision.FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n  var count1 = poly1.m_vertexCount;\n  var vertices1 = poly1.m_vertices;\n  var local_v11 = vertices1[edge1];\n  var local_v12;\n\n  if (edge1 + 1 < count1) {\n    local_v12 = vertices1[parseInt(edge1 + 1)];\n  } else {\n    local_v12 = vertices1[0];\n  }\n\n  var localTangent = b2Collision.s_localTangent;\n  localTangent.Set(local_v12.x - local_v11.x, local_v12.y - local_v11.y);\n  localTangent.Normalize();\n  var localNormal = b2Collision.s_localNormal;\n  localNormal.x = localTangent.y;\n  localNormal.y = -localTangent.x;\n  var planePoint = b2Collision.s_planePoint;\n  planePoint.Set(0.5 * (local_v11.x + local_v12.x), 0.5 * (local_v11.y + local_v12.y));\n  var tangent = b2Collision.s_tangent;\n  tMat = xf1.R;\n  tangent.x = tMat.col1.x * localTangent.x + tMat.col2.x * localTangent.y;\n  tangent.y = tMat.col1.y * localTangent.x + tMat.col2.y * localTangent.y;\n  var tangent2 = b2Collision.s_tangent2;\n  tangent2.x = -tangent.x;\n  tangent2.y = -tangent.y;\n  var normal = b2Collision.s_normal;\n  normal.x = tangent.y;\n  normal.y = -tangent.x;\n  var v11 = b2Collision.s_v11;\n  var v12 = b2Collision.s_v12;\n  v11.x = xf1.position.x + (tMat.col1.x * local_v11.x + tMat.col2.x * local_v11.y);\n  v11.y = xf1.position.y + (tMat.col1.y * local_v11.x + tMat.col2.y * local_v11.y);\n  v12.x = xf1.position.x + (tMat.col1.x * local_v12.x + tMat.col2.x * local_v12.y);\n  v12.y = xf1.position.y + (tMat.col1.y * local_v12.x + tMat.col2.y * local_v12.y);\n  var frontOffset = normal.x * v11.x + normal.y * v11.y;\n  var sideOffset1 = -tangent.x * v11.x - tangent.y * v11.y + totalRadius;\n  var sideOffset2 = tangent.x * v12.x + tangent.y * v12.y + totalRadius;\n  var clipPoints1 = b2Collision.s_clipPoints1;\n  var clipPoints2 = b2Collision.s_clipPoints2;\n  var np = 0;\n  np = b2Collision.ClipSegmentToLine(clipPoints1, incidentEdge, tangent2, sideOffset1);\n\n  if (np < 2) {\n    return;\n  }\n\n  np = b2Collision.ClipSegmentToLine(clipPoints2, clipPoints1, tangent, sideOffset2);\n\n  if (np < 2) {\n    return;\n  }\n\n  manifold.m_localPlaneNormal.SetV(localNormal);\n  manifold.m_localPoint.SetV(planePoint);\n  var pointCount = 0;\n\n  for (var i = 0; i < b2Settings.b2_maxManifoldPoints; ++i) {\n    cv = clipPoints2[i];\n    var separation = normal.x * cv.v.x + normal.y * cv.v.y - frontOffset;\n\n    if (separation <= totalRadius) {\n      var cp = manifold.m_points[pointCount];\n      tMat = xf2.R;\n      var tX = cv.v.x - xf2.position.x;\n      var tY = cv.v.y - xf2.position.y;\n      cp.m_localPoint.x = tX * tMat.col1.x + tY * tMat.col1.y;\n      cp.m_localPoint.y = tX * tMat.col2.x + tY * tMat.col2.y;\n      cp.m_id.Set(cv.id);\n      cp.m_id.features.flip = flip;\n      ++pointCount;\n    }\n  }\n\n  manifold.m_pointCount = pointCount;\n};\n\nb2Collision.CollideCircles = function (manifold, circle1, xf1, circle2, xf2) {\n  manifold.m_pointCount = 0;\n  var tMat;\n  var tVec;\n  tMat = xf1.R;\n  tVec = circle1.m_p;\n  var p1X = xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n  var p1Y = xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n  tMat = xf2.R;\n  tVec = circle2.m_p;\n  var p2X = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n  var p2Y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n  var dX = p2X - p1X;\n  var dY = p2Y - p1Y;\n  var distSqr = dX * dX + dY * dY;\n  var radius = circle1.m_radius + circle2.m_radius;\n\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.m_type = b2Manifold.e_circles;\n  manifold.m_localPoint.SetV(circle1.m_p);\n  manifold.m_localPlaneNormal.SetZero();\n  manifold.m_pointCount = 1;\n  manifold.m_points[0].m_localPoint.SetV(circle2.m_p);\n  manifold.m_points[0].m_id.key = 0;\n};\n\nb2Collision.CollidePolygonAndCircle = function (manifold, polygon, xf1, circle, xf2) {\n  manifold.m_pointCount = 0;\n  var tPoint;\n  var dX;\n  var dY;\n  var positionX;\n  var positionY;\n  var tVec;\n  var tMat;\n  tMat = xf2.R;\n  tVec = circle.m_p;\n  var cX = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n  var cY = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n  dX = cX - xf1.position.x;\n  dY = cY - xf1.position.y;\n  tMat = xf1.R;\n  var cLocalX = dX * tMat.col1.x + dY * tMat.col1.y;\n  var cLocalY = dX * tMat.col2.x + dY * tMat.col2.y;\n  var dist;\n  var normalIndex = 0;\n  var separation = -Number.MAX_VALUE;\n  var radius = polygon.m_radius + circle.m_radius;\n  var vertexCount = polygon.m_vertexCount;\n  var vertices = polygon.m_vertices;\n  var normals = polygon.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    tVec = vertices[i];\n    dX = cLocalX - tVec.x;\n    dY = cLocalY - tVec.y;\n    tVec = normals[i];\n    var s = tVec.x * dX + tVec.y * dY;\n\n    if (s > radius) {\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  if (separation < Number.MIN_VALUE) {\n    manifold.m_pointCount = 1;\n    manifold.m_type = b2Manifold.e_faceA;\n    manifold.m_localPlaneNormal.SetV(normals[normalIndex]);\n    manifold.m_localPoint.x = 0.5 * (v1.x + v2.x);\n    manifold.m_localPoint.y = 0.5 * (v1.y + v2.y);\n    manifold.m_points[0].m_localPoint.SetV(circle.m_p);\n    manifold.m_points[0].m_id.key = 0;\n    return;\n  }\n\n  var u1 = (cLocalX - v1.x) * (v2.x - v1.x) + (cLocalY - v1.y) * (v2.y - v1.y);\n  var u2 = (cLocalX - v2.x) * (v1.x - v2.x) + (cLocalY - v2.y) * (v1.y - v2.y);\n\n  if (u1 <= 0) {\n    if ((cLocalX - v1.x) * (cLocalX - v1.x) + (cLocalY - v1.y) * (cLocalY - v1.y) > radius * radius) {\n      return;\n    }\n\n    manifold.m_pointCount = 1;\n    manifold.m_type = b2Manifold.e_faceA;\n    manifold.m_localPlaneNormal.x = cLocalX - v1.x;\n    manifold.m_localPlaneNormal.y = cLocalY - v1.y;\n    manifold.m_localPlaneNormal.Normalize();\n    manifold.m_localPoint.SetV(v1);\n    manifold.m_points[0].m_localPoint.SetV(circle.m_p);\n    manifold.m_points[0].m_id.key = 0;\n  } else {\n    if (u2 <= 0) {\n      if ((cLocalX - v2.x) * (cLocalX - v2.x) + (cLocalY - v2.y) * (cLocalY - v2.y) > radius * radius) {\n        return;\n      }\n\n      manifold.m_pointCount = 1;\n      manifold.m_type = b2Manifold.e_faceA;\n      manifold.m_localPlaneNormal.x = cLocalX - v2.x;\n      manifold.m_localPlaneNormal.y = cLocalY - v2.y;\n      manifold.m_localPlaneNormal.Normalize();\n      manifold.m_localPoint.SetV(v2);\n      manifold.m_points[0].m_localPoint.SetV(circle.m_p);\n      manifold.m_points[0].m_id.key = 0;\n    } else {\n      var faceCenterX = 0.5 * (v1.x + v2.x);\n      var faceCenterY = 0.5 * (v1.y + v2.y);\n      separation = (cLocalX - faceCenterX) * normals[vertIndex1].x + (cLocalY - faceCenterY) * normals[vertIndex1].y;\n\n      if (separation > radius) {\n        return;\n      }\n\n      manifold.m_pointCount = 1;\n      manifold.m_type = b2Manifold.e_faceA;\n      manifold.m_localPlaneNormal.x = normals[vertIndex1].x;\n      manifold.m_localPlaneNormal.y = normals[vertIndex1].y;\n      manifold.m_localPlaneNormal.Normalize();\n      manifold.m_localPoint.Set(faceCenterX, faceCenterY);\n      manifold.m_points[0].m_localPoint.SetV(circle.m_p);\n      manifold.m_points[0].m_id.key = 0;\n    }\n  }\n};\n\nb2Collision.TestOverlap = function (a, b) {\n  var t1 = b.lowerBound;\n  var t2 = a.upperBound;\n  var d1X = t1.x - t2.x;\n  var d1Y = t1.y - t2.y;\n  t1 = a.lowerBound;\n  t2 = b.upperBound;\n  var d2X = t1.x - t2.x;\n  var d2Y = t1.y - t2.y;\n\n  if (d1X > 0 || d1Y > 0) {\n    return false;\n  }\n\n  if (d2X > 0 || d2Y > 0) {\n    return false;\n  }\n\n  return true;\n};\n\nb2Collision.b2_nullFeature = 255;\nb2Collision.s_incidentEdge = b2Collision.MakeClipPointVector();\nb2Collision.s_clipPoints1 = b2Collision.MakeClipPointVector();\nb2Collision.s_clipPoints2 = b2Collision.MakeClipPointVector();\nb2Collision.s_edgeAO = new Array(1);\nb2Collision.s_edgeBO = new Array(1);\nb2Collision.s_localTangent = new b2Vec2();\nb2Collision.s_localNormal = new b2Vec2();\nb2Collision.s_planePoint = new b2Vec2();\nb2Collision.s_normal = new b2Vec2();\nb2Collision.s_tangent = new b2Vec2();\nb2Collision.s_tangent2 = new b2Vec2();\nb2Collision.s_v11 = new b2Vec2();\nb2Collision.s_v12 = new b2Vec2();\nb2Collision.b2CollidePolyTempVec = new b2Vec2();\n\nvar b2PolyAndCircleContact = function () {\n  b2Contact.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2PolyAndCircleContact.prototype, b2Contact.prototype);\nb2PolyAndCircleContact.prototype._super = b2Contact.prototype;\n\nb2PolyAndCircleContact.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n};\n\nb2PolyAndCircleContact.prototype.__varz = function () {};\n\nb2PolyAndCircleContact.Create = function (allocator) {\n  return new b2PolyAndCircleContact();\n};\n\nb2PolyAndCircleContact.Destroy = function (contact, allocator) {};\n\nb2PolyAndCircleContact.prototype.Evaluate = function () {\n  var bA = this.m_fixtureA.m_body;\n  var bB = this.m_fixtureB.m_body;\n  b2Collision.CollidePolygonAndCircle(this.m_manifold, this.m_fixtureA.GetShape(), bA.m_xf, this.m_fixtureB.GetShape(), bB.m_xf);\n};\n\nb2PolyAndCircleContact.prototype.Reset = function (fixtureA, fixtureB) {\n  this._super.Reset.apply(this, [fixtureA, fixtureB]);\n\n  b2Settings.b2Assert(fixtureA.GetType() == b2Shape.e_polygonShape);\n  b2Settings.b2Assert(fixtureB.GetType() == b2Shape.e_circleShape);\n};\n\nvar b2ContactPoint = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2ContactPoint.prototype.__constructor = function () {};\n\nb2ContactPoint.prototype.__varz = function () {\n  this.position = new b2Vec2();\n  this.velocity = new b2Vec2();\n  this.normal = new b2Vec2();\n  this.id = new b2ContactID();\n};\n\nb2ContactPoint.prototype.shape1 = null;\nb2ContactPoint.prototype.shape2 = null;\nb2ContactPoint.prototype.position = new b2Vec2();\nb2ContactPoint.prototype.velocity = new b2Vec2();\nb2ContactPoint.prototype.normal = new b2Vec2();\nb2ContactPoint.prototype.separation = null;\nb2ContactPoint.prototype.friction = null;\nb2ContactPoint.prototype.restitution = null;\nb2ContactPoint.prototype.id = new b2ContactID();\n\nvar b2CircleContact = function () {\n  b2Contact.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2CircleContact.prototype, b2Contact.prototype);\nb2CircleContact.prototype._super = b2Contact.prototype;\n\nb2CircleContact.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n};\n\nb2CircleContact.prototype.__varz = function () {};\n\nb2CircleContact.Create = function (allocator) {\n  return new b2CircleContact();\n};\n\nb2CircleContact.Destroy = function (contact, allocator) {};\n\nb2CircleContact.prototype.Evaluate = function () {\n  var bA = this.m_fixtureA.GetBody();\n  var bB = this.m_fixtureB.GetBody();\n  b2Collision.CollideCircles(this.m_manifold, this.m_fixtureA.GetShape(), bA.m_xf, this.m_fixtureB.GetShape(), bB.m_xf);\n};\n\nb2CircleContact.prototype.Reset = function (fixtureA, fixtureB) {\n  this._super.Reset.apply(this, [fixtureA, fixtureB]);\n};\n\nvar b2EdgeAndCircleContact = function () {\n  b2Contact.prototype.__varz.call(this);\n\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nextend(b2EdgeAndCircleContact.prototype, b2Contact.prototype);\nb2EdgeAndCircleContact.prototype._super = b2Contact.prototype;\n\nb2EdgeAndCircleContact.prototype.__constructor = function () {\n  this._super.__constructor.apply(this, arguments);\n};\n\nb2EdgeAndCircleContact.prototype.__varz = function () {};\n\nb2EdgeAndCircleContact.Create = function (allocator) {\n  return new b2EdgeAndCircleContact();\n};\n\nb2EdgeAndCircleContact.Destroy = function (contact, allocator) {};\n\nb2EdgeAndCircleContact.prototype.Evaluate = function () {\n  var bA = this.m_fixtureA.GetBody();\n  var bB = this.m_fixtureB.GetBody();\n  this.b2CollideEdgeAndCircle(this.m_manifold, this.m_fixtureA.GetShape(), bA.m_xf, this.m_fixtureB.GetShape(), bB.m_xf);\n};\n\nb2EdgeAndCircleContact.prototype.b2CollideEdgeAndCircle = function (manifold, edge, xf1, circle, xf2) {};\n\nb2EdgeAndCircleContact.prototype.Reset = function (fixtureA, fixtureB) {\n  this._super.Reset.apply(this, [fixtureA, fixtureB]);\n};\n\nvar b2ContactManager = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2ContactManager.prototype.__constructor = function () {\n  this.m_world = null;\n  this.m_contactCount = 0;\n  this.m_contactFilter = b2ContactFilter.b2_defaultFilter;\n  this.m_contactListener = b2ContactListener.b2_defaultListener;\n  this.m_contactFactory = new b2ContactFactory(this.m_allocator);\n  this.m_broadPhase = new b2DynamicTreeBroadPhase();\n};\n\nb2ContactManager.prototype.__varz = function () {};\n\nb2ContactManager.s_evalCP = new b2ContactPoint();\n\nb2ContactManager.prototype.AddPair = function (proxyUserDataA, proxyUserDataB) {\n  var fixtureA = proxyUserDataA;\n  var fixtureB = proxyUserDataB;\n  var bodyA = fixtureA.GetBody();\n  var bodyB = fixtureB.GetBody();\n\n  if (bodyA == bodyB) {\n    return;\n  }\n\n  var edge = bodyB.GetContactList();\n\n  while (edge) {\n    if (edge.other == bodyA) {\n      var fA = edge.contact.GetFixtureA();\n      var fB = edge.contact.GetFixtureB();\n\n      if (fA == fixtureA && fB == fixtureB) {\n        return;\n      }\n\n      if (fA == fixtureB && fB == fixtureA) {\n        return;\n      }\n    }\n\n    edge = edge.next;\n  }\n\n  if (bodyB.ShouldCollide(bodyA) == false) {\n    return;\n  }\n\n  if (this.m_contactFilter.ShouldCollide(fixtureA, fixtureB) == false) {\n    return;\n  }\n\n  var c = this.m_contactFactory.Create(fixtureA, fixtureB);\n  fixtureA = c.GetFixtureA();\n  fixtureB = c.GetFixtureB();\n  bodyA = fixtureA.m_body;\n  bodyB = fixtureB.m_body;\n  c.m_prev = null;\n  c.m_next = this.m_world.m_contactList;\n\n  if (this.m_world.m_contactList != null) {\n    this.m_world.m_contactList.m_prev = c;\n  }\n\n  this.m_world.m_contactList = c;\n  c.m_nodeA.contact = c;\n  c.m_nodeA.other = bodyB;\n  c.m_nodeA.prev = null;\n  c.m_nodeA.next = bodyA.m_contactList;\n\n  if (bodyA.m_contactList != null) {\n    bodyA.m_contactList.prev = c.m_nodeA;\n  }\n\n  bodyA.m_contactList = c.m_nodeA;\n  c.m_nodeB.contact = c;\n  c.m_nodeB.other = bodyA;\n  c.m_nodeB.prev = null;\n  c.m_nodeB.next = bodyB.m_contactList;\n\n  if (bodyB.m_contactList != null) {\n    bodyB.m_contactList.prev = c.m_nodeB;\n  }\n\n  bodyB.m_contactList = c.m_nodeB;\n  ++this.m_world.m_contactCount;\n  return;\n};\n\nb2ContactManager.prototype.FindNewContacts = function () {\n  var that = this;\n  this.m_broadPhase.UpdatePairs(function (a, b) {\n    return that.AddPair(a, b);\n  });\n};\n\nb2ContactManager.prototype.Destroy = function (c) {\n  var fixtureA = c.GetFixtureA();\n  var fixtureB = c.GetFixtureB();\n  var bodyA = fixtureA.GetBody();\n  var bodyB = fixtureB.GetBody();\n\n  if (c.IsTouching()) {\n    this.m_contactListener.EndContact(c);\n  }\n\n  if (c.m_prev) {\n    c.m_prev.m_next = c.m_next;\n  }\n\n  if (c.m_next) {\n    c.m_next.m_prev = c.m_prev;\n  }\n\n  if (c == this.m_world.m_contactList) {\n    this.m_world.m_contactList = c.m_next;\n  }\n\n  if (c.m_nodeA.prev) {\n    c.m_nodeA.prev.next = c.m_nodeA.next;\n  }\n\n  if (c.m_nodeA.next) {\n    c.m_nodeA.next.prev = c.m_nodeA.prev;\n  }\n\n  if (c.m_nodeA == bodyA.m_contactList) {\n    bodyA.m_contactList = c.m_nodeA.next;\n  }\n\n  if (c.m_nodeB.prev) {\n    c.m_nodeB.prev.next = c.m_nodeB.next;\n  }\n\n  if (c.m_nodeB.next) {\n    c.m_nodeB.next.prev = c.m_nodeB.prev;\n  }\n\n  if (c.m_nodeB == bodyB.m_contactList) {\n    bodyB.m_contactList = c.m_nodeB.next;\n  }\n\n  this.m_contactFactory.Destroy(c);\n  --this.m_contactCount;\n};\n\nb2ContactManager.prototype.Collide = function () {\n  var c = this.m_world.m_contactList;\n\n  while (c) {\n    var fixtureA = c.GetFixtureA();\n    var fixtureB = c.GetFixtureB();\n    var bodyA = fixtureA.GetBody();\n    var bodyB = fixtureB.GetBody();\n\n    if (bodyA.IsAwake() == false && bodyB.IsAwake() == false) {\n      c = c.GetNext();\n      continue;\n    }\n\n    if (c.m_flags & b2Contact.e_filterFlag) {\n      if (bodyB.ShouldCollide(bodyA) == false) {\n        var cNuke = c;\n        c = cNuke.GetNext();\n        this.Destroy(cNuke);\n        continue;\n      }\n\n      if (this.m_contactFilter.ShouldCollide(fixtureA, fixtureB) == false) {\n        cNuke = c;\n        c = cNuke.GetNext();\n        this.Destroy(cNuke);\n        continue;\n      }\n\n      c.m_flags &= ~b2Contact.e_filterFlag;\n    }\n\n    var proxyA = fixtureA.m_proxy;\n    var proxyB = fixtureB.m_proxy;\n    var overlap = this.m_broadPhase.TestOverlap(proxyA, proxyB);\n\n    if (overlap == false) {\n      cNuke = c;\n      c = cNuke.GetNext();\n      this.Destroy(cNuke);\n      continue;\n    }\n\n    c.Update(this.m_contactListener);\n    c = c.GetNext();\n  }\n};\n\nb2ContactManager.prototype.m_world = null;\nb2ContactManager.prototype.m_broadPhase = null;\nb2ContactManager.prototype.m_contactList = null;\nb2ContactManager.prototype.m_contactCount = 0;\nb2ContactManager.prototype.m_contactFilter = null;\nb2ContactManager.prototype.m_contactListener = null;\nb2ContactManager.prototype.m_contactFactory = null;\nb2ContactManager.prototype.m_allocator = null;\n\nvar b2World = function () {\n  this.__varz();\n\n  this.__constructor.apply(this, arguments);\n};\n\nb2World.prototype.__constructor = function (gravity, doSleep) {\n  this.m_destructionListener = null;\n  this.m_debugDraw = null;\n  this.m_bodyList = null;\n  this.m_contactList = null;\n  this.m_jointList = null;\n  this.m_controllerList = null;\n  this.m_bodyCount = 0;\n  this.m_contactCount = 0;\n  this.m_jointCount = 0;\n  this.m_controllerCount = 0;\n  b2World.m_warmStarting = true;\n  b2World.m_continuousPhysics = true;\n  this.m_allowSleep = doSleep;\n  this.m_gravity = gravity;\n  this.m_inv_dt0 = 0;\n  this.m_contactManager.m_world = this;\n  var bd = new b2BodyDef();\n  this.m_groundBody = this.CreateBody(bd);\n};\n\nb2World.prototype.__varz = function () {\n  this.s_stack = new Array();\n  this.m_contactManager = new b2ContactManager();\n  this.m_contactSolver = new b2ContactSolver();\n  this.m_island = new b2Island();\n};\n\nb2World.s_timestep2 = new b2TimeStep();\nb2World.s_backupA = new b2Sweep();\nb2World.s_backupB = new b2Sweep();\nb2World.s_timestep = new b2TimeStep();\nb2World.s_queue = new Array();\nb2World.e_newFixture = 1;\nb2World.e_locked = 2;\nb2World.s_xf = new b2Transform();\nb2World.s_jointColor = new b2Color(0.5, 0.8, 0.8);\nb2World.m_warmStarting = null;\nb2World.m_continuousPhysics = null;\n\nb2World.prototype.Solve = function (step) {\n  var b;\n\n  for (var controller = this.m_controllerList; controller; controller = controller.m_next) {\n    controller.Step(step);\n  }\n\n  var island = this.m_island;\n  island.Initialize(this.m_bodyCount, this.m_contactCount, this.m_jointCount, null, this.m_contactManager.m_contactListener, this.m_contactSolver);\n\n  for (b = this.m_bodyList; b; b = b.m_next) {\n    b.m_flags &= ~b2Body.e_islandFlag;\n  }\n\n  for (var c = this.m_contactList; c; c = c.m_next) {\n    c.m_flags &= ~b2Contact.e_islandFlag;\n  }\n\n  for (var j = this.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  var stackSize = this.m_bodyCount;\n  var stack = this.s_stack;\n\n  for (var seed = this.m_bodyList; seed; seed = seed.m_next) {\n    if (seed.m_flags & b2Body.e_islandFlag) {\n      continue;\n    }\n\n    if (seed.IsAwake() == false || seed.IsActive() == false) {\n      continue;\n    }\n\n    if (seed.GetType() == b2Body.b2_staticBody) {\n      continue;\n    }\n\n    island.Clear();\n    var stackCount = 0;\n    stack[stackCount++] = seed;\n    seed.m_flags |= b2Body.e_islandFlag;\n\n    while (stackCount > 0) {\n      b = stack[--stackCount];\n      island.AddBody(b);\n\n      if (b.IsAwake() == false) {\n        b.SetAwake(true);\n      }\n\n      if (b.GetType() == b2Body.b2_staticBody) {\n        continue;\n      }\n\n      var other;\n\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        if (ce.contact.m_flags & b2Contact.e_islandFlag) {\n          continue;\n        }\n\n        if (ce.contact.IsSensor() == true || ce.contact.IsEnabled() == false || ce.contact.IsTouching() == false) {\n          continue;\n        }\n\n        island.AddContact(ce.contact);\n        ce.contact.m_flags |= b2Contact.e_islandFlag;\n        other = ce.other;\n\n        if (other.m_flags & b2Body.e_islandFlag) {\n          continue;\n        }\n\n        stack[stackCount++] = other;\n        other.m_flags |= b2Body.e_islandFlag;\n      }\n\n      for (var jn = b.m_jointList; jn; jn = jn.next) {\n        if (jn.joint.m_islandFlag == true) {\n          continue;\n        }\n\n        other = jn.other;\n\n        if (other.IsActive() == false) {\n          continue;\n        }\n\n        island.AddJoint(jn.joint);\n        jn.joint.m_islandFlag = true;\n\n        if (other.m_flags & b2Body.e_islandFlag) {\n          continue;\n        }\n\n        stack[stackCount++] = other;\n        other.m_flags |= b2Body.e_islandFlag;\n      }\n    }\n\n    island.Solve(step, this.m_gravity, this.m_allowSleep);\n\n    for (var i = 0; i < island.m_bodyCount; ++i) {\n      b = island.m_bodies[i];\n\n      if (b.GetType() == b2Body.b2_staticBody) {\n        b.m_flags &= ~b2Body.e_islandFlag;\n      }\n    }\n  }\n\n  for (i = 0; i < stack.length; ++i) {\n    if (!stack[i]) {\n      break;\n    }\n\n    stack[i] = null;\n  }\n\n  for (b = this.m_bodyList; b; b = b.m_next) {\n    if (b.IsAwake() == false || b.IsActive() == false) {\n      continue;\n    }\n\n    if (b.GetType() == b2Body.b2_staticBody) {\n      continue;\n    }\n\n    b.SynchronizeFixtures();\n  }\n\n  this.m_contactManager.FindNewContacts();\n};\n\nb2World.prototype.SolveTOI = function (step) {\n  var b;\n  var fA;\n  var fB;\n  var bA;\n  var bB;\n  var cEdge;\n  var j;\n  var island = this.m_island;\n  island.Initialize(this.m_bodyCount, b2Settings.b2_maxTOIContactsPerIsland, b2Settings.b2_maxTOIJointsPerIsland, null, this.m_contactManager.m_contactListener, this.m_contactSolver);\n  var queue = b2World.s_queue;\n\n  for (b = this.m_bodyList; b; b = b.m_next) {\n    b.m_flags &= ~b2Body.e_islandFlag;\n    b.m_sweep.t0 = 0;\n  }\n\n  var c;\n\n  for (c = this.m_contactList; c; c = c.m_next) {\n    c.m_flags &= ~(b2Contact.e_toiFlag | b2Contact.e_islandFlag);\n  }\n\n  for (j = this.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  for (;;) {\n    var minContact = null;\n    var minTOI = 1;\n\n    for (c = this.m_contactList; c; c = c.m_next) {\n      if (c.IsSensor() == true || c.IsEnabled() == false || c.IsContinuous() == false) {\n        continue;\n      }\n\n      var toi = 1;\n\n      if (c.m_flags & b2Contact.e_toiFlag) {\n        toi = c.m_toi;\n      } else {\n        fA = c.m_fixtureA;\n        fB = c.m_fixtureB;\n        bA = fA.m_body;\n        bB = fB.m_body;\n\n        if ((bA.GetType() != b2Body.b2_dynamicBody || bA.IsAwake() == false) && (bB.GetType() != b2Body.b2_dynamicBody || bB.IsAwake() == false)) {\n          continue;\n        }\n\n        var t0 = bA.m_sweep.t0;\n\n        if (bA.m_sweep.t0 < bB.m_sweep.t0) {\n          t0 = bB.m_sweep.t0;\n          bA.m_sweep.Advance(t0);\n        } else {\n          if (bB.m_sweep.t0 < bA.m_sweep.t0) {\n            t0 = bA.m_sweep.t0;\n            bB.m_sweep.Advance(t0);\n          }\n        }\n\n        toi = c.ComputeTOI(bA.m_sweep, bB.m_sweep);\n        b2Settings.b2Assert(0 <= toi && toi <= 1);\n\n        if (toi > 0 && toi < 1) {\n          toi = (1 - toi) * t0 + toi;\n\n          if (toi > 1) {\n            toi = 1;\n          }\n        }\n\n        c.m_toi = toi;\n        c.m_flags |= b2Contact.e_toiFlag;\n      }\n\n      if (Number.MIN_VALUE < toi && toi < minTOI) {\n        minContact = c;\n        minTOI = toi;\n      }\n    }\n\n    if (minContact == null || 1 - 100 * Number.MIN_VALUE < minTOI) {\n      break;\n    }\n\n    fA = minContact.m_fixtureA;\n    fB = minContact.m_fixtureB;\n    bA = fA.m_body;\n    bB = fB.m_body;\n    b2World.s_backupA.Set(bA.m_sweep);\n    b2World.s_backupB.Set(bB.m_sweep);\n    bA.Advance(minTOI);\n    bB.Advance(minTOI);\n    minContact.Update(this.m_contactManager.m_contactListener);\n    minContact.m_flags &= ~b2Contact.e_toiFlag;\n\n    if (minContact.IsSensor() == true || minContact.IsEnabled() == false) {\n      bA.m_sweep.Set(b2World.s_backupA);\n      bB.m_sweep.Set(b2World.s_backupB);\n      bA.SynchronizeTransform();\n      bB.SynchronizeTransform();\n      continue;\n    }\n\n    if (minContact.IsTouching() == false) {\n      continue;\n    }\n\n    var seed = bA;\n\n    if (seed.GetType() != b2Body.b2_dynamicBody) {\n      seed = bB;\n    }\n\n    island.Clear();\n    var queueStart = 0;\n    var queueSize = 0;\n    queue[queueStart + queueSize++] = seed;\n    seed.m_flags |= b2Body.e_islandFlag;\n\n    while (queueSize > 0) {\n      b = queue[queueStart++];\n      --queueSize;\n      island.AddBody(b);\n\n      if (b.IsAwake() == false) {\n        b.SetAwake(true);\n      }\n\n      if (b.GetType() != b2Body.b2_dynamicBody) {\n        continue;\n      }\n\n      for (cEdge = b.m_contactList; cEdge; cEdge = cEdge.next) {\n        if (island.m_contactCount == island.m_contactCapacity) {\n          break;\n        }\n\n        if (cEdge.contact.m_flags & b2Contact.e_islandFlag) {\n          continue;\n        }\n\n        if (cEdge.contact.IsSensor() == true || cEdge.contact.IsEnabled() == false || cEdge.contact.IsTouching() == false) {\n          continue;\n        }\n\n        island.AddContact(cEdge.contact);\n        cEdge.contact.m_flags |= b2Contact.e_islandFlag;\n        var other = cEdge.other;\n\n        if (other.m_flags & b2Body.e_islandFlag) {\n          continue;\n        }\n\n        if (other.GetType() != b2Body.b2_staticBody) {\n          other.Advance(minTOI);\n          other.SetAwake(true);\n        }\n\n        queue[queueStart + queueSize] = other;\n        ++queueSize;\n        other.m_flags |= b2Body.e_islandFlag;\n      }\n\n      for (var jEdge = b.m_jointList; jEdge; jEdge = jEdge.next) {\n        if (island.m_jointCount == island.m_jointCapacity) {\n          continue;\n        }\n\n        if (jEdge.joint.m_islandFlag == true) {\n          continue;\n        }\n\n        other = jEdge.other;\n\n        if (other.IsActive() == false) {\n          continue;\n        }\n\n        island.AddJoint(jEdge.joint);\n        jEdge.joint.m_islandFlag = true;\n\n        if (other.m_flags & b2Body.e_islandFlag) {\n          continue;\n        }\n\n        if (other.GetType() != b2Body.b2_staticBody) {\n          other.Advance(minTOI);\n          other.SetAwake(true);\n        }\n\n        queue[queueStart + queueSize] = other;\n        ++queueSize;\n        other.m_flags |= b2Body.e_islandFlag;\n      }\n    }\n\n    var subStep = b2World.s_timestep;\n    subStep.warmStarting = false;\n    subStep.dt = (1 - minTOI) * step.dt;\n    subStep.inv_dt = 1 / subStep.dt;\n    subStep.dtRatio = 0;\n    subStep.velocityIterations = step.velocityIterations;\n    subStep.positionIterations = step.positionIterations;\n    island.SolveTOI(subStep);\n    var i = 0;\n\n    for (i = 0; i < island.m_bodyCount; ++i) {\n      b = island.m_bodies[i];\n      b.m_flags &= ~b2Body.e_islandFlag;\n\n      if (b.IsAwake() == false) {\n        continue;\n      }\n\n      if (b.GetType() != b2Body.b2_dynamicBody) {\n        continue;\n      }\n\n      b.SynchronizeFixtures();\n\n      for (cEdge = b.m_contactList; cEdge; cEdge = cEdge.next) {\n        cEdge.contact.m_flags &= ~b2Contact.e_toiFlag;\n      }\n    }\n\n    for (i = 0; i < island.m_contactCount; ++i) {\n      c = island.m_contacts[i];\n      c.m_flags &= ~(b2Contact.e_toiFlag | b2Contact.e_islandFlag);\n    }\n\n    for (i = 0; i < island.m_jointCount; ++i) {\n      j = island.m_joints[i];\n      j.m_islandFlag = false;\n    }\n\n    this.m_contactManager.FindNewContacts();\n  }\n};\n\nb2World.prototype.DrawJoint = function (joint) {\n  var b1 = joint.GetBodyA();\n  var b2 = joint.GetBodyB();\n  var xf1 = b1.m_xf;\n  var xf2 = b2.m_xf;\n  var x1 = xf1.position;\n  var x2 = xf2.position;\n  var p1 = joint.GetAnchorA();\n  var p2 = joint.GetAnchorB();\n  var color = b2World.s_jointColor;\n\n  switch (joint.m_type) {\n    case b2Joint.e_distanceJoint:\n      this.m_debugDraw.DrawSegment(p1, p2, color);\n      break;\n\n    case b2Joint.e_pulleyJoint:\n      var pulley = joint;\n      var s1 = pulley.GetGroundAnchorA();\n      var s2 = pulley.GetGroundAnchorB();\n      this.m_debugDraw.DrawSegment(s1, p1, color);\n      this.m_debugDraw.DrawSegment(s2, p2, color);\n      this.m_debugDraw.DrawSegment(s1, s2, color);\n      break;\n\n    case b2Joint.e_mouseJoint:\n      this.m_debugDraw.DrawSegment(p1, p2, color);\n      break;\n\n    default:\n      if (b1 != this.m_groundBody) {\n        this.m_debugDraw.DrawSegment(x1, p1, color);\n      }\n\n      this.m_debugDraw.DrawSegment(p1, p2, color);\n\n      if (b2 != this.m_groundBody) {\n        this.m_debugDraw.DrawSegment(x2, p2, color);\n      }\n\n  }\n};\n\nb2World.prototype.DrawShape = function (shape, xf, color) {\n  switch (shape.m_type) {\n    case b2Shape.e_circleShape:\n      var circle = shape;\n      var center = b2Math.MulX(xf, circle.m_p);\n      var radius = circle.m_radius;\n      var axis = xf.R.col1;\n      this.m_debugDraw.DrawSolidCircle(center, radius, axis, color);\n      break;\n\n    case b2Shape.e_polygonShape:\n      var i = 0;\n      var poly = shape;\n      var vertexCount = poly.GetVertexCount();\n      var localVertices = poly.GetVertices();\n      var vertices = new Array(vertexCount);\n\n      for (i = 0; i < vertexCount; ++i) {\n        vertices[i] = b2Math.MulX(xf, localVertices[i]);\n      }\n\n      this.m_debugDraw.DrawSolidPolygon(vertices, vertexCount, color);\n      break;\n\n    case b2Shape.e_edgeShape:\n      var edge = shape;\n      this.m_debugDraw.DrawSegment(b2Math.MulX(xf, edge.GetVertex1()), b2Math.MulX(xf, edge.GetVertex2()), color);\n      break;\n  }\n};\n\nb2World.prototype.SetDestructionListener = function (listener) {\n  this.m_destructionListener = listener;\n};\n\nb2World.prototype.SetContactFilter = function (filter) {\n  this.m_contactManager.m_contactFilter = filter;\n};\n\nb2World.prototype.SetContactListener = function (listener) {\n  this.m_contactManager.m_contactListener = listener;\n};\n\nb2World.prototype.SetDebugDraw = function (debugDraw) {\n  this.m_debugDraw = debugDraw;\n};\n\nb2World.prototype.SetBroadPhase = function (broadPhase) {\n  var oldBroadPhase = this.m_contactManager.m_broadPhase;\n  this.m_contactManager.m_broadPhase = broadPhase;\n\n  for (var b = this.m_bodyList; b; b = b.m_next) {\n    for (var f = b.m_fixtureList; f; f = f.m_next) {\n      f.m_proxy = broadPhase.CreateProxy(oldBroadPhase.GetFatAABB(f.m_proxy), f);\n    }\n  }\n};\n\nb2World.prototype.Validate = function () {\n  this.m_contactManager.m_broadPhase.Validate();\n};\n\nb2World.prototype.GetProxyCount = function () {\n  return this.m_contactManager.m_broadPhase.GetProxyCount();\n};\n\nb2World.prototype.CreateBody = function (def) {\n  if (this.IsLocked() == true) {\n    return null;\n  }\n\n  var b = new b2Body(def, this);\n  b.m_prev = null;\n  b.m_next = this.m_bodyList;\n\n  if (this.m_bodyList) {\n    this.m_bodyList.m_prev = b;\n  }\n\n  this.m_bodyList = b;\n  ++this.m_bodyCount;\n  return b;\n};\n\nb2World.prototype.DestroyBody = function (b) {\n  if (this.IsLocked() == true) {\n    return;\n  }\n\n  var jn = b.m_jointList;\n\n  while (jn) {\n    var jn0 = jn;\n    jn = jn.next;\n\n    if (this.m_destructionListener) {\n      this.m_destructionListener.SayGoodbyeJoint(jn0.joint);\n    }\n\n    this.DestroyJoint(jn0.joint);\n  }\n\n  var coe = b.m_controllerList;\n\n  while (coe) {\n    var coe0 = coe;\n    coe = coe.nextController;\n    coe0.controller.RemoveBody(b);\n  }\n\n  var ce = b.m_contactList;\n\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n    this.m_contactManager.Destroy(ce0.contact);\n  }\n\n  b.m_contactList = null;\n  var f = b.m_fixtureList;\n\n  while (f) {\n    var f0 = f;\n    f = f.m_next;\n\n    if (this.m_destructionListener) {\n      this.m_destructionListener.SayGoodbyeFixture(f0);\n    }\n\n    f0.DestroyProxy(this.m_contactManager.m_broadPhase);\n    f0.Destroy();\n  }\n\n  b.m_fixtureList = null;\n  b.m_fixtureCount = 0;\n\n  if (b.m_prev) {\n    b.m_prev.m_next = b.m_next;\n  }\n\n  if (b.m_next) {\n    b.m_next.m_prev = b.m_prev;\n  }\n\n  if (b == this.m_bodyList) {\n    this.m_bodyList = b.m_next;\n  }\n\n  --this.m_bodyCount;\n};\n\nb2World.prototype.CreateJoint = function (def) {\n  var j = b2Joint.Create(def, null);\n  j.m_prev = null;\n  j.m_next = this.m_jointList;\n\n  if (this.m_jointList) {\n    this.m_jointList.m_prev = j;\n  }\n\n  this.m_jointList = j;\n  ++this.m_jointCount;\n  j.m_edgeA.joint = j;\n  j.m_edgeA.other = j.m_bodyB;\n  j.m_edgeA.prev = null;\n  j.m_edgeA.next = j.m_bodyA.m_jointList;\n\n  if (j.m_bodyA.m_jointList) {\n    j.m_bodyA.m_jointList.prev = j.m_edgeA;\n  }\n\n  j.m_bodyA.m_jointList = j.m_edgeA;\n  j.m_edgeB.joint = j;\n  j.m_edgeB.other = j.m_bodyA;\n  j.m_edgeB.prev = null;\n  j.m_edgeB.next = j.m_bodyB.m_jointList;\n\n  if (j.m_bodyB.m_jointList) {\n    j.m_bodyB.m_jointList.prev = j.m_edgeB;\n  }\n\n  j.m_bodyB.m_jointList = j.m_edgeB;\n  var bodyA = def.bodyA;\n  var bodyB = def.bodyB;\n\n  if (def.collideConnected == false) {\n    var edge = bodyB.GetContactList();\n\n    while (edge) {\n      if (edge.other == bodyA) {\n        edge.contact.FlagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n  }\n\n  return j;\n};\n\nb2World.prototype.DestroyJoint = function (j) {\n  var collideConnected = j.m_collideConnected;\n\n  if (j.m_prev) {\n    j.m_prev.m_next = j.m_next;\n  }\n\n  if (j.m_next) {\n    j.m_next.m_prev = j.m_prev;\n  }\n\n  if (j == this.m_jointList) {\n    this.m_jointList = j.m_next;\n  }\n\n  var bodyA = j.m_bodyA;\n  var bodyB = j.m_bodyB;\n  bodyA.SetAwake(true);\n  bodyB.SetAwake(true);\n\n  if (j.m_edgeA.prev) {\n    j.m_edgeA.prev.next = j.m_edgeA.next;\n  }\n\n  if (j.m_edgeA.next) {\n    j.m_edgeA.next.prev = j.m_edgeA.prev;\n  }\n\n  if (j.m_edgeA == bodyA.m_jointList) {\n    bodyA.m_jointList = j.m_edgeA.next;\n  }\n\n  j.m_edgeA.prev = null;\n  j.m_edgeA.next = null;\n\n  if (j.m_edgeB.prev) {\n    j.m_edgeB.prev.next = j.m_edgeB.next;\n  }\n\n  if (j.m_edgeB.next) {\n    j.m_edgeB.next.prev = j.m_edgeB.prev;\n  }\n\n  if (j.m_edgeB == bodyB.m_jointList) {\n    bodyB.m_jointList = j.m_edgeB.next;\n  }\n\n  j.m_edgeB.prev = null;\n  j.m_edgeB.next = null;\n  b2Joint.Destroy(j, null);\n  --this.m_jointCount;\n\n  if (collideConnected == false) {\n    var edge = bodyB.GetContactList();\n\n    while (edge) {\n      if (edge.other == bodyA) {\n        edge.contact.FlagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n  }\n};\n\nb2World.prototype.AddController = function (c) {\n  c.m_next = this.m_controllerList;\n  c.m_prev = null;\n  this.m_controllerList = c;\n  c.m_world = this;\n  this.m_controllerCount++;\n  return c;\n};\n\nb2World.prototype.RemoveController = function (c) {\n  if (c.m_prev) {\n    c.m_prev.m_next = c.m_next;\n  }\n\n  if (c.m_next) {\n    c.m_next.m_prev = c.m_prev;\n  }\n\n  if (this.m_controllerList == c) {\n    this.m_controllerList = c.m_next;\n  }\n\n  this.m_controllerCount--;\n};\n\nb2World.prototype.CreateController = function (controller) {\n  if (controller.m_world != this) {\n    throw new Error(\"Controller can only be a member of one world\");\n  }\n\n  controller.m_next = this.m_controllerList;\n  controller.m_prev = null;\n\n  if (this.m_controllerList) {\n    this.m_controllerList.m_prev = controller;\n  }\n\n  this.m_controllerList = controller;\n  ++this.m_controllerCount;\n  controller.m_world = this;\n  return controller;\n};\n\nb2World.prototype.DestroyController = function (controller) {\n  controller.Clear();\n\n  if (controller.m_next) {\n    controller.m_next.m_prev = controller.m_prev;\n  }\n\n  if (controller.m_prev) {\n    controller.m_prev.m_next = controller.m_next;\n  }\n\n  if (controller == this.m_controllerList) {\n    this.m_controllerList = controller.m_next;\n  }\n\n  --this.m_controllerCount;\n};\n\nb2World.prototype.SetWarmStarting = function (flag) {\n  b2World.m_warmStarting = flag;\n};\n\nb2World.prototype.SetContinuousPhysics = function (flag) {\n  b2World.m_continuousPhysics = flag;\n};\n\nb2World.prototype.GetBodyCount = function () {\n  return this.m_bodyCount;\n};\n\nb2World.prototype.GetJointCount = function () {\n  return this.m_jointCount;\n};\n\nb2World.prototype.GetContactCount = function () {\n  return this.m_contactCount;\n};\n\nb2World.prototype.SetGravity = function (gravity) {\n  this.m_gravity = gravity;\n};\n\nb2World.prototype.GetGravity = function () {\n  return this.m_gravity;\n};\n\nb2World.prototype.GetGroundBody = function () {\n  return this.m_groundBody;\n};\n\nb2World.prototype.Step = function (dt, velocityIterations, positionIterations) {\n  if (this.m_flags & b2World.e_newFixture) {\n    this.m_contactManager.FindNewContacts();\n    this.m_flags &= ~b2World.e_newFixture;\n  }\n\n  this.m_flags |= b2World.e_locked;\n  var step = b2World.s_timestep2;\n  step.dt = dt;\n  step.velocityIterations = velocityIterations;\n  step.positionIterations = positionIterations;\n\n  if (dt > 0) {\n    step.inv_dt = 1 / dt;\n  } else {\n    step.inv_dt = 0;\n  }\n\n  step.dtRatio = this.m_inv_dt0 * dt;\n  step.warmStarting = b2World.m_warmStarting;\n  this.m_contactManager.Collide();\n\n  if (step.dt > 0) {\n    this.Solve(step);\n  }\n\n  if (b2World.m_continuousPhysics && step.dt > 0) {\n    this.SolveTOI(step);\n  }\n\n  if (step.dt > 0) {\n    this.m_inv_dt0 = step.inv_dt;\n  }\n\n  this.m_flags &= ~b2World.e_locked;\n};\n\nb2World.prototype.ClearForces = function () {\n  for (var body = this.m_bodyList; body; body = body.m_next) {\n    body.m_force.SetZero();\n    body.m_torque = 0;\n  }\n};\n\nb2World.prototype.DrawDebugData = function () {\n  if (this.m_debugDraw == null) {\n    return;\n  }\n\n  this.m_debugDraw.Clear();\n  var flags = this.m_debugDraw.GetFlags();\n  var i = 0;\n  var b;\n  var f;\n  var s;\n  var j;\n  var bp;\n  var invQ = new b2Vec2();\n  var x1 = new b2Vec2();\n  var x2 = new b2Vec2();\n  var xf;\n  var b1 = new b2AABB();\n  var b2 = new b2AABB();\n  var vs = [new b2Vec2(), new b2Vec2(), new b2Vec2(), new b2Vec2()];\n  var color = new b2Color(0, 0, 0);\n\n  if (flags & b2DebugDraw.e_shapeBit) {\n    for (b = this.m_bodyList; b; b = b.m_next) {\n      xf = b.m_xf;\n\n      for (f = b.GetFixtureList(); f; f = f.m_next) {\n        s = f.GetShape();\n\n        if (b.IsActive() == false) {\n          color.Set(0.5, 0.5, 0.3);\n          this.DrawShape(s, xf, color);\n        } else {\n          if (b.GetType() == b2Body.b2_staticBody) {\n            color.Set(0.5, 0.9, 0.5);\n            this.DrawShape(s, xf, color);\n          } else {\n            if (b.GetType() == b2Body.b2_kinematicBody) {\n              color.Set(0.5, 0.5, 0.9);\n              this.DrawShape(s, xf, color);\n            } else {\n              if (b.IsAwake() == false) {\n                color.Set(0.6, 0.6, 0.6);\n                this.DrawShape(s, xf, color);\n              } else {\n                color.Set(0.9, 0.7, 0.7);\n                this.DrawShape(s, xf, color);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  if (flags & b2DebugDraw.e_jointBit) {\n    for (j = this.m_jointList; j; j = j.m_next) {\n      this.DrawJoint(j);\n    }\n  }\n\n  if (flags & b2DebugDraw.e_controllerBit) {\n    for (var c = this.m_controllerList; c; c = c.m_next) {\n      c.Draw(this.m_debugDraw);\n    }\n  }\n\n  if (flags & b2DebugDraw.e_pairBit) {\n    color.Set(0.3, 0.9, 0.9);\n\n    for (var contact = this.m_contactManager.m_contactList; contact; contact = contact.GetNext()) {\n      var fixtureA = contact.GetFixtureA();\n      var fixtureB = contact.GetFixtureB();\n      var cA = fixtureA.GetAABB().GetCenter();\n      var cB = fixtureB.GetAABB().GetCenter();\n      this.m_debugDraw.DrawSegment(cA, cB, color);\n    }\n  }\n\n  if (flags & b2DebugDraw.e_aabbBit) {\n    bp = this.m_contactManager.m_broadPhase;\n    vs = [new b2Vec2(), new b2Vec2(), new b2Vec2(), new b2Vec2()];\n\n    for (b = this.m_bodyList; b; b = b.GetNext()) {\n      if (b.IsActive() == false) {\n        continue;\n      }\n\n      for (f = b.GetFixtureList(); f; f = f.GetNext()) {\n        var aabb = bp.GetFatAABB(f.m_proxy);\n        vs[0].Set(aabb.lowerBound.x, aabb.lowerBound.y);\n        vs[1].Set(aabb.upperBound.x, aabb.lowerBound.y);\n        vs[2].Set(aabb.upperBound.x, aabb.upperBound.y);\n        vs[3].Set(aabb.lowerBound.x, aabb.upperBound.y);\n        this.m_debugDraw.DrawPolygon(vs, 4, color);\n      }\n    }\n  }\n\n  if (flags & b2DebugDraw.e_centerOfMassBit) {\n    for (b = this.m_bodyList; b; b = b.m_next) {\n      xf = b2World.s_xf;\n      xf.R = b.m_xf.R;\n      xf.position = b.GetWorldCenter();\n      this.m_debugDraw.DrawTransform(xf);\n    }\n  }\n};\n\nb2World.prototype.QueryAABB = function (callback, aabb) {\n  var broadPhase = this.m_contactManager.m_broadPhase;\n\n  function WorldQueryWrapper(proxy) {\n    return callback(broadPhase.GetUserData(proxy));\n  }\n\n  broadPhase.Query(WorldQueryWrapper, aabb);\n};\n\nb2World.prototype.QueryShape = function (callback, shape, transform) {\n  if (transform == null) {\n    transform = new b2Transform();\n    transform.SetIdentity();\n  }\n\n  var broadPhase = this.m_contactManager.m_broadPhase;\n\n  function WorldQueryWrapper(proxy) {\n    var fixture = broadPhase.GetUserData(proxy);\n\n    if (b2Shape.TestOverlap(shape, transform, fixture.GetShape(), fixture.GetBody().GetTransform())) {\n      return callback(fixture);\n    }\n\n    return true;\n  }\n\n  var aabb = new b2AABB();\n  shape.ComputeAABB(aabb, transform);\n  broadPhase.Query(WorldQueryWrapper, aabb);\n};\n\nb2World.prototype.QueryPoint = function (callback, p) {\n  var broadPhase = this.m_contactManager.m_broadPhase;\n\n  function WorldQueryWrapper(proxy) {\n    var fixture = broadPhase.GetUserData(proxy);\n\n    if (fixture.TestPoint(p)) {\n      return callback(fixture);\n    }\n\n    return true;\n  }\n\n  var aabb = new b2AABB();\n  aabb.lowerBound.Set(p.x - b2Settings.b2_linearSlop, p.y - b2Settings.b2_linearSlop);\n  aabb.upperBound.Set(p.x + b2Settings.b2_linearSlop, p.y + b2Settings.b2_linearSlop);\n  broadPhase.Query(WorldQueryWrapper, aabb);\n};\n\nb2World.prototype.RayCast = function (callback, point1, point2) {\n  var broadPhase = this.m_contactManager.m_broadPhase;\n  var output = new b2RayCastOutput();\n\n  function RayCastWrapper(input, proxy) {\n    var userData = broadPhase.GetUserData(proxy);\n    var fixture = userData;\n    var hit = fixture.RayCast(output, input);\n\n    if (hit) {\n      var fraction = output.fraction;\n      var point = new b2Vec2((1 - fraction) * point1.x + fraction * point2.x, (1 - fraction) * point1.y + fraction * point2.y);\n      return callback(fixture, point, output.normal, fraction);\n    }\n\n    return input.maxFraction;\n  }\n\n  var input = new b2RayCastInput(point1, point2);\n  broadPhase.RayCast(RayCastWrapper, input);\n};\n\nb2World.prototype.RayCastOne = function (point1, point2) {\n  var result;\n\n  function RayCastOneWrapper(fixture, point, normal, fraction) {\n    result = fixture;\n    return fraction;\n  }\n\n  this.RayCast(RayCastOneWrapper, point1, point2);\n  return result;\n};\n\nb2World.prototype.RayCastAll = function (point1, point2) {\n  var result = new Array();\n\n  function RayCastAllWrapper(fixture, point, normal, fraction) {\n    result[result.length] = fixture;\n    return 1;\n  }\n\n  this.RayCast(RayCastAllWrapper, point1, point2);\n  return result;\n};\n\nb2World.prototype.GetBodyList = function () {\n  return this.m_bodyList;\n};\n\nb2World.prototype.GetJointList = function () {\n  return this.m_jointList;\n};\n\nb2World.prototype.GetContactList = function () {\n  return this.m_contactList;\n};\n\nb2World.prototype.IsLocked = function () {\n  return (this.m_flags & b2World.e_locked) > 0;\n};\n\nb2World.prototype.s_stack = new Array();\nb2World.prototype.m_flags = 0;\nb2World.prototype.m_contactManager = new b2ContactManager();\nb2World.prototype.m_contactSolver = new b2ContactSolver();\nb2World.prototype.m_island = new b2Island();\nb2World.prototype.m_bodyList = null;\nb2World.prototype.m_jointList = null;\nb2World.prototype.m_contactList = null;\nb2World.prototype.m_bodyCount = 0;\nb2World.prototype.m_contactCount = 0;\nb2World.prototype.m_jointCount = 0;\nb2World.prototype.m_controllerList = null;\nb2World.prototype.m_controllerCount = 0;\nb2World.prototype.m_gravity = null;\nb2World.prototype.m_allowSleep = null;\nb2World.prototype.m_groundBody = null;\nb2World.prototype.m_destructionListener = null;\nb2World.prototype.m_debugDraw = null;\nb2World.prototype.m_inv_dt0 = null;\n\nif (typeof exports !== \"undefined\") {\n  exports.b2BoundValues = b2BoundValues;\n  exports.b2Math = b2Math;\n  exports.b2DistanceOutput = b2DistanceOutput;\n  exports.b2Mat33 = b2Mat33;\n  exports.b2ContactPoint = b2ContactPoint;\n  exports.b2PairManager = b2PairManager;\n  exports.b2PositionSolverManifold = b2PositionSolverManifold;\n  exports.b2OBB = b2OBB;\n  exports.b2CircleContact = b2CircleContact;\n  exports.b2PulleyJoint = b2PulleyJoint;\n  exports.b2Pair = b2Pair;\n  exports.b2TimeStep = b2TimeStep;\n  exports.b2FixtureDef = b2FixtureDef;\n  exports.b2World = b2World;\n  exports.b2PrismaticJoint = b2PrismaticJoint;\n  exports.b2Controller = b2Controller;\n  exports.b2ContactID = b2ContactID;\n  exports.b2RevoluteJoint = b2RevoluteJoint;\n  exports.b2JointDef = b2JointDef;\n  exports.b2Transform = b2Transform;\n  exports.b2GravityController = b2GravityController;\n  exports.b2EdgeAndCircleContact = b2EdgeAndCircleContact;\n  exports.b2EdgeShape = b2EdgeShape;\n  exports.b2BuoyancyController = b2BuoyancyController;\n  exports.b2LineJointDef = b2LineJointDef;\n  exports.b2Contact = b2Contact;\n  exports.b2DistanceJoint = b2DistanceJoint;\n  exports.b2Body = b2Body;\n  exports.b2DestructionListener = b2DestructionListener;\n  exports.b2PulleyJointDef = b2PulleyJointDef;\n  exports.b2ContactEdge = b2ContactEdge;\n  exports.b2ContactConstraint = b2ContactConstraint;\n  exports.b2ContactImpulse = b2ContactImpulse;\n  exports.b2DistanceJointDef = b2DistanceJointDef;\n  exports.b2ContactResult = b2ContactResult;\n  exports.b2EdgeChainDef = b2EdgeChainDef;\n  exports.b2Vec2 = b2Vec2;\n  exports.b2Vec3 = b2Vec3;\n  exports.b2DistanceProxy = b2DistanceProxy;\n  exports.b2FrictionJointDef = b2FrictionJointDef;\n  exports.b2PolygonContact = b2PolygonContact;\n  exports.b2TensorDampingController = b2TensorDampingController;\n  exports.b2ContactFactory = b2ContactFactory;\n  exports.b2WeldJointDef = b2WeldJointDef;\n  exports.b2ConstantAccelController = b2ConstantAccelController;\n  exports.b2GearJointDef = b2GearJointDef;\n  exports.ClipVertex = ClipVertex;\n  exports.b2SeparationFunction = b2SeparationFunction;\n  exports.b2ManifoldPoint = b2ManifoldPoint;\n  exports.b2Color = b2Color;\n  exports.b2PolygonShape = b2PolygonShape;\n  exports.b2DynamicTreePair = b2DynamicTreePair;\n  exports.b2ContactConstraintPoint = b2ContactConstraintPoint;\n  exports.b2FrictionJoint = b2FrictionJoint;\n  exports.b2ContactFilter = b2ContactFilter;\n  exports.b2ControllerEdge = b2ControllerEdge;\n  exports.b2Distance = b2Distance;\n  exports.b2Fixture = b2Fixture;\n  exports.b2DynamicTreeNode = b2DynamicTreeNode;\n  exports.b2MouseJoint = b2MouseJoint;\n  exports.b2DistanceInput = b2DistanceInput;\n  exports.b2BodyDef = b2BodyDef;\n  exports.b2DynamicTreeBroadPhase = b2DynamicTreeBroadPhase;\n  exports.b2Settings = b2Settings;\n  exports.b2Proxy = b2Proxy;\n  exports.b2Point = b2Point;\n  exports.b2BroadPhase = b2BroadPhase;\n  exports.b2Manifold = b2Manifold;\n  exports.b2WorldManifold = b2WorldManifold;\n  exports.b2PrismaticJointDef = b2PrismaticJointDef;\n  exports.b2RayCastOutput = b2RayCastOutput;\n  exports.b2ConstantForceController = b2ConstantForceController;\n  exports.b2TimeOfImpact = b2TimeOfImpact;\n  exports.b2CircleShape = b2CircleShape;\n  exports.b2MassData = b2MassData;\n  exports.b2Joint = b2Joint;\n  exports.b2GearJoint = b2GearJoint;\n  exports.b2DynamicTree = b2DynamicTree;\n  exports.b2JointEdge = b2JointEdge;\n  exports.b2LineJoint = b2LineJoint;\n  exports.b2NullContact = b2NullContact;\n  exports.b2ContactListener = b2ContactListener;\n  exports.b2RayCastInput = b2RayCastInput;\n  exports.b2TOIInput = b2TOIInput;\n  exports.Features = Features;\n  exports.b2FilterData = b2FilterData;\n  exports.b2Island = b2Island;\n  exports.b2ContactManager = b2ContactManager;\n  exports.b2ContactSolver = b2ContactSolver;\n  exports.b2Simplex = b2Simplex;\n  exports.b2AABB = b2AABB;\n  exports.b2Jacobian = b2Jacobian;\n  exports.b2Bound = b2Bound;\n  exports.b2RevoluteJointDef = b2RevoluteJointDef;\n  exports.b2PolyAndEdgeContact = b2PolyAndEdgeContact;\n  exports.b2SimplexVertex = b2SimplexVertex;\n  exports.b2WeldJoint = b2WeldJoint;\n  exports.b2Collision = b2Collision;\n  exports.b2Mat22 = b2Mat22;\n  exports.b2SimplexCache = b2SimplexCache;\n  exports.b2PolyAndCircleContact = b2PolyAndCircleContact;\n  exports.b2MouseJointDef = b2MouseJointDef;\n  exports.b2Shape = b2Shape;\n  exports.b2Segment = b2Segment;\n  exports.b2ContactRegister = b2ContactRegister;\n  exports.b2DebugDraw = b2DebugDraw;\n  exports.b2Sweep = b2Sweep;\n}\n\n;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/utils/loop/renderloop.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/loop/renderloop.js","source":"const Loop = require(\"./loop\");\n\nclass RenderLoop extends Loop {\n  constructor(game) {\n    super(game);\n    this.timeMultiplier = 0.001;\n  }\n\n  start() {\n    super.start();\n    this.perform(0);\n  }\n\n  cycle(dt) {\n    requestAnimationFrame(time => {\n      this.perform(time);\n    });\n  }\n\n}\n\nmodule.exports = RenderLoop;","deps":{"./loop":"/Users/Temich/PycharmProjects/tanks/src/utils/loop/loop.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/utils/downloader.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/utils/downloader.js","source":"const Progress = require(\"./progress\");\n\nclass Downloader {\n  static getXHR(dataType, progress) {\n    let xhr = new XMLHttpRequest();\n    if (dataType) xhr.responseType = dataType;\n\n    if (progress) {\n      xhr.addEventListener(\"progress\", function (evt) {\n        if (evt.lengthComputable) {\n          progress.setCompleted(evt.loaded);\n          progress.setTarget(evt.total);\n        }\n      }, false);\n    }\n\n    return () => xhr;\n  }\n\n  static download(urls, handler, dataType, progress) {\n    return new Promise((resolve, reject) => {\n      let requests = [];\n      let awaiting = urls.length;\n      let cancelled = false;\n\n      const assetReady = () => {\n        if (! --awaiting) resolve();\n      };\n\n      for (let [i, url] of urls.entries()) {\n        if (cancelled) break;\n        let taskProgress = null;\n\n        if (progress) {\n          taskProgress = new Progress();\n          progress.addSubtask(taskProgress);\n        }\n\n        requests.push($.ajax({\n          url: url,\n          index: i,\n          xhr: this.getXHR(dataType, taskProgress)\n        }).done(function () {\n          if (cancelled) return;\n          handler.apply(this, arguments);\n          assetReady();\n        }).fail(function (response, status, error) {\n          if (cancelled) return;\n          cancelled = true;\n          let reason = \"Failed to download \" + urls[this.index] + \": \" + error;\n\n          for (let request of requests) {\n            if (request !== this) request.abort();\n          }\n\n          reject(reason);\n        }));\n      }\n    });\n  }\n\n}\n\nmodule.exports = Downloader;","deps":{"./progress":"/Users/Temich/PycharmProjects/tanks/src/client/utils/progress.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/sprite.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/sprite.js","source":"const Progress = require(\"./utils/progress\");\n\nconst Downloader = require(\"./utils/downloader\");\n\nclass Sprite {\n  constructor(name) {\n    // Do not remove\n    // Destructuring the sprite\n    // description with square brackets to\n    // help prop name mangler.\n    this.rects = []; // this.topLeft = {}\n    // this.topRight = {}\n    // this.bottomLeft = {}\n    // this.bottomRight = {}\n\n    this.rect = null;\n\n    for (let mipmap of Sprite.mipmapatlases) {\n      let source = mipmap[name];\n      this.rects.push({\n        x: source[\"x\"],\n        y: source[\"y\"],\n        w: source[\"w\"],\n        h: source[\"h\"]\n      });\n    }\n\n    this.updateRect(this.rects[0]);\n  }\n\n  updateRect(rect) {\n    this.rect = rect; // this.topLeft.x = rect.x\n    // this.topLeft.y = rect.y\n    // this.topRight.x = rect.x + rect.w\n    // this.topRight.y = rect.y\n    // this.bottomLeft.x = rect.x\n    // this.bottomLeft.y = rect.y + rect.h\n    // this.bottomRight.x = rect.x + rect.w\n    // this.bottomRight.y = rect.y + rect.h\n    // this.centerLeft.x =\n  }\n\n  static setMipMapLevel(level) {\n    this.mipmaplevel = level;\n\n    for (let sprite of this.sprites.values()) {\n      sprite.updateRect(sprite.rects[level]);\n    }\n  }\n\n  static setGLMipMapLevel(gl, uniform, level) {\n    uniform.set1i(level);\n  }\n\n  static applyTexture(gl) {\n    let i = 0;\n\n    for (let image of this.mipmapimages) {\n      gl.activeTexture(gl[\"TEXTURE\" + i]);\n      const texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n      i++;\n    }\n  }\n\n  static setSmoothing(gl, enabled) {\n    if (enabled) {\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    } else {\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    }\n  }\n\n  static download(progress, gl, options) {\n    options = Object.assign({\n      mipMapLevels: 3\n    }, options);\n    return new Promise((resolve, reject) => {\n      let mipMapLevels = options.mipMapLevels;\n      let succeededMipmapLevels = mipMapLevels;\n      let awaiting = succeededMipmapLevels * 2;\n\n      const assetReady = () => {\n        if (! --awaiting) {\n          let root = Sprite.mipmapatlases[0];\n\n          for (let key in root) {\n            if (root.hasOwnProperty(key)) {\n              Sprite.sprites.set(key, new Sprite(key));\n            }\n          }\n\n          resolve();\n        }\n      };\n\n      for (let level = 0; level < mipMapLevels; level++) {\n        (function (level) {\n          /** @type Progress */\n          let textureProgress = null;\n          /** @type Progress */\n\n          let atlasProgress = null;\n\n          if (progress) {\n            textureProgress = new Progress();\n            atlasProgress = new Progress();\n            progress.addSubtask(textureProgress);\n            progress.addSubtask(atlasProgress);\n          }\n\n          let levelPath = \"atlas-mipmap-level-\" + level;\n          $(new Image()).attr({\n            src: \"../assets/img/\" + levelPath + \".png\"\n          }).on(\"load\", function () {\n            if (this.complete) {\n              if (succeededMipmapLevels > level) {\n                Sprite.mipmapimages[level] = this;\n                textureProgress.complete();\n              }\n\n              assetReady();\n            } else {\n              if (level === 0) {\n                reject(\"Failed to load first mipmap level\");\n              } else {\n                succeededMipmapLevels = Math.min(succeededMipmapLevels, level);\n                assetReady();\n              }\n            }\n          });\n          $.ajax({\n            url: \"../assets/img/\" + levelPath + \".json\",\n            xhr: Downloader.getXHR(null, atlasProgress)\n          }).done(data => {\n            if (succeededMipmapLevels > level) {\n              Sprite.mipmapatlases[level] = data;\n            }\n\n            assetReady();\n          }).fail((response, status, error) => {\n            if (level === 0) {\n              reject(\"Failed to load first mipmap level atlas descriptor: \" + error);\n            } else {\n              succeededMipmapLevels = Math.min(succeededMipmapLevels, level);\n              assetReady();\n            }\n          });\n        })(level);\n      }\n    });\n  }\n  /**\n   * @param name Name of the sprite, like \"tanks/sniper/body-bright\"\n   * @returns {Sprite} The sprite associated with this name\n   */\n\n\n  static named(name) {\n    return Sprite.sprites.get(name);\n  }\n\n}\n\nSprite.sprites = new Map();\nSprite.mipmapatlases = [];\nSprite.mipmapimages = [];\nSprite.mipmaplevel = 0;\nmodule.exports = Sprite;","deps":{"./utils/progress":"/Users/Temich/PycharmProjects/tanks/src/client/utils/progress.js","./utils/downloader":"/Users/Temich/PycharmProjects/tanks/src/client/utils/downloader.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/loop/scheduledtask.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/loop/scheduledtask.js","source":"class ScheduledTask {\n  constructor(func, time) {\n    this.func = func;\n    this.time = time;\n    this.lock = ScheduledTask.lockInitialTimers;\n  }\n\n  tick(dt) {\n    if (this.lock) {\n      this.lock = false;\n      return;\n    }\n\n    if ((this.time -= dt) <= 0) {\n      this.func.apply(null);\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nScheduledTask.lockInitialTimers = false;\nmodule.exports = ScheduledTask;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/utils/loop/loop.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/loop/loop.js","source":"const ScheduledTask = require(\"./scheduledtask\");\n\nclass Loop {\n  constructor(game) {\n    this.game = game;\n    /** @type Map<number,ScheduledTask>*/\n\n    this.schedule = new Map();\n    this.schedules = 0;\n    this.ticks = 0;\n    this.loopTimestamp = 0;\n    this.maximumTimestep = 0.1;\n    this.timeMultiplier = 1;\n    this.run = null;\n  }\n\n  start() {\n    this.running = true;\n  }\n\n  stop() {\n    this.running = false;\n  }\n\n  cycle(dt) {}\n\n  runScheduledTasks(dt) {\n    ScheduledTask.lockInitialTimers = true;\n\n    for (let [key, task] of this.schedule.entries()) {\n      if (task.tick(dt)) {\n        this.schedule.delete(key);\n      }\n    }\n\n    ScheduledTask.lockInitialTimers = false;\n  }\n\n  perform(timestamp) {\n    if (timestamp === undefined) {\n      timestamp = Date.now();\n    }\n\n    this.ticks++;\n\n    if (this.running) {\n      let dt;\n\n      if (this.loopTimestamp) {\n        dt = (timestamp - this.loopTimestamp) * this.timeMultiplier;\n        if (dt > this.maximumTimestep) dt = this.maximumTimestep;\n      } else {\n        dt = 0;\n      }\n\n      this.loopTimestamp = timestamp;\n      this.runScheduledTasks(dt);\n\n      if (this.run) {\n        this.run(dt);\n      }\n\n      this.cycle(dt);\n    } else {\n      this.loopTimestamp = undefined;\n    }\n  }\n\n  scheduleTask(func, time) {\n    time = time || 0;\n    let index = this.schedules++;\n    this.schedule.set(index, new ScheduledTask(func, time));\n    return index;\n  }\n\n}\n\nmodule.exports = Loop;","deps":{"./scheduledtask":"/Users/Temich/PycharmProjects/tanks/src/utils/loop/scheduledtask.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/screen.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/screen.js","source":"const RenderLoop = require(\"../utils/loop/renderloop\");\n\nconst Loop = require(\"../utils/loop/loop\");\n\nconst CanvasFactory = require(\"./utils/canvasfactory\");\n\nwindow.requestAnimationFrame = window.requestAnimationFrame || window[\"mozRequestAnimationFrame\"] || window[\"webkitRequestAnimationFrame\"] || window[\"msRequestAnimationFrame\"];\n\nclass Screen {\n  /**\n   * @type {HTMLCanvasElement}\n   */\n\n  /**\n   * @type {WebGLRenderingContext}\n   */\n\n  /**\n   * @type {Loop}\n   */\n\n  /**\n   * @type {Scene}\n   */\n  constructor(config) {\n    this.canvas = null;\n    this.ctx = null;\n    this.loop = null;\n    this.scene = void 0;\n    config = Object.assign({\n      scale: window.devicePixelRatio\n    }, config);\n    this.config = config;\n    this.root = config.root;\n    this.initLoop();\n    this.scene = null;\n    this.width = null;\n    this.height = null;\n    this.initCanvas();\n    this.initResizeHandling();\n    this.initialize();\n\n    this.loop.run = dt => this.tick(dt);\n  }\n\n  initLoop() {\n    this.loop = new RenderLoop(this);\n  }\n\n  initialize() {\n    for (let texture of this.framebufferTextures) {\n      let framebuffer = this.ctx.createFramebuffer();\n      this.ctx.bindFramebuffer(this.ctx.FRAMEBUFFER, framebuffer);\n      this.ctx.framebufferTexture2D(this.ctx.FRAMEBUFFER, this.ctx.COLOR_ATTACHMENT0, this.ctx.TEXTURE_2D, texture, 0);\n      this.framebuffers.push(framebuffer);\n    }\n\n    this.setScreenFramebuffer();\n  }\n\n  setScene(scene) {\n    if (this.scene) {\n      this.scene.disappear();\n      this.scene.overlayContainer.remove();\n    }\n\n    this.scene = scene;\n    this.scene.appear();\n    this.root.append(this.scene.overlayContainer);\n  }\n\n  initCanvas() {\n    Object.assign(this, CanvasFactory());\n    this.root.append($(this.canvas));\n    this.framebufferTextures = [];\n    this.framebuffers = [];\n\n    for (let i = 0; i < 2; i++) {\n      let texture = this.ctx.createTexture();\n      this.framebufferTextures.push(texture);\n    }\n\n    this.activeFramebufferIndex = null;\n    this.inactiveFramebufferIndex = null;\n  }\n\n  activeFramebufferTexture() {\n    if (this.activeFramebufferIndex === null) return null;\n    return this.framebufferTextures[this.activeFramebufferIndex];\n  }\n\n  inactiveFramebufferTexture() {\n    if (this.inactiveFramebufferIndex === null) return null;\n    return this.framebufferTextures[this.inactiveFramebufferIndex];\n  }\n\n  swapFramebuffers() {\n    if (this.activeFramebufferIndex === null) {\n      this.activeFramebufferIndex = 0;\n      this.inactiveFramebufferIndex = 1;\n    }\n\n    let oldActive = this.activeFramebufferIndex;\n    this.activeFramebufferIndex = this.inactiveFramebufferIndex;\n    this.inactiveFramebufferIndex = oldActive;\n    this.ctx.bindFramebuffer(this.ctx.FRAMEBUFFER, this.framebuffers[this.activeFramebufferIndex]);\n  }\n\n  clear() {\n    this.ctx.clear(this.ctx.COLOR_BUFFER_BIT);\n  }\n\n  setScreenFramebuffer() {\n    this.inactiveFramebufferIndex = this.activeFramebufferIndex;\n    this.activeFramebufferIndex = null;\n    this.ctx.bindFramebuffer(this.ctx.FRAMEBUFFER, null);\n  }\n\n  initResizeHandling() {\n    const handler = () => {\n      this.width = this.root.width();\n      this.height = this.root.height();\n      this.canvas.width = this.width * this.config.scale;\n      this.canvas.height = this.height * this.config.scale;\n      this.canvas.style.width = this.width + \"px\";\n      this.canvas.style.height = this.height + \"px\";\n      this.ctx.viewport(0, 0, this.ctx.drawingBufferWidth, this.ctx.drawingBufferHeight);\n\n      for (let texture of this.framebufferTextures) {\n        this.ctx.bindTexture(this.ctx.TEXTURE_2D, texture);\n        this.ctx.texImage2D(this.ctx.TEXTURE_2D, 0, this.ctx.RGBA, this.ctx.drawingBufferWidth, this.ctx.drawingBufferHeight, 0, this.ctx.RGBA, this.ctx.UNSIGNED_BYTE, null);\n        this.ctx.texParameteri(this.ctx.TEXTURE_2D, this.ctx.TEXTURE_MIN_FILTER, this.ctx.LINEAR);\n        this.ctx.texParameteri(this.ctx.TEXTURE_2D, this.ctx.TEXTURE_WRAP_S, this.ctx.CLAMP_TO_EDGE);\n        this.ctx.texParameteri(this.ctx.TEXTURE_2D, this.ctx.TEXTURE_WRAP_T, this.ctx.CLAMP_TO_EDGE);\n      }\n\n      if (this.scene) this.scene.layout();\n    };\n\n    window.addEventListener(\"resize\", handler);\n    handler();\n  }\n\n  tick(dt) {\n    if (this.scene) {\n      this.scene.draw(this.ctx, dt);\n    }\n  }\n\n}\n\nmodule.exports = Screen;","deps":{"./utils/canvasfactory":"/Users/Temich/PycharmProjects/tanks/src/client/utils/canvasfactory.js","../utils/loop/loop":"/Users/Temich/PycharmProjects/tanks/src/utils/loop/loop.js","../utils/loop/renderloop":"/Users/Temich/PycharmProjects/tanks/src/utils/loop/renderloop.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/scenes/scene.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/scenes/scene.js","source":"const Screen = require(\"../screen\");\n\nclass Scene {\n  /**\n   * @type {Screen}\n   */\n\n  /**\n   * @type {jQuery}\n   */\n  constructor(config) {\n    this.screen = null;\n    this.overlayContainer = null;\n    this.overlayContainer = $(\"<div>\");\n    this.screen = config.screen;\n  }\n\n  draw(ctx, dt) {}\n\n  layout() {}\n\n  appear() {}\n\n  disappear() {}\n\n}\n\nmodule.exports = Scene;","deps":{"../screen":"/Users/Temich/PycharmProjects/tanks/src/client/screen.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/particles/particle.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/particles/particle.js","source":"const Color = require(\"../../utils/color\");\n\nclass Particle {\n  constructor(config) {\n    this.x = config.x;\n    this.y = config.y;\n    this.dx = config.dx;\n    this.dy = config.dy;\n    this.dead = false;\n    this.lifetime = config.lifetime || 0.4;\n    this.lifespan = config.lifespan || 0;\n    this.damping = config.damping || 0.99;\n    this.color = config.color || new Color(0, 0, 0);\n    this.width = config.width || 0;\n    this.height = config.height || 0;\n  }\n\n  tick(dt) {\n    this.dx *= this.damping;\n    this.dy *= this.damping;\n    this.x += this.dx * dt;\n    this.y += this.dy * dt;\n    this.lifespan += dt;\n\n    if (this.lifespan > this.lifetime) {\n      this.dead = true;\n    }\n  }\n\n}\n\nmodule.exports = Particle;","deps":{"../../utils/color":"/Users/Temich/PycharmProjects/tanks/src/utils/color.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/matrix3.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/matrix3.js","source":"/*\n * Copyright 2012, Gregg Tavares.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Gregg Tavares. nor the names of his\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Various 2d math functions.\n *\n * @module webgl-2d-math\n */\nconst m3 = function () {\n  \"use strict\";\n\n  function multiply(a, b) {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a10 = a[3];\n    const a11 = a[3 + 1];\n    const a12 = a[3 + 2];\n    const a20 = a[2 * 3];\n    const a21 = a[2 * 3 + 1];\n    const a22 = a[2 * 3 + 2];\n    const b00 = b[0];\n    const b01 = b[1];\n    const b02 = b[2];\n    const b10 = b[3];\n    const b11 = b[3 + 1];\n    const b12 = b[3 + 2];\n    const b20 = b[2 * 3];\n    const b21 = b[2 * 3 + 1];\n    const b22 = b[2 * 3 + 2];\n    return new Float32Array([b00 * a00 + b01 * a10 + b02 * a20, b00 * a01 + b01 * a11 + b02 * a21, b00 * a02 + b01 * a12 + b02 * a22, b10 * a00 + b11 * a10 + b12 * a20, b10 * a01 + b11 * a11 + b12 * a21, b10 * a02 + b11 * a12 + b12 * a22, b20 * a00 + b21 * a10 + b22 * a20, b20 * a01 + b21 * a11 + b22 * a21, b20 * a02 + b21 * a12 + b22 * a22]);\n  }\n\n  function identity() {\n    return new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n  }\n\n  function translation(tx, ty) {\n    return new Float32Array([1, 0, 0, 0, 1, 0, tx, ty, 1]);\n  }\n\n  function translate(m, tx, ty) {\n    return multiply(m, translation(tx, ty));\n  }\n\n  function rotation(s, c) {\n    return new Float32Array([c, -s, 0, s, c, 0, 0, 0, 1]);\n  }\n\n  function rotate(m, angle) {\n    return multiply(m, rotation(Math.sin(angle), Math.cos(angle)));\n  }\n\n  function turn(m, s, c) {\n    return multiply(m, rotation(s, c));\n  }\n\n  function scaling(sx, sy) {\n    return new Float32Array([sx, 0, 0, 0, sy, 0, 0, 0, 1]);\n  }\n\n  function scale(m, sx, sy) {\n    return multiply(m, scaling(sx, sy));\n  }\n\n  function inverse(m) {\n    const t00 = m[3 + 1] * m[2 * 3 + 2] - m[3 + 2] * m[2 * 3 + 1];\n    const t10 = m[1] * m[2 * 3 + 2] - m[2] * m[2 * 3 + 1];\n    const t20 = m[1] * m[3 + 2] - m[2] * m[3 + 1];\n    const d = 1.0 / (m[0] * t00 - m[3] * t10 + m[2 * 3] * t20);\n    return new Float32Array([d * t00, -d * t10, d * t20, -d * (m[3] * m[2 * 3 + 2] - m[3 + 2] * m[2 * 3]), d * (m[0] * m[2 * 3 + 2] - m[2] * m[2 * 3]), -d * (m[0] * m[3 + 2] - m[2] * m[3]), d * (m[3] * m[2 * 3 + 1] - m[3 + 1] * m[2 * 3]), -d * (m[0] * m[2 * 3 + 1] - m[1] * m[2 * 3]), d * (m[0] * m[3 + 1] - m[1] * m[3])]);\n  }\n\n  return {\n    identity: identity,\n    multiply: multiply,\n    rotation: rotation,\n    rotate: rotate,\n    scaling: scaling,\n    scale: scale,\n    translation: translation,\n    translate: translate,\n    inverse: inverse,\n    turn: turn\n  };\n}();\n\nclass Matrix3 {\n  constructor() {\n    this.m = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n    this.stack = [];\n  }\n\n  save() {\n    this.stack.push(this.m.slice());\n  }\n\n  restore() {\n    this.m = this.stack.pop();\n  }\n\n  inverse() {\n    this.m = m3.inverse(this.m);\n  }\n\n  rotate(angle) {\n    this.m = m3.rotate(this.m, angle);\n  }\n\n  turn(sin, cos) {\n    this.m = m3.turn(this.m, sin, cos);\n  }\n\n  translate(x, y) {\n    this.m = m3.translate(this.m, x, y);\n  }\n\n  scale(x, y) {\n    this.m = m3.scale(this.m, x, y);\n  }\n\n  transformX(x, y) {\n    return this.m[0] * x + this.m[3] * y + this.m[6];\n  }\n\n  transformY(x, y) {\n    return this.m[1] * x + this.m[4] * y + this.m[7];\n  }\n\n  reset() {\n    this.m.set([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n  }\n\n}\n\nmodule.exports = Matrix3;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/client/camera.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/camera.js","source":"const Box2D = require(\"../library/box2d\");\n\nconst Matrix3 = require(\"./graphics/matrix3\");\n\nclass Camera {\n  /**\n   * @type {Matrix3}\n   */\n\n  /**\n   * Enable inertial camera movement.\n   * @type {boolean}\n   */\n\n  /**\n   * Camera position (exclude camera shaking)\n   * @type {b2Vec2}\n   */\n\n  /**\n   * Camera position delta\n   * @type {b2Vec2}\n   */\n\n  /**\n   * Camera shaking velocity\n   * @type {b2Vec2}\n   */\n\n  /**\n   * @type {b2Vec2}\n   */\n  constructor(options) {\n    this.matrix = null;\n    this.inertial = false;\n    this.position = null;\n    this.shaking = null;\n    this.shakeVelocity = null;\n    this.target = null;\n    options = Object.assign({\n      baseScale: 1,\n      target: null,\n      limit: true,\n      inertial: false\n    }, options);\n    this.baseScale = options.baseScale;\n    this.target = options.target;\n    this.viewport = options.viewport;\n    this.defaultPosition = options.defaultPosition;\n    this.position = null;\n    this.velocity = new Box2D.b2Vec2();\n    this.shaking = new Box2D.b2Vec2();\n    this.shakeVelocity = new Box2D.b2Vec2();\n    this.realTarget = new Box2D.b2Vec2();\n    this.targetVelocity = null;\n    this.limit = options.limit;\n    this.viewportLimit = null;\n\n    if (this.limit) {\n      this.viewportLimit = options.viewportLimit || new Box2D.b2Vec2(1440, 900);\n    }\n\n    this.matrix = new Matrix3();\n    this.inertial = options.inertial;\n  }\n\n  reset() {\n    if (this.position) {\n      this.position.x = this.defaultPosition.x;\n      this.position.y = this.defaultPosition.y;\n    } else {\n      this.position = this.defaultPosition.Copy();\n    }\n\n    this.shaking.x = 0;\n    this.shaking.y = 0;\n    this.shakeVelocity.x = 0;\n    this.shakeVelocity.y = 0;\n  }\n\n  getPosition() {\n    return new Box2D.b2Vec2(this.position.x + this.shaking.x, this.position.y + this.shaking.y);\n  }\n\n  targetPosition(position, velocity, target, lookahead, dt) {\n    let lookAheadX = position.x + velocity.x * lookahead;\n    let lookAheadY = position.y + velocity.y * lookahead;\n\n    if (target == null) {\n      velocity.x -= lookAheadX * dt;\n      velocity.y -= lookAheadY * dt;\n    } else {\n      velocity.x -= (lookAheadX - target.x) * dt;\n      velocity.y -= (lookAheadY - target.y) * dt;\n    }\n\n    position.x += velocity.x * dt;\n    position.y += velocity.y * dt;\n  }\n  /**\n   * Moves the camera to follow the target.\n   * @param dt {number} Frame seconds\n   */\n\n\n  tick(dt) {\n    this.matrix.reset();\n    let target = this.target || this.defaultPosition;\n    this.scale = this.baseScale;\n\n    if (this.limit) {\n      if (this.viewport.x > this.viewportLimit.x) {\n        this.scale = this.viewport.x / this.viewportLimit.x * this.baseScale;\n      }\n\n      if (this.viewport.y > this.viewportLimit.y) {\n        this.scale = Math.max(this.scale, this.viewport.y / this.viewportLimit.y * this.baseScale);\n      }\n    }\n\n    this.matrix.scale(1 / this.viewport.x * 2, -1 / this.viewport.y * 2);\n\n    if (this.position) {\n      if (this.inertial) {\n        if (this.targetVelocity) {\n          this.realTarget.x = target.x + this.targetVelocity.x * 0.5;\n          this.realTarget.y = target.y + this.targetVelocity.y * 0.5;\n          target = this.realTarget;\n        }\n\n        this.targetPosition(this.position, this.velocity, target, 1.5, dt * 5);\n        this.targetPosition(this.shakeVelocity, this.shaking, null, 0.5, dt * 20);\n      } else {\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n        this.position.x = target.x;\n        this.position.y = target.y;\n      }\n    } else {\n      this.position = target.Copy();\n    }\n\n    this.matrix.scale(this.scale, this.scale);\n    this.matrix.translate(-this.position.x - this.shaking.x, -this.position.y - this.shaking.y);\n  }\n\n}\n\nmodule.exports = Camera;","deps":{"../library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","./graphics/matrix3":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/matrix3.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/lightmasktextureprogram.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/lightmasktextureprogram.js","source":"/* @load-resource: '../shaders/fragment/light-mask-texture-fragment.glsl' */\n\n/* @load-resource: '../shaders/vertex/light-mask-texture-vertex.glsl' */\nconst Program = require(\"../program\");\n\nconst Shader = require(\"../shader\");\n\nconst GLBuffer = require(\"../glbuffer\");\n\nconst Sprite = require(\"../../sprite\");\n\nclass LightMaskTextureProgram extends Program {\n  constructor(name, ctx) {\n    let vertexShader = new Shader(\"light-mask-texture-vertex\", Shader.VERTEX).compile(ctx);\n    let fragmentShader = new Shader(\"light-mask-texture-fragment\", Shader.FRAGMENT).compile(ctx);\n    super(name, vertexShader, fragmentShader);\n    this.link(ctx);\n    this.ctx = ctx;\n    this.vertexBuffer = new GLBuffer({\n      gl: ctx,\n      drawMode: this.ctx.STATIC_DRAW\n    }).createBuffer();\n    this.brightTexturePositionAttribute = this.getAttribute(\"a_bright_texture_position\");\n    this.darkTexturePositionAttribute = this.getAttribute(\"a_dark_texture_position\");\n    this.maskPositionAttrubute = this.getAttribute(\"a_mask_position\");\n    this.vertexPositionAttribute = this.getAttribute(\"a_vertex_position\");\n    this.samplerUniform = this.getUniform(\"u_texture\");\n    this.textureSizeUniform = this.getUniform(\"u_texture_size\");\n    this.angleUniform = this.getUniform(\"u_angle\");\n    this.matrixUniform = this.getUniform(\"u_matrix\");\n    this.vertexLength = 8;\n    this.use();\n    this.samplerUniform.set1i(0);\n    this.textureSizeUniform.set2f(Sprite.mipmapimages[0].width, Sprite.mipmapimages[0].height);\n  }\n\n  setLightAngle(angle) {\n    let normalizedAngle = angle / Math.PI / 2 % 1;\n    if (normalizedAngle < 0) normalizedAngle += 1;\n    this.angleUniform.set1f(normalizedAngle);\n  }\n\n  drawMaskedSprite(bright, dark, mask, x, y, width, height) {\n    const a = bright.rect;\n    const b = dark.rect;\n    const c = mask.rect;\n    this.vertexBuffer.appendArray([x + width, y + height, a.x + a.w, a.y + a.h, b.x + b.w, b.y + c.h, c.x + c.w, c.y + c.h, x + width, y, a.x + a.w, a.y, b.x + b.w, b.y, c.x + c.w, c.y, x, y, a.x, a.y, b.x, b.y, c.x, c.y, x + width, y + height, a.x + a.w, a.y + a.h, b.x + b.w, b.y + c.h, c.x + c.w, c.y + c.h, x, y + height, a.x, a.y + a.h, b.x, b.y + b.h, c.x, c.y + c.h, x, y, a.x, a.y, b.x, b.y, c.x, c.y]);\n  }\n\n  prepare() {\n    Sprite.setSmoothing(this.ctx, false);\n    this.vertexBuffer.bind();\n    this.vertexBuffer.reset();\n    const bytes = this.vertexBuffer.clazz.BYTES_PER_ELEMENT;\n    const stride = this.vertexLength * bytes;\n    this.ctx.enableVertexAttribArray(this.brightTexturePositionAttribute);\n    this.ctx.enableVertexAttribArray(this.darkTexturePositionAttribute);\n    this.ctx.enableVertexAttribArray(this.maskPositionAttrubute);\n    this.ctx.enableVertexAttribArray(this.vertexPositionAttribute);\n    this.ctx.vertexAttribPointer(this.vertexPositionAttribute, 2, this.ctx.FLOAT, false, stride, 0);\n    this.ctx.vertexAttribPointer(this.brightTexturePositionAttribute, 2, this.ctx.FLOAT, false, stride, 8);\n    this.ctx.vertexAttribPointer(this.darkTexturePositionAttribute, 2, this.ctx.FLOAT, false, stride, 16);\n    this.ctx.vertexAttribPointer(this.maskPositionAttrubute, 2, this.ctx.FLOAT, false, stride, 24);\n  }\n\n  draw() {\n    this.vertexBuffer.updateData();\n    this.ctx.drawArrays(this.ctx.TRIANGLES, 0, this.vertexBuffer.pointer / this.vertexLength);\n    this.ctx.disableVertexAttribArray(this.brightTexturePositionAttribute);\n    this.ctx.disableVertexAttribArray(this.darkTexturePositionAttribute);\n    this.ctx.disableVertexAttribArray(this.maskPositionAttrubute);\n    this.ctx.disableVertexAttribArray(this.vertexPositionAttribute);\n    Sprite.setSmoothing(this.ctx, true);\n  }\n\n}\n\nmodule.exports = LightMaskTextureProgram;","deps":{"../../sprite":"/Users/Temich/PycharmProjects/tanks/src/client/sprite.js","../program":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/program.js","../shader":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/shader.js","../glbuffer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/glbuffer.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/particles/fireparticle.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/particles/fireparticle.js","source":"const Particle = require(\"./particle\");\n\nclass FireParticle extends Particle {\n  createColors(config) {\n    let varying = 30;\n    return [[255 - Math.random() * varying, 255 - Math.random() * varying, Math.random() * varying, 0], [255 - Math.random() * varying, 255 - Math.random() * varying, Math.random() * varying, 0.4], [255 - Math.random() * varying, 128 - Math.random() * varying, Math.random() * varying, 0.6], [255 - Math.random() * varying, 128 - Math.random() * varying, Math.random() * varying, 0]];\n  }\n\n  createTimings(config) {\n    return [0.0, 0.1, 0.6, 1.0];\n  }\n\n  constructor(config) {\n    super(config);\n    this.config = config;\n    this.width = config.width || 4;\n    this.height = config.height || 4;\n    this.scaling = config.scaling || 0.01;\n    this.colors = this.createColors(config);\n    this.times = this.createTimings(config);\n    this.tick(0);\n  }\n\n  tick(dt) {\n    super.tick(dt);\n    let fraction = this.lifespan / this.lifetime;\n    let r, g, b, a, c1, c2;\n    let colors = this.colors;\n\n    for (let i = 0, l = colors.length; i < l; i++) {\n      if (fraction < this.times[i]) {\n        c2 = i;\n        break;\n      } else {\n        c1 = i;\n      }\n    }\n\n    if (c2 === undefined) c2 = colors.length - 1;\n    let f1 = (fraction - this.times[c1]) / (this.times[c2] - this.times[c1]);\n    let f2 = 1 - f1;\n    c1 = colors[c1];\n    c2 = colors[c2];\n    r = c1[0] * f2 + c2[0] * f1;\n    g = c1[1] * f2 + c2[1] * f1;\n    b = c1[2] * f2 + c2[2] * f1;\n    a = c1[3] * f2 + c2[3] * f1;\n    this.color.r = Math.round(r);\n    this.color.g = Math.round(g);\n    this.color.b = Math.round(b);\n    this.color.alpha = a;\n    this.width += this.scaling;\n    this.height += this.scaling;\n  }\n\n}\n\nmodule.exports = FireParticle;","deps":{"./particle":"/Users/Temich/PycharmProjects/tanks/src/client/particles/particle.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/particleprogram.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/particleprogram.js","source":"/* @load-resource: '../shaders/fragment/particle-fragment.glsl' */\n\n/* @load-resource: '../shaders/vertex/particle-vertex.glsl' */\nconst Program = require(\"../program\");\n\nconst Shader = require(\"../shader\");\n\nconst GLBuffer = require(\"../glbuffer\");\n\nclass ParticleProgram extends Program {\n  constructor(name, ctx) {\n    let vertexShader = new Shader(\"particle-vertex\", Shader.VERTEX).compile(ctx);\n    let fragmentShader = new Shader(\"particle-fragment\", Shader.FRAGMENT).compile(ctx);\n    super(name, vertexShader, fragmentShader);\n    this.link(ctx);\n    this.ctx = ctx;\n    this.vertexBuffer = new GLBuffer({\n      gl: ctx,\n      drawMode: this.ctx.STATIC_DRAW\n    }).createBuffer();\n    this.colorBuffer = new GLBuffer({\n      gl: ctx,\n      clazz: Uint32Array,\n      drawMode: this.ctx.STATIC_DRAW\n    }).createBuffer();\n    this.indexBuffer = this.createIndexBuffer();\n    this.vertexPositionAttribute = this.getAttribute(\"a_vertex_position\");\n    this.colorAttribute = this.getAttribute(\"a_color\");\n    this.matrixUniform = this.getUniform(\"u_matrix\");\n    this.vertexLength = 2;\n    this.particles = 0;\n  }\n\n  prepare() {\n    this.indexBuffer.reset();\n    this.vertexBuffer.bind();\n    this.vertexBuffer.reset();\n    const bytes = this.vertexBuffer.clazz.BYTES_PER_ELEMENT;\n    const stride = this.vertexLength * bytes;\n    this.ctx.enableVertexAttribArray(this.vertexPositionAttribute);\n    this.ctx.vertexAttribPointer(this.vertexPositionAttribute, 2, this.ctx.FLOAT, false, stride, 0);\n    this.colorBuffer.bind();\n    this.colorBuffer.reset();\n    const colorBytes = this.colorBuffer.clazz.BYTES_PER_ELEMENT;\n    this.ctx.enableVertexAttribArray(this.colorAttribute);\n    this.ctx.vertexAttribPointer(this.colorAttribute, 4, this.ctx.UNSIGNED_BYTE, true, colorBytes, 0);\n  }\n\n  drawParticle(particle) {\n    if (particle.color.alpha <= 0) {\n      return;\n    }\n\n    const w = particle.width / 2;\n    const h = particle.height / 2;\n    const r = particle.color.r & 0xff;\n    const g = particle.color.g & 0xff;\n    const b = particle.color.b & 0xff;\n    const a = particle.color.alpha * 255 & 0xff;\n    const data = a << 24 | b << 16 | g << 8 | r;\n\n    for (let i = 0; i < 4; i++) {\n      this.colorBuffer.push(data);\n    }\n\n    this.vertexBuffer.appendArray([particle.x - w, particle.y - h, particle.x - w, particle.y + h, particle.x + w, particle.y - h, particle.x + w, particle.y + h]);\n    const baseIndex = this.particles * 4;\n    this.indexBuffer.appendArray([baseIndex, baseIndex + 1, baseIndex + 3, baseIndex, baseIndex + 2, baseIndex + 3]);\n    this.particles++;\n  }\n\n  draw() {\n    //this.ctx.blendFunc(this.ctx.ONE, this.ctx.ONE_MINUS_SRC_COLOR)\n    this.indexBuffer.updateData();\n    this.vertexBuffer.updateData();\n    this.colorBuffer.updateData();\n    this.ctx.drawElements(this.ctx.TRIANGLES, this.indexBuffer.pointer, this.ctx.UNSIGNED_SHORT, 0);\n    this.ctx.disableVertexAttribArray(this.vertexPositionAttribute);\n    this.ctx.disableVertexAttribArray(this.colorAttribute);\n    this.particles = 0; //this.ctx.blendFuncSeparate(this.ctx.SRC_ALPHA, this.ctx.ONE_MINUS_SRC_ALPHA, this.ctx.ONE, this.ctx.ONE_MINUS_SRC_ALPHA);\n  }\n\n}\n\nmodule.exports = ParticleProgram;","deps":{"../program":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/program.js","../shader":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/shader.js","../glbuffer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/glbuffer.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/scenes/loading/loadingscene.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/scenes/loading/loadingscene.js","source":"/* @load-resource: \"./loading-scene.scss\" */\nconst Scene = require(\"../scene\");\n\nconst ParticleProgram = require(\"../../graphics/programs/particleprogram\");\n\nconst Camera = require(\"../../camera\");\n\nconst Box2D = require(\"../../../library/box2d\");\n\nconst Particle = require(\"../../particles/particle\");\n\nconst Color = require(\"../../../utils/color\");\n\nclass LoadingScene extends Scene {\n  constructor(config) {\n    super(config);\n    this.time = 0;\n    this.progress = config.progress;\n    this.phrases = [\"Продуваем турбины...\", \"Пылесосим поле боя...\", \"Склеиваем бигбоя...\", \"Накачиваем гусеницы...\", \"Успокаиваем танкистов...\", \"Зачитываем технику безопасности...\", \"Полируем сиденья...\", \"Вызываем пожарных...\", \"Заправляем баки...\", \"Отмываем следы...\", \"Пьём чай...\", \"Спорим о политике...\", \"Преисполняемся в своем сознании...\", \"Тянем время...\", \"Фиксим баги...\"];\n    this.camera = new Camera({\n      viewport: new Box2D.b2Vec2(this.screen.width, this.screen.height),\n      defaultPosition: new Box2D.b2Vec2(),\n      limit: false\n    });\n    this.camera.tick(0);\n    this.program = new ParticleProgram(\"loading-program\", this.screen.ctx);\n    this.decoration = new Particle({});\n    this.scaleBackground = new Color(200, 200, 200);\n    this.scaleForeground = new Color(150, 240, 150);\n    this.title = $(\"<h1>\").addClass(\"loading-text\");\n    this.title.hide();\n    this.overlayContainer.append(this.title);\n    this.phrase = null;\n    this.updatePhrase();\n  }\n\n  layout() {\n    super.layout();\n    this.camera.viewport.x = this.screen.width;\n    this.camera.viewport.y = this.screen.height;\n    this.camera.tick(0);\n  }\n\n  disappear() {\n    super.disappear();\n    clearInterval(this.interval);\n  }\n\n  appear() {\n    super.appear();\n    this.interval = setInterval(() => this.updatePhrase(), 2500);\n  }\n\n  updatePhrase() {\n    if (this.phrase == null) {\n      this.newPhrase();\n    } else {\n      this.title.fadeOut(600, () => this.newPhrase());\n    }\n  }\n\n  newPhrase() {\n    let newPhrase;\n\n    do {\n      newPhrase = Math.floor(Math.random() * this.phrases.length);\n    } while (newPhrase === this.phrase);\n\n    this.title.text(this.phrases[newPhrase]);\n    this.title.fadeIn(600);\n    this.phrase = newPhrase;\n  }\n\n  draw(ctx, dt) {\n    this.program.use();\n    this.program.prepare();\n    this.drawScaleBackground();\n    this.drawScaleForeground();\n    this.program.matrixUniform.setMatrix(this.camera.matrix.m);\n    this.program.draw();\n    this.time += dt;\n  }\n\n  drawScaleBackground() {\n    this.decoration.x = 0;\n    this.decoration.y = 0;\n    this.decoration.width = 400;\n    this.decoration.height = 20;\n    this.decoration.color = this.scaleBackground;\n    this.program.drawParticle(this.decoration);\n  }\n\n  drawScaleForeground() {\n    const fraction = this.progress.completeFraction();\n    this.decoration.x = -200 * (1 - fraction);\n    this.decoration.y = 0;\n    this.decoration.width = 400 * fraction;\n    this.decoration.height = 20;\n    this.decoration.color = this.scaleForeground;\n    this.program.drawParticle(this.decoration);\n  }\n\n}\n\nmodule.exports = LoadingScene;","deps":{"../../../utils/color":"/Users/Temich/PycharmProjects/tanks/src/utils/color.js","../scene":"/Users/Temich/PycharmProjects/tanks/src/client/scenes/scene.js","../../camera":"/Users/Temich/PycharmProjects/tanks/src/client/camera.js","../../../library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","../../graphics/programs/particleprogram":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/particleprogram.js","../../particles/particle":"/Users/Temich/PycharmProjects/tanks/src/client/particles/particle.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/eventemitter.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/eventemitter.js","source":"// noinspection JSUnresolvedVariable\nif (typeof window == \"undefined\") {\n  const Events = require(\"eve\" + \"nts\"); // noinspection JSDuplicatedDeclaration\n\n\n  class EventEmitter extends Events {\n    constructor() {\n      super();\n    }\n\n    on(event, handler) {\n      this.addListener(event, handler);\n    }\n\n  }\n\n  module.exports = EventEmitter;\n} else {\n  // noinspection JSDuplicatedDeclaration\n  class EventEmitter {\n    constructor() {\n      this.events = new Map();\n    }\n\n    emit(event) {\n      if (this.events.has(event)) {\n        let args = Array.prototype.slice.call(arguments, 1);\n\n        for (let listener of this.events.get(event)) {\n          listener.apply(null, args);\n        }\n      }\n    }\n\n    on(event, handler) {\n      if (this.events.has(event)) {\n        this.events.get(event).push(handler);\n      } else {\n        this.events.set(event, [handler]);\n      }\n    }\n\n  }\n\n  module.exports = EventEmitter;\n}","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/textureprogram.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/textureprogram.js","source":"/* @load-resource: '../shaders/fragment/texture-fragment.glsl' */\n\n/* @load-resource: '../shaders/vertex/texture-vertex.glsl' */\nconst Program = require(\"../program\");\n\nconst Shader = require(\"../shader\");\n\nconst GLBuffer = require(\"../glbuffer\");\n\nclass TextureProgram extends Program {\n  constructor(name, ctx, options) {\n    options = Object.assign({\n      largeIndices: false\n    }, options);\n    let vertexShader = new Shader(\"texture-vertex\", Shader.VERTEX).compile(ctx);\n    let fragmentShader = new Shader(\"texture-fragment\", Shader.FRAGMENT).compile(ctx);\n    super(name, vertexShader, fragmentShader);\n    this.link(ctx);\n\n    if (options.largeIndices) {\n      let uintsForIndices = ctx.getExtension(\"OES_element_index_uint\");\n\n      if (!uintsForIndices) {\n        throw new Error(\"No WebGL Extension: OES_element_index_uint. Please, update the browser.\");\n      }\n    }\n\n    const arrayType = options.largeIndices ? Uint32Array : Uint16Array;\n    this.indexBufferType = options.largeIndices ? ctx.UNSIGNED_INT : ctx.UNSIGNED_SHORT;\n    this.ctx = ctx;\n    this.vertexBuffer = new GLBuffer({\n      gl: ctx,\n      drawMode: this.ctx.STATIC_DRAW,\n      capacity: options.largeIndices ? 16384 : 128 // Rare reallocation\n\n    }).createBuffer();\n    this.indexBuffer = new GLBuffer({\n      gl: ctx,\n      clazz: arrayType,\n      bufferType: this.ctx.ELEMENT_ARRAY_BUFFER,\n      drawMode: this.ctx.STATIC_DRAW,\n      capacity: options.largeIndices ? 16384 : 128 // As well\n\n    }).createBuffer();\n    this.vertexPositionAttribute = this.getAttribute(\"a_vertex_position\");\n    this.texturePositionAttribute = this.getAttribute(\"a_texture_position\");\n    this.textureUniform = this.getUniform(\"u_texture\");\n    this.matrixUniform = this.getUniform(\"u_matrix\");\n    this.vertexLength = 4;\n    this.textures = 0;\n    /**\n     * @type {Matrix3}\n     */\n\n    this.transform = null;\n  }\n\n  setTransform(transform) {\n    this.transform = transform;\n  }\n\n  drawTexture(x1, y1, x2, y2, x3, y3, x4, y4, sx, sy, sw, sh) {\n    if (this.transform) {\n      /*\n          Not using arrays/objects here because it will lead to\n          allocation/garbage collector overhead. These functions\n          will probably get inlined\n       */\n      let a, b;\n      x1 = this.transform.transformX(a = x1, b = y1);\n      y1 = this.transform.transformY(a, b);\n      x2 = this.transform.transformX(a = x2, b = y2);\n      y2 = this.transform.transformY(a, b);\n      x3 = this.transform.transformX(a = x3, b = y3);\n      y3 = this.transform.transformY(a, b);\n      x4 = this.transform.transformX(a = x4, b = y4);\n      y4 = this.transform.transformY(a, b);\n    }\n\n    this.vertexBuffer.appendArray([x1, y1, sx, sy, x2, y2, sx + sw, sy, x3, y3, sx, sy + sh, x4, y4, sx + sw, sy + sh]);\n    const baseIndex = this.textures * 4;\n    this.indexBuffer.appendArray([baseIndex, baseIndex + 1, baseIndex + 3, baseIndex, baseIndex + 2, baseIndex + 3]);\n    this.textures++;\n  }\n\n  tightenTexture(sprite, x1, y1, x2, y2, x3, y3, x4, y4) {\n    let r = sprite.rect;\n    this.drawTexture(x1, y1, x2, y2, x3, y3, x4, y4, r.x, r.y, r.w, r.h);\n  }\n\n  drawSprite(sprite, x, y, width, height, sx, sy, sw, sh) {\n    const r = sprite.rect;\n    if (sx === undefined) sx = r.x;else sx += r.x;\n    if (sy === undefined) sy = r.y;else sy += r.y;\n    if (sw === undefined) sw = r.w;\n    if (sh === undefined) sh = r.h;\n    this.drawTexture(x, y, x + width, y, x, y + height, x + width, y + height, sx, sy, sw, sh);\n  }\n\n  prepare(update) {\n    this.vertexBuffer.bind();\n\n    if (update === true || update === undefined) {\n      this.indexBuffer.reset();\n      this.vertexBuffer.reset();\n    }\n\n    const bytes = this.vertexBuffer.clazz.BYTES_PER_ELEMENT;\n    const stride = this.vertexLength * bytes;\n    this.ctx.enableVertexAttribArray(this.vertexPositionAttribute);\n    this.ctx.enableVertexAttribArray(this.texturePositionAttribute);\n    this.ctx.vertexAttribPointer(this.vertexPositionAttribute, 2, this.ctx.FLOAT, false, stride, 0);\n    this.ctx.vertexAttribPointer(this.texturePositionAttribute, 2, this.ctx.FLOAT, false, stride, 8);\n  }\n\n  draw(update) {\n    if (update === true || update === undefined) {\n      this.indexBuffer.updateData();\n      this.vertexBuffer.updateData();\n    } else {\n      this.indexBuffer.bind();\n    }\n\n    this.ctx.drawElements(this.ctx.TRIANGLES, this.indexBuffer.pointer, this.indexBufferType, 0);\n    this.ctx.disableVertexAttribArray(this.vertexPositionAttribute);\n    this.ctx.disableVertexAttribArray(this.texturePositionAttribute);\n    this.textures = 0;\n  }\n\n}\n\nmodule.exports = TextureProgram;","deps":{"../shader":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/shader.js","../program":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/program.js","../glbuffer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/glbuffer.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/touchcontroller.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/touchcontroller.js","source":"const DocumentEventHandler = require(\"./documenteventhandler\");\n\nclass TouchController extends DocumentEventHandler {\n  constructor(handler, canvas) {\n    super();\n    this.touchData = new Map();\n    this.handler = handler;\n    this.canvas = canvas;\n    this.target = this.canvas;\n  }\n\n  startListening() {\n    this.bind(\"touchstart\", this.ontouchstart);\n    this.bind(\"touchmove\", this.ontouchmove);\n    this.bind(\"touchend\", this.ontouchend);\n  }\n\n  ontouchstart(event) {\n    const rect = this.canvas.getBoundingClientRect();\n\n    for (let touch of event.changedTouches) {\n      const left = touch.pageX - document.body.scrollLeft - rect.x;\n      const top = touch.pageY - document.body.scrollTop - rect.y;\n      const bottom = rect.height - top;\n      const right = rect.width - left;\n      const struct = {\n        left: left,\n        top: top,\n        bottom: bottom,\n        right: right,\n        id: touch.identifier\n      };\n\n      if (this.handler.captureTouch(struct)) {\n        for (let [id, anotherTouch] of this.touchData.entries()) {\n          if (struct.id !== id) {\n            if (struct.vidget.id === anotherTouch.vidget.id) {\n              this.touchData.delete(anotherTouch.id);\n            }\n          }\n        }\n\n        this.touchData.set(touch.identifier, struct);\n      }\n    }\n\n    event.preventDefault();\n  }\n\n  ontouchmove(event) {\n    const rect = this.canvas.getBoundingClientRect();\n\n    for (let e of event.changedTouches) {\n      const touch = this.touchData.get(e.identifier);\n      if (!touch) return;\n      const left = e.pageX - document.body.scrollLeft - rect.x;\n      const top = e.pageY - document.body.scrollTop - rect.y;\n      const bottom = rect.height - top;\n      const right = rect.width - left;\n      touch.left = left;\n      touch.top = top;\n      touch.right = right;\n      touch.bottom = bottom;\n      touch.captured.touchMoved(touch);\n    }\n\n    event.preventDefault();\n  }\n\n  ontouchend(event) {\n    for (let e of event.changedTouches) {\n      const touch = this.touchData.get(e.identifier);\n      if (!touch) return;\n      touch.captured.touchEnded(touch);\n      this.touchData.delete(e.identifier);\n    }\n\n    event.preventDefault();\n  }\n\n}\n\nmodule.exports = TouchController;","deps":{"./documenteventhandler":"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/documenteventhandler.js"}},"/Users/Temich/PycharmProjects/tanks/src/tanks/controls/axle.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/tanks/controls/axle.js","source":"class Axle {\n  constructor() {\n    this.sources = new Set();\n    this.ownValue = 0;\n    this.value = 0;\n    this.destinations = new Set();\n    this.update = false;\n  }\n\n  addSource(source) {\n    this.sources.add(source);\n    source.destinations.add(this);\n    this.setNeedsUpdate();\n    return this;\n  }\n\n  removeSource(source) {\n    this.sources.delete(source);\n    source.destinations.delete(this);\n    this.setNeedsUpdate();\n    return this;\n  }\n\n  disconnectAll() {\n    for (let destination of this.destinations.values()) {\n      destination.removeSource(this);\n    }\n  }\n\n  connect(destination) {\n    destination.addSource(this);\n  }\n\n  getValue() {\n    if (this.update) {\n      this.update = false;\n      let result = this.ownValue;\n\n      for (let source of this.sources.values()) result += source.getValue();\n\n      this.value = result;\n      return result;\n    } else {\n      return this.value;\n    }\n  }\n\n  setValue(value) {\n    this.ownValue = value;\n    this.setNeedsUpdate();\n  }\n\n  setNeedsUpdate() {\n    this.update = true;\n\n    for (let destination of this.destinations.values()) destination.setNeedsUpdate();\n  }\n\n  needsUpdate() {\n    return this.update;\n  }\n\n}\n\nmodule.exports = Axle;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/client/controls/playercontrols.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/controls/playercontrols.js","source":"const Axle = require(\"../../tanks/controls/axle\");\n\nconst EventEmitter = require(\"../../utils/eventemitter\");\n\nclass PlayerControls extends EventEmitter {\n  constructor() {\n    super();\n    this.axles = new Map();\n    this.createAxle(\"tank-throttle\");\n    this.createAxle(\"tank-steer\");\n    this.createAxle(\"tank-primary-weapon\");\n    this.createAxle(\"tank-miner\");\n    this.createAxle(\"tank-respawn\");\n    this.respawning = true;\n  }\n\n  createAxle(name) {\n    this.axles.set(name, new Axle());\n  }\n\n  connectTankControls(controls) {\n    controls.axles.get(\"y\").addSource(this.axles.get(\"tank-throttle\"));\n    controls.axles.get(\"x\").addSource(this.axles.get(\"tank-steer\"));\n    controls.axles.get(\"primary-weapon\").addSource(this.axles.get(\"tank-primary-weapon\"));\n    controls.axles.get(\"miner\").addSource(this.axles.get(\"tank-miner\"));\n  }\n\n  disconnectTankControls() {\n    this.axles.get(\"tank-throttle\").disconnectAll();\n    this.axles.get(\"tank-steer\").disconnectAll();\n    this.axles.get(\"tank-primary-weapon\").disconnectAll();\n    this.axles.get(\"tank-miner\").disconnectAll();\n  }\n\n  setupGamepad(gamepad) {\n    this.axles.get(\"tank-throttle\").addSource(gamepad.getAxle(1).invert());\n    this.axles.get(\"tank-steer\").addSource(gamepad.getAxle(2));\n    this.axles.get(\"tank-miner\").addSource(gamepad.getButton(4));\n    this.axles.get(\"tank-primary-weapon\").addSource(gamepad.getButton(5));\n    this.axles.get(\"tank-respawn\").addSource(gamepad.getButton(2));\n  }\n\n  setupKeyboard(keyboard) {\n    this.axles.get(\"tank-throttle\").addSource(keyboard.getKeyAxle(\"KeyW\").smooth()).addSource(keyboard.getKeyAxle(\"ArrowUp\").smooth()).addSource(keyboard.getKeyAxle(\"KeyS\").smooth().reverse()).addSource(keyboard.getKeyAxle(\"ArrowDown\").smooth().reverse());\n    this.axles.get(\"tank-steer\").addSource(keyboard.getKeyAxle(\"KeyD\").smooth()).addSource(keyboard.getKeyAxle(\"ArrowRight\").smooth()).addSource(keyboard.getKeyAxle(\"KeyA\").smooth().reverse()).addSource(keyboard.getKeyAxle(\"ArrowLeft\").smooth().reverse());\n    this.axles.get(\"tank-miner\").addSource(keyboard.getKeyAxle(\"KeyQ\"));\n    this.axles.get(\"tank-primary-weapon\").addSource(keyboard.getKeyAxle(\"Space\"));\n    this.axles.get(\"tank-respawn\").addSource(keyboard.getKeyAxle(\"KeyR\"));\n  }\n\n  refresh() {\n    if (this.axles.get(\"tank-respawn\").getValue() > 0.5) {\n      if (!this.respawning) {\n        this.respawning = true;\n        this.emit(\"respawn\");\n      }\n    } else {\n      this.respawning = false;\n    }\n  }\n\n}\n\nmodule.exports = PlayerControls;","deps":{"../../utils/eventemitter":"/Users/Temich/PycharmProjects/tanks/src/utils/eventemitter.js","../../tanks/controls/axle":"/Users/Temich/PycharmProjects/tanks/src/tanks/controls/axle.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/mapdrawer.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/mapdrawer.js","source":"const Sprite = require(\"../../sprite\");\n\nconst TextureProgram = require(\"../../graphics/programs/textureprogram\");\n\nclass MapDrawer {\n  static registerBlockLoader(id, drawer) {\n    this.RegisteredDrawers.set(id, drawer);\n  }\n\n  constructor(camera, ctx) {\n    this.camera = camera;\n    this.ctx = ctx;\n    this.program = new TextureProgram(\"map-drawer-program\", ctx, {\n      largeIndices: true\n    });\n    this.reset();\n  }\n\n  reset() {\n    this.oldBounds = {\n      x0: 0,\n      x1: 0,\n      y0: 0,\n      y1: 0\n    };\n  }\n\n  draw(map) {\n    const scale = this.camera.scale;\n    let mipmaplevel = Math.ceil(1 / scale) - 1;\n    let oldmipmaplevel = Sprite.mipmaplevel;\n\n    if (mipmaplevel >= Sprite.mipmapimages.length) {\n      mipmaplevel = Sprite.mipmapimages.length - 1;\n    }\n\n    if (mipmaplevel !== oldmipmaplevel) {\n      Sprite.setMipMapLevel(mipmaplevel);\n    }\n\n    const visibleWidth = this.camera.viewport.x / scale;\n    const visibleHeight = this.camera.viewport.y / scale;\n    const cx = this.camera.position.x + this.camera.shaking.x;\n    const cy = this.camera.position.y + this.camera.shaking.y;\n    let x0 = cx - visibleWidth / 2,\n        y0 = cy - visibleHeight / 2;\n    let x1 = x0 + visibleWidth,\n        y1 = y0 + visibleHeight;\n    const maxWidth = map.width * 20;\n    const maxHeight = map.height * 20;\n    x0 = Math.floor(Math.max(0, x0) / 20);\n    y0 = Math.floor(Math.max(0, y0) / 20);\n    x1 = Math.ceil(Math.min(maxWidth, x1) / 20);\n    y1 = Math.ceil(Math.min(maxHeight, y1) / 20);\n\n    if (x0 !== this.oldBounds.x0 || x1 !== this.oldBounds.x1 || y0 !== this.oldBounds.y0 || y1 !== this.oldBounds.y1 || mipmaplevel !== oldmipmaplevel) {\n      this.oldBounds.x0 = x0;\n      this.oldBounds.x1 = x1;\n      this.oldBounds.y0 = y0;\n      this.oldBounds.y1 = y1;\n      this.program.prepare();\n      this.program.use(this.ctx);\n      Sprite.setGLMipMapLevel(this.ctx, this.program.textureUniform, mipmaplevel);\n      this.program.matrixUniform.setMatrix(this.camera.matrix.m);\n\n      for (let x = x0; x <= x1; x++) {\n        for (let y = y0; y <= y1; y++) {\n          const block = map.getBlock(x, y);\n          if (block) this.drawBlock(block, x, y, map);\n        }\n      }\n\n      this.program.draw();\n    } else {\n      this.program.prepare(false);\n      this.program.use(this.ctx);\n      this.program.matrixUniform.setMatrix(this.camera.matrix.m);\n      Sprite.setGLMipMapLevel(this.ctx, this.program.textureUniform, mipmaplevel);\n      this.program.draw(false);\n    }\n\n    if (mipmaplevel !== oldmipmaplevel) {\n      Sprite.setMipMapLevel(oldmipmaplevel);\n    }\n  }\n\n  drawBlock(block, x, y, map) {\n    let id = block.constructor.typeId;\n    if (id === 0) return;\n    let drawer = MapDrawer.RegisteredDrawers.get(id);\n\n    if (drawer) {\n      drawer.draw(this.program, x, y, block, map);\n    }\n  }\n\n}\n\nMapDrawer.RegisteredDrawers = new Map();\nmodule.exports = MapDrawer;","deps":{"../../sprite":"/Users/Temich/PycharmProjects/tanks/src/client/sprite.js","../../graphics/programs/textureprogram":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/textureprogram.js"}},"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/16mm.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/16mm.js","source":"const BulletModel = require(\"../bulletmodel\");\n\nclass BulletModel16mm extends BulletModel {\n  static typeName() {\n    return 4;\n  }\n\n  constructor() {\n    super();\n  }\n\n}\n\nBulletModel.register(BulletModel16mm);\nmodule.exports = BulletModel16mm;","deps":{"../bulletmodel":"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/bulletmodel.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/clientbullet.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/clientbullet.js","source":"const ClientEntity = require(\"../cliententity\");\n\nclass ClientBullet extends ClientEntity {\n  constructor(model) {\n    super(model);\n  }\n\n}\n\nmodule.exports = ClientBullet;","deps":{"../cliententity":"/Users/Temich/PycharmProjects/tanks/src/client/entity/cliententity.js"}},"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/cannonball.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/cannonball.js","source":"const BulletModel = require(\"../bulletmodel\");\n\nclass BulletModelCannonball extends BulletModel {\n  static typeName() {\n    return 2;\n  }\n\n  constructor() {\n    super();\n  }\n\n}\n\nBulletModel.register(BulletModelCannonball); // module.exports = new BulletType({\n// \tname: \"cannonball\",\n// \texplodePower: 2,\n// \tmass: 30,\n// \twallDamage: 7600,\n// \tplayerDamage: 4,\n// \tvelocity: 600,\n// \texplodes: false,\n// \tid: 2\n// })\n\nmodule.exports = BulletModelCannonball;","deps":{"../bulletmodel":"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/bulletmodel.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/cannonball.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/cannonball.js","source":"const ClientBullet = require(\"../clientbullet\");\n\nconst BulletModelCannonball = require(\"../../../../entity/bullet/models/cannonball\");\n\nconst BasicEntityDrawer = require(\"../../../graphics/drawers/basicentitydrawer\");\n\nclass Drawer extends BasicEntityDrawer {\n  draw(program) {\n    this.drawSprite(Drawer.getSprite(0), 18, 18, program);\n  }\n\n}\n\nDrawer.spriteNames = [\"bullets/cannonball/cannonball\"];\n\nclass ClientBulletCannonball extends ClientBullet {\n  constructor(model) {\n    super(model);\n    this.drawer = new Drawer(this);\n  }\n\n}\n\nClientBullet.associate(ClientBulletCannonball, BulletModelCannonball);\nmodule.exports = ClientBulletCannonball;","deps":{"../clientbullet":"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/clientbullet.js","../../../graphics/drawers/basicentitydrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/basicentitydrawer.js","../../../../entity/bullet/models/cannonball":"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/cannonball.js"}},"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/mine.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/mine.js","source":"const BulletModel = require(\"../bulletmodel\");\n\nclass BulletModelMine extends BulletModel {\n  static typeName() {\n    return 7;\n  }\n\n  constructor(config) {\n    super(config);\n  }\n\n} // module.exports = new MineType({\n//     name: \"mine\",\n//     explodePower: 15,\n//     mass: 0.5,\n//     velocity: 0,\n//     explodes: true,\n//     id: 7\n// })\n\n\nBulletModel.register(BulletModelMine);\nmodule.exports = BulletModelMine;","deps":{"../bulletmodel":"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/bulletmodel.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/mine.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/mine.js","source":"const ClientBullet = require(\"../clientbullet\");\n\nconst BulletModelMine = require(\"../../../../entity/bullet/models/mine\");\n\nconst BasicEntityDrawer = require(\"../../../graphics/drawers/basicentitydrawer\");\n\nclass Drawer extends BasicEntityDrawer {\n  constructor(entity) {\n    super(entity);\n    this.shift = this.entity.model.id * 350;\n  }\n\n  draw(program) {\n    let index = Math.floor((Date.now() + this.shift) / 1000) % 3;\n    if (index === 2) index = 1;\n    this.drawSprite(Drawer.getSprite(index), 60, 60, program);\n  }\n\n}\n\nDrawer.spriteNames = [\"bullets/mine/on\", \"bullets/mine/off\"];\n\nclass ClientBulletMine extends ClientBullet {\n  constructor(model) {\n    super(model);\n    this.drawer = new Drawer(this);\n  }\n\n}\n\nClientBullet.associate(ClientBulletMine, BulletModelMine);\nmodule.exports = ClientBulletMine;","deps":{"../clientbullet":"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/clientbullet.js","../../../graphics/drawers/basicentitydrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/basicentitydrawer.js","../../../../entity/bullet/models/mine":"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/mine.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/effects/world/clientworldeffect.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/effects/world/clientworldeffect.js","source":"const ClientEffect = require(\"../clienteffect\");\n\nclass ClientWorldEffect extends ClientEffect {\n  /**\n   * @param model {WorldEffectModel}\n   * @param world {ClientGameWorld}\n   */\n  constructor(model, world) {\n    super(model);\n    this.model = model;\n    this.world = world;\n  } // noinspection JSCheckFunctionSignatures\n\n  /**\n   * @param model {WorldEffectModel}\n   * @param world {ClientGameWorld}\n   * @returns {ClientWorldEffect | null}\n   */\n\n\n  static fromModel(model, world) {\n    /** @type Class<ClientWorldEffect> */\n    let clazz = this.Types.get(model.constructor);\n    if (!clazz) return null;\n    return new clazz(model, world);\n  }\n\n}\n\nmodule.exports = ClientWorldEffect;","deps":{"../clienteffect":"/Users/Temich/PycharmProjects/tanks/src/client/effects/clienteffect.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/entitydrawer.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/entitydrawer.js","source":"class EntityDrawer {\n  constructor(entity) {\n    this.entity = entity;\n  }\n  /**\n   * Draws the specified entity.\n   * @param program {TextureProgram}\n   */\n\n\n  draw(program) {}\n\n}\n\nmodule.exports = EntityDrawer;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/basicentitydrawer.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/basicentitydrawer.js","source":"const EntityDrawer = require(\"./entitydrawer\");\n\nconst Sprite = require(\"../../sprite\");\n\nconst Matrix3 = require(\"../matrix3\");\n\nclass BasicEntityDrawer extends EntityDrawer {\n  static getSprite(i) {\n    if (!this.sprites) {\n      Object.defineProperty(this, \"sprites\", {\n        enumerable: false,\n        value: []\n      });\n    }\n\n    if (!this.sprites[i]) {\n      this.sprites[i] = Sprite.named(this.spriteNames[i]);\n    }\n\n    return this.sprites[i];\n  }\n\n  constructor(entity) {\n    super(entity);\n    this.matrix = new Matrix3();\n  }\n\n  drawSprite(sprite, width, height, program) {\n    const x = this.entity.model.x;\n    const y = this.entity.model.y;\n    const w = width / 6;\n    const h = height / 6;\n    this.matrix.reset();\n    this.matrix.translate(x, y);\n    this.matrix.rotate(-this.entity.model.rotation);\n    program.setTransform(this.matrix);\n    program.drawSprite(sprite, -w / 2, -h / 2, w, h);\n    program.setTransform(null);\n  }\n\n}\n\nBasicEntityDrawer.spriteNames = [];\nmodule.exports = BasicEntityDrawer;","deps":{"../../sprite":"/Users/Temich/PycharmProjects/tanks/src/client/sprite.js","../matrix3":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/matrix3.js","./entitydrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/entitydrawer.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/16mm.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/16mm.js","source":"const ClientBullet = require(\"../clientbullet\");\n\nconst BulletModel16mm = require(\"../../../../entity/bullet/models/16mm\");\n\nconst BasicEntityDrawer = require(\"../../../graphics/drawers/basicentitydrawer\");\n\nclass Drawer extends BasicEntityDrawer {\n  draw(program) {\n    this.drawSprite(Drawer.getSprite(0), 4, 12, program);\n  }\n\n}\n\nDrawer.spriteNames = [\"bullets/16mm/16mm\"];\n\nclass ClientBullet16mm extends ClientBullet {\n  constructor(model) {\n    super(model);\n    this.drawer = new Drawer(this);\n  }\n\n}\n\nClientBullet.associate(ClientBullet16mm, BulletModel16mm);\nmodule.exports = ClientBullet16mm;","deps":{"../clientbullet":"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/clientbullet.js","../../../graphics/drawers/basicentitydrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/basicentitydrawer.js","../../../../entity/bullet/models/16mm":"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/16mm.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/physicsutils.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/physicsutils.js","source":"const Box2D = require(\"../library/box2d\");\n\nclass PhysicsUtils {\n  static createFixture(options) {\n    if (!options) options = {};\n    const fixture = new Box2D.b2FixtureDef();\n    fixture.friction = options.friction || 0.3;\n    fixture.density = options.density || 1;\n    fixture.restitution = options.restitution || 0;\n    return fixture;\n  }\n\n  static squareFixture(width, height, offset, options) {\n    if (!offset) {\n      offset = new Box2D.b2Vec2(0, 0);\n    }\n\n    const shape = new Box2D.b2PolygonShape();\n    shape.SetAsOrientedBox(width, height, offset, 0);\n    const fixture = this.createFixture(options);\n    fixture.shape = shape;\n    return fixture;\n  }\n\n  static horizontalSquareFixtures(width, height, offset, options) {\n    return [this.squareFixture(width, height, new Box2D.b2Vec2(-offset.x, offset.y), options), this.squareFixture(width, height, new Box2D.b2Vec2(offset.x, offset.y), options)];\n  }\n\n  static dynamicBody(world, options) {\n    options = options || {};\n    const bodyDef = new Box2D.b2BodyDef();\n    bodyDef.type = Box2D.b2Body.b2_dynamicBody;\n    let body = world.CreateBody(bodyDef);\n    body.SetLinearDamping(options.linearDamping || 1.0);\n    body.SetAngularDamping(options.angularDamping || 8.0);\n    return body;\n  }\n\n  static vertexFixture(vertexArray, options) {\n    const shape = new Box2D.b2PolygonShape();\n    shape.SetAsArray(vertexArray);\n    const fixture = this.createFixture(options);\n    fixture.shape = shape;\n    return fixture;\n  }\n\n  static setupPhysics() {\n    Box2D.b2Settings.b2_maxTranslation = 20;\n    Box2D.b2Settings.b2_maxTranslationSquared = 4000;\n  }\n\n}\n\nmodule.exports = PhysicsUtils;","deps":{"../library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js"}},"/Users/Temich/PycharmProjects/tanks/src/tanks/abstracttank.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/tanks/abstracttank.js","source":"const TankModel = require(\"./tankmodel\");\n/**\n * Tank class, abstracted from code\n * execution side. Used both on server\n * and client side. Contains tank model\n * and side-specific data. (damage reason\n * array on server side, drawer on\n * client side)\n */\n\n\nclass AbstractTank {\n  /**\n   * Player that owns this tank\n   * @type Player\n   */\n\n  /**\n   * Generic model of this tank\n   * @type {TankModel}\n   */\n\n  /**\n   * @type {GameWorld}\n   */\n\n  /**\n   * @type {Map<number, AbstractEffect>}\n   */\n\n  /**\n   * @param {Object | null} options\n   * @param {GameWorld | null} options.world\n   */\n  constructor(options) {\n    this.player = null;\n    this.model = null;\n    this.world = null;\n    this.effects = new Map();\n\n    if (options) {\n      if (options.world) {\n        this.world = options.world;\n      }\n    }\n  }\n  /**\n   * @returns {Class<TankModel>}\n   */\n\n\n  static getModel() {}\n\n  destroy() {\n    this.model.destroy();\n  }\n\n  encodeDynamicData() {}\n\n  decodeDynamicData() {}\n\n  create() {}\n\n  tick(dt) {}\n\n}\n\nAbstractTank.Types = new Map();\nmodule.exports = AbstractTank;","deps":{"./tankmodel":"/Users/Temich/PycharmProjects/tanks/src/tanks/tankmodel.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/tanks/clienttank.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/tanks/clienttank.js","source":"const AbstractTank = require(\"../../tanks/abstracttank\");\n\nconst Box2D = require(\"../../library/box2d\");\n\nclass ClientTank extends AbstractTank {\n  /**\n   * @type {TankDrawer}\n   */\n\n  /**\n   * @type {Map<number, ClientTankEffect>}\n   */\n\n  /**\n   * @type {ClientGameWorld}\n   */\n\n  /**\n   *\n   * @param {Object | null} options\n   * @param {ClientGameWorld | null} options.world\n   * @param {TankModel | null} options.model\n   */\n  constructor(options) {\n    super(options);\n    this.drawer = null;\n    this.effects = new Map();\n    this.world = void 0;\n    this.drawer = null;\n    this.engine = null;\n    this.serverPosition = null;\n\n    if (options && options.model) {\n      let expected = this.constructor.getModel();\n\n      if (expected && options.model.constructor !== expected) {\n        throw new TypeError(\"Invalid model type\");\n      }\n\n      this.model = options.model;\n    } else {\n      this.model = new (this.constructor.getModel())();\n    }\n  }\n\n  setupDrawer(ctx) {\n    this.drawer = new (this.constructor.getDrawer())(this, ctx);\n  }\n\n  destroy() {\n    this.model.destroy();\n  }\n\n  tick(dt) {\n    if (this.serverPosition) {\n      let pos = this.model.body.GetPosition();\n      let target = this.serverPosition;\n      let diffX = target.x - pos.x;\n      let diffY = target.y - pos.y;\n\n      if (diffX * diffX + diffY * diffY > 400) {\n        pos.x = target.x;\n        pos.y = target.y;\n      } else {\n        pos.x += (target.x - pos.x) / 20;\n        pos.y += (target.y - pos.y) / 20;\n      }\n\n      this.model.body.SetPosition(pos);\n    }\n\n    for (let effect of this.effects.values()) {\n      effect.tick(dt);\n    }\n\n    this.model.rotation = this.model.body.GetAngle();\n    this.model.behaviour.tick(dt);\n    this.model.behaviour.countDetails(dt);\n  }\n\n  decodeDynamicData(decoder) {\n    let teleport = decoder.readUint8();\n    let x = decoder.readFloat32();\n    let y = decoder.readFloat32();\n    let rotation = decoder.readFloat32();\n    let vx = decoder.readFloat32();\n    let vy = decoder.readFloat32();\n    let angularVelocity = decoder.readFloat32();\n    let velocity = this.model.body.GetLinearVelocity();\n    velocity.Set(vx, vy);\n    this.model.body.SetLinearVelocity(velocity);\n    this.model.body.SetAngularVelocity(angularVelocity);\n    let position = this.model.body.GetPosition(); // When teleporting, player should instantly move\n    // from one point to another. Otherwise, this\n    // meant to be continious movement. Considering\n    // ping jitter and other imperfections of WWW,\n    // these positions should be interpolated to give\n    // a smooth move impression to player.\n\n    if (teleport) {\n      position.Set(x, y);\n    } else {\n      if (this.serverPosition) this.serverPosition.Set(x, y);else this.serverPosition = new Box2D.b2Vec2(x, y);\n    }\n\n    this.model.body.SetPositionAndAngle(position, rotation);\n    this.health = decoder.readFloat32();\n  }\n\n  static createDrawer() {}\n\n  static getDrawer() {}\n\n  static getName() {}\n\n  static getDescription() {}\n\n  static getStats() {}\n\n  static fromModel(model) {\n    let clazz = ClientTank.Types.get(model.constructor.getId());\n    return new clazz({\n      model: model\n    });\n  }\n\n  static register(clazz) {\n    this.Types.set(clazz.getModel().getId(), clazz);\n  }\n\n}\n\nmodule.exports = ClientTank;","deps":{"../../library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","../../tanks/abstracttank":"/Users/Temich/PycharmProjects/tanks/src/tanks/abstracttank.js"}},"/Users/Temich/PycharmProjects/tanks/src/entity/abstractentity.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/entity/abstractentity.js","source":"const EntityModel = require(\"./entitymodel\");\n\nclass AbstractEntity {\n  /**\n   * @type EntityModel\n   */\n  constructor(model) {\n    this.model = null;\n    this.model = model;\n  }\n\n  tick(dt) {\n    this.model.tick(dt);\n  }\n\n}\n\nmodule.exports = AbstractEntity;","deps":{"./entitymodel":"/Users/Temich/PycharmProjects/tanks/src/entity/entitymodel.js"}},"/Users/Temich/PycharmProjects/tanks/src/entity/entitymodel.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/entity/entitymodel.js","source":"const BinarySerializable = require(\"../serialization/binary/serializable\");\n/**\n * Entity model. Describes entity position,\n * velocity and angle. Each entity type should\n * inherit this class.\n * This class used both on client and server\n * side. Can be updated dynamically through\n * binary serialization.\n */\n\n\nclass EntityModel extends BinarySerializable {\n  static groupName() {\n    return 5;\n  }\n  /**\n   * Per-screen unique entity identifier\n   * @type number\n   */\n\n\n  constructor() {\n    super();\n    this.id = void 0;\n    this.x = 0;\n    this.y = 0;\n    this.dx = 0;\n    this.dy = 0;\n    this.rotation = 0;\n    this.dead = false;\n    this.id = 0;\n    this.x = 0;\n    this.y = 0;\n    this.dx = 0;\n    this.dy = 0;\n    this.rotation = 0;\n  }\n\n  tick(dt) {\n    this.x += this.dx * dt;\n    this.y += this.dy * dt;\n  }\n\n  toBinary(encoder) {\n    encoder.writeUint32(this.id);\n    this.encodeDynamicData(encoder);\n  }\n\n  encodeDynamicData(encoder) {\n    encoder.writeFloat32(this.x);\n    encoder.writeFloat32(this.y);\n    encoder.writeFloat32(this.dx);\n    encoder.writeFloat32(this.dy);\n    encoder.writeFloat32(this.rotation);\n  }\n\n  decodeDynamicData(decoder) {\n    this.x = decoder.readFloat32();\n    this.y = decoder.readFloat32();\n    this.dx = decoder.readFloat32();\n    this.dy = decoder.readFloat32();\n    this.rotation = decoder.readFloat32();\n  }\n\n  static fromBinary(decoder) {\n    const entity = new this();\n    entity.id = decoder.readUint32();\n    entity.decodeDynamicData(decoder);\n    return entity;\n  }\n\n}\n\nmodule.exports = EntityModel;","deps":{"../serialization/binary/serializable":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/serializable.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/entity/cliententity.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/entity/cliententity.js","source":"const AbstractEntity = require(\"../../entity/abstractentity\");\n\nconst EntityDrawer = require(\"../graphics/drawers/entitydrawer\");\n\nconst EntityModel = require(\"../../entity/entitymodel\");\n\nclass ClientEntity extends AbstractEntity {\n  constructor(model) {\n    super();\n    /** @type EntityDrawer */\n\n    this.drawer = null;\n    /** @type EntityModel */\n\n    this.model = model;\n  }\n\n  static fromModel(model) {\n    let type = this.types.get(model.constructor);\n\n    if (type) {\n      return new type(model);\n    }\n\n    return null;\n  }\n  /**\n   * Associates client wrapper class with the bullet model\n   * @param clientClass Client class to associate with bullet model\n   * @param modelClass Bullet model\n   */\n\n\n  static associate(clientClass, modelClass) {\n    this.types.set(modelClass, clientClass);\n  }\n\n}\n\nClientEntity.types = new Map();\nmodule.exports = ClientEntity;","deps":{"../graphics/drawers/entitydrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/entitydrawer.js","../../entity/abstractentity":"/Users/Temich/PycharmProjects/tanks/src/entity/abstractentity.js","../../entity/entitymodel":"/Users/Temich/PycharmProjects/tanks/src/entity/entitymodel.js"}},"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/trucktankbehaviour.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/trucktankbehaviour.js","source":"const Box2D = require(\"../../library/box2d\");\n\nconst TankBehaviour = require(\"./tankbehaviour.js\");\n\nclass TruckTankBehaviour extends TankBehaviour {\n  constructor(tank, config) {\n    super(tank, config);\n    this.truckbase = config.truckbase || 30;\n    this.truckSlipperness = config.truckSlipperness || 15;\n    this.truckSlipperySpeed = config.truckSlipperySpeed || 30;\n    this.details = {\n      leftTrackSpeed: 0,\n      rightTrackSpeed: 0,\n      leftTrackDist: 0,\n      rightTrackDist: 0,\n      clutch: 0,\n      transmissionSpeed: 0\n    };\n  }\n\n  clone() {\n    return new TruckTankBehaviour(this);\n  }\n  /**\n   * @param dt {number}\n   */\n\n\n  tick(dt) {\n    super.tick(dt);\n    const tank = this.tank;\n    const body = this.tank.body;\n    let x = tank.controls.getSteer();\n    let y = tank.controls.getThrottle();\n    let leftTrackSpeed = Math.max(Math.min(y - x, 1), -1);\n    let rightTrackSpeed = Math.max(Math.min(y + x, 1), -1);\n    const ls = leftTrackSpeed * this.power;\n    const rs = rightTrackSpeed * this.power;\n    body.ApplyForce(body.GetWorldVector(new Box2D.b2Vec2(0, ls)), body.GetWorldPoint(new Box2D.b2Vec2(-this.truckbase, 0)));\n    body.ApplyForce(body.GetWorldVector(new Box2D.b2Vec2(0, rs)), body.GetWorldPoint(new Box2D.b2Vec2(this.truckbase, 0)));\n  }\n\n  countDetails(dt) {\n    const tank = this.tank;\n    const body = tank.body;\n    const steerX = tank.controls.getSteer();\n    const steerY = tank.controls.getThrottle();\n    const velocity = body.GetLinearVelocity();\n    const sx = velocity.x;\n    const sy = velocity.y;\n    const y2 = -tank.matrix.sin * sx + tank.matrix.cos * sy;\n    const angularVelocity = body.GetAngularVelocity();\n    let left = -y2 - angularVelocity * this.truckbase;\n    let right = -y2 + angularVelocity * this.truckbase;\n    const ls = Math.max(Math.min(steerY + steerX, 1), -1) * this.truckSlipperySpeed;\n    const rs = Math.max(Math.min(steerY - steerX, 1), -1) * this.truckSlipperySpeed;\n\n    if (this.truckSlipperness > Math.abs(left) && ls !== 0) {\n      if (ls < 0) {\n        left = Math.min(this.truckSlipperness, -ls);\n      } else {\n        left = -Math.min(this.truckSlipperness, ls);\n      }\n    }\n\n    if (this.truckSlipperness > Math.abs(right) && rs !== 0) {\n      if (rs < 0) {\n        right = Math.min(this.truckSlipperness, -rs);\n      } else {\n        right = -Math.min(this.truckSlipperness, rs);\n      }\n    }\n\n    this.details.leftTrackSpeed = left;\n    this.details.rightTrackSpeed = right;\n    this.details.leftTrackDist += left * dt;\n    this.details.rightTrackDist += right * dt;\n    this.details.clutch = Math.min(1, Math.abs(steerX) + Math.abs(steerY));\n    this.details.transmissionSpeed = Math.max(Math.abs(this.details.leftTrackSpeed), Math.abs(this.details.rightTrackSpeed));\n  }\n\n}\n\nmodule.exports = TruckTankBehaviour;","deps":{"./tankbehaviour.js":"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/tankbehaviour.js","../../library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/rotationalmatrix.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/rotationalmatrix.js","source":"class RotationalMatrix {\n  /**\n   * Sine of the rotation angle\n   * @type number\n   */\n\n  /**\n   * Cosine of the rotation angle\n   * @type number\n   */\n  constructor(angle) {\n    this.sin = 1;\n    this.cos = 0;\n    angle = angle || 0;\n    this.sin = Math.sin(angle);\n    this.cos = Math.cos(angle);\n  }\n\n  angle(angle) {\n    if (angle !== this.angle) {\n      this.sin = Math.sin(angle);\n      this.cos = Math.cos(angle);\n    }\n  }\n\n  turnHorizontalAxis(x, y) {\n    return x * this.cos - y * this.sin;\n  }\n\n  turnVerticalAxis(x, y) {\n    return x * this.sin + y * this.cos;\n  }\n\n}\n\nmodule.exports = RotationalMatrix;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/weapon/models/42mm.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/weapon/models/42mm.js","source":"const Weapon = require(\"../weapon\");\n\nconst BulletModel42mm = require(\"../../entity/bullet/models/42mm\");\n\nclass Weapon42mm extends Weapon {\n  constructor(config) {\n    config = Object.assign({\n      maxAmmo: 5,\n      shootRate: 1000,\n      reloadTime: 5000,\n      bulletType: BulletModel42mm\n    }, config);\n    super(config);\n  }\n\n}\n\nmodule.exports = Weapon42mm;","deps":{"../../entity/bullet/models/42mm":"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/42mm.js","../weapon":"/Users/Temich/PycharmProjects/tanks/src/weapon/weapon.js"}},"/Users/Temich/PycharmProjects/tanks/src/tanks/models/sniper.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/tanks/models/sniper.js","source":"const TankModel = require(\"../tankmodel\");\n\nconst PhysicsUtils = require(\"../../utils/physicsutils.js\");\n\nconst BasicTankBehaviour = require(\"../physics/trucktankbehaviour\");\n\nconst Box2D = require(\"../../library/box2d\");\n\nconst Weapon42mm = require(\"../../weapon/models/42mm\");\n\nclass SniperTank extends TankModel {\n  constructor(options) {\n    super(options);\n    this.behaviour = new BasicTankBehaviour(this, {\n      power: 20000\n    });\n  }\n\n  static getWeapon() {\n    return Weapon42mm;\n  }\n\n  initPhysics(world) {\n    this.world = world;\n    let size = 9;\n    const segment = size / 4;\n    let bodyFixture = PhysicsUtils.squareFixture(size / 2, size * 0.45, new Box2D.b2Vec2(0, 0));\n    let trackFixtures = PhysicsUtils.horizontalSquareFixtures(segment, size, new Box2D.b2Vec2(-size / 2 - segment, size * 0.2));\n    this.body = PhysicsUtils.dynamicBody(world);\n    this.body.CreateFixture(bodyFixture);\n\n    for (let fixture of trackFixtures) this.body.CreateFixture(fixture);\n\n    this.world = world;\n  }\n\n  static getMaximumHealth() {\n    return 10;\n  }\n\n  static getId() {\n    return 1;\n  }\n\n}\n\nTankModel.register(SniperTank);\nmodule.exports = SniperTank;","deps":{"../../utils/physicsutils.js":"/Users/Temich/PycharmProjects/tanks/src/utils/physicsutils.js","../../library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","../tankmodel":"/Users/Temich/PycharmProjects/tanks/src/tanks/tankmodel.js","../physics/trucktankbehaviour":"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/trucktankbehaviour.js","../../weapon/models/42mm":"/Users/Temich/PycharmProjects/tanks/src/weapon/models/42mm.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/sniper.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/sniper.js","source":"const ClientTank = require(\"../clienttank\");\n\nconst TankDrawer = require(\"../../graphics/drawers/tankdrawer\");\n\nconst SniperTankModel = require(\"../../../tanks/models/sniper\");\n\nconst Engine = require(\"../../engine\");\n\nconst FX = require(\"../../sound/fx\");\n\nconst Sprite = require(\"../../sprite\");\n\nconst LightMaskTextureProgram = require(\"../../graphics/programs/lightmasktextureprogram\");\n\nconst TruckProgram = require(\"../../graphics/programs/truckprogram\");\n\nclass Drawer extends TankDrawer {\n  constructor(tank, ctx) {\n    super(tank, ctx);\n    this.size = 9;\n    this.bodyBrightSprite = Sprite.named(\"tanks/sniper/body-bright\");\n    this.bodyDarkSprite = Sprite.named(\"tanks/sniper/body-dark\");\n    this.bodyLightMask = Sprite.named(\"tanks/sniper/mask\");\n    this.truckSprite = Sprite.named(\"tanks/sniper/truck\");\n    this.bodyProgram = new LightMaskTextureProgram(\"tank-body-drawer\", ctx);\n    this.truckProgram = new TruckProgram(\"tank-truck-drawer\", ctx);\n    Sprite.setMipMapLevel(0);\n    this.truckProgram.use();\n    this.truckProgram.textureUniform.set1i(0);\n    this.truckProgram.setSprite(this.truckSprite);\n    this.truckProgram.setTruckLength(4.0);\n    this.truckProgram.setTruckRadius(0.25);\n  }\n\n  draw(camera, dt) {\n    let angle = this.tank.model.body.GetAngle();\n    camera.matrix.save();\n    Sprite.setMipMapLevel(0);\n    this.drawSmoke(dt);\n    const scale = this.size;\n    const dscale = scale * 2;\n    const segment = dscale / 4;\n    let leftTrackDist = this.tank.model.behaviour.details.leftTrackDist;\n    let rightTrackDist = this.tank.model.behaviour.details.rightTrackDist;\n    let position = this.tank.model.body.GetPosition();\n    camera.matrix.translate(position.x, position.y);\n    camera.matrix.rotate(-angle);\n    this.truckProgram.use();\n    this.truckProgram.prepare();\n    this.truckProgram.drawTruck(scale / 2, -scale * 0.8, segment, dscale, 4, leftTrackDist);\n    this.truckProgram.drawTruck(-scale, -scale * 0.8, segment, dscale, 4, rightTrackDist);\n    this.truckProgram.matrixUniform.setMatrix(camera.matrix.m);\n    this.truckProgram.draw();\n    this.bodyProgram.prepare();\n    this.bodyProgram.use();\n    this.bodyProgram.drawMaskedSprite(this.bodyBrightSprite, this.bodyDarkSprite, this.bodyLightMask, -scale * 0.9, -scale * 0.7, scale * 1.8, scale * 2);\n    let normalizedAngle = -angle / Math.PI / 2 % 1;\n    if (normalizedAngle < 0) normalizedAngle += 1;\n    this.bodyProgram.angleUniform.set1f(normalizedAngle);\n    this.bodyProgram.matrixUniform.setMatrix(camera.matrix.m);\n    this.bodyProgram.draw();\n    camera.matrix.restore();\n  }\n\n}\n\nclass SniperTank extends ClientTank {\n  constructor(model) {\n    super(model);\n    this.engine = new Engine({\n      sound: FX.ENGINE_2,\n      gears: [{\n        high: 1.9,\n        gearing: 1\n      }, {\n        low: 1.4,\n        high: 2,\n        gearing: 0.8\n      }, {\n        low: 1.4,\n        high: 2,\n        gearing: 0.6\n      }, {\n        low: 1.4,\n        high: 2,\n        gearing: 0.4\n      }],\n      multiplier: 20,\n      pitch: 1\n    });\n  }\n\n  static getDrawer() {\n    return Drawer;\n  }\n\n  static getModel() {\n    return SniperTankModel;\n  }\n\n  static getName() {\n    return \"Снайпер\";\n  }\n\n  static getDescription() {\n    return \"Классический танк. Довольно быстрый и маневренный. \" + \"Его длинное дуло обеспечит точнейший выстрел. Отлично \" + \"подходит для всех ситуаций на поле битвы\";\n  }\n\n  static getStats() {\n    return {\n      damage: 3,\n      health: 10,\n      speed: 90,\n      shootrate: 1,\n      reload: 5\n    };\n  }\n\n}\n\nClientTank.register(SniperTank);\nmodule.exports = SniperTank;","deps":{"../../engine":"/Users/Temich/PycharmProjects/tanks/src/client/engine.js","../../sprite":"/Users/Temich/PycharmProjects/tanks/src/client/sprite.js","../clienttank":"/Users/Temich/PycharmProjects/tanks/src/client/tanks/clienttank.js","../../graphics/programs/lightmasktextureprogram":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/lightmasktextureprogram.js","../../graphics/programs/truckprogram":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/truckprogram.js","../../graphics/drawers/tankdrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/tankdrawer.js","../../sound/fx":"/Users/Temich/PycharmProjects/tanks/src/client/sound/fx.js","../../../tanks/models/sniper":"/Users/Temich/PycharmProjects/tanks/src/tanks/models/sniper.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/binaryoptions.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/binaryoptions.js","source":"/**\n * More reliable for serializing long-lasting or\n * large and scalable data structures.\n */\nclass BinaryOptions {\n  constructor() {\n    /**\n     * Flag handler map\n     * @type Map<number, BinaryOptions.FlagHandler>\n     */\n    this.flags = new Map();\n    this.trimFlagIdentifier = false;\n  }\n\n  addFlagHandler(handler) {\n    this.flags.set(handler.id, handler);\n  }\n\n  convertBinary(decoder, options) {\n    let flags;\n    if (this.trimFlagIdentifier) flags = decoder.readUint8();else flags = decoder.readUint16();\n    options = options || {};\n\n    while (flags--) {\n      let flag;\n      if (this.trimFlagIdentifier) flag = decoder.readUint8();else flag = decoder.readUint16();\n\n      if (this.flags.has(flag)) {\n        let handler = this.flags.get(flag);\n        handler.unpacker(decoder, options);\n      }\n    }\n\n    return options;\n  }\n\n  convertOptions(encoder, options, flags) {\n    if (!options) options = {};\n    let count = 0;\n\n    for (let [flag, handler] of this.flags.entries()) {\n      if (flags && flags.indexOf(flag) === -1) continue;\n      if (handler.decision && !handler.decision(options)) continue;\n      count++;\n    }\n\n    if (this.trimFlagIdentifier) encoder.writeUint8(count);else encoder.writeUint16(count);\n\n    for (let [flag, handler] of this.flags.entries()) {\n      if (flags && flags.indexOf(flag) === -1) continue;\n      if (handler.decision && !handler.decision(options)) continue;\n      if (this.trimFlagIdentifier) encoder.writeUint8(flag);else encoder.writeUint16(flag);\n      handler.packer(encoder, options);\n    }\n\n    return options;\n  }\n\n}\n\nBinaryOptions.FlagHandler = class {\n  constructor(id) {\n    this.id = id;\n    this.unpacker = null;\n    this.packer = null;\n    this.decision = null;\n  }\n\n  setUnpacker(handler) {\n    this.unpacker = handler;\n    return this;\n  }\n\n  setPacker(packer) {\n    this.packer = packer;\n    return this;\n  }\n\n  packDecision(decision) {\n    this.decision = decision;\n    return this;\n  }\n\n};\nmodule.exports = BinaryOptions;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/bulletmodel.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/bulletmodel.js","source":"const EntityModel = require(\"../entitymodel\");\n\nclass BulletModel extends EntityModel {\n  constructor() {\n    super();\n  }\n\n}\n\nmodule.exports = BulletModel;","deps":{"../entitymodel":"/Users/Temich/PycharmProjects/tanks/src/entity/entitymodel.js"}},"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/42mm.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/42mm.js","source":"const BulletModel = require(\"../bulletmodel.js\");\n\nclass BulletModel42mm extends BulletModel {\n  static typeName() {\n    return 0;\n  }\n\n  constructor() {\n    super();\n  }\n\n}\n\nBulletModel.register(BulletModel42mm);\nmodule.exports = BulletModel42mm;","deps":{"../bulletmodel.js":"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/bulletmodel.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/42mm.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/42mm.js","source":"const ClientBullet = require(\"../clientbullet\");\n\nconst BulletModel42mm = require(\"../../../../entity/bullet/models/42mm\");\n\nconst BasicEntityDrawer = require(\"../../../graphics/drawers/basicentitydrawer\");\n\nclass Drawer extends BasicEntityDrawer {\n  draw(program) {\n    this.drawSprite(Drawer.getSprite(0), 6, 23, program);\n  }\n\n}\n\nDrawer.spriteNames = [\"bullets/42mm/42mm\"];\n\nclass ClientBullet42mm extends ClientBullet {\n  constructor(model) {\n    super(model);\n    this.drawer = new Drawer(this);\n  }\n\n}\n\nClientBullet.associate(ClientBullet42mm, BulletModel42mm);\nmodule.exports = ClientBullet42mm;","deps":{"../clientbullet":"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/clientbullet.js","../../../graphics/drawers/basicentitydrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/basicentitydrawer.js","../../../../entity/bullet/models/42mm":"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/42mm.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/particles/smoke.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/particles/smoke.js","source":"const Particle = require(\"./particle\");\n\nclass Smoke extends Particle {\n  constructor(config) {\n    super(config);\n    this.color = config.color;\n    this.width = config.width || 4;\n    this.height = config.height || 4;\n    this.scaling = config.scaling === undefined ? 0.01 : config.scaling;\n  }\n\n  tick(dt) {\n    super.tick(dt);\n    this.color.setAlpha(1 - this.lifespan / this.lifetime);\n    this.width += this.scaling * dt;\n    this.height += this.scaling * dt;\n  }\n\n}\n\nmodule.exports = Smoke;","deps":{"./particle":"/Users/Temich/PycharmProjects/tanks/src/client/particles/particle.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/tankdrawer.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/tankdrawer.js","source":"const Color = require(\"../../../utils/color\");\n\nconst Smoke = require(\"../../particles/smoke\");\n\nclass TankDrawer {\n  /**\n   * @type {ClientTank}\n   */\n\n  /**\n   * @type {WebGLRenderingContextBase}\n   */\n\n  /**\n   * @param tank {ClientTank}\n   * @param ctx {WebGLRenderingContextBase}\n   */\n  constructor(tank, ctx) {\n    this.tank = null;\n    this.ctx = null;\n    this.tank = tank; // TODO перенести эту шнягу куда-то ещё\n\n    this.smokeTicks = 0;\n    this.ctx = ctx;\n  }\n\n  drawSmoke(dt) {\n    if (!this.tank) return;\n    if (!this.tank.model) return;\n    if (this.tank.model.health >= 7) return;\n    let intense = 1 - this.tank.model.health / 7;\n    this.smokeTicks += intense * dt;\n\n    if (this.smokeTicks > 0.2) {\n      this.smokeTicks -= 0.2;\n      const gray = (1 - intense) * 255;\n      const color = new Color(gray, gray, gray);\n      const position = this.tank.model.body.GetPosition();\n      const smoke = new Smoke({\n        x: position.x,\n        y: position.y,\n        dx: (this.tank.model.matrix.sin * 5 + Math.random() - 0.5) * 15,\n        dy: (-this.tank.model.matrix.cos * 5 + Math.random() - 0.5) * 15,\n        size: 2,\n        scaling: 50,\n        color: color\n      });\n      this.tank.player.game.particles.push(smoke);\n    }\n  }\n\n  draw(camera, dt) {}\n\n}\n\nmodule.exports = TankDrawer;","deps":{"../../../utils/color":"/Users/Temich/PycharmProjects/tanks/src/utils/color.js","../../particles/smoke":"/Users/Temich/PycharmProjects/tanks/src/client/particles/smoke.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/glbuffer.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/glbuffer.js","source":"const Buffer = require(\"../../serialization/binary/buffer\");\n\nclass GLBuffer extends Buffer {\n  constructor(config) {\n    super(config);\n    this.gl = config.gl;\n    this.index = config.index;\n    this.clazz = this.clazz || Float32Array;\n    this.drawMode = config.drawMode || this.gl.STATIC_DRAW;\n    this.bufferType = config.bufferType || this.gl.ARRAY_BUFFER;\n    this.glBuffer = null;\n    this.shouldUpdate = true;\n  }\n\n  createBuffer() {\n    super.createBuffer();\n    this.glBuffer = this.gl.createBuffer();\n    return this;\n  }\n\n  extend(minimumCapacity) {\n    if (super.extend(minimumCapacity)) {\n      this.shouldUpdate = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  bind() {\n    this.gl.bindBuffer(this.bufferType, this.glBuffer);\n  }\n\n  updateData() {\n    this.bind();\n\n    if (this.shouldUpdate) {\n      this.shouldUpdate = false;\n      this.gl.bufferData(this.bufferType, this.array, this.drawMode, this.array.length);\n    } else {\n      this.gl.bufferSubData(this.bufferType, 0, this.array);\n    }\n  }\n\n}\n\nmodule.exports = GLBuffer;","deps":{"../../serialization/binary/buffer":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/buffer.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/documenteventhandler.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/documenteventhandler.js","source":"const EventEmitter = require(\"../../../utils/eventemitter\");\n\nclass DocumentEventHandler extends EventEmitter {\n  constructor() {\n    super();\n    /** @type Map<string,any> */\n\n    this.listeners = new Map();\n    this.target = document.body;\n  }\n\n  bind(event, handler) {\n    if (this.listeners.has(event)) {\n      this.unbind(event);\n    }\n\n    const self = this;\n\n    const listener = function () {\n      handler.apply(self, arguments);\n    };\n\n    this.listeners.set(event, listener);\n\n    if (Array.isArray(this.target)) {\n      for (let target of this.target) target.addEventListener(event, listener);\n    } else {\n      this.target.addEventListener(event, listener);\n    }\n  }\n\n  unbind(event) {\n    if (Array.isArray(this.target)) {\n      for (let target of this.target) target.removeEventListener(event, this.listeners.get(event));\n    } else {\n      this.target.removeEventListener(event, this.listeners.get(event));\n    }\n\n    this.listeners.delete(event);\n  }\n\n  startListening() {}\n\n  stopListening() {\n    for (let event of this.listeners.keys()) {\n      this.unbind(event);\n    }\n\n    this.keys.clear();\n    this.listeners.clear();\n  }\n\n}\n\nmodule.exports = DocumentEventHandler;","deps":{"../../../utils/eventemitter":"/Users/Temich/PycharmProjects/tanks/src/utils/eventemitter.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/controls/gamepadaxle.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/controls/gamepadaxle.js","source":"const Axle = require(\"../../tanks/controls/axle\");\n\nclass GamepadAxle extends Axle {\n  constructor(controller, axle) {\n    super();\n    this.axle = axle;\n    this.controller = controller;\n    this.value = 0;\n    this.power = 1;\n    this.inverted = false;\n    this.controller.on(\"axle\", (index, value) => {\n      if (index === this.axle) {\n        this.value = Math.pow(value, this.power);\n        this.setNeedsUpdate();\n      }\n    });\n  }\n\n  invert() {\n    this.inverted = !this.inverted;\n    return this;\n  }\n\n  getValue() {\n    return this.inverted ? -this.value : this.value;\n  }\n\n}\n\nmodule.exports = GamepadAxle;","deps":{"../../tanks/controls/axle":"/Users/Temich/PycharmProjects/tanks/src/tanks/controls/axle.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/controls/gamepadbutton.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/controls/gamepadbutton.js","source":"const ButtonAxle = require(\"./buttonaxle\");\n\nclass GamepadButton extends ButtonAxle {\n  constructor(gamepad, button, min, max) {\n    super(max, min);\n    this.button = button;\n    gamepad.on(\"button\", (index, value) => {\n      if (index === this.button) {\n        this.keyPressed(value);\n      }\n    });\n  }\n\n}\n\nmodule.exports = GamepadButton;","deps":{"./buttonaxle":"/Users/Temich/PycharmProjects/tanks/src/client/controls/buttonaxle.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/gamepadmanager.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/gamepadmanager.js","source":"const DocumentEventHandler = require(\"./documenteventhandler\");\n\nconst GamepadAxle = require(\"../gamepadaxle\");\n\nconst GamepadButton = require(\"../gamepadbutton\");\n\nnavigator.getGamepads = navigator.getGamepads || navigator[\"webkitGetGamepads\"];\n\nclass GamepadManager extends DocumentEventHandler {\n  constructor() {\n    super();\n    this.gamepad = null;\n    this.axises = [];\n    this.buttons = [];\n    this.target = window;\n  }\n\n  startListening() {\n    if (navigator.getGamepads) {\n      this.bind(\"gamepadconnected\", this.gamepadConnected);\n      this.bind(\"gamepaddisconnected\", this.gamepadDisconnected);\n    }\n  }\n\n  refresh() {\n    if (this.gamepad === null) return;\n\n    for (let [i, button] of navigator.getGamepads()[this.gamepad].buttons.entries()) {\n      let value = typeof button === \"number\" ? button : button.value;\n\n      if (this.buttons[i] !== value) {\n        this.emit(\"button\", i, value);\n        this.buttons[i] = value;\n      }\n    }\n\n    for (let [i, axis] of navigator.getGamepads()[this.gamepad].axes.entries()) {\n      if (this.axises[i] !== axis) {\n        this.emit(\"axle\", i, axis);\n        this.axises[i] = axis;\n      }\n    }\n  }\n\n  gamepadConnected(event) {\n    if (this.gamepad !== null) {\n      return;\n    }\n\n    this.gamepad = event.gamepad.index;\n    this.axises = new Array(navigator.getGamepads()[this.gamepad].axes.length);\n  }\n\n  gamepadDisconnected(event) {\n    if (event.gamepad.index === this.gamepad) {\n      this.gamepad = null;\n    }\n  }\n\n  getAxle(index) {\n    return new GamepadAxle(this, index);\n  }\n\n  getButton(index) {\n    return new GamepadButton(this, index);\n  }\n\n}\n\nmodule.exports = GamepadManager;","deps":{"./documenteventhandler":"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/documenteventhandler.js","../gamepadaxle":"/Users/Temich/PycharmProjects/tanks/src/client/controls/gamepadaxle.js","../gamepadbutton":"/Users/Temich/PycharmProjects/tanks/src/client/controls/gamepadbutton.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/particles/explodeparticle.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/particles/explodeparticle.js","source":"const FireParticle = require(\"./fireparticle\");\n\nclass ExplodeParticle extends FireParticle {\n  createColors(config) {\n    let varying = 30;\n    return [[255 - Math.random() * varying, 255 - Math.random() * varying, Math.random() * varying, config.startOpacity], [255 - Math.random() * varying, 255 - Math.random() * varying, Math.random() * varying, 0.2], [255 - Math.random() * varying, 128 - Math.random() * varying, Math.random() * varying, 0.3], [255 - Math.random() * varying, 128 - Math.random() * varying, Math.random() * varying, 0.2 * (1 + Math.min(0, config.shifting))], [115 - Math.random() * varying, 115 - Math.random() * varying, 115 - Math.random() * varying, 0.2 * (1 + Math.min(0, config.shifting))], [115 - Math.random() * varying, 115 - Math.random() * varying, 115 - Math.random() * varying, 0]];\n  }\n\n  // 1\n  createTimings(config) {\n    let result = [];\n    let t1, t2, f1, f2;\n\n    if (config.shifting < 0) {\n      t1 = ExplodeParticle.fireOnly;\n      t2 = ExplodeParticle.all;\n      f2 = 1 + config.shifting;\n    } else {\n      t1 = ExplodeParticle.all;\n      t2 = ExplodeParticle.smokeOnly;\n      f2 = config.shifting;\n    }\n\n    f1 = 1 - f2;\n\n    for (let i = 0; i < 6; i++) {\n      result[i] = t1[i] * f1 + t2[i] * f2;\n    }\n\n    return result;\n  }\n\n  constructor(config) {\n    super(config);\n  }\n\n}\n\nExplodeParticle.fireOnly = [0.00, 0.10, 0.66, 1.00, 1.00, 1.00];\nExplodeParticle.all = [0.00, 0.10, 0.40, 0.60, 0.80, 1.00];\nExplodeParticle.smokeOnly = [0.00, 0.00, 0.00, 0.33, 0.66, 1.00];\nwindow.ExplodeParticle = ExplodeParticle;\nmodule.exports = ExplodeParticle;","deps":{"./fireparticle":"/Users/Temich/PycharmProjects/tanks/src/client/particles/fireparticle.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js","source":"const EventEmitter = require(\"../../utils/eventemitter\");\n\nclass View extends EventEmitter {\n  /**\n   * View raw element\n   * @type {jQuery}\n   */\n  constructor() {\n    super();\n    this.element = null;\n    this.element = $(\"<div>\");\n  }\n\n}\n\nmodule.exports = View;","deps":{"../../utils/eventemitter":"/Users/Temich/PycharmProjects/tanks/src/utils/eventemitter.js"}},"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/buffer.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/buffer.js","source":"class Buffer {\n  /**\n   * Buffer base capacity.\n   * If the `initialCapacity` equals to\n   * 128, then buffer actual capacity\n   * is multiply of 128.\n   * @type {Number|Null}\n   */\n\n  /**\n   * Buffer internal class type.\n   * @type {Class<TypedArray>}\n   */\n\n  /**\n   * Current entry pointer. Increased\n   * when reading or writing data.\n   * @type {number}\n   */\n  constructor(options) {\n    this.capacity = null;\n    this.clazz = null;\n    this.pointer = 0;\n    this.initialCapacity = options.capacity || 128;\n    this.capacity = 0;\n    this.clazz = options.clazz;\n    this.pointer = 0;\n    this.array = null;\n    this.stack = [];\n  }\n  /**\n   * Initializes the buffer. It's required to\n   * call this method if you want to\n   * use the dynamic buffer.\n   */\n\n\n  createBuffer() {\n    this.capacity = this.initialCapacity;\n    this.array = new this.clazz(this.capacity);\n    return this;\n  }\n  /**\n   * if `minimumCapacity` parameter is provided, extends the\n   * buffer to nearest greater multiple of `capacity`\n   * bytes. if not, extends the buffer by `capacity` bytes.\n   * If the required number of bytes if less then actual\n   * capacity, this method does nothing\n   * @param minimumCapacity {Number?} Minimum buffer capacity.\n   * @returns {boolean} `true`, if buffer has been reallocated, `false` otherwise\n   */\n\n\n  extend(minimumCapacity) {\n    if (minimumCapacity === undefined) {\n      this.capacity += this.initialCapacity;\n    } else {\n      if (minimumCapacity <= this.capacity) return false;\n      this.capacity = Math.ceil(minimumCapacity / this.initialCapacity) * this.initialCapacity;\n    }\n\n    let oldBuffer = this.array;\n    this.array = new this.clazz(this.capacity);\n    this.array.set(oldBuffer);\n    return true;\n  }\n  /**\n   * Resets the pointer to zero, allowing\n   * to read buffer from start or reuse\n   * it by overwriting old content.\n   */\n\n\n  reset() {\n    this.pointer = 0;\n  }\n  /**\n   * Converts this dynamic buffer into static `ArrayBuffer`\n   * @returns {ArrayBuffer}\n   */\n\n\n  toArrayBuffer() {\n    return this.array.buffer.slice(0, this.pointer * this.clazz.BYTES_PER_ELEMENT);\n  }\n  /**\n   * Appends single value to the end of this buffer.\n   * The value should bound to the buffer type,\n   * otherwise it will be clamped.\n   * @param value {Number}\n   */\n\n\n  push(value) {\n    if (this.pointer >= this.capacity) {\n      this.extend();\n    }\n\n    this.array[this.pointer++] = value;\n  }\n  /**\n   * Appends `Array` to the end of this buffer.\n   * @param array {Array|TypedArray} Array to append.\n   */\n\n\n  appendArray(array) {\n    let newSize = this.pointer + array.length;\n\n    if (newSize >= this.capacity) {\n      this.extend(newSize);\n    }\n\n    this.array.set(array, this.pointer);\n    this.pointer += array.length;\n  }\n  /**\n   * Appends another buffer to the end of this buffer.\n   * Usable when compiling multiple buffers into one.\n   * @param buffer {Buffer} Buffer to append.\n   */\n\n\n  appendBuffer(buffer) {\n    if (buffer.pointer === 0) {\n      return;\n    }\n\n    let bytes = buffer.array.BYTES_PER_ELEMENT;\n    let selfBytes = this.array.BYTES_PER_ELEMENT;\n    let size = Math.ceil(bytes / selfBytes * buffer.pointer);\n    let alignment = Math.max(bytes, selfBytes); // Align pointer\n\n    this.pointer = Math.ceil(this.pointer * selfBytes / alignment) * alignment / selfBytes;\n    let temp = new this.clazz(buffer.array.buffer, 0, size);\n    this.appendArray(temp);\n  }\n  /**\n   * Reads `TypedArray` to internal buffer. Then it's\n   * possible to use `next(n)` method.\n   * @param array {TypedArray} An array to read data. Should be the same type as the buffer.\n   * @param pointer {Number} How many bytes to skip before start reading.\n   * @param size {Number} Number of overlay to read\n   */\n\n\n  read(array, pointer, size) {\n    this.extend(size);\n    let buffer = new this.clazz(array, pointer, size);\n    this.array.set(buffer); // Allow to read buffer from begin with `next` method\n\n    this.pointer = 0;\n  }\n\n  next(n) {\n    if (n === undefined || n <= 1) {\n      return this.array[this.pointer++];\n    } else if (typeof n == \"number\") {\n      let temp = this.array.slice(this.pointer, this.pointer + n);\n      this.pointer += n;\n      return temp;\n    }\n  }\n  /**\n   * Makes a new buffer with the same options.\n   * Does not copy buffer content.\n   * @returns {Buffer}\n   */\n\n\n  clone() {\n    return new Buffer({\n      capacity: this.initialCapacity,\n      clazz: this.clazz\n    });\n  }\n  /**\n   * Saves current buffer pointer to stack.\n   * Return to last saved pointer\n   * by calling `restore` method.\n   */\n\n\n  save() {\n    this.stack.push(this.pointer);\n  }\n  /**\n   * Returns to last saved buffer pointer.\n   * See also `save` method.\n   */\n\n\n  restore() {\n    this.pointer = this.stack.pop();\n  }\n\n}\n\nmodule.exports = Buffer;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/airblockstate.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/airblockstate.js","source":"const BlockState = require(\"../blockstate\");\n\nconst BinaryOptions = require(\"../../../binaryoptions\");\n\nclass AirBinaryOptions extends BinaryOptions {\n  convertOptions(encoder, options, flags) {}\n\n  convertBinary(decoder, options) {}\n\n}\n\nclass AirBlockState extends BlockState {\n  // Empty options\n  update(map, x, y) {}\n\n}\n\nAirBlockState.BinaryOptions = new AirBinaryOptions();\nAirBlockState.isSolid = false;\nAirBlockState.typeName = \"air\";\nAirBlockState.typeId = 0;\nBlockState.registerBlockStateClass(AirBlockState);\nmodule.exports = AirBlockState;","deps":{"../../../binaryoptions":"/Users/Temich/PycharmProjects/tanks/src/utils/binaryoptions.js","../blockstate":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstate.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/postprocessingprogram.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/postprocessingprogram.js","source":"/* @load-resource: '../shaders/fragment/post-processing-fragment.glsl' */\n\n/* @load-resource: '../shaders/vertex/post-processing-vertex.glsl' */\nconst Program = require(\"../program\");\n\nconst Shader = require(\"../shader\");\n\nconst GLBuffer = require(\"../glbuffer\");\n\nclass PostProcessingProgram extends Program {\n  constructor(name, ctx) {\n    let vertexShader = new Shader(\"post-processing-vertex\", Shader.VERTEX).compile(ctx);\n    let fragmentShader = new Shader(\"post-processing-fragment\", Shader.FRAGMENT).compile(ctx);\n    super(name, vertexShader, fragmentShader);\n    this.link(ctx);\n    this.ctx = ctx;\n    this.vertexBuffer = new GLBuffer({\n      gl: this.ctx,\n      drawMode: this.ctx.STATIC_DRAW,\n      capacity: 8\n    }).createBuffer();\n    this.vertexBuffer.appendArray([-1, -1, -1, 1, 1, -1, 1, 1]);\n    this.indexBuffer = new GLBuffer({\n      clazz: Uint8Array,\n      gl: this.ctx,\n      bufferType: this.ctx.ELEMENT_ARRAY_BUFFER,\n      drawMode: this.ctx.STATIC_DRAW,\n      capacity: 8\n    }).createBuffer();\n    this.indexBuffer.appendArray([0, 1, 3, 0, 2, 3]);\n    this.indexBuffer.updateData();\n    this.vertexBuffer.updateData();\n    this.vertexPositionAttribute = this.getAttribute(\"a_vertex_position\");\n    this.textureUniform = this.getUniform(\"u_texture\");\n    this.widthUniform = this.getUniform(\"u_screen_width\");\n    this.heightUniform = this.getUniform(\"u_screen_height\");\n    this.vertexLength = 2;\n  }\n\n  draw() {\n    this.indexBuffer.bind();\n    this.vertexBuffer.bind();\n    const bytes = this.vertexBuffer.clazz.BYTES_PER_ELEMENT;\n    const stride = this.vertexLength * bytes;\n    this.widthUniform.set1f(this.ctx.canvas.width);\n    this.heightUniform.set1f(this.ctx.canvas.height);\n    this.ctx.enableVertexAttribArray(this.vertexPositionAttribute);\n    this.ctx.enableVertexAttribArray(this.texturePositionAttribute);\n    this.ctx.vertexAttribPointer(this.vertexPositionAttribute, 2, this.ctx.FLOAT, false, stride, 0);\n    this.ctx.drawElements(this.ctx.TRIANGLES, this.indexBuffer.pointer, this.ctx.UNSIGNED_BYTE, 0);\n    this.ctx.disableVertexAttribArray(this.vertexPositionAttribute);\n    this.textures = 0;\n  }\n\n}\n\nmodule.exports = PostProcessingProgram;","deps":{"../glbuffer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/glbuffer.js","../program":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/program.js","../shader":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/shader.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/uniform.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/uniform.js","source":"class Uniform {\n  constructor(program, name) {\n    this.program = program;\n    this.name = name;\n    this.ctx = this.program.ctx;\n    this.location = this.ctx.getUniformLocation(this.program.raw, name);\n\n    if (!this.location) {\n      console.warn(\"Could not find uniform named '\" + this.name + \"' in '\" + this.program.name + \"'\");\n    }\n  }\n\n  set1f(value) {\n    if (this.location) this.ctx.uniform1f(this.location, value);\n  }\n\n  set2f(value1, value2) {\n    if (this.location) this.ctx.uniform2f(this.location, value1, value2);\n  }\n\n  set3f(value1, value2, value3) {\n    if (this.location) this.ctx.uniform3f(this.location, value1, value2, value3);\n  }\n\n  set4f(value1, value2, value3, value4) {\n    if (this.location) this.ctx.uniform4f(this.location, value1, value2, value3, value4);\n  }\n\n  set1d(value) {\n    if (this.location) this.ctx.uniform1fv(this.location, value);\n  }\n\n  set2d(value1, value2) {\n    if (this.location) this.ctx.uniform2fv(this.location, value1, value2);\n  }\n\n  set3d(value1, value2, value3) {\n    if (this.location) this.ctx.uniform3fv(this.location, value1, value2, value3);\n  }\n\n  set4d(value1, value2, value3, value4) {\n    if (this.location) this.ctx.uniform4fv(this.location, value1, value2, value3, value4);\n  }\n\n  set1i(value) {\n    if (this.location) this.ctx.uniform1i(this.location, value);\n  }\n\n  set2i(value1, value2) {\n    if (this.location) this.ctx.uniform2i(this.location, value1, value2);\n  }\n\n  set3i(value1, value2, value3) {\n    if (this.location) this.ctx.uniform3i(this.location, value1, value2, value3);\n  }\n\n  set4i(value1, value2, value3, value4) {\n    if (this.location) this.ctx.uniform4i(this.location, value1, value2, value3, value4);\n  }\n\n  setMatrix(matrix) {\n    if (this.location) {\n      if (matrix.length === 4) {\n        this.ctx.uniformMatrix2fv(this.location, false, matrix);\n      } else if (matrix.length === 9) {\n        this.ctx.uniformMatrix3fv(this.location, false, matrix);\n      } else if (matrix.length === 16) {\n        this.ctx.uniformMatrix4fv(this.location, false, matrix);\n      }\n    }\n  }\n\n}\n\nmodule.exports = Uniform;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/program.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/program.js","source":"const Uniform = require(\"./uniform\");\n\nconst GLBuffer = require(\"./glbuffer\");\n\nclass Program {\n  constructor(name) {\n    this.name = name;\n    this.shaders = Array.prototype.slice.call(arguments, 1);\n    this.raw = null;\n    this.ctx = null;\n  }\n\n  link(gl) {\n    this.raw = gl.createProgram();\n\n    for (let shader of this.shaders) gl.attachShader(this.raw, shader.raw);\n\n    gl.linkProgram(this.raw);\n\n    if (!gl.getProgramParameter(this.raw, gl.LINK_STATUS)) {\n      throw new Error(\"Failed to link bodyProgram: \" + gl.getProgramInfoLog(this.raw));\n    }\n\n    this.ctx = gl;\n    return this;\n  }\n\n  createIndexBuffer() {\n    return new GLBuffer({\n      gl: this.ctx,\n      clazz: Uint16Array,\n      bufferType: this.ctx.ELEMENT_ARRAY_BUFFER,\n      drawMode: this.ctx.STATIC_DRAW\n    }).createBuffer();\n  }\n\n  getUniform(name) {\n    return new Uniform(this, name);\n  }\n\n  getAttribute(name) {\n    return this.ctx.getAttribLocation(this.raw, name);\n  }\n\n  use() {\n    this.ctx.useProgram(this.raw);\n  }\n\n  prepare() {}\n\n}\n\nmodule.exports = Program;","deps":{"./glbuffer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/glbuffer.js","./uniform":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/uniform.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/shaderloader.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/shaderloader.js","source":"/* #shader-loader-placeholder# */","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/shader.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/shader.js","source":"const shaders = require(\"./shaderloader\");\n\nclass Shader {\n  constructor(name, type) {\n    this.name = name;\n    this.type = type;\n    this.raw = null;\n  }\n\n  compile(gl) {\n    this.raw = gl.createShader(this.type === Shader.VERTEX ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER);\n\n    if (!shaders[this.name]) {\n      throw new Error(\"No such shader: \" + this.name);\n    }\n\n    gl.shaderSource(this.raw, shaders[this.name]);\n    gl.compileShader(this.raw);\n\n    if (!gl.getShaderParameter(this.raw, gl.COMPILE_STATUS)) {\n      throw new Error(\"Failed to compile shader '\" + this.name + \"': \" + gl.getShaderInfoLog(this.raw));\n    }\n\n    return this;\n  }\n\n}\n\nShader.VERTEX = 0;\nShader.FRAGMENT = 1;\nmodule.exports = Shader;","deps":{"./shaderloader":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/shaderloader.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/truckprogram.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/truckprogram.js","source":"/* @load-resource: '../shaders/fragment/truck-fragment.glsl' */\n\n/* @load-resource: '../shaders/vertex/truck-vertex.glsl' */\nconst Program = require(\"../program\");\n\nconst Shader = require(\"../shader\");\n\nconst GLBuffer = require(\"../glbuffer\");\n\nclass TruckProgram extends Program {\n  constructor(name, ctx) {\n    let vertexShader = new Shader(\"truck-vertex\", Shader.VERTEX).compile(ctx);\n    let fragmentShader = new Shader(\"truck-fragment\", Shader.FRAGMENT).compile(ctx);\n    super(name, vertexShader, fragmentShader);\n    this.link(ctx);\n    this.ctx = ctx;\n    this.vertexBuffer = new GLBuffer({\n      gl: ctx,\n      drawMode: this.ctx.DYNAMIC_DRAW\n    }).createBuffer();\n    this.indexBuffer = new GLBuffer({\n      gl: ctx,\n      clazz: Uint16Array,\n      bufferType: this.ctx.ELEMENT_ARRAY_BUFFER,\n      drawMode: this.ctx.DYNAMIC_DRAW\n    }).createBuffer();\n    this.vertexPositionAttribute = this.getAttribute(\"a_vertex_position\");\n    this.texturePositionAttribute = this.getAttribute(\"a_truck_position\");\n    this.truckDistanceAttribute = this.getAttribute(\"a_truck_distance\");\n    this.truckTextureUniform = this.getUniform(\"u_truck_texture\");\n    this.truckLengthUniform = this.getUniform(\"u_truck_length\");\n    this.matrixUniform = this.getUniform(\"u_matrix\");\n    this.radiusUniform = this.getUniform(\"u_radius\");\n    this.textureUniform = this.getUniform(\"u_texture\");\n    this.vertexLength = 5;\n    this.trucks = 0;\n  }\n\n  setTruckRadius(radius) {\n    this.radiusUniform.set1f(radius);\n  }\n\n  setTruckLength(length) {\n    this.truckLengthUniform.set1f(length);\n  }\n\n  setSprite(sprite) {\n    this.truckTextureUniform.set4f(sprite.rect.x, sprite.rect.y, sprite.rect.w, sprite.rect.h);\n  }\n\n  drawTruck(x, y, width, height, scale, distance) {\n    distance = distance % height / height;\n    this.vertexBuffer.appendArray([x + width, y + height, 1, 1, distance, x + width, y, 1, 0, distance, x, y + height, 0, 1, distance, x, y, 0, 0, distance]);\n    const baseIndex = this.trucks * 4;\n    this.indexBuffer.appendArray([baseIndex, baseIndex + 1, baseIndex + 3, baseIndex, baseIndex + 2, baseIndex + 3]);\n    this.trucks++;\n  }\n\n  prepare() {\n    this.indexBuffer.reset();\n    this.vertexBuffer.bind();\n    this.vertexBuffer.reset();\n    const bytes = this.vertexBuffer.clazz.BYTES_PER_ELEMENT;\n    const stride = this.vertexLength * bytes;\n    this.ctx.enableVertexAttribArray(this.vertexPositionAttribute);\n    this.ctx.enableVertexAttribArray(this.texturePositionAttribute);\n    this.ctx.enableVertexAttribArray(this.truckDistanceAttribute);\n    this.ctx.vertexAttribPointer(this.vertexPositionAttribute, 2, this.ctx.FLOAT, false, stride, 0);\n    this.ctx.vertexAttribPointer(this.texturePositionAttribute, 2, this.ctx.FLOAT, false, stride, 8);\n    this.ctx.vertexAttribPointer(this.truckDistanceAttribute, 1, this.ctx.FLOAT, false, stride, 16);\n    this.ctx.disable(this.ctx.BLEND);\n  }\n\n  draw() {\n    this.ctx.enable(this.ctx.BLEND);\n    this.indexBuffer.updateData();\n    this.vertexBuffer.updateData();\n    this.ctx.drawElements(this.ctx.TRIANGLES, this.indexBuffer.pointer, this.ctx.UNSIGNED_SHORT, 0);\n    this.ctx.disableVertexAttribArray(this.vertexPositionAttribute);\n    this.ctx.disableVertexAttribArray(this.texturePositionAttribute);\n    this.ctx.disableVertexAttribArray(this.truckDistanceAttribute);\n    this.trucks = 0;\n  }\n\n}\n\nmodule.exports = TruckProgram;","deps":{"../glbuffer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/glbuffer.js","../program":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/program.js","../shader":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/shader.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/ui/overlay/events/eventview.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/ui/overlay/events/eventview.js","source":"/* @load-resource: './event-view.scss' */\nconst View = require(\"../../view\");\n\nclass EventView extends View {\n  constructor(text) {\n    super();\n    this.element.addClass(\"menu event-view\");\n    this.element.css(\"opacity\", \"0\");\n    this.element.text(text);\n  }\n\n  appear() {\n    this.element.css(\"opacity\", \"1\");\n  }\n\n  disappear(callback) {\n    this.element.css(\"opacity\", \"0\");\n    setTimeout(callback, 500);\n  }\n\n}\n\nmodule.exports = EventView;","deps":{"../../view":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/ui/overlay/events/eventcontainer.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/ui/overlay/events/eventcontainer.js","source":"/* @load-resource: './event-container.scss' */\nconst View = require(\"../../view\");\n\nconst EventView = require(\"./eventview\");\n\nclass EventContainer extends View {\n  constructor() {\n    super();\n    this.element.addClass(\"event-container\");\n  }\n\n  cascade() {\n    let top = 0;\n    let children = this.element.children(\".event-view\");\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      let child = children[i];\n      top += child.clientHeight + 10;\n      child.style.top = \"-\" + top + \"px\";\n    }\n  }\n\n  createEvent(text) {\n    let view = new EventView(text);\n    this.element.append(view.element);\n    this.cascade();\n    view.appear();\n    setTimeout(() => {\n      view.disappear(() => {\n        view.element.remove();\n        this.cascade();\n      });\n    }, 2000);\n  }\n\n}\n\nmodule.exports = EventContainer;","deps":{"../../view":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js","./eventview":"/Users/Temich/PycharmProjects/tanks/src/client/ui/overlay/events/eventview.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/play-menu/playmenucontainer.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/play-menu/playmenucontainer.js","source":"/* @load-resource: './play-menu.scss' */\nconst View = require(\"../../../../../ui/view\");\n\nclass PlayMenuContainer extends View {\n  constructor() {\n    super();\n    this.element.addClass(\"menu nick\");\n    this.titleLabel = $(\"<div>\").css(\"text-align\", \"center\").addClass(\"header\");\n    this.titleLabel.text(\"ВВЕДИТЕ НИК\");\n    this.nickInput = $(\"<input>\");\n    this.playButton = $(\"<button></button>\").text(\"ИГРАТЬ\");\n    this.element.append(this.titleLabel);\n    this.element.append(this.nickInput);\n    this.element.append(this.playButton);\n\n    let handler = () => {\n      if (this.nickInput.val().length === 0) {\n        this.playButton.prop(\"disabled\", true);\n      } else if (this.nickInput.val().length > 10) {\n        this.playButton.prop(\"disabled\", true);\n      } else this.playButton.prop(\"disabled\", false);\n    };\n\n    this.nickInput.on(\"input\", handler);\n    this.nickInput.on(\"change\", handler);\n    this.nickInput.on(\"paste\", handler);\n    this.nickInput.val(localStorage.getItem(\"tanks-nick\") || \"\");\n    this.playButton.on(\"click\", () => {\n      if (this.playButton.is(\"[disabled]\")) return;\n      let nick = this.nickInput.val();\n      localStorage.setItem(\"tanks-nick\", nick);\n      this.emit(\"play\");\n    });\n    handler();\n  }\n\n}\n\nmodule.exports = PlayMenuContainer;","deps":{"../../../../../ui/view":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/controls/controlscontainer.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/controls/controlscontainer.js","source":"/* @load-resource: './controls.scss' */\nconst View = require(\"../../../../../ui/view\");\n\nclass ControlsContainer extends View {\n  constructor(options) {\n    super(options);\n    this.element.addClass(\"menu tip\");\n    let header = $(\"<div>\").addClass(\"header\").text(\"Управление\");\n    this.checkbox = $(\"<input>\").prop(\"type\", \"checkbox\");\n    this.button = $(\"<button>\").text(\"ИГРАТЬ\");\n    this.element.append(header).append(this.line().height(\"120px\").append(this.steeringTable(\"wasd\")).append(\" или \").append(this.steeringTable(\"↑←↓→\")).append(\" для управления\")).append(this.line().append(this.key(\"ПРОБЕЛ\").css(\"padding\", \"0 40px\")).append(\" — выстрел\").append(this.key(\"Q\").css(\"margin-left\", \"25px\")).append(\" — мина\").append(this.key(\"R\").css(\"margin-left\", \"25px\")).append(\" — респавн\")).append(this.line().append(this.key(\"ВВОД\").css(\"padding\", \"0 25px\")).append(\" — чат\")).append($(\"<div>\").addClass(\"wish\").text(\"Желаем приятной игры!\")).append($(\"<div>\").addClass(\"checkbox\").append(this.checkbox).append(\"не показывать больше\")).append(this.button);\n    this.button.on(\"click\", () => {\n      this.emit(\"confirm\", this.checkbox.checked);\n    });\n  }\n\n  line() {\n    return $(\"<div>\").addClass(\"line\");\n  }\n\n  key(button) {\n    return $(\"<div>\").addClass(\"key\").text(button);\n  }\n\n  steeringTable(buttons) {\n    let table = $(\"<table>\");\n    let tbody = $(\"<tbody>\");\n    let button = 0;\n\n    for (let line = 0; line < 2; line++) {\n      let tr = $(\"<tr>\");\n\n      for (let key = 0; key < 3; key++) {\n        let td = $(\"<td>\");\n        tr.append(td);\n\n        if (line === 0) {\n          if (key === 0 || key === 2) continue;\n        }\n\n        td.append(this.key(buttons[button++]));\n      }\n\n      tbody.append(tr);\n    }\n\n    return table.append(tbody);\n  }\n\n}\n\nmodule.exports = ControlsContainer;","deps":{"../../../../../ui/view":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js"}},"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/tankbehaviour.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/tankbehaviour.js","source":"const TankModel = require(\"../tankmodel\");\n/**\n * Class which defines the physical behaviour of each specific type of tank (tracked, wheeled, etc.)\n */\n\n\nclass TankBehaviour {\n  /**\n   * Physical model details. Used mostly for\n   * rendering on client side.\n   * @type Object\n   */\n  constructor(tank, config) {\n    this.details = {};\n    this.power = config.power || 10000;\n    this.lateralFriction = config.lateralFriction || 150;\n    this.frontalfriction = config.frontalfriction || 20;\n    this.angularFriction = config.angularFriction || 0.8;\n    /** @type TankModel */\n\n    this.tank = tank;\n  }\n\n  tick(dt) {\n    const tank = this.tank;\n    const body = tank.body;\n    const velocity = body.GetLinearVelocity();\n    const vx = velocity.x;\n    const vy = velocity.y;\n    let x2 = tank.matrix.cos * vx + tank.matrix.sin * vy;\n    let y2 = -tank.matrix.sin * vx + tank.matrix.cos * vy;\n\n    if (x2 > 0) {\n      x2 -= this.lateralFriction * dt;\n      if (x2 < 0) x2 = 0;\n    } else if (x2 < 0) {\n      x2 += this.lateralFriction * dt;\n      if (x2 > 0) x2 = 0;\n    }\n\n    if (y2 > 0) {\n      y2 -= this.frontalfriction * dt;\n      if (y2 < 0) y2 = 0;\n    } else if (y2 < 0) {\n      y2 += this.frontalfriction * dt;\n      if (y2 > 0) y2 = 0;\n    }\n\n    let angularVelocity = body.GetAngularVelocity();\n\n    if (angularVelocity > 0) {\n      angularVelocity -= this.angularFriction * dt;\n      if (angularVelocity < 0) angularVelocity = 0;\n    } else if (angularVelocity < 0) {\n      angularVelocity += this.angularFriction * dt;\n      if (angularVelocity > 0) angularVelocity = 0;\n    }\n\n    body.SetAngularVelocity(angularVelocity);\n    velocity.x = tank.matrix.cos * x2 - tank.matrix.sin * y2;\n    velocity.y = tank.matrix.sin * x2 + tank.matrix.cos * y2;\n    body.SetLinearVelocity(velocity);\n  }\n\n  countDetails(dt) {}\n\n}\n\nmodule.exports = TankBehaviour;","deps":{"../tankmodel":"/Users/Temich/PycharmProjects/tanks/src/tanks/tankmodel.js"}},"/Users/Temich/PycharmProjects/tanks/src/tanks/controls/tankcontrols.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/tanks/controls/tankcontrols.js","source":"const BinarySerializable = require(\"../../serialization/binary/serializable.js\");\n\nconst Axle = require(\"./axle\");\n\nclass TankControls extends BinarySerializable {\n  static groupName() {\n    return TankControls.SERIALIZATION_GROUP_NAME;\n  }\n\n  static typeName() {\n    return 0;\n  }\n\n  constructor(tank) {\n    super();\n    this.tank = tank;\n    this.throttle = 0;\n    this.steer = 0;\n    this.axles = new Map();\n    this.axles.set(\"x\", new Axle());\n    this.axles.set(\"y\", new Axle());\n    this.axles.set(\"primary-weapon\", new Axle());\n    this.axles.set(\"miner\", new Axle());\n    this.primaryWeaponActive = false;\n    this.minerActive = false;\n    this.updated = false;\n    this.directional = false;\n    this.matrix = null;\n  }\n\n  shouldUpdate() {\n    if (this.updated) {\n      this.updated = false;\n      return true;\n    }\n\n    if (this.axles.get(\"primary-weapon\").needsUpdate()) return true;\n    return !!this.axles.get(\"miner\").needsUpdate();\n  }\n\n  static fromJson(json) {\n    let controls = new TankControls();\n    controls.updateState(json);\n    return controls;\n  }\n\n  getThrottle() {\n    if (this.tank.health <= 0) {\n      return 0;\n    }\n\n    if (this.axles.get(\"y\").needsUpdate()) {\n      this.updateAxises();\n    }\n\n    return this.throttle;\n  }\n\n  getSteer() {\n    if (this.tank.health <= 0) {\n      return 0;\n    }\n\n    if (this.axles.get(\"x\").needsUpdate()) {\n      this.updateAxises();\n    }\n\n    return this.steer;\n  }\n\n  getPrimaryWeaponAxle() {\n    return this.axles.get(\"primary-weapon\");\n  }\n\n  getMinerWeaponAxle() {\n    return this.axles.get(\"miner\");\n  }\n\n  isPrimaryWeaponActive() {\n    if (this.tank.health <= 0) {\n      return false;\n    }\n\n    let axle = this.getPrimaryWeaponAxle();\n\n    if (axle.needsUpdate()) {\n      this.primaryWeaponActive = axle.getValue() > 0.5;\n    }\n\n    return this.primaryWeaponActive;\n  }\n\n  isMinerActive() {\n    if (this.tank.health <= 0) {\n      return false;\n    }\n\n    let axle = this.getMinerWeaponAxle();\n\n    if (axle.needsUpdate()) {\n      this.minerActive = axle.getValue() > 0.5;\n    }\n\n    return this.minerActive;\n  }\n\n  updateAxises() {\n    let x = this.axles.get(\"x\").getValue();\n    let y = this.axles.get(\"y\").getValue();\n    this.updated = true;\n\n    if (this.matrix && this.directional) {\n      this.steer = this.matrix.turnHorizontalAxis(x, y);\n      this.throttle = this.matrix.turnVerticalAxis(x, y);\n    } else {\n      this.throttle = y;\n      this.steer = x;\n    }\n  }\n\n  updateState(decoder) {\n    this.axles.get(\"x\").setValue(Math.max(Math.min(decoder.readFloat32(), 1), -1));\n    this.axles.get(\"y\").setValue(Math.max(Math.min(decoder.readFloat32(), 1), -1));\n    let weapons = decoder.readUint8();\n    this.axles.get(\"primary-weapon\").setValue(weapons & 0b00000001);\n    this.axles.get(\"miner\").setValue(weapons & 0b00000010);\n    this.updateAxises();\n  }\n\n  toBinary(encoder) {\n    encoder.writeFloat32(this.axles.get(\"x\").getValue());\n    encoder.writeFloat32(this.axles.get(\"y\").getValue());\n    let weapons = (this.isPrimaryWeaponActive() & 1) << 0 | (this.isMinerActive() & 1) << 1;\n    encoder.writeUint8(weapons);\n  }\n\n}\n\nmodule.exports = TankControls;","deps":{"./axle":"/Users/Temich/PycharmProjects/tanks/src/tanks/controls/axle.js","../../serialization/binary/serializable.js":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/serializable.js"}},"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/binaryencoder.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/binaryencoder.js","source":"const Buffer = require('./buffer');\n\nconst BinaryPool = require('./binarypool');\n\nclass BinaryEncoder extends BinaryPool {\n  constructor(options) {\n    options = options || {};\n    super();\n    this.compileBuffer = new Buffer({\n      clazz: Uint16Array,\n      capacity: 512\n    });\n\n    this.writeInt8 = int8 => {\n      this.buffers.get(BinaryEncoder.INT8).push(int8);\n    };\n\n    this.writeUint8 = uint8 => {\n      this.buffers.get(BinaryEncoder.UINT8).push(uint8);\n    };\n\n    this.writeInt16 = int16 => {\n      this.buffers.get(BinaryEncoder.INT16).push(int16);\n    };\n\n    this.writeUint16 = uint16 => {\n      this.buffers.get(BinaryEncoder.UINT16).push(uint16);\n    };\n\n    this.writeInt32 = int32 => {\n      this.buffers.get(BinaryEncoder.INT32).push(int32);\n    };\n\n    this.writeUint32 = uint32 => {\n      this.buffers.get(BinaryEncoder.UINT32).push(uint32);\n    };\n\n    this.writeFloat32 = float32 => {\n      this.buffers.get(BinaryEncoder.FLOAT32).push(float32);\n    };\n\n    this.writeFloat64 = float64 => {\n      this.buffers.get(BinaryEncoder.FLOAT64).push(float64);\n    };\n\n    this.writeString = string => {\n      let buffer = this.buffers.get(BinaryEncoder.UINT16);\n\n      for (let i = 0, l = string.length; i < l; i++) {\n        let code = string.charCodeAt(i);\n        buffer.push(code);\n      }\n\n      buffer.push(0); // Adding string end character '\\0'\n    };\n\n    this.writeInt8Array = int8Array => this.buffers.get(BinaryEncoder.INT8).appendArray(int8Array);\n\n    this.writeUint8Array = uint8Array => this.buffers.get(BinaryEncoder.UINT8).appendArray(uint8Array);\n\n    this.writeInt16Array = int16Array => this.buffers.get(BinaryEncoder.INT16).appendArray(int16Array);\n\n    this.writeUint16Array = uint16Array => this.buffers.get(BinaryEncoder.UINT16).appendArray(uint16Array);\n\n    this.writeInt32Array = int32Array => this.buffers.get(BinaryEncoder.INT32).appendArray(int32Array);\n\n    this.writeUint32Array = uint32Array => this.buffers.get(BinaryEncoder.UINT32).appendArray(uint32Array);\n\n    this.writeFloat32Array = float32Array => this.buffers.get(BinaryEncoder.FLOAT32).appendArray(float32Array);\n\n    this.writeFloat64Array = float64Array => this.buffers.get(BinaryEncoder.FLOAT64).appendArray(float64Array);\n\n    this.buffers = new Map();\n    this.largeIndices = !!options.largeIndices;\n    this.writeIndexMode = !!options.writeIndexMode;\n    this.setupBuffers();\n  }\n\n  setupBuffers() {\n    for (let [type, buffer] of BinaryEncoder.bufferTypes.entries()) {\n      let newBuffer = buffer.clone();\n      newBuffer.createBuffer();\n      this.buffers.set(type, newBuffer);\n    }\n\n    this.compileBuffer.createBuffer();\n  }\n\n  reset() {\n    for (let buffer of this.buffers.values()) {\n      buffer.reset();\n    }\n  }\n  /**\n   * Writes signed byte to buffer\n   * @param int8 {number} value to write\n   */\n\n\n  compile() {\n    this.compileBuffer.reset();\n\n    if (this.largeIndices) {\n      for (let buffer of this.buffers.values()) {\n        this.compileBuffer.push(buffer.pointer & 0xFFFF);\n        this.compileBuffer.push(buffer.pointer >> 16 & 0xFFFF);\n      }\n    } else {\n      for (let buffer of this.buffers.values()) {\n        this.compileBuffer.push(buffer.pointer);\n      }\n    }\n\n    for (let buffer of this.buffers.values()) {\n      this.compileBuffer.appendBuffer(buffer);\n    }\n\n    if (this.writeIndexMode) {\n      let result = new Uint8Array(this.compileBuffer.pointer * 2 + 1);\n      result[0] = Number(this.largeIndices);\n      result.set(new Uint8Array(this.compileBuffer.toArrayBuffer()), 1);\n      return result.buffer;\n    } else {\n      return this.compileBuffer.toArrayBuffer();\n    }\n  }\n\n}\n\nBinaryEncoder.shared = new BinaryEncoder();\nmodule.exports = BinaryEncoder;","deps":{"./buffer":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/buffer.js","./binarypool":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/binarypool.js"}},"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js","source":"const BinarySerializable = require(\"../serialization/binary/serializable\");\n\nconst BinaryEncoder = require(\"../serialization/binary/binaryencoder\");\n\nconst BinaryDecoder = require(\"../serialization/binary/binarydecoder\");\n/**\n * @abstract\n * This class is a binary data packet that can be transmitted over a\n * network with low redundancy. There is two packet types: standalone\n * and contextual. Standalone packets do not require any other data in\n * order to record and read information. Contextual packets only read\n * information when used by handlers.\n *\n * To create a standalone packet, inherit this class in the same way\n * as {@link BinarySerializable}. Then, in the\n * {@link BinaryPacket#fromBinary fromBinary} static function, you can\n * read data from the decoder and return an instance of your package.\n *\n * To create a context packet, you only need to overwrite the\n * {@link BinaryPacket#typeName typeName} static function.\n * {@link BinaryPacket} itself will take care of instantiating your package\n * and writing the decoder to the {@link BinaryPacket.decoder decoder}\n * field. Then you will be able to use the obtained data in any method\n * you create. In this way, you will only be able to read the data\n * when the handler accesses the package, with the possible\n * transmission of any contextual information. Please note that your\n * data will not be available after the packet is processed as the\n * decoder buffer is released for reuse.\n */\n\n\nclass BinaryPacket extends BinarySerializable {\n  constructor() {\n    super();\n    /**\n     * @type {ArrayBuffer} Compiled binary data of the packet.\n     */\n\n    this.data = null;\n    /**\n     * @type {BinaryDecoder} A decoder saved for the handlers.\n     * Valid until it is reused.\n     */\n\n    this.decoder = null;\n    /*\n     Considering that the buffer will only be reused after the\n     data packet is processed, we can store it for handlers to\n     use. (Although it's always going to be\n     BinaryDecoder.shared... Uhh... Nevermind...)\n     */\n  }\n\n  encode() {\n    let encoder = BinaryPacket.binaryEncoder;\n    encoder.largeIndices = this.constructor.requireLargeIndices;\n    encoder.reset();\n    BinaryPacket.serialize(this, encoder);\n    return encoder.compile();\n  }\n  /**\n   * When called once, packet get compiled and can no longer change\n   * its data\n   * @returns {ArrayBuffer} Packet data\n   */\n\n\n  getData() {\n    if (this.data == null) {\n      this.data = this.encode();\n    }\n\n    return this.data;\n  }\n  /**\n   * Sends the packet to WebSocket client. When called once, packet\n   * get compiled and can no longer change its data\n   * @param client The packet receiver.\n   */\n\n\n  sendTo(client) {\n    if (!this.shouldSend()) {\n      return;\n    }\n\n    if (client.connection.readyState !== 1) {\n      return;\n    }\n\n    client.connection.send(this.getData());\n  }\n\n  shouldSend() {\n    return true;\n  }\n\n  static fromBinary(decoder) {\n    let packet = new this();\n    packet.decoder = decoder;\n    return packet;\n  }\n\n}\n\nBinaryPacket.SERIALIZATION_GROUP_NAME = 3;\nBinaryPacket.requireLargeIndices = false;\nBinaryPacket.binaryEncoder = new BinaryEncoder({\n  writeIndexMode: true\n});\nBinaryPacket.binaryDecoder = new BinaryDecoder({\n  readIndexMode: true\n});\n\nBinaryPacket.groupName = () => BinaryPacket.SERIALIZATION_GROUP_NAME;\n\nmodule.exports = BinaryPacket;","deps":{"../serialization/binary/serializable":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/serializable.js","../serialization/binary/binaryencoder":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/binaryencoder.js","../serialization/binary/binarydecoder":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/binarydecoder.js"}},"/Users/Temich/PycharmProjects/tanks/src/serialization/serializationgroup.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/serialization/serializationgroup.js","source":"class Group {\n  constructor() {\n    this.array = [];\n  }\n\n  register(clazz) {\n    const clazzType = clazz.typeName();\n\n    for (let eachClazz of this.array) {\n      if (eachClazz.typeName() === clazzType) {\n        throw new Error(`Type name '${clazzType}' is already registered in this group.`);\n      }\n    }\n\n    this.array.push(clazz);\n  }\n\n  get(type) {\n    for (let eachClazz of this.array) {\n      if (eachClazz.typeName() === type) {\n        return eachClazz;\n      }\n    }\n\n    return null;\n  }\n\n}\n\nmodule.exports = Group;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/serializable.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/serializable.js","source":"const Group = require(\"../serializationgroup\");\n/**\n * @abstract\n * This abstract class allows to serialize and deserialize any object\n * into binary data. Subclasses should implement {@link toBinary},\n * {@link fromBinary} methods and static {@link typeName} function.\n * Separation between serialization groups is done by overriding\n * static {@link groupName} method. This class should never\n * be constructed directly.\n * Refer to the documentation of the appropriate methods.\n */\n\n\nclass BinarySerializable {\n  /**\n   * Returns newly created or cached group object for the provided key.\n   * @param key The key for group to be returned.\n   * @returns {Group} Returns group for this key.\n   */\n  static getGroup(key) {\n    let registry = BinarySerializable.groups[key];\n\n    if (!registry) {\n      registry = BinarySerializable.groups[key] = new Group();\n    }\n\n    return registry;\n  }\n  /**\n   * @abstract\n   * To serialize and deserialize subclass instances, use\n   * {@link serialize} and {@link deserialize} static\n   * functions. This function should never be called on {@link BinarySerializable} class.\n   * * @param {BinaryEncoder} encoder The encoder which will store object data\n   */\n\n\n  toBinary(encoder) {\n    throw new Error(\"Abstract class instancing is illegal\");\n  }\n  /**\n   * @abstract\n   * To serialize and deserialize the base class instances, use\n   * {@link serialize} and {@link deserialize} static functions.\n   * @param {BinaryDecoder} decoder The {@link BinaryDecoder} which contains source object data.\n   * @returns {BinarySerializable} The deserialized object\n   */\n\n\n  static fromBinary(decoder) {\n    throw new Error(\"Abstract class instancing is illegal\");\n  }\n  /**\n   * Uses {@link toBinary} method to serialize subclass instances to\n   * object. Suitable for network transporting. Call {@link deserialize} to get exact\n   * same object copy.\n   * @param {BinaryEncoder} encoder where object serialization will be stored.\n   * @param {BinarySerializable} object to be serialized\n   */\n\n\n  static serialize(object, encoder) {\n    if (object.constructor[\"name\"] === BinarySerializable.constructor[\"name\"]) {\n      throw new Error(`Cannot serialize abstract class.`);\n    }\n\n    encoder.writeInt16(object.constructor.typeName());\n    object.toBinary(encoder);\n  }\n  /**\n   * Uses {@link fromBinary} method to deserialize instance from\n   * binary data, returned by {@link serialize} function.\n   * @param {BinaryDecoder} decoder The object to be deserialized\n   * @param group {Number|Class} The serialization group name. Can be either undefined, number or {@link BinarySerializable} subclass.\n   * @returns {BinarySerializable} The deserialized object or `null` if base class was not found.\n   */\n\n\n  static deserialize(decoder, group) {\n    if (typeof group == \"function\") {\n      if (group.prototype instanceof BinarySerializable) {\n        group = group.groupName();\n      } else {\n        throw new Error(\"Illegal argument: second argument must be either undefined, number or 'BinarySerializable' subclass.\");\n      }\n    } else if (group === undefined) {\n      group = BinarySerializable.BASE_GROUP_NAME;\n    } else if (typeof group != \"number\") {\n      throw new Error(\"Illegal argument: second argument must be either undefined, number or 'BinarySerializable' subclass.\");\n    }\n\n    const type = decoder.readInt16();\n    const clazz = this.getGroup(group).get(type);\n\n    if (!clazz) {\n      return null;\n    }\n\n    return clazz.fromBinary(decoder);\n  }\n  /**\n   * @abstract\n   * Each registered subclass should have a type identifier to be\n   * deserialized. Return value should fit Int16 (-32,768 to +32,767)\n   * This function should never be called on {@link BinarySerializable} class instance\n   * @returns {number} Type identifier for specific {@link BinarySerializable}\n   * subclass.\n   */\n\n\n  static typeName() {\n    throw new Error(`Abstract class does not have type name.`);\n  }\n  /**\n   * Used to separate different serialization groups.\n   * @example\n   * // If you are about to serialize both `Entity`\n   * // and `Particle` classes, you would separate them\n   * // in different groups. With that being done, you will be\n   * // able to use same hardcoded type names for your entities\n   * // and particles.\n   *\n   * class Entity extends BinarySerializable {\n   *     static groupName() { return 1 } // Using group named \"1\" for entities\n   * }\n   *\n   * class Projectile extends Entity {\n   *     static typeName() { return 1 }\n   * }\n   * BinarySerializable.register(Projectile) // Don't forget to register class\n   *\n   * class Animal extends Entity {\n   *     static typeName() { return 2 }\n   * }\n   * BinarySerializable.register(Animal)\n   *\n   *\n   * // Using separate group to serialize particles\n   *\n   * class Particle extends BinarySerializable {\n   *     static groupName() { return 2 } // Using group named \"2\" for particles\n   * }\n   *\n   * class FireParticle extends Particle {\n   *     static typeName() { return 1 }\n   * }\n   * BinarySerializable.register(FireParticle)\n   *\n   * class ExplodeParticle extends Particle {\n   *     static typeName() { return 2 }\n   * }\n   * BinarySerializable.register(ExplodeParticle)\n   *\n   * @returns {number} Group name as unique number.\n   */\n\n\n  static groupName() {\n    return BinarySerializable.BASE_GROUP_NAME;\n  }\n  /**\n   * Writes {@link BinarySerializable} subclass to internal registry. This\n   * function should be used to deserialize your custom class with\n   * {@link deserialize} static function.\n   * @param {Class<BinarySerializable>} clazz The class to register.\n   */\n\n\n  static register(clazz) {\n    let group = clazz.groupName();\n    let registry = this.getGroup(group);\n    return registry.register(clazz);\n  }\n\n}\n\nBinarySerializable.BASE_GROUP_NAME = -1;\nBinarySerializable.groups = [];\nmodule.exports = BinarySerializable;","deps":{"../serializationgroup":"/Users/Temich/PycharmProjects/tanks/src/serialization/serializationgroup.js"}},"/Users/Temich/PycharmProjects/tanks/src/tanks/tankmodel.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/tanks/tankmodel.js","source":"const TankBehaviour = require(\"../tanks/physics/tankbehaviour\");\n\nconst TankControls = require(\"./controls/tankcontrols\");\n\nconst RotationalMatrix = require(\"../utils/rotationalmatrix\");\n\nconst BinarySerializable = require(\"../serialization/binary/serializable\");\n\nconst Box2D = require(\"../library/box2d\");\n/**\n * Tank model. Сombines the physical model\n * of the tank, its behavior and controls.\n * This class used both on client and server\n * side. Can be updated dynamically through\n * binary serialization.\n */\n\n\nclass TankModel extends BinarySerializable {\n  /**\n   * Physical behaviour of this tank\n   * @type TankBehaviour\n   */\n\n  /**\n   * Box2D World, containing this tank.\n   * @type b2World\n   */\n\n  /**\n   * Box2D body of this tank.\n   * @type b2Body\n   */\n\n  /**\n   * @type TankControls\n   */\n\n  /**\n   * @type number\n   */\n\n  /**\n   * @type RotationalMatrix\n   */\n\n  /**\n   * @type b2Vec2\n   */\n  constructor() {\n    super();\n    this.behaviour = null;\n    this.world = null;\n    this.body = null;\n    this.controls = null;\n    this.health = 0;\n    this.matrix = null;\n    this.targetPosition = void 0;\n    this.behaviour = null;\n    this.world = null;\n    this.body = null;\n    this.controls = new TankControls(this);\n    this.health = this.constructor.getMaximumHealth();\n    this.matrix = new RotationalMatrix();\n    this.targetPosition = null;\n  }\n\n  initPhysics(world) {\n    throw new Error(\"Abstract class instancing is invalid.\");\n  }\n\n  destroy() {\n    this.world.DestroyBody(this.body);\n  }\n\n  get x() {\n    return this.body.m_xf.position.x;\n  }\n\n  get y() {\n    return this.body.m_xf.position.y;\n  }\n\n  set x(x) {\n    this.body.m_xf.position.x = x;\n  }\n\n  set y(y) {\n    this.body.m_xf.position.y = y;\n  }\n\n  get rotation() {\n    return this.body.m_sweep.a;\n  }\n\n  set rotation(rotation) {\n    this.body.m_sweep.a = rotation;\n    this.matrix.angle(rotation);\n  }\n\n  static getWeapon() {\n    throw new Error(\"Abstract class instancing is illegal\");\n  }\n\n  static canPlaceMines() {\n    return true;\n  }\n\n  static getMaximumHealth() {\n    return 10;\n  }\n\n  static getId() {\n    return 0;\n  } // Serialization stuff\n\n\n  toBinary(encoder) {}\n\n  static fromBinary(decoder) {\n    return new this();\n  }\n\n  static typeName() {\n    return this.getId();\n  }\n\n  static groupName() {\n    return this.SERIALIZATION_GROUP_NAME;\n  }\n\n}\n\nTankModel.SERIALIZATION_GROUP_NAME = 4;\nTankModel.Types = new Map();\nmodule.exports = TankModel;","deps":{"../library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","../utils/rotationalmatrix":"/Users/Temich/PycharmProjects/tanks/src/utils/rotationalmatrix.js","../tanks/physics/tankbehaviour":"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/tankbehaviour.js","./controls/tankcontrols":"/Users/Temich/PycharmProjects/tanks/src/tanks/controls/tankcontrols.js","../serialization/binary/serializable":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/serializable.js"}},"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/binarypool.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/binarypool.js","source":"const Buffer = require('./buffer');\n\nclass BinaryPool {}\n\nBinaryPool.INT8 = 0;\nBinaryPool.UINT8 = 1;\nBinaryPool.INT16 = 2;\nBinaryPool.UINT16 = 3;\nBinaryPool.INT32 = 4;\nBinaryPool.UINT32 = 5;\nBinaryPool.FLOAT32 = 6;\nBinaryPool.FLOAT64 = 7;\nBinaryPool.bufferTypes = new Map([[BinaryPool.INT8, new Buffer({\n  clazz: Int8Array,\n  capacity: 128\n})], [BinaryPool.UINT8, new Buffer({\n  clazz: Uint8Array,\n  capacity: 128\n})], [BinaryPool.INT16, new Buffer({\n  clazz: Int16Array,\n  capacity: 128\n})], [BinaryPool.UINT16, new Buffer({\n  clazz: Uint16Array,\n  capacity: 128\n})], [BinaryPool.INT32, new Buffer({\n  clazz: Int32Array,\n  capacity: 128\n})], [BinaryPool.UINT32, new Buffer({\n  clazz: Uint32Array,\n  capacity: 128\n})], [BinaryPool.FLOAT32, new Buffer({\n  clazz: Float32Array,\n  capacity: 128\n})], [BinaryPool.FLOAT64, new Buffer({\n  clazz: Float64Array,\n  capacity: 128\n})]]);\nmodule.exports = BinaryPool;","deps":{"./buffer":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/buffer.js"}},"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/binarydecoder.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/binarydecoder.js","source":"const BinaryPool = require('./binarypool');\n\nconst BinaryBuffer = require(\"./buffer\");\n\nclass BinaryDecoder extends BinaryPool {\n  /**\n   * Shared instance of `BinaryDecoder`\n   * @type {BinaryDecoder}\n   */\n  constructor(options) {\n    options = options || {};\n    super();\n\n    this.readInt8 = n => this.buffers.get(BinaryPool.INT8).next(n);\n\n    this.readUint8 = n => this.buffers.get(BinaryPool.UINT8).next(n);\n\n    this.readInt16 = n => this.buffers.get(BinaryPool.INT16).next(n);\n\n    this.readUint16 = n => this.buffers.get(BinaryPool.UINT16).next(n);\n\n    this.readInt32 = n => this.buffers.get(BinaryPool.INT32).next(n);\n\n    this.readUint32 = n => this.buffers.get(BinaryPool.UINT32).next(n);\n\n    this.readFloat32 = n => this.buffers.get(BinaryPool.FLOAT32).next(n);\n\n    this.readFloat64 = n => this.buffers.get(BinaryPool.FLOAT64).next(n);\n\n    this.readString = () => {\n      let buffer = this.buffers.get(BinaryPool.UINT16);\n      let codes = [];\n      let code;\n\n      while ((code = buffer.next()) !== 0) {\n        codes.push(code);\n      }\n\n      return String.fromCharCode.apply(null, codes);\n    };\n\n    this.largeIndices = options.largeIndices;\n    this.readIndexMode = options.readIndexMode;\n    /** @type {Map<Number, BinaryBuffer>} */\n\n    this.buffers = new Map();\n    this.setupBuffers();\n  }\n  /**\n   * Reads binary data to buffers. Then\n   * it's possible to use read functions\n   * as `readString` or `readUint32`\n   * @param array {ArrayBuffer} Data buffer to read.\n   */\n\n\n  readData(array) {\n    let compilerBytes = Uint16Array.BYTES_PER_ELEMENT;\n    let bufferIndex = 0;\n    let arrayPointer = 0;\n    let offset = compilerBytes * BinaryPool.bufferTypes.size;\n\n    if (this.readIndexMode) {\n      this.largeIndices = !!new Uint8Array(array, 0, 1)[0];\n      array = array.slice(1);\n    }\n\n    if (this.largeIndices) {\n      offset *= 2;\n    }\n\n    for (let buffer of this.buffers.values()) {\n      let size;\n\n      if (this.largeIndices) {\n        let words = new Uint16Array(array, compilerBytes * bufferIndex * 2, 2);\n        size = words[0] + (words[1] << 16);\n      } else {\n        size = new Uint16Array(array, compilerBytes * bufferIndex, 1)[0];\n      }\n\n      if (size === 0) {\n        bufferIndex++;\n        continue;\n      }\n\n      let bytes = buffer.clazz.BYTES_PER_ELEMENT;\n      let alignment = Math.max(bytes, compilerBytes);\n      arrayPointer = Math.ceil(arrayPointer / alignment) * alignment;\n      buffer.read(array, offset + arrayPointer, size);\n      arrayPointer += size * bytes;\n      bufferIndex++;\n    }\n  }\n  /**\n   * Private function. Should never be used outside.\n   */\n\n\n  setupBuffers() {\n    for (let [type, buffer] of BinaryPool.bufferTypes.entries()) {\n      let newBuffer = buffer.clone();\n      newBuffer.createBuffer();\n      this.buffers.set(type, newBuffer);\n    }\n  } // Reading functions\n\n  /**\n   * Reads and returns an signed 8-bit integer or `Int8Array` when `n > 1`.\n   * @param n{Number?} Number of entries to read.\n   */\n\n\n  // Operating buffer pointers\n\n  /**\n   * Resets pointer of each buffer\n   */\n  reset() {\n    for (let buffer of this.buffers.values()) {\n      buffer.reset();\n    }\n  }\n  /**\n   * Saves pointer state of each buffer.\n   * Return to the last saved state\n   * by calling `restore` method\n   */\n\n\n  save() {\n    for (let buffer of this.buffers.values()) {\n      buffer.save();\n    }\n  }\n  /**\n   * Restores last saved pointer state\n   * of each buffer. See also `save`\n   */\n\n\n  restore() {\n    for (let buffer of this.buffers.values()) {\n      buffer.save();\n    }\n  }\n\n}\n\nBinaryDecoder.shared = new BinaryDecoder();\nmodule.exports = BinaryDecoder;","deps":{"./buffer":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/buffer.js","./binarypool":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/binarypool.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/networking/client.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/networking/client.js","source":"const BinaryPacket = require(\"../../networking/binarypacket\");\n\nconst BinaryDecoder = require(\"../../serialization/binary/binarydecoder\");\n\nclass Client {\n  constructor(config) {\n    this.config = config;\n    this.socket = null;\n    this.connected = false;\n    this.listeners = new Map();\n    this.queue = [];\n  }\n\n  on(what, handler) {\n    if (this.listeners.has(what)) {\n      this.listeners.get(what).push(handler);\n    } else {\n      this.listeners.set(what, [handler]);\n    }\n  }\n\n  emit(event) {\n    let listeners = this.listeners.get(event);\n    let args = Array.prototype.slice.call(arguments, 1);\n\n    if (listeners) {\n      for (let listener of listeners) {\n        listener.apply(null, args);\n      }\n    }\n  }\n\n  connectToServer() {\n    if (this.socket != null) throw new Error(\"Client object cannot be reused\");\n    this.socket = new WebSocket(this.config.ip);\n    this.socket.binaryType = \"arraybuffer\";\n    let self = this;\n\n    this.socket.onopen = event => self.onopen(event);\n\n    this.socket.onclose = event => self.onclose(event);\n\n    this.socket.onerror = event => self.onerror(event);\n\n    this.socket.onmessage = event => self.onmessage(event);\n  }\n\n  onopen() {\n    this.connected = true;\n\n    for (let packet of this.queue) {\n      this.send(packet);\n    }\n\n    this.queue = [];\n    this.emit(\"open\");\n  }\n\n  onmessage(event) {\n    if (event.data instanceof ArrayBuffer) {\n      let decoder = BinaryPacket.binaryDecoder;\n      decoder.reset();\n      decoder.readData(event.data);\n      let packet = BinaryPacket.deserialize(decoder, BinaryPacket);\n\n      if (packet) {\n        for (let [clazz, listeners] of this.listeners) {\n          if (clazz instanceof Function && packet.constructor === clazz) {\n            for (let listener of listeners) {\n              listener(packet);\n            }\n          }\n        }\n      } else {\n        decoder.reset();\n        console.warn(\"Unknown packet type: \" + decoder.readUint16());\n      }\n    } else if (typeof event.data == \"string\") {\n      this.emit(\"string\", event.data);\n    }\n  }\n\n  onerror(error) {\n    this.emit(\"error\", error);\n    this.connected = false;\n  }\n\n  onclose(event) {\n    this.emit(\"close\", event);\n    this.connected = false;\n  }\n\n  send(packet) {\n    if (this.socket.readyState === WebSocket.OPEN) {\n      if (packet instanceof BinaryPacket) {\n        this.socket.send(packet.getData());\n      } else if (typeof packet == \"string\") {\n        this.socket.send(packet);\n      }\n    } else if (this.socket.readyState === WebSocket.CONNECTING) {\n      this.queue.push(packet);\n    }\n  }\n\n}\n\nmodule.exports = Client;","deps":{"../../serialization/binary/binarydecoder":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/binarydecoder.js","../../networking/binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/rectangle.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/rectangle.js","source":"class Rectangle {\n  constructor(x1, y1, x2, y2) {\n    this.x1 = null;\n    this.y1 = null;\n    this.x2 = null;\n    this.y2 = null;\n    this.minX = null;\n    this.maxX = null;\n    this.minY = null;\n    this.maxY = null;\n\n    if (arguments.length === 4) {\n      this.x1 = x1;\n      this.x2 = x2;\n      this.y1 = y1;\n      this.y2 = y2;\n      this.refreshBounds();\n    }\n  }\n\n  isValid() {\n    return Number.isFinite(this.x1) && Number.isFinite(this.x2) && Number.isFinite(this.y1) && Number.isFinite(this.y2);\n  }\n\n  contains(x, y) {\n    return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;\n  }\n\n  centerX() {\n    return (this.x1 + this.x2) / 2;\n  }\n\n  centerY() {\n    return (this.y1 + this.y2) / 2;\n  }\n\n  width() {\n    return this.maxX - this.minX;\n  }\n\n  height() {\n    return this.maxY - this.minY;\n  }\n\n  invalidate() {\n    this.x1 = null;\n    this.x2 = null;\n    this.y1 = null;\n    this.y2 = null;\n    this.minX = null;\n    this.maxX = null;\n    this.minY = null;\n    this.maxY = null;\n  }\n\n  refreshBounds() {\n    this.minX = Math.min(this.x1, this.x2);\n    this.maxX = Math.max(this.x1, this.x2);\n    this.minY = Math.min(this.y1, this.y2);\n    this.maxY = Math.max(this.y1, this.y2);\n  }\n\n  translate(dx, dy) {\n    this.x1 += dx;\n    this.x2 += dx;\n    this.y1 += dy;\n    this.y2 += dy;\n    this.refreshBounds();\n  }\n\n  setFrom(x, y) {\n    this.x1 = x;\n    this.y1 = y;\n    this.refreshBounds();\n  }\n\n  setTo(x, y) {\n    this.x2 = x;\n    this.y2 = y;\n    this.refreshBounds();\n  }\n\n  equals(rect) {\n    return rect.x1 === this.x1 && rect.x2 === this.x2 && rect.y1 === this.y1 && rect.y2 === this.y2;\n  }\n\n  clone() {\n    return new Rectangle(this.x1, this.y1, this.x2, this.y2);\n  }\n\n  bounding(x1, y1, x2, y2) {\n    if (this.x1 > x1) x1 = this.x1;\n    if (this.x2 < x2) x2 = this.x2;\n    if (this.y1 > y1) y1 = this.y1;\n    if (this.y2 < y2) y2 = this.y2;\n    return new Rectangle(x1, y1, x2, y2);\n  }\n\n}\n\nmodule.exports = Rectangle;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/utils/map/spawnzone.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/map/spawnzone.js","source":"const Rectangle = require(\"../../utils/rectangle\");\n\nclass SpawnZone extends Rectangle {\n  constructor(id) {\n    super();\n    this.id = id;\n  }\n\n  static fromBinary(decoder) {\n    let zone = new this(decoder.readUint8());\n    zone.setFrom(decoder.readUint32(), decoder.readUint32());\n    zone.setTo(decoder.readUint32(), decoder.readUint32());\n    return zone;\n  }\n\n  toBinary(encoder) {\n    encoder.writeUint8(this.id);\n    encoder.writeUint32(this.x1);\n    encoder.writeUint32(this.y1);\n    encoder.writeUint32(this.x2);\n    encoder.writeUint32(this.y2);\n  }\n\n}\n\nmodule.exports = SpawnZone;","deps":{"../../utils/rectangle":"/Users/Temich/PycharmProjects/tanks/src/utils/rectangle.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/map/mapbinaryoptions.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/map/mapbinaryoptions.js","source":"const BinaryOptions = require(\"../binaryoptions\");\n\nconst BlockState = require(\"../../utils/map/blockstate/blockstate\");\n\nconst SpawnZone = require(\"./spawnzone\");\n\nclass MapBinaryOptions extends BinaryOptions {\n  constructor() {\n    super();\n    this.DATA_FLAG = 0x0000;\n    this.SIZE_FLAG = 0x0001;\n    this.SPAWN_ZONES_FLAG = 0x0002;\n    this.DEFAULT_WIDTH = 50;\n    this.DEFAULT_HEIGHT = 50;\n    this.addFlagHandler(new MapBinaryOptions.FlagHandler(this.SIZE_FLAG).setPacker((encoder, options) => {\n      encoder.writeUint32(options.width === undefined ? this.DEFAULT_WIDTH : options.width);\n      encoder.writeUint32(options.height === undefined ? this.DEFAULT_WIDTH : options.height);\n    }).setUnpacker((decoder, options) => {\n      options.width = decoder.readUint32();\n      options.height = decoder.readUint32();\n    }));\n    this.addFlagHandler(new MapBinaryOptions.FlagHandler(this.DATA_FLAG).setPacker((encoder, options) => {\n      for (let block of options.data) {\n        const Block = block.constructor;\n        encoder.writeUint8(Block.typeId);\n        const BinaryOptions = Block.BinaryOptions;\n        BinaryOptions.convertOptions(encoder, block);\n      }\n    }).setUnpacker((decoder, options) => {\n      if (options.width === undefined) options.width = this.DEFAULT_WIDTH;\n      if (options.height === undefined) options.height = this.DEFAULT_HEIGHT;\n      const size = options.width * options.height;\n      let blockOptions;\n      options.data = new Array(size);\n\n      for (let i = 0; i < size; i++) {\n        blockOptions = {};\n        const id = decoder.readUint8();\n        const Block = BlockState.getBlockStateClass(id);\n        const BinaryOptions = Block.BinaryOptions;\n        BinaryOptions.convertBinary(decoder, blockOptions);\n        options.data[i] = new Block({});\n      }\n    }));\n    this.addFlagHandler(new MapBinaryOptions.FlagHandler(this.SPAWN_ZONES_FLAG).setPacker((encoder, options) => {\n      encoder.writeUint16(options.spawnZones.length);\n\n      for (let zone of options.spawnZones) {\n        zone.toBinary(encoder);\n      }\n    }).setUnpacker((decoder, options) => {\n      let count = decoder.readUint16();\n      options.spawnZones = [];\n\n      while (count--) {\n        options.spawnZones.push(SpawnZone.fromBinary(decoder));\n      }\n    }));\n  }\n\n}\n\nMapBinaryOptions.shared = new MapBinaryOptions();\nmodule.exports = MapBinaryOptions;","deps":{"../binaryoptions":"/Users/Temich/PycharmProjects/tanks/src/utils/binaryoptions.js","./spawnzone":"/Users/Temich/PycharmProjects/tanks/src/utils/map/spawnzone.js","../../utils/map/blockstate/blockstate":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstate.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/controls/buttonaxle.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/controls/buttonaxle.js","source":"const Axle = require(\"../../tanks/controls/axle\");\n\nclass ButtonAxle extends Axle {\n  constructor(min, max) {\n    super();\n    this.min = min === undefined ? 0 : min;\n    this.max = max === undefined ? 1 : max;\n    this.ownValue = this.min;\n    this.animationTime = 0;\n    this.target = 0; // Internals\n\n    this.keypressTimestamp = 0;\n    this.pressed = false;\n  }\n\n  keyPressed(value) {\n    if (value === undefined) {\n      this.target = this.max;\n    } else {\n      this.target = this.max * value + this.min * (1 - value);\n    }\n\n    this.keypressTimestamp = Date.now();\n    this.setNeedsUpdate();\n  }\n\n  keyReleased() {\n    this.target = this.min;\n    this.keypressTimestamp = Date.now();\n    this.setNeedsUpdate();\n  }\n\n  smooth(time) {\n    this.animationTime = time || 0.25;\n    return this;\n  }\n\n  reverse() {\n    this.max = -this.max;\n    this.min = -this.min;\n    return this;\n  }\n\n  getValue() {\n    if (this.animationTime <= 0) {\n      this.ownValue = this.keyPressed ? this.max : this.min;\n    }\n\n    this.update = false;\n    let now = Date.now();\n    let dt = (now - this.keypressTimestamp) / 1000;\n    this.keypressTimestamp = now;\n\n    if (this.target > this.ownValue) {\n      this.ownValue += dt / this.animationTime;\n      if (this.target < this.ownValue) this.ownValue = this.target;\n    } else if (this.target < this.ownValue) {\n      this.ownValue -= dt / this.animationTime;\n      if (this.target > this.ownValue) this.ownValue = this.target;\n    }\n\n    if (this.ownValue !== this.target) this.setNeedsUpdate();\n    return this.ownValue;\n  }\n\n}\n\nmodule.exports = ButtonAxle;","deps":{"../../tanks/controls/axle":"/Users/Temich/PycharmProjects/tanks/src/tanks/controls/axle.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/controls/keyaxle.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/controls/keyaxle.js","source":"const ButtonAxle = require(\"./buttonaxle\");\n\nclass KeyAxle extends ButtonAxle {\n  constructor(keyboard, key, min, max) {\n    super(min, max);\n    this.key = key;\n    keyboard.on(\"keydown\", event => {\n      if (event.code === this.key) this.keyPressed();\n    });\n    keyboard.on(\"keyup\", event => {\n      if (event.code === this.key) this.keyReleased();\n    });\n  }\n\n}\n\nmodule.exports = KeyAxle;","deps":{"./buttonaxle":"/Users/Temich/PycharmProjects/tanks/src/client/controls/buttonaxle.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/keyboardcontroller.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/keyboardcontroller.js","source":"const DocumentEventHandler = require(\"./documenteventhandler\");\n\nconst KeyAxle = require(\"../keyaxle\");\n\nclass KeyboardController extends DocumentEventHandler {\n  constructor() {\n    super();\n    this.keys = new Set();\n    this.keybindings = [];\n    this.isMacOS = navigator.userAgent.indexOf(\"Mac\") !== -1;\n  }\n\n  keybinding(name, handler) {\n    let parts = name.split(\"-\");\n    let cmd = parts.indexOf(\"Cmd\") !== -1;\n    let shift = parts.indexOf(\"Shift\") !== -1;\n    let alt = parts.indexOf(\"Alt\") !== -1;\n    let key = parts.pop();\n    this.on(\"keydown\", event => {\n      let eventCmd = this.isMacOS ? event.metaKey : event.ctrlKey;\n      let eventShift = event.shiftKey;\n      let eventAlt = event.altKey;\n      let eventKey = event.code;\n      if (eventKey.startsWith(\"Key\")) eventKey = eventKey.substr(3);\n      if (eventCmd !== cmd) return;\n      if (eventShift !== shift) return;\n      if (eventAlt !== alt) return;\n      if (eventKey !== key) return;\n      event.preventDefault();\n      handler(event);\n    });\n  }\n\n  startListening() {\n    this.bind(\"keyup\", this.keyup);\n    this.bind(\"keydown\", this.keydown);\n  }\n\n  keyPressed() {\n    for (let argument of arguments) {\n      if (this.keys.has(argument)) return true;\n    }\n\n    return false;\n  }\n\n  keyPressedOnce(key) {\n    if (this.keys.has(key)) {\n      this.keys.delete(key);\n      return true;\n    }\n\n    return false;\n  }\n\n  keyup(e) {\n    this.emit(\"keyup\", e);\n    this.keys.delete(e.code);\n  }\n\n  keydown(e) {\n    if (e.repeat) {\n      e.preventDefault();\n      return;\n    }\n\n    this.emit(\"keydown\", e);\n    this.keys.add(e.code);\n  }\n\n  getKeyAxle(key, min, max) {\n    return new KeyAxle(this, key, min, max);\n  }\n\n}\n\nmodule.exports = KeyboardController;","deps":{"./documenteventhandler":"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/documenteventhandler.js","../keyaxle":"/Users/Temich/PycharmProjects/tanks/src/client/controls/keyaxle.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstatebinaryoptions.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstatebinaryoptions.js","source":"const BinaryOptions = require(\"../../binaryoptions\");\n\nclass BlockStateBinaryOptions extends BinaryOptions {\n  constructor() {\n    super();\n    this.trimFlagIdentifier = true;\n    this.addFlagHandler(new BinaryOptions.FlagHandler(BlockStateBinaryOptions.DAMAGE_FLAG).setUnpacker((decoder, object) => {\n      object.damage = decoder.readUint16() / 0xFFFF;\n    }).setPacker((encoder, object) => {\n      encoder.writeUint16(object.damage * 0xFFFF);\n    }).packDecision(object => {\n      return Number.isFinite(object.damage) && object.damage > 0;\n    }));\n  }\n\n}\n\nBlockStateBinaryOptions.DAMAGE_FLAG = 0x0001;\nBlockStateBinaryOptions.shared = new BlockStateBinaryOptions();\nmodule.exports = BlockStateBinaryOptions;","deps":{"../../binaryoptions":"/Users/Temich/PycharmProjects/tanks/src/utils/binaryoptions.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstate.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstate.js","source":"const BlockStateBinaryOptions = require(\"./blockstatebinaryoptions\");\n\nclass BlockState {\n  /**\n   * @type {Map<number, Class<BlockState>>}\n   */\n  constructor(options) {\n    options = options || {};\n    this.damage = options.damage || 0;\n    this.solid = options.solid || this.constructor.isSolid;\n    this.facing = 0;\n  }\n\n  clone() {\n    return new this.constructor(this);\n  }\n\n  update(map, x, y) {\n    if (this.facing !== -1) {\n      this.updateNeighbourFacing(map, x, y);\n    }\n  }\n\n  getNeighbourId(map, x, y) {\n    let block = map.getBlock(x, y);\n    if (block) return block.constructor.typeId;\n    return 0;\n  }\n\n  updateNeighbourFacing(map, x, y) {\n    const id = this.constructor.typeId;\n    this.facing = 0;\n    let sides = 0;\n    sides |= (this.getNeighbourId(map, x - 1, y - 1) === id) << 7;\n    sides |= (this.getNeighbourId(map, x, y - 1) === id) << 6;\n    sides |= (this.getNeighbourId(map, x + 1, y - 1) === id) << 5;\n    sides |= (this.getNeighbourId(map, x + 1, y) === id) << 4;\n    sides |= (this.getNeighbourId(map, x + 1, y + 1) === id) << 3;\n    sides |= (this.getNeighbourId(map, x, y + 1) === id) << 2;\n    sides |= (this.getNeighbourId(map, x - 1, y + 1) === id) << 1;\n    sides |= (this.getNeighbourId(map, x - 1, y) === id) << 0;\n    sides |= sides << 8;\n\n    for (let i = 0; i < 4; i++) {\n      let t = sides;\n      let corner = 4;\n\n      if (i === 0) {\n        t &= 0b00000111;\n      } else if (i === 1) {\n        t &= 0b00011100;\n        t >>= 2;\n      } else if (i === 2) {\n        t &= 0b01110000;\n        t >>= 4;\n      } else {\n        t &= 0b11000001;\n        t = t >> 6 | (t & 1) << 2;\n      }\n\n      if (t === 0b001) corner = 1;\n      if (t === 0b101) corner = 3;\n      if (t === 0b111) corner = 4;\n      if (t === 0b011) corner = 1;\n      if (t === 0b000) corner = 0;\n      if (t === 0b100) corner = 2;\n      if (t === 0b110) corner = 2;\n      if (t === 0b010) corner = 0;\n\n      if (i % 2 === 1) {\n        if (corner === 1) corner = 2;else if (corner === 2) corner = 1;\n      }\n\n      this.facing <<= 3;\n      this.facing |= corner;\n    }\n  }\n\n  getHealth() {\n    return this.constructor.health * (1 - this.damage);\n  }\n\n  setHealth(health) {\n    this.damage = 1 - health / this.constructor.health;\n  }\n\n  static registerBlockStateClass(clazz) {\n    this.Types.set(clazz.typeId, clazz);\n  }\n  /**\n   * @param id {Number}\n   * @returns {Class<BlockState>}\n   */\n\n\n  static getBlockStateClass(id) {\n    return this.Types.get(id) || BlockState;\n  }\n\n}\n\nBlockState.BinaryOptions = BlockStateBinaryOptions.shared;\nBlockState.Types = new Map();\nBlockState.health = 16000;\nBlockState.isSolid = true;\nBlockState.typeName = \"unspecified\";\nBlockState.typeId = 0;\nmodule.exports = BlockState;","deps":{"./blockstatebinaryoptions":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstatebinaryoptions.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/concreteblockstate.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/concreteblockstate.js","source":"const BlockState = require(\"../blockstate\");\n\nclass ConcreteBlockState extends BlockState {}\n\nConcreteBlockState.health = 6000;\nConcreteBlockState.typeName = \"concrete\";\nConcreteBlockState.typeId = 2;\nBlockState.registerBlockStateClass(ConcreteBlockState);\nmodule.exports = ConcreteBlockState;","deps":{"../blockstate":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstate.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/stoneblockstate.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/stoneblockstate.js","source":"const BlockState = require(\"../blockstate\");\n\nclass StoneBlockState extends BlockState {}\n\nStoneBlockState.health = 7500;\nStoneBlockState.typeName = \"stone\";\nStoneBlockState.typeId = 5;\nBlockState.registerBlockStateClass(StoneBlockState);\nmodule.exports = StoneBlockState;","deps":{"../blockstate":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstate.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/brickblockstate.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/brickblockstate.js","source":"const BlockState = require(\"../blockstate\");\n\nclass BrickBlockState extends BlockState {}\n\nBrickBlockState.health = 3000;\nBrickBlockState.typeName = \"brick\";\nBrickBlockState.typeId = 1;\nBlockState.registerBlockStateClass(BrickBlockState);\nmodule.exports = BrickBlockState;","deps":{"../blockstate":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstate.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/unbreakableblockstate.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/unbreakableblockstate.js","source":"const BlockState = require(\"../blockstate\");\n\nclass TrophephngoldBlockState extends BlockState {}\n\nTrophephngoldBlockState.health = Infinity;\nTrophephngoldBlockState.typeName = \"trophephngold\";\nTrophephngoldBlockState.typeId = 4;\nBlockState.registerBlockStateClass(TrophephngoldBlockState);\nmodule.exports = TrophephngoldBlockState;","deps":{"../blockstate":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstate.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/woodblockstate.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/woodblockstate.js","source":"const BlockState = require(\"../blockstate\");\n\nclass WoodBlockState extends BlockState {\n  constructor() {\n    super();\n    this.variant = Math.floor(Math.random() * 18);\n  }\n\n}\n\nWoodBlockState.health = 1500;\nWoodBlockState.typeName = \"wood\";\nWoodBlockState.typeId = 3;\nBlockState.registerBlockStateClass(WoodBlockState);\nmodule.exports = WoodBlockState;","deps":{"../blockstate":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstate.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstateloader.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstateloader.js","source":"/*\n * This file was auto-created while building the\n * project. Please, do not modify.\n */\nlet files = [];\nfiles.push(require(\"./types/airblockstate.js\"));\nfiles.push(require(\"./types/brickblockstate.js\"));\nfiles.push(require(\"./types/concreteblockstate.js\"));\nfiles.push(require(\"./types/stoneblockstate.js\"));\nfiles.push(require(\"./types/unbreakableblockstate.js\"));\nfiles.push(require(\"./types/woodblockstate.js\"));\nmodule.exports = files;","deps":{"./types/airblockstate.js":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/airblockstate.js","./types/concreteblockstate.js":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/concreteblockstate.js","./types/stoneblockstate.js":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/stoneblockstate.js","./types/brickblockstate.js":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/brickblockstate.js","./types/unbreakableblockstate.js":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/unbreakableblockstate.js","./types/woodblockstate.js":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/woodblockstate.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/ui/elements/dropdown/dropdown.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/ui/elements/dropdown/dropdown.js","source":"/* @load-resource: './dropdown.scss' */\nconst View = require(\"../../view\");\n\nclass Dropdown extends View {\n  constructor() {\n    super();\n    this.element.addClass(\"dropdown\");\n    this.element.on(\"click\", e => {\n      e.preventDefault();\n      e.stopPropagation();\n      this.toggle();\n      if (!this.collapsed) return;\n      let wrapper = $(e.target).closest(\".select-wrapper\");\n      if (!wrapper.length) return;\n      this.selectOption(wrapper);\n    });\n    $(document.body).click(() => this.collapse());\n    this.prototypeCell = $(\"<div>\").addClass(\"select-wrapper\");\n    this.collapsed = true;\n  }\n\n  collapse() {\n    if (this.collapsed) return;\n    this.collapsed = true;\n    this.element.removeClass(\"expanded\");\n    this.emit(\"collapse\");\n  }\n\n  expand() {\n    if (!this.collapsed) return;\n    this.collapsed = false;\n    this.element.addClass(\"expanded\");\n    this.emit(\"expand\");\n  }\n\n  toggle() {\n    this.collapsed ? this.expand() : this.collapse();\n  }\n\n  setOptionCount(count) {\n    let children = this.getOptions();\n\n    if (children.length > count) {\n      while (children.length > count) {\n        children.pop().remove();\n      }\n    } else if (children.length < count) {\n      while (children.length < count) {\n        this.element.append(this.prototypeCell.clone());\n        count--;\n      }\n    }\n  }\n  /**\n   * @return {jQuery}\n   */\n\n\n  getOptions() {\n    return this.element.children();\n  }\n\n  selectOption(option) {\n    this.element.find(\".select-wrapper.selected\").removeClass(\"selected\");\n\n    if (option) {\n      option.addClass(\"selected\");\n      this.element.addClass(\"selected\");\n    } else {\n      this.element.removeClass(\"selected\");\n    }\n\n    this.emit(\"select\", option);\n  }\n\n}\n\nmodule.exports = Dropdown;","deps":{"../../view":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/room-select/roomselectcontainer.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/room-select/roomselectcontainer.js","source":"/* @load-resource: './room-select.scss' */\nconst View = require(\"../../../../../ui/view\");\n\nconst Dropdown = require(\"../../../../../ui/elements/dropdown/dropdown\");\n\nclass RoomSelectContainer extends View {\n  constructor() {\n    super();\n    this.selectedRoom = null;\n    this.dropdown = new Dropdown();\n    this.element.append(this.dropdown.element);\n    this.element.addClass(\"menu room-select\");\n    this.dropdown.on(\"expand\", () => {\n      this.element.addClass(\"expanded\");\n    });\n    this.dropdown.on(\"collapse\", () => {\n      this.element.removeClass(\"expanded\");\n    });\n    this.dropdown.on(\"select\", option => {\n      let room = option.find(\".room-name\").text();\n      if (room === this.selectedRoom) return;\n      this.selectedRoom = room;\n      this.emit(\"select\", room);\n    });\n    this.dropdown.prototypeCell.append($(\"<span>\").addClass(\"room-name\")).append(\" (\").append($(\"<span>\").addClass(\"room-online\")).append(\" / \").append($(\"<span>\").addClass(\"room-max-online\")).append(\")\");\n  }\n\n  selectRoom(room) {\n    this.selectedRoom = room;\n    this.dropdown.getOptions().each((index, option) => {\n      option = $(option);\n\n      if (option.data(\"value\") === room) {\n        this.dropdown.selectOption(option);\n        return false;\n      }\n    });\n  }\n\n  updateRooms(rooms) {\n    this.dropdown.setOptionCount(rooms.length);\n    this.dropdown.getOptions().each((index, option) => {\n      option = $(option);\n      const room = rooms[index];\n      const disabled = room.online >= room.maxOnline;\n      option.data(\"value\", room.name);\n      if (disabled) option.addClass(\"disabled\");else option.removeClass(\"disabled\");\n      option.find(\".room-name\").text(room.name);\n      option.find(\".room-online\").text(room.online);\n      option.find(\".room-max-online\").text(room.maxOnline);\n\n      if (this.selectedRoom === room.name) {\n        this.dropdown.selectOption(option);\n      }\n    });\n  }\n\n}\n\nmodule.exports = RoomSelectContainer;","deps":{"../../../../../ui/view":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js","../../../../../ui/elements/dropdown/dropdown":"/Users/Temich/PycharmProjects/tanks/src/client/ui/elements/dropdown/dropdown.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/tank-preview/statscale.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/tank-preview/statscale.js","source":"const View = require(\"../../../../../ui/view\");\n\nclass StatScale extends View {\n  constructor() {\n    super();\n    this.element.addClass(\"stat\");\n    this.statScale = $(\"<div>\").addClass(\"stat-scale\");\n    this.value = $(\"<div>\").addClass(\"stat-value\");\n    this.title = $(\"<div>\").addClass(\"stat-title\");\n    this.element.append(this.statScale);\n    this.element.append(this.value);\n    this.element.append(this.title);\n    this.stat = null;\n  }\n\n  setStat(stat) {\n    this.stat = stat;\n    this.statScale.css(\"background\", stat.color);\n    this.value.css(\"color\", stat.color);\n    this.title.text(stat.name);\n  }\n\n  setValue(value) {\n    if (value) {\n      this.element.css(\"opacity\", \"\");\n      let fraction = this.stat.func(value, this.stat.maximum);\n      const size = 165 + fraction * 150;\n      this.statScale.css(\"width\", size + \"px\");\n      this.value.css(\"left\", size + 10 + \"px\");\n      this.value.text(value);\n    } else {\n      this.element.css(\"opacity\", \"0.5\");\n      this.statScale.css(\"width\", \"165px\");\n      this.value.css(\"left\", \"165px\");\n      this.value.text(\"\");\n    }\n  }\n\n}\n\nmodule.exports = StatScale;","deps":{"../../../../../ui/view":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/tank-preview/tankpreviewcontainer.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/tank-preview/tankpreviewcontainer.js","source":"/* @load-resource: './tank-preview.scss' */\nconst View = require(\"../../../../../ui/view\");\n\nconst StatScale = require(\"./statscale\");\n\nclass Stat {\n  constructor(options) {\n    this.name = options.name;\n    this.color = options.color;\n    this.maximum = options.maximum;\n    this.func = options.func || Stat.Linear();\n  }\n\n  static Linear(value, maximum) {\n    return value / maximum;\n  }\n\n  static Reversive(value, maximum) {\n    return maximum / value;\n  }\n\n}\n\nclass TankPreviewContainer extends View {\n  constructor() {\n    super();\n    this.element.addClass(\"menu tankinfo\");\n    this.tankPreview = $(\"<div></div>\").addClass(\"tank-preview\");\n    this.previewCanvas = $(\"<canvas></canvas>\");\n    let canvas = this.previewCanvas[0];\n    canvas.width = 155 * devicePixelRatio;\n    canvas.height = 155 * devicePixelRatio;\n    this.previewCtx = canvas.getContext(\"2d\");\n    this.previewCtx.scale(devicePixelRatio, devicePixelRatio);\n    this.previewTitle = $(\"<h1>\");\n    this.tankPreview.append(this.previewCanvas);\n    this.tankPreview.append(this.previewTitle);\n    this.statContainer = $(\"<div></div>\").addClass(\"tank-stats\");\n    this.descriptionBlock = $(\"<div></div>\").addClass(\"description\");\n    this.element.append(this.tankPreview);\n    this.element.append(this.statContainer);\n    this.element.append(this.descriptionBlock);\n    this.statElements = new Map();\n    this.setupStats();\n  }\n\n  setupStats() {\n    for (let [key, stat] of TankPreviewContainer.stats.entries()) {\n      let element = new StatScale();\n      this.statContainer.append(element.element);\n      element.setStat(stat);\n      this.statElements.set(key, element);\n    }\n  }\n\n  drawTank(tank) {\n    this.previewCtx.save();\n    this.previewCtx.clearRect(0, 0, 155, 155);\n    this.previewCtx.translate(155 / 2, 155 / 2);\n    this.previewCtx.scale(5, 5); // let drawer = new (tank.getDrawer())\n    // drawer.draw(this.previewCtx, null)\n\n    this.previewCtx.restore();\n  }\n\n  applyStats(tank) {\n    for (let [key, element] of this.statElements.entries()) {\n      const statValue = tank.getStats()[key];\n      element.setValue(statValue);\n    }\n  }\n\n  previewTank(tank) {\n    this.drawTank(tank);\n    this.previewTitle.text(tank.getName());\n    this.descriptionBlock.text(tank.getDescription());\n    this.applyStats(tank);\n  }\n\n}\n\nTankPreviewContainer.stats = new Map([[\"damage\", new Stat({\n  name: \"УРОН\",\n  color: \"#E82020\",\n  maximum: 7,\n  func: Stat.Linear\n})], [\"health\", new Stat({\n  name: \"БРОНЯ\",\n  color: \"#D657FF\",\n  maximum: 20,\n  func: Stat.Linear\n})], [\"speed\", new Stat({\n  name: \"СКОРОСТЬ\",\n  color: \"#FF8E26\",\n  maximum: 120,\n  func: Stat.Linear\n})], [\"shootrate\", new Stat({\n  name: \"СКОРОСТРЕЛЬНОСТЬ\",\n  color: \"#1CBCEF\",\n  maximum: 0.2,\n  func: Stat.Reversive\n})], [\"reload\", new Stat({\n  name: \"ПЕРЕЗАРЯДКА\",\n  color: \"#55D346\",\n  maximum: 1,\n  func: Stat.Reversive\n})]]);\nmodule.exports = TankPreviewContainer;","deps":{"../../../../../ui/view":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js","./statscale":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/tank-preview/statscale.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/tank-select/tankselectelement.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/tank-select/tankselectelement.js","source":"const View = require(\"../../../../../ui/view\");\n\nconst CanvasFactory = require(\"../../../../../utils/canvasfactory\");\n\nconst Sprite = require(\"../../../../../sprite\");\n\nclass TankSelectElement extends View {\n  /**\n   *\n   * @type {Class<ClientTank>}\n   */\n\n  /**\n   * @type {ClientTank}\n   */\n  constructor(options) {\n    super();\n    this.canvasSize = 70;\n    this.Tank = null;\n    this.tank = null;\n    this.Tank = options.Tank;\n    this.previewWorld = options.previewWorld;\n    this.previewCamera = options.previewCamera;\n    this.element.addClass(\"tank-preview-container\");\n    this.width = 120;\n    this.position = 0;\n    let factory = CanvasFactory();\n    this.canvas = factory.canvas;\n    this.canvas.className = \"preview-canvas\";\n    this.canvas.width = this.canvasSize * devicePixelRatio;\n    this.canvas.height = this.canvasSize * devicePixelRatio;\n    this.ctx = factory.ctx;\n    this.ctx.viewport(0, 0, this.ctx.drawingBufferWidth, this.ctx.drawingBufferHeight);\n    Sprite.applyTexture(this.ctx);\n    this.title = $(\"<div>\").addClass(\"tank-preview-title\");\n    this.title.text(this.Tank.getName());\n    this.element.append(this.canvas);\n    this.element.append(this.title);\n    this.element.on(\"click\", () => this.emit(\"click\"));\n    this.hidden = true;\n    this.element.hide();\n  }\n\n  setPosition(x) {\n    this.position = x;\n    this.element.css(\"left\", x);\n  }\n\n  show() {\n    this.hidden = false;\n    this.element.show();\n  }\n\n  hide() {\n    this.hidden = true;\n    this.element.hide();\n  }\n\n  createTank() {\n    this.tank = new this.Tank();\n    this.tank.setupDrawer(this.ctx);\n    this.tank.model.initPhysics(this.previewWorld);\n    const fixtureList = this.tank.model.body.GetFixtureList();\n    fixtureList.m_filter.maskBits = 0x000;\n    fixtureList.m_filter.categoryBits = 0x000;\n  }\n\n  getTank() {\n    if (!this.tank) this.createTank();\n    return this.tank;\n  }\n\n  draw(dt) {\n    this.ctx.clear(this.ctx.COLOR_BUFFER_BIT);\n    let tank = this.getTank();\n    tank.model.body.SetAngle(tank.model.body.GetAngle() + dt);\n    tank.drawer.draw(this.previewCamera, dt);\n  }\n\n}\n\nmodule.exports = TankSelectElement;","deps":{"../../../../../sprite":"/Users/Temich/PycharmProjects/tanks/src/client/sprite.js","../../../../../ui/view":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js","../../../../../utils/canvasfactory":"/Users/Temich/PycharmProjects/tanks/src/client/utils/canvasfactory.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/tank-select/tankselectcontainer.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/tank-select/tankselectcontainer.js","source":"/* @load-resource: './tank-select.scss' */\nconst View = require(\"../../../../../ui/view\");\n\nconst ClientTank = require(\"../../../../../tanks/clienttank\");\n\nconst SniperTank = require(\"../../../../../tanks/models/sniper\"); // Default selected tank\n\n\nconst TankSelectElement = require(\"./tankselectelement\");\n\nconst Camera = require(\"../../../../../camera\");\n\nconst Box2D = require(\"../../../../../../library/box2d\");\n\nconst RenderLoop = require(\"../../../../../../utils/loop/renderloop\");\n\nclass TankSelectContainer extends View {\n  constructor() {\n    super();\n    this.element.addClass(\"menu tankselect\");\n    this.shadowLeft = $(\"<div>\").addClass(\"shadow left\");\n    this.shadowRight = $(\"<div>\").addClass(\"shadow right\");\n    this.container = $(\"<div>\").addClass(\"tank-select-container\");\n    this.element.append(this.container, this.shadowLeft, this.shadowRight);\n    this.leftShadowHidden = false;\n    this.rightShadowHidden = false;\n    this.selectedTank = null;\n    this.previewCamera = new Camera({\n      baseScale: 2,\n      viewport: new Box2D.b2Vec2(70, 70),\n      defaultPosition: new Box2D.b2Vec2(0, 0),\n      inertial: true\n    });\n    this.previewCamera.tick(0);\n    this.previewWorld = new Box2D.b2World(new Box2D.b2Vec2(), true);\n    this.loop = new RenderLoop();\n\n    this.loop.run = dt => this.renderCards(dt);\n    /**\n     * @type {TankSelectElement[]}\n     */\n\n\n    this.containers = [];\n    this.setupList();\n    this.setupScroll();\n  }\n\n  setupList() {\n    let selectedTank = Number(localStorage.getItem(\"tanks-selectedtank\") || SniperTank.getModel().getId());\n    let tankExists = false;\n\n    for (let tank of ClientTank.Types.values()) {\n      if (tank.getModel().getId() === selectedTank) {\n        tankExists = true;\n        break;\n      }\n    }\n\n    if (!tankExists) {\n      selectedTank = SniperTank.getModel().getId();\n    } // Использую forEach здесь, чтобы создать область видимости.\n    // В for-in нельзя было бы юзать Tank в асинхронном коде.\n    // Пишу это, чтобы будущий я не злился на меня из прошлого,\n    // читая этот код. Знай, что переписать танчики стоило\n    // примерно месяц времени, там есть на что злиться. Можешь\n    // перечитать то что там понаписано, это звездец.\n    // Хотя с другой стороны, человек набирает опыт, и, возможно,\n    // в будущем я смогу применить более интересные практики для\n    // улучшения архитектуры и упрощения кода. Так что если ты\n    // взялся переписывать танчики снова, то флаг тебе в руки. Мне\n    // очень интересно что ты придумаешь через год-два. Мда. Из\n    // обычной пометки этот комментарий превратился в письмо в\n    // будущее. Классика.\n\n\n    let x = 20;\n    ClientTank.Types.forEach(Tank => {\n      let container = new TankSelectElement({\n        Tank: Tank,\n        previewWorld: this.previewWorld,\n        previewCamera: this.previewCamera\n      });\n      container.setPosition(x);\n      container.on(\"click\", () => this.selectTank(container));\n      this.container.append(container.element);\n      if (Tank.getModel().getId() === selectedTank) this.selectTank(container);\n      this.containers.push(container);\n      x += container.width;\n    });\n    this.updateCards();\n  }\n\n  renderCards(dt) {\n    for (let container of this.containers) {\n      if (container.hidden) continue;\n      container.draw(dt);\n    }\n  }\n\n  updateCards() {\n    let container = this.container.get(0);\n    let lowerBound = container.scrollX;\n    let upperBound = lowerBound + container.clientWidth;\n\n    for (let container of this.containers) {\n      let offset = container.position;\n\n      if (upperBound < offset.x) {\n        if (!container.hidden) container.hide();\n        continue;\n      }\n\n      let width = container.width;\n\n      if (lowerBound > offset.x + width) {\n        if (!container.hidden) container.hide();\n        continue;\n      }\n\n      if (container.hidden) container.show();\n    }\n  }\n\n  selectTank(container) {\n    const Tank = container.Tank;\n    this.element.find(\".tank-preview-container.selected\").removeClass(\"selected\");\n    container.element.addClass(\"selected\");\n    localStorage.setItem(\"tanks-selectedtank\", String(Tank.getModel().getId()));\n    this.selectedTank = Tank;\n    this.emit(\"select\", Tank);\n  }\n\n  setupScroll() {\n    this.container.on(\"scroll\", () => this.updateShadows());\n    this.updateShadows();\n    this.updateCards();\n  }\n\n  updateShadows() {\n    let container = this.container.get(0);\n    let leftEdge = container.scrollLeft === 0;\n    let rightEdge = container.scrollLeft === container.scrollWidth - container.clientWidth;\n\n    if (leftEdge && !this.leftShadowHidden) {\n      this.leftShadowHidden = true;\n      this.shadowLeft.css(\"opacity\", \"0\");\n    }\n\n    if (rightEdge && !this.rightShadowHidden) {\n      this.rightShadowHidden = true;\n      this.shadowRight.css(\"opacity\", \"0\");\n    }\n\n    if (!leftEdge && this.leftShadowHidden) {\n      this.leftShadowHidden = false;\n      this.shadowLeft.css(\"opacity\", \"1\");\n    }\n\n    if (!rightEdge && this.rightShadowHidden) {\n      this.rightShadowHidden = false;\n      this.shadowRight.css(\"opacity\", \"1\");\n    }\n  }\n\n}\n\nmodule.exports = TankSelectContainer;","deps":{"../../../../../camera":"/Users/Temich/PycharmProjects/tanks/src/client/camera.js","../../../../../../library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","../../../../../ui/view":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js","../../../../../tanks/clienttank":"/Users/Temich/PycharmProjects/tanks/src/client/tanks/clienttank.js","../../../../../../utils/loop/renderloop":"/Users/Temich/PycharmProjects/tanks/src/utils/loop/renderloop.js","../../../../../tanks/models/sniper":"/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/sniper.js","./tankselectelement":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/tank-select/tankselectelement.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/utils.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/utils.js","source":"class Utils {\n  static checkLineIntersection(line1StartX, line1StartY, line1EndX, line1EndY, line2StartX, line2StartY, line2EndX, line2EndY) {\n    let denominator, a, b, numerator1, numerator2;\n    const result = {\n      k: null,\n      onLine1: false,\n      onLine2: false\n    };\n    denominator = (line2EndY - line2StartY) * (line1EndX - line1StartX) - (line2EndX - line2StartX) * (line1EndY - line1StartY);\n\n    if (denominator === 0) {\n      return result;\n    }\n\n    a = line1StartY - line2StartY;\n    b = line1StartX - line2StartX;\n    numerator1 = (line2EndX - line2StartX) * a - (line2EndY - line2StartY) * b;\n    numerator2 = (line1EndX - line1StartX) * a - (line1EndY - line1StartY) * b;\n    a = numerator1 / denominator;\n    b = numerator2 / denominator;\n    result.k = a;\n\n    if (a > 0 && a < 1) {\n      result.onLine1 = true;\n    }\n\n    if (b > 0 && b < 1) {\n      result.onLine2 = true;\n    }\n\n    return result;\n  }\n\n  static trimFileExtension(name) {\n    let parts = name.split(\".\");\n    if (parts.length > 1) parts.pop();\n    return parts.join(\".\");\n  }\n\n  static random(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n\n}\n\nmodule.exports = Utils;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/server/entity/serverentity.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/server/entity/serverentity.js","source":"const AbstractEntity = require(\"../../entity/abstractentity\");\n\nconst Utils = require(\"../../utils/utils\");\n\nconst GameMap = require(\"../../utils/map/gamemap\");\n\nconst Box2D = require(\"../../library/box2d\");\n\nclass ServerEntity extends AbstractEntity {\n  /**\n   * @type {Game}\n   */\n  constructor(model) {\n    super(model);\n    this.game = null;\n    this.explodeResistance = 0.2;\n    model.id = ServerEntity.globalId++;\n  }\n\n  die() {\n    this.model.dead = true;\n  }\n\n  tick(dt) {\n    this.model.tick(dt);\n  }\n\n  checkPlayerHit(x, y, dx, dy) {\n    if (!this.shooter.tank) return null;\n    const a = x,\n          b = y;\n    const c = x + dx,\n          d = y + dy;\n    let distance = null;\n    let victim = null;\n\n    for (let player of this.shooter.tank.world.players.values()) {\n      if (this.shooter === player) continue;\n      const tank = player.tank;\n      const body = tank.model.body;\n      const position = body.GetPosition();\n      const playerX = position.x;\n      const playerY = position.y;\n      const sin = tank.model.matrix.sin;\n      const cos = tank.model.matrix.cos;\n\n      for (let v = body.GetFixtureList(); v; v = v.GetNext()) {\n        const shape = v.GetShape().GetVertices();\n\n        for (let i = shape.length - 1; i >= 0; i--) {\n          const vertex = shape[i];\n          let previousVertex;\n          if (i > 0) previousVertex = shape[i - 1];else previousVertex = shape[shape.length - 1];\n          const x1 = vertex.x * cos - vertex.y * sin + playerX;\n          const y1 = vertex.x * sin + vertex.y * cos + playerY;\n          const x2 = previousVertex.x * cos - previousVertex.y * sin + playerX;\n          const y2 = previousVertex.x * sin + previousVertex.y * cos + playerY;\n          const intersection = Utils.checkLineIntersection(a, b, c, d, x1, y1, x2, y2);\n\n          if (intersection.onLine1 && intersection.onLine2) {\n            if (!distance || distance > intersection.k) {\n              distance = intersection.k;\n              victim = player;\n            }\n          }\n        }\n      }\n    }\n\n    if (victim) {\n      return {\n        distance: distance,\n        victim: victim\n      };\n    }\n\n    return null;\n  } // TODO: переписать на distToSegment\n\n\n  checkWallHit(x, y, dx, dy) {\n    const steps = 10;\n    dx /= steps;\n    dy /= steps;\n\n    for (let i = 0; i < steps; i++) {\n      x += dx;\n      y += dy;\n      const bx = Math.floor(x / GameMap.BLOCK_SIZE);\n      const by = Math.floor(y / GameMap.BLOCK_SIZE);\n      let block = this.game.map.getBlock(bx, by);\n\n      if (block !== null) {\n        if (!block.constructor.isSolid) {\n          continue;\n        }\n      }\n\n      return {\n        point: new Box2D.b2Vec2(x - dx, y - dy),\n        block: new Box2D.b2Vec2(bx, by)\n      };\n    }\n\n    return null;\n  }\n\n  static fromModel(model) {\n    let type = this.types.get(model.constructor);\n\n    if (type) {\n      return new type(model);\n    }\n\n    return null;\n  }\n\n  static associate(serverClass, modelClass) {\n    this.types.set(modelClass, serverClass);\n  }\n\n}\n\nServerEntity.types = new Map();\nServerEntity.globalId = 0;\nmodule.exports = ServerEntity;","deps":{"../../library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","../../utils/map/gamemap":"/Users/Temich/PycharmProjects/tanks/src/utils/map/gamemap.js","../../utils/utils":"/Users/Temich/PycharmProjects/tanks/src/utils/utils.js","../../entity/abstractentity":"/Users/Temich/PycharmProjects/tanks/src/entity/abstractentity.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/map/gamemap.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/map/gamemap.js","source":"const EventEmitter = require('src/utils/eventemitter');\n\nconst MapBinaryOptions = require(\"./mapbinaryoptions\");\n\nconst BlockState = require(\"./blockstate/blockstate\");\n\nconst AirBlockState = require(\"./blockstate/types/airblockstate\");\n\nrequire(\"./blockstate/blockstateloader\");\n\nclass GameMap extends EventEmitter {\n  /**\n   *\n   * @type {BlockState[]}\n   */\n\n  /**\n   *\n   * @type {number}\n   */\n\n  /**\n   *\n   * @type {number}\n   */\n\n  /**\n   * @type {SpawnZone[]}\n   */\n  constructor(config) {\n    super();\n    this.data = [];\n    this.width = 0;\n    this.height = 0;\n    this.spawnZones = [];\n    config = config || {};\n    this.spawnZones = config.spawnZones || [];\n    this.width = config.width || GameMap.DEFAULT_WIDTH;\n    this.height = config.height || GameMap.DEFAULT_HEIGHT;\n    this.data = config.data;\n    this.needsUpdate = true;\n  }\n\n  getBlock(x, y) {\n    if (x < 0 || y < 0 || x >= this.width || y >= this.height) return null;\n    return this.data[x + this.width * y];\n  }\n\n  setBlock(x, y, block) {\n    let index = x + y * this.width;\n    this.data[index] = block;\n    const lowX = Math.max(0, x - 1);\n    const lowY = Math.max(0, y - 1);\n    const highX = Math.min(this.width - 1, x + 1);\n    const highY = Math.min(this.height - 1, y + 1);\n    let base = lowX + lowY * this.width;\n    index = base;\n\n    for (let by = lowY; by <= highY; by++) {\n      for (let bx = lowX; bx <= highX; bx++) {\n        this.data[index++].update(this, bx, by);\n      }\n\n      index = base += this.width;\n    }\n\n    this.emit(\"block-update\", x, y);\n  }\n\n  spawnPointForTeam(id) {\n    const zone = this.spawnZones[id];\n\n    if (!zone) {\n      return {\n        x: Math.random() * this.map.width * GameMap.BLOCK_SIZE,\n        y: Math.random() * this.map.height * GameMap.BLOCK_SIZE\n      };\n    }\n\n    const x = (Math.random() * (zone.x2 - zone.x1) + zone.x1) * GameMap.BLOCK_SIZE;\n    const y = (Math.random() * (zone.y2 - zone.y1) + zone.y1) * GameMap.BLOCK_SIZE;\n    return {\n      x: x,\n      y: y\n    };\n  }\n\n  damageBlock(x, y, d) {\n    x = Math.floor(x);\n    y = Math.floor(y);\n    let b = this.getBlock(x, y);\n    if (!b || b instanceof AirBlockState) return;\n    let health = b.getHealth();\n\n    if (health - d < 0) {\n      this.setBlock(x, y, new AirBlockState());\n    } else {\n      b.setHealth(health - d);\n      b.update(this, x, y);\n    }\n\n    this.emit(\"block-update\", x, y);\n  }\n\n  update() {\n    this.needsUpdate = false;\n    let x = 0,\n        y = 0;\n\n    for (let block of this.data) {\n      block.update(this, x, y);\n      x++;\n\n      if (x >= this.width) {\n        x -= this.width;\n        y++;\n      }\n    }\n  }\n\n  static fromBinary(decoder) {\n    let options = this.BinaryOptions.convertBinary(decoder);\n    return new this(options);\n  }\n\n  toBinary(encoder, flags) {\n    this.constructor.BinaryOptions.convertOptions(encoder, this, flags);\n  }\n\n}\n\nGameMap.BinaryOptions = MapBinaryOptions.shared;\nGameMap.BLOCK_SIZE = 20;\nmodule.exports = GameMap;","deps":{"src/utils/eventemitter":"/Users/Temich/PycharmProjects/tanks/src/utils/eventemitter.js","./blockstate/blockstate":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstate.js","./mapbinaryoptions":"/Users/Temich/PycharmProjects/tanks/src/utils/map/mapbinaryoptions.js","./blockstate/types/airblockstate":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/airblockstate.js","./blockstate/blockstateloader":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstateloader.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/explodepooldrawer.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/explodepooldrawer.js","source":"const Color = require('src/utils/color');\n\nconst ExplodeParticle = require(\"../../particles/explodeparticle\");\n\nconst PostProcessingProgram = require(\"../programs/postprocessingprogram\");\n\nconst Particle = require(\"../../particles/particle\");\n\nclass ExplodePoolDrawer {\n  constructor(camera, screen) {\n    this.screen = screen;\n    this.camera = camera;\n    this.program = new PostProcessingProgram(\"explosion-drawer\", this.screen.ctx);\n  }\n\n  draw(pool, dt) {\n    if (dt === 0) return;\n    this.program.use();\n    this.program.prepare();\n    this.screen.ctx.activeTexture(this.screen.ctx.TEXTURE15);\n    this.screen.ctx.bindTexture(this.screen.ctx.TEXTURE_2D, this.screen.inactiveFramebufferTexture());\n    this.program.textureUniform.set1i(15);\n\n    for (let row of pool.walkers.values()) {\n      for (let walker of row.values()) {\n        let normalized = pool.normalize(walker.power); //\n        // let decoration = new Particle({\n        //     width: 20,\n        //     height: 20,\n        //     x: walker.x,\n        //     y: walker.y,\n        //     dx: 0,\n        //     dy: 0,\n        //     color: new Color(255, 0, 0, pool.normalize(walker.power)),\n        //     scaling: 0,\n        //     lifetime: dt\n        // })\n        //\n        // pool.world.particles.push(decoration)\n        // continue\n\n        if (normalized < 0.3) continue;\n        let dx = 0;\n        let dy = 0;\n\n        for (let i = 0; i < 3; i++) {\n          let decoration = new ExplodeParticle({\n            width: 2 + normalized * 8,\n            height: 2 + normalized * 8,\n            x: walker.x + (Math.random() - 0.5) * pool.gridSize * 2,\n            y: walker.y + (Math.random() - 0.5) * pool.gridSize * 2,\n            dx: dx,\n            dy: dy,\n            scaling: 1 + normalized / 2,\n            lifetime: 0.6 - normalized / 2 + Math.random() * 0.3,\n            startOpacity: normalized / 2,\n            shifting: 1 - normalized * 2\n          });\n          pool.world.particles.push(decoration);\n        }\n      }\n    }\n\n    this.program.draw();\n  }\n\n}\n\nmodule.exports = ExplodePoolDrawer;","deps":{"src/utils/color":"/Users/Temich/PycharmProjects/tanks/src/utils/color.js","../programs/postprocessingprogram":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/postprocessingprogram.js","../../particles/particle":"/Users/Temich/PycharmProjects/tanks/src/client/particles/particle.js","../../particles/explodeparticle":"/Users/Temich/PycharmProjects/tanks/src/client/particles/explodeparticle.js"}},"/Users/Temich/PycharmProjects/tanks/src/effects/abstracteffect.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/effects/abstracteffect.js","source":"class AbstractEffect {\n  /**\n   * @type EffectModel\n   */\n\n  /**\n   * @param {EffectModel} model\n   */\n  constructor(model) {\n    this.model = void 0;\n    this.model = model;\n    this.dead = false;\n  }\n\n  tick(dt) {}\n  /**\n   * @type {Map<Class<EffectModel>, Class<AbstractEffect>>}\n   */\n\n\n  /**\n   * @param modelClass {Class<EffectModel>}\n   * @param effectClass {Class<AbstractEffect>}\n   */\n  static associate(modelClass, effectClass) {\n    this.Types.set(modelClass, effectClass);\n  }\n  /**\n   * @param model {EffectModel}\n   * @returns {AbstractEffect | null}\n   */\n\n\n  static fromModel(model) {\n    let clazz = this.Types.get(model.constructor);\n    if (!clazz) return null;\n    return new clazz(model);\n  }\n\n  die() {\n    this.dead = true;\n  }\n\n}\n\nAbstractEffect.Types = new Map();\nmodule.exports = AbstractEffect;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/client/effects/clienteffect.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/effects/clienteffect.js","source":"const AbstractEffect = require('src/effects/abstracteffect');\n\nclass ClientEffect extends AbstractEffect {}\n\nmodule.exports = ClientEffect;","deps":{"src/effects/abstracteffect":"/Users/Temich/PycharmProjects/tanks/src/effects/abstracteffect.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/effects/tank/clienttankeffect.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/effects/tank/clienttankeffect.js","source":"const ClientEffect = require(\"../clienteffect\");\n\nclass ClientTankEffect extends ClientEffect {\n  /**\n   * @param model {EffectModel}\n   * @param tank {ClientTank}\n   */\n  constructor(model, tank) {\n    super(model);\n    this.model = model;\n    this.tank = tank;\n  } // noinspection JSCheckFunctionSignatures\n\n  /**\n   * @param model {EffectModel}\n   * @param tank {ClientTank}\n   * @returns {ClientEffect | null}\n   */\n\n\n  static fromModel(model, tank) {\n    let clazz = this.Types.get(model.constructor);\n    if (!clazz) return null;\n    return (\n      /** @type ClientEffect */\n      new clazz(model, tank)\n    );\n  }\n\n}\n\nmodule.exports = ClientTankEffect;","deps":{"../clienteffect":"/Users/Temich/PycharmProjects/tanks/src/client/effects/clienteffect.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/htmlescape.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/htmlescape.js","source":"module.exports = function (text) {\n  return text.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n};","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/networking/packets/gamestatepacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/gamestatepacket.js","source":"const BinaryPacket = require(\"../binarypacket\");\n\nclass TankLocationsPacket extends BinaryPacket {\n  static typeName() {\n    return 4;\n  }\n  /**\n   * Creates a packet that contains information about\n   * location and speed of each player in your map.\n   * @param players {Map<Number, Player>} Tank map to be encoded\n   */\n\n\n  constructor(players) {\n    super();\n    this.players = players;\n  }\n\n  toBinary(encoder) {\n    encoder.writeUint16(this.players.size);\n\n    for (let [key, player] of this.players) {\n      encoder.writeUint32(key);\n      player.tank.encodeDynamicData(encoder);\n    }\n  }\n  /**\n   * Updates tank positions based on packet data.\n   * @param players {Map<Number, Player>} Map containing each player\n   */\n\n\n  updateTankLocations(players) {\n    if (!this.decoder) {\n      throw new Error(\"This packet is not valid anymore: The decoder buffer has been reused.\");\n    }\n\n    this.decoder.save();\n    let count = this.decoder.readUint16();\n\n    while (count--) {\n      let key = this.decoder.readUint32();\n      let player = players.get(key);\n      player.tank.decodeDynamicData(this.decoder, true);\n    }\n\n    this.decoder.restore();\n  }\n\n}\n\nBinaryPacket.register(TankLocationsPacket);\nmodule.exports = TankLocationsPacket;","deps":{"../binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js"}},"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerconfigpacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerconfigpacket.js","source":"const BinaryPacket = require(\"../binarypacket\");\n\nconst TankModel = require(\"../../tanks/tankmodel\");\n\nclass PlayerConfigPacket extends BinaryPacket {\n  static typeName() {\n    return 7;\n  }\n\n  constructor(nick, tank) {\n    super();\n    this.nick = nick;\n    this.tank = tank;\n  }\n\n  toBinary(encoder) {\n    encoder.writeUint8(this.tank.getId());\n    encoder.writeString(this.nick);\n  }\n\n  static fromBinary(decoder) {\n    let tank = TankModel.Types.get(decoder.readUint8());\n    return new PlayerConfigPacket(decoder.readString(), tank);\n  }\n\n}\n\nBinaryPacket.register(PlayerConfigPacket);\nmodule.exports = PlayerConfigPacket;","deps":{"../../tanks/tankmodel":"/Users/Temich/PycharmProjects/tanks/src/tanks/tankmodel.js","../binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js"}},"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerrespawnpacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerrespawnpacket.js","source":"const BinaryPacket = require(\"../binarypacket\");\n\nclass PlayerRespawnPacket extends BinaryPacket {\n  static typeName() {\n    return 9;\n  }\n\n  toBinary(encoder) {}\n\n}\n\nBinaryPacket.register(PlayerRespawnPacket);\nmodule.exports = PlayerRespawnPacket;","deps":{"../binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js"}},"/Users/Temich/PycharmProjects/tanks/src/networking/packets/entityremovepacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/entityremovepacket.js","source":"const BinaryPacket = require(\"../binarypacket\");\n\nclass EntityRemovePacket extends BinaryPacket {\n  static typeName() {\n    return 12;\n  }\n\n  constructor(entity) {\n    super();\n    this.entityId = entity ? entity.model.id : 0;\n  }\n\n  toBinary(encoder) {\n    encoder.writeUint32(this.entityId);\n  }\n\n  updateEntities(map) {\n    this.entityId = this.decoder.readUint32();\n    map.delete(this.entityId);\n  }\n\n}\n\nBinaryPacket.register(EntityRemovePacket);\nmodule.exports = EntityRemovePacket;","deps":{"../binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js"}},"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerchatpacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerchatpacket.js","source":"const BinaryPacket = require(\"../binarypacket\");\n\nclass PlayerChatPacket extends BinaryPacket {\n  static typeName() {\n    return 8;\n  }\n\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n\n  toBinary(encoder) {\n    encoder.writeString(this.text);\n  }\n\n  static fromBinary(decoder) {\n    return new PlayerChatPacket(decoder.readString());\n  }\n\n}\n\nBinaryPacket.register(PlayerChatPacket);\nmodule.exports = PlayerChatPacket;","deps":{"../binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js"}},"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerroomrequestpacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerroomrequestpacket.js","source":"const BinaryPacket = require(\"../binarypacket\");\n/**\n * This packet is sent when player wants to join the room\n */\n\n\nclass PlayerRoomRequestPacket extends BinaryPacket {\n  static typeName() {\n    return 17;\n  }\n\n  constructor(room) {\n    super();\n    this.room = room;\n  }\n\n  toBinary(encoder) {\n    encoder.writeString(this.room);\n  }\n\n  static fromBinary(decoder) {\n    return new PlayerRoomRequestPacket(decoder.readString());\n  }\n\n}\n\nBinaryPacket.register(PlayerRoomRequestPacket);\nmodule.exports = PlayerRoomRequestPacket;","deps":{"../binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js"}},"/Users/Temich/PycharmProjects/tanks/src/networking/packets/entitylistpacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/entitylistpacket.js","source":"const BinaryPacket = require(\"../binarypacket\");\n\nclass EntityListPacket extends BinaryPacket {\n  static typeName() {\n    return 10;\n  }\n  /**\n   * @param entities {Map<Number, AbstractEntity>}\n   */\n\n\n  constructor(entities) {\n    super();\n    this.entities = entities;\n    this.entitySize = 0;\n    if (this.entities) for (let entity of this.entities) {\n      this.entitySize++;\n    }\n  }\n\n  shouldSend() {\n    return this.entitySize > 0;\n  }\n\n  toBinary(encoder) {\n    encoder.writeUint16(this.entitySize);\n\n    for (let entity of this.entities.values()) {\n      encoder.writeUint32(entity.model.id);\n      entity.model.encodeDynamicData(encoder);\n    }\n  }\n  /**\n   * @param map {Map<Number, AbstractEntity>}\n   */\n\n\n  updateEntities(map) {\n    let i = this.decoder.readUint16();\n\n    while (i--) {\n      let key = this.decoder.readUint32();\n\n      if (map.has(key)) {\n        map.get(key).model.decodeDynamicData(this.decoder);\n      }\n    }\n  }\n\n}\n\nBinaryPacket.register(EntityListPacket);\nmodule.exports = EntityListPacket;","deps":{"../binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js"}},"/Users/Temich/PycharmProjects/tanks/src/networking/packets/roomlistpacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/roomlistpacket.js","source":"const BinaryPacket = require(\"../binarypacket\");\n\nclass RoomListPacket extends BinaryPacket {\n  static typeName() {\n    return 16;\n  }\n\n  constructor(rooms) {\n    super();\n    this.rooms = rooms;\n  }\n\n  toBinary(encoder) {\n    encoder.writeUint8(this.rooms.length);\n\n    for (let room of this.rooms) {\n      encoder.writeString(room.name);\n      encoder.writeUint16(room.online);\n      encoder.writeUint16(room.maxOnline);\n    }\n  }\n\n  static fromBinary(decoder) {\n    let rooms = [];\n    let count = decoder.readUint8();\n\n    for (let i = 0; i < count; i++) {\n      let name = decoder.readString();\n      let online = decoder.readUint16();\n      let maxOnline = decoder.readUint16();\n      rooms.push({\n        name: name,\n        online: online,\n        maxOnline: maxOnline\n      });\n    }\n\n    return new RoomListPacket(rooms);\n  }\n\n}\n\nBinaryPacket.register(RoomListPacket);\nmodule.exports = RoomListPacket;","deps":{"../binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js"}},"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerroomchangepacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerroomchangepacket.js","source":"const BinaryPacket = require(\"../binarypacket\");\n\nclass PlayerRoomChangePacket extends BinaryPacket {\n  static typeName() {\n    return 18;\n  }\n\n  constructor(room, error) {\n    super();\n    this.room = room;\n    this.error = error;\n  }\n\n  toBinary(encoder) {\n    encoder.writeUint8(this.error ? 0 : 1);\n    encoder.writeString(this.room);\n\n    if (this.error) {\n      encoder.writeString(this.error);\n    }\n  }\n\n  static fromBinary(decoder) {\n    let isSuccess = decoder.readUint8();\n    let room = decoder.readString();\n    let error = isSuccess ? null : decoder.readString();\n    return new this(room, error);\n  }\n\n  static allow(room) {\n    return new this(room);\n  }\n\n  static deny(room, error) {\n    return new this(room, error);\n  }\n\n}\n\nBinaryPacket.register(PlayerRoomChangePacket);\nmodule.exports = PlayerRoomChangePacket;","deps":{"../binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js"}},"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerleavepacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerleavepacket.js","source":"const BinaryPacket = require(\"../binarypacket\");\n\nclass PlayerLeavePacket extends BinaryPacket {\n  static typeName() {\n    return 15;\n  }\n\n  constructor(player) {\n    super();\n    this.playerId = player ? player.id : 0;\n  }\n\n  toBinary(encoder) {\n    encoder.writeUint32(this.playerId);\n  }\n\n  static fromBinary(decoder) {\n    let packet = new PlayerLeavePacket();\n    packet.playerId = decoder.readUint32();\n    return packet;\n  }\n\n}\n\nBinaryPacket.register(PlayerLeavePacket);\nmodule.exports = PlayerLeavePacket;","deps":{"../binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js"}},"/Users/Temich/PycharmProjects/tanks/src/networking/packets/effectremovepacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/effectremovepacket.js","source":"const BinaryPacket = require(\"../binarypacket\");\n\nclass EffectRemovePacket extends BinaryPacket {\n  static typeName() {\n    return 19;\n  }\n\n  constructor(id) {\n    super();\n    this.id = id;\n  }\n\n  toBinary(encoder) {\n    encoder.writeFloat64(this.id);\n  }\n\n  static fromBinary(decoder) {\n    return new this(decoder.readFloat64());\n  }\n\n}\n\nBinaryPacket.register(EffectRemovePacket);\nmodule.exports = EffectRemovePacket;","deps":{"../binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js"}},"/Users/Temich/PycharmProjects/tanks/src/effects/tank/tankeffectmodel.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/effects/tank/tankeffectmodel.js","source":"const EffectModel = require(\"../effectmodel\");\n/**\n * @abstract\n */\n\n\nclass TankEffectModel extends EffectModel {\n  constructor(...args) {\n    super(...args);\n    this.tankId = void 0;\n  }\n\n  static fromBinary(decoder) {\n    let model = super.fromBinary(decoder);\n    model.tankId = decoder.readUint16();\n    return model;\n  }\n\n  toBinary(encoder) {\n    super.toBinary(encoder);\n    encoder.writeUint16(this.tankId);\n  }\n\n}\n\nmodule.exports = TankEffectModel;","deps":{"../effectmodel":"/Users/Temich/PycharmProjects/tanks/src/effects/effectmodel.js"}},"/Users/Temich/PycharmProjects/tanks/src/networking/packets/mappacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/mappacket.js","source":"const BinaryPacket = require(\"../binarypacket\");\n\nconst GameMap = require(\"../../utils/map/gamemap\");\n\nclass MapPacket extends BinaryPacket {\n  static typeName() {\n    return 1;\n  }\n\n  constructor(map) {\n    super();\n    this.map = map;\n  }\n\n  static fromBinary(decoder) {\n    let map = GameMap.fromBinary(decoder);\n    map.update();\n    return new MapPacket(map);\n  }\n\n  toBinary(encoder) {\n    this.map.toBinary(encoder, [GameMap.BinaryOptions.SIZE_FLAG, GameMap.BinaryOptions.DATA_FLAG]);\n  }\n\n}\n\nMapPacket.requireLargeIndices = true;\nBinaryPacket.register(MapPacket);\nmodule.exports = MapPacket;","deps":{"../binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js","../../utils/map/gamemap":"/Users/Temich/PycharmProjects/tanks/src/utils/map/gamemap.js"}},"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerspawnpacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerspawnpacket.js","source":"const PlayerJoinPacket = require(\"./playerjoinpacket\");\n\nconst BinaryPacket = require(\"../binarypacket\");\n/**\n * This packet represents player spawn interact.\n * The difference to the `PlayerSpawnPacket`\n * package is that this package is only sent\n * to the player who entered the screen.\n */\n\n\nclass PlayerSpawnPacket extends PlayerJoinPacket {\n  static typeName() {\n    return 3;\n  }\n\n}\n\nBinaryPacket.register(PlayerSpawnPacket);\nmodule.exports = PlayerSpawnPacket;","deps":{"../binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js","./playerjoinpacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerjoinpacket.js"}},"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playercontrolspacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playercontrolspacket.js","source":"const TankControls = require(\"../../tanks/controls/tankcontrols\");\n\nconst BinaryPacket = require(\"../../networking/binarypacket\");\n\nclass PlayerControlsPacket extends BinaryPacket {\n  static typeName() {\n    return 6;\n  }\n  /**\n   * @param { TankControls } controls\n   */\n\n\n  constructor(controls) {\n    super();\n    this.controls = controls;\n  }\n\n  toBinary(encoder) {\n    this.controls.toBinary(encoder);\n  }\n  /**\n   * Update specified tank controls\n   * @param { TankControls } controls\n   */\n\n\n  updateControls(controls) {\n    controls.updateState(this.decoder);\n  }\n\n}\n\nBinaryPacket.register(PlayerControlsPacket);\nmodule.exports = PlayerControlsPacket;","deps":{"../../networking/binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js","../../tanks/controls/tankcontrols":"/Users/Temich/PycharmProjects/tanks/src/tanks/controls/tankcontrols.js"}},"/Users/Temich/PycharmProjects/tanks/src/networking/packets/entitycreatepacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/entitycreatepacket.js","source":"const BinaryPacket = require(\"../binarypacket\");\n\nconst EntityModel = require(\"../../entity/entitymodel\");\n\nconst BinarySerializable = require(\"../../serialization/binary/serializable\");\n\nclass EntityCreatePacket extends BinaryPacket {\n  static typeName() {\n    return 11;\n  }\n\n  constructor(entities) {\n    super();\n\n    if (entities === undefined) {\n      this.entities = [];\n    } else if (!Array.isArray(entities)) {\n      this.entities = [entities];\n    } else this.entities = entities;\n  }\n\n  toBinary(encoder) {\n    encoder.writeUint16(this.entities.length);\n\n    for (let entity of this.entities) {\n      BinarySerializable.serialize(entity.model, encoder);\n    }\n  }\n\n  createEntities(callback) {\n    let decoder = this.decoder;\n    let count = decoder.readUint16();\n\n    for (let i = 0; i < count; i++) {\n      let model = BinarySerializable.deserialize(decoder, EntityModel);\n      if (model) callback(model);\n    }\n  }\n\n}\n\nBinaryPacket.register(EntityCreatePacket);\nmodule.exports = EntityCreatePacket;","deps":{"../binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js","../../entity/entitymodel":"/Users/Temich/PycharmProjects/tanks/src/entity/entitymodel.js","../../serialization/binary/serializable":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/serializable.js"}},"/Users/Temich/PycharmProjects/tanks/src/networking/packets/blockupdatepacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/blockupdatepacket.js","source":"const BinaryPacket = require(\"../binarypacket\");\n\nconst BlockState = require(\"../../utils/map/blockstate/blockstate\");\n\nclass BlockUpdatePacket extends BinaryPacket {\n  static typeName() {\n    return 13;\n  }\n\n  constructor(x, y, block) {\n    super();\n    this.x = x;\n    this.y = y;\n    this.block = block;\n  }\n\n  toBinary(encoder) {\n    encoder.writeUint16(this.x);\n    encoder.writeUint16(this.y);\n    encoder.writeUint8(this.block.constructor.typeId);\n    this.block.constructor.BinaryOptions.convertOptions(encoder, this.block);\n  }\n\n  static fromBinary(decoder) {\n    let x = decoder.readUint16();\n    let y = decoder.readUint16();\n    let id = decoder.readUint8();\n    let Block = BlockState.getBlockStateClass(id);\n    let block = new Block(Block.BinaryOptions.convertBinary(decoder));\n    return new BlockUpdatePacket(x, y, block);\n  }\n\n}\n\nBinaryPacket.register(BlockUpdatePacket);\nmodule.exports = BlockUpdatePacket;","deps":{"../binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js","../../utils/map/blockstate/blockstate":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstate.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/player.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/player.js","source":"const PhysicsUtils = require(\"./physicsutils.js\");\n\nconst Box2D = require(\"../library/box2d\");\n\nclass Player {\n  /** @type AbstractTank */\n\n  /** @type GameWorld */\n  constructor(config) {\n    this.tank = void 0;\n    this.world = void 0;\n    config = config || {};\n    this.nick = config.nick;\n    this.id = config.id;\n    this.world = config.world;\n    this.tank = null;\n    this.team = config.team;\n    this.blockMap = [];\n  }\n\n  setTank(tank) {\n    this.tank = tank;\n    tank.player = this;\n  }\n\n  setupPhysics() {\n    const wallFixture = PhysicsUtils.squareFixture(10, 10, null, {\n      density: 1.0,\n      friction: 0.1,\n      restitution: 0.5\n    });\n\n    for (let i = 0; i < 25; i++) {\n      if (i === 12) {\n        this.blockMap.push(null);\n        continue;\n      }\n\n      const bodyDef = new Box2D.b2BodyDef();\n      bodyDef.type = Box2D.b2Body.b2_staticBody;\n      bodyDef.position.x = 0;\n      bodyDef.position.y = 0;\n      this.blockMap.push(this.world.world.CreateBody(bodyDef).CreateFixture(wallFixture).GetBody());\n    }\n  }\n\n  destroy() {\n    this.tank.destroy();\n    let blocks = this.blockMap;\n\n    for (let i = blocks.length - 1; i >= 0; i--) {\n      let b = blocks[i];\n      if (b) this.world.world.DestroyBody(b);\n    }\n\n    this.blockMap = [];\n  }\n\n}\n\nmodule.exports = Player;","deps":{"./physicsutils.js":"/Users/Temich/PycharmProjects/tanks/src/utils/physicsutils.js","../library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js"}},"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerjoinpacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerjoinpacket.js","source":"const TankModel = require(\"../../tanks/tankmodel\");\n\nconst BinaryPacket = require(\"../binarypacket\");\n\nconst Player = require(\"../../utils/player\");\n/**\n * This packet is representing a player join interact.\n */\n\n\nclass PlayerJoinPacket extends BinaryPacket {\n  static typeName() {\n    return 2;\n  }\n\n  constructor(player, tank) {\n    super();\n    this.player = player;\n    this.tank = tank;\n    this.decoder = null;\n  }\n\n  toBinary(encoder) {\n    encoder.writeUint16(this.player.id);\n    encoder.writeString(this.player.nick);\n    TankModel.serialize(this.tank, encoder);\n  }\n\n  static fromBinary(decoder) {\n    let player = new Player();\n    player.id = decoder.readUint16();\n    player.nick = decoder.readString();\n    let tank = TankModel.deserialize(decoder, TankModel);\n    return new this(player, tank);\n  }\n\n}\n\nBinaryPacket.register(PlayerJoinPacket);\nmodule.exports = PlayerJoinPacket;","deps":{"../binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js","../../tanks/tankmodel":"/Users/Temich/PycharmProjects/tanks/src/tanks/tankmodel.js","../../utils/player":"/Users/Temich/PycharmProjects/tanks/src/utils/player.js"}},"/Users/Temich/PycharmProjects/tanks/src/effects/effectmodel.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/effects/effectmodel.js","source":"const BinarySerializable = require(\"../serialization/binary/serializable\");\n/**\n * @abstract\n * This class represents an effect model, which contains all necessary\n * data to create an side-specific effect class instance\n */\n\n\nclass EffectModel extends BinarySerializable {\n  /**\n   * @private\n   * @type {number}\n   */\n\n  /**\n   * Unique effect identifier\n   */\n\n  /**\n   * @param {Object} [options]\n   * @param {number} [options.id]\n   */\n  constructor(options) {\n    super();\n    this.id = void 0;\n\n    if (options) {\n      if (options.id === undefined) {\n        this.id = EffectModel.globalId++;\n      } else {\n        this.id = options.id;\n      }\n    }\n  }\n\n  static groupName() {\n    return 2;\n  }\n\n  toBinary(encoder) {\n    encoder.writeFloat64(this.id);\n  }\n\n  static fromBinary(decoder) {\n    return new this({\n      id: decoder.readFloat64()\n    });\n  }\n\n}\n\nEffectModel.globalId = 0;\nmodule.exports = EffectModel;","deps":{"../serialization/binary/serializable":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/serializable.js"}},"/Users/Temich/PycharmProjects/tanks/src/effects/world/worldeffectmodel.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/effects/world/worldeffectmodel.js","source":"const EffectModel = require(\"../effectmodel\");\n/**\n * @abstract\n */\n\n\nclass WorldEffectModel extends EffectModel {\n  /**\n   * @type Number\n   */\n\n  /**\n   * @type Number\n   */\n\n  /**\n   * @param {Object} options\n   * @param {number} options.x\n   * @param {number} options.y\n   */\n  constructor(options) {\n    super(options);\n    this.x = void 0;\n    this.y = void 0;\n    this.x = options.x;\n    this.y = options.y;\n  }\n\n  toBinary(encoder) {\n    super.toBinary(encoder);\n    encoder.writeFloat32(this.x);\n    encoder.writeFloat32(this.y);\n  }\n\n  static fromBinary(decoder) {\n    let model = super.fromBinary(decoder);\n    model.x = decoder.readFloat32();\n    model.y = decoder.readFloat32();\n    return model;\n  }\n\n}\n\nmodule.exports = WorldEffectModel;","deps":{"../effectmodel":"/Users/Temich/PycharmProjects/tanks/src/effects/effectmodel.js"}},"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/wheeledtankbehaviour.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/wheeledtankbehaviour.js","source":"const Box2D = require(\"../../library/box2d\");\n\nconst TankBehaviour = require(\"./tankbehaviour.js\");\n\nclass WheeledTankModel extends TankBehaviour {\n  constructor(tank, config) {\n    super(tank, config);\n    this.turnRate = 2;\n    this.axleDistance = 0.6;\n    this.axleWidth = 0.8;\n    this.wheelSpeed = 9.8;\n    this.details = {\n      leftWheelsAngle: 0,\n      rightWheelsAngle: 0,\n      leftWheelsSpeed: 0,\n      rightWheelsSpeed: 0,\n      leftWheelsDist: 0,\n      rightWheelsDist: 0\n    };\n  }\n\n  clone() {\n    return new WheeledTankModel(this);\n  }\n\n  tick(dt) {\n    super.tick(dt);\n    const tank = this.tank;\n    const body = tank.body;\n    let steerX, steerY;\n    steerX = tank.controls.getSteer();\n    steerY = tank.controls.getThrottle();\n    const throttle = this.power * steerY;\n    const k = 20000;\n    const velocity = body.GetLinearVelocity();\n    const angular = body.GetAngularVelocity();\n    const vx = velocity.x;\n    const vy = velocity.y;\n    const y2 = -tank.matrix.sin * vx + tank.matrix.cos * vy;\n    const turnRate = (y2 * steerX * this.turnRate - angular) * k / (Math.abs(y2) / 15 + 1);\n    body.ApplyForce(body.GetWorldVector(new Box2D.b2Vec2(0, throttle)), body.GetWorldPoint(new Box2D.b2Vec2(0, 0)));\n    body.ApplyTorque(turnRate);\n  }\n\n  countDetails(dt) {\n    let tank = this.tank;\n    let body = tank.body;\n    let steer = tank.controls.getSteer();\n\n    if (steer === 0) {\n      this.details.leftWheelsAngle = 0;\n      this.details.rightWheelsAngle = 0;\n    } else {\n      let radius = 1 / steer * 2;\n      this.details.leftWheelsAngle = Math.atan2(this.axleDistance, radius + this.axleWidth / 2);\n      this.details.rightWheelsAngle = Math.atan2(this.axleDistance, radius - this.axleWidth / 2);\n\n      if (steer < 0) {\n        this.details.rightWheelsAngle += Math.PI;\n        this.details.leftWheelsAngle += Math.PI;\n      }\n    }\n\n    let speed = tank.body.GetLinearVelocity();\n    let y2 = -tank.matrix.sin * speed.x + tank.matrix.cos * speed.y;\n    let angularVelocity = body.GetAngularVelocity();\n    let left = (y2 + angularVelocity * this.axleWidth / 2) * this.wheelSpeed;\n    let right = (y2 - angularVelocity * this.axleWidth / 2) * this.wheelSpeed;\n    this.details.leftWheelsSpeed = left * dt;\n    this.details.rightWheelsSpeed = right * dt;\n    this.details.leftWheelsDist -= left * dt;\n    this.details.rightWheelsDist -= right * dt;\n  }\n\n}\n\nmodule.exports = WheeledTankModel;","deps":{"../../library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","./tankbehaviour.js":"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/tankbehaviour.js"}},"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/airbagbehaviour.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/airbagbehaviour.js","source":"const Box2D = require(\"../../library/box2d\");\n\nconst TankBehaviour = require(\"./tankbehaviour.js\");\n\nclass AirbagTankModel extends TankBehaviour {\n  constructor(tank, config) {\n    super(tank, config);\n    this.power = config.power || 50000;\n    this.torque = config.torque || 120000;\n    this.friction = config.friction || 0.1;\n    this.propellerSpeed = config.propellerSpeed || 40;\n    this.details = {\n      transmissionSpeed: 0,\n      propellerDist: 0,\n      clutch: 0\n    };\n  }\n\n  tick(dt) {\n    const body = this.tank.body;\n    const velocity = body.GetLinearVelocity();\n    const x = velocity.x;\n    const y = velocity.y;\n    const initialSpeed = Math.sqrt(x ** 2 + y ** 2);\n    let newSpeed = initialSpeed;\n    newSpeed -= this.friction * dt;\n    if (newSpeed < 0) newSpeed = 0;\n    let coefficient;\n    if (initialSpeed > 0) coefficient = newSpeed / initialSpeed;else coefficient = 1;\n    velocity.x = x * coefficient;\n    velocity.y = y * coefficient;\n    const throttle = this.power * this.tank.controls.getThrottle();\n    const rotation = this.torque * this.tank.controls.getSteer() * this.tank.controls.getThrottle();\n    body.ApplyForce(body.GetWorldVector(new Box2D.b2Vec2(0, throttle)), body.GetWorldPoint(new Box2D.b2Vec2(0, 0)));\n    body.ApplyTorque(rotation);\n  }\n\n  countDetails(dt) {\n    const tank = this.tank;\n    const speed = (Math.abs(tank.controls.getThrottle()) + 0.5) * this.propellerSpeed;\n\n    if (tank.health > 0) {\n      this.details.propellerDist += speed * dt;\n      this.details.transmissionSpeed = speed * dt / 2 + 0.3;\n    } else {\n      this.details.transmissionSpeed = 0;\n    }\n\n    this.details.clutch = Math.abs(tank.controls.getThrottle());\n  }\n\n}\n\nmodule.exports = AirbagTankModel;","deps":{"../../library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","./tankbehaviour.js":"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/tankbehaviour.js"}},"/Users/Temich/PycharmProjects/tanks/src/weapon/models/machinegun.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/weapon/models/machinegun.js","source":"const Weapon = require(\"../weapon\");\n\nconst Bullet16mm = require(\"../../entity/bullet/models/16mm\");\n\nclass WeaponMachineGun extends Weapon {\n  constructor(config) {\n    config = Object.assign({\n      maxAmmo: 50,\n      shootRate: 100,\n      reloadTime: 5000,\n      bulletType: Bullet16mm\n    }, config);\n    super(config);\n    this.state = 0;\n    this.id = 4;\n  }\n\n  shoot() {\n    let tank = this.tank;\n    let position = tank.model.body.GetPosition();\n    const shift = this.state === 0 ? -1.4 : 1.4;\n    this.launchBullet(tank, position.x + tank.model.matrix.cos * shift - tank.model.matrix.sin * shift, position.y + tank.model.matrix.sin * shift + tank.model.matrix.cos * shift);\n    this.state = 1 - this.state;\n    this.popBullet();\n  }\n\n}\n\nmodule.exports = WeaponMachineGun;","deps":{"../../entity/bullet/models/16mm":"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/16mm.js","../weapon":"/Users/Temich/PycharmProjects/tanks/src/weapon/weapon.js"}},"/Users/Temich/PycharmProjects/tanks/src/tanks/models/monster.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/tanks/models/monster.js","source":"const TankModel = require(\"../tankmodel\");\n\nconst PhysicsUtils = require(\"../../utils/physicsutils.js\");\n\nconst WheeledTankBehaviour = require(\"../physics/wheeledtankbehaviour\");\n\nconst Box2D = require(\"../../library/box2d\");\n\nconst WeaponMachineGun = require(\"../../weapon/models/machinegun\");\n\nclass MonsterTank extends TankModel {\n  constructor(options) {\n    super(options);\n    this.behaviour = new WheeledTankBehaviour(this, {\n      power: 30000\n    });\n  }\n\n  static getWeapon() {\n    return WeaponMachineGun;\n  }\n\n  static getMaximumHealth() {\n    return 10;\n  }\n\n  static getId() {\n    return 3;\n  }\n\n  initPhysics(world) {\n    this.world = world;\n    let size = 9;\n    let bodyFixture = PhysicsUtils.squareFixture(size * 0.6, size, new Box2D.b2Vec2(0, -size * 0.25));\n    let trackFixtures = PhysicsUtils.horizontalSquareFixtures(size * 0.18, size * 0.9, new Box2D.b2Vec2(-size * 0.78, 0));\n    this.body = PhysicsUtils.dynamicBody(world, {\n      linearDamping: 0.3\n    });\n    this.body.CreateFixture(bodyFixture);\n\n    for (let fixture of trackFixtures) this.body.CreateFixture(fixture);\n  }\n\n}\n\nTankModel.register(MonsterTank);\nmodule.exports = MonsterTank;","deps":{"../../utils/physicsutils.js":"/Users/Temich/PycharmProjects/tanks/src/utils/physicsutils.js","../../library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","../physics/wheeledtankbehaviour":"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/wheeledtankbehaviour.js","../tankmodel":"/Users/Temich/PycharmProjects/tanks/src/tanks/tankmodel.js","../../weapon/models/machinegun":"/Users/Temich/PycharmProjects/tanks/src/weapon/models/machinegun.js"}},"/Users/Temich/PycharmProjects/tanks/src/effects/tank/tankfireeffectmodel.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/effects/tank/tankfireeffectmodel.js","source":"const TankEffectModel = require(\"./tankeffectmodel\");\n\nclass TankFireEffectModel extends TankEffectModel {\n  static typeName() {\n    return 1;\n  }\n\n}\n\nTankEffectModel.register(TankFireEffectModel);\nmodule.exports = TankFireEffectModel;","deps":{"./tankeffectmodel":"/Users/Temich/PycharmProjects/tanks/src/effects/tank/tankeffectmodel.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/effects/tank/types/clienttankfireeffect.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/effects/tank/types/clienttankfireeffect.js","source":"// const FX = require(\"../../sound/fx\")\nconst FireParticle = require(\"../../../particles/fireparticle\");\n\nconst ClientTankEffect = require(\"../clienttankeffect\");\n\nconst TankFireEffectModel = require('src/effects/tank/tankfireeffectmodel');\n\nclass ClientTankFireEffect extends ClientTankEffect {\n  constructor(model, tank) {\n    super(model, tank);\n    this.queue = 0;\n    this.frequency = 20;\n  }\n\n  stop() {\n    this.sound.stop();\n    this.dead = true;\n  }\n\n  tick(dt) {\n    const position = this.tank.model.body.GetPosition();\n    const velocity = this.tank.model.body.GetLinearVelocity();\n    const angle = this.tank.model.body.GetAngle();\n    const tank = this.tank;\n    this.queue += dt * this.frequency;\n\n    while (this.queue > 0) {\n      for (let k = 0; k < 20; k++) {\n        const heading = -angle + (Math.random() - 0.5) * Math.PI / 4;\n        const sin = Math.sin(heading);\n        const cos = Math.cos(heading);\n        const vel = 240 + Math.random() * 20;\n        const dist = Math.random() * 6;\n        const smoke = new FireParticle({\n          x: position.x - tank.model.matrix.sin * 10 + sin * dist,\n          y: position.y + tank.model.matrix.cos * 10 + cos * dist,\n          dx: velocity.x + sin * vel,\n          dy: velocity.y + cos * vel,\n          width: 4,\n          height: 4,\n          scaling: 1.5,\n          decelerating: 0.95,\n          lifetime: 0.4 + Math.random() * 0.1\n        });\n        this.tank.world.particles.push(smoke);\n      }\n\n      this.queue -= 1;\n    }\n  }\n\n}\n\nClientTankEffect.associate(TankFireEffectModel, ClientTankFireEffect);\nmodule.exports = ClientTankFireEffect;","deps":{"../../../particles/fireparticle":"/Users/Temich/PycharmProjects/tanks/src/client/particles/fireparticle.js","../clienttankeffect":"/Users/Temich/PycharmProjects/tanks/src/client/effects/tank/clienttankeffect.js","src/effects/tank/tankfireeffectmodel":"/Users/Temich/PycharmProjects/tanks/src/effects/tank/tankfireeffectmodel.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/particles/pellet.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/particles/pellet.js","source":"const Particle = require(\"./particle\");\n\nclass Smoke extends Particle {\n  constructor(config) {\n    super(config);\n    this.color = config.color;\n    this.width = config.width || 4;\n    this.height = config.height || 4;\n  }\n\n}\n\nmodule.exports = Smoke;","deps":{"./particle":"/Users/Temich/PycharmProjects/tanks/src/client/particles/particle.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/effects/tank/types/clienttankpelletseffect.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/effects/tank/types/clienttankpelletseffect.js","source":"const ClientTankEffect = require(\"../clienttankeffect\"); //const AbstractTankPelletsEffect = require(\"/src/effects/tank/abstracttankpelletseffect\")\n\n\nconst Pellet = require('src/client/particles/pellet');\n\nconst Color = require('src/utils/color');\n\nclass ClientTankPelletsEffect extends ClientTankEffect {\n  start(player) {\n    this.player = player;\n  }\n\n  draw(ctx) {\n    const game = this.game;\n    const player = this.player;\n    const tank = player.tank;\n\n    for (let k = 0; k < 8; k++) {\n      const angle = tank.model.rotation + (Math.random() - 0.5) * Math.PI / 4;\n      const sin = Math.sin(angle);\n      const cos = Math.cos(angle);\n      const vel = 500 + Math.random() * 20;\n      const dist = Math.random() * 3;\n      const pellet = new Pellet({\n        x: tank.model.x + tank.model.matrix.sin * 2 + sin * dist,\n        y: tank.model.y + tank.model.matrix.cos * 2 + cos * dist,\n        dx: (tank.model.body.m_linearVelocity.x + sin * vel) / game.tps,\n        dy: (tank.model.body.m_linearVelocity.y + cos * vel) / game.tps,\n        lifetime: 150,\n        color: new Color(50, 50, 50)\n      });\n      game.particles.push(pellet);\n    }\n  }\n\n} //ClientTankEffect.register(AbstractTankPelletsEffect, ClientTankPelletsEffect)\n\n\nmodule.exports = ClientTankPelletsEffect;","deps":{"../clienttankeffect":"/Users/Temich/PycharmProjects/tanks/src/client/effects/tank/clienttankeffect.js","src/utils/color":"/Users/Temich/PycharmProjects/tanks/src/utils/color.js","src/client/particles/pellet":"/Users/Temich/PycharmProjects/tanks/src/client/particles/pellet.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/monster.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/monster.js","source":"const ClientTank = require(\"../clienttank\");\n\nconst TankDrawer = require('src/client/graphics/drawers/tankdrawer');\n\nconst MonsterTankModel = require('src/tanks/models/monster');\n\nconst Engine = require('src/client/engine');\n\nconst FX = require('src/client/sound/fx');\n\nconst Sprite = require('src/client/sprite');\n\nconst LightMaskTextureProgram = require('src/client/graphics/programs/lightmasktextureprogram');\n\nconst TextureProgram = require('src/client/graphics/programs/textureprogram');\n\nconst Matrix3 = require('src/client/graphics/matrix3');\n\nclass Drawer extends TankDrawer {\n  constructor(tank, ctx) {\n    super(tank, ctx);\n    this.size = 9;\n    this.bodyBrightSprite = Sprite.named(\"tanks/monster/body-bright\");\n    this.bodyDarkSprite = Sprite.named(\"tanks/monster/body-dark\");\n    this.bodyLightMask = Sprite.named(\"tanks/monster/mask\");\n    this.wheelSpriteCount = 10;\n    this.wheelSprites = [];\n    this.spriteMatrix = new Matrix3();\n\n    for (let i = 1; i <= this.wheelSpriteCount; i++) {\n      this.wheelSprites.push(Sprite.named(\"tanks/monster/wheel_\" + i));\n    }\n\n    this.bodyProgram = new LightMaskTextureProgram(\"tank-body-drawer\", ctx);\n    this.wheelProgram = new TextureProgram(\"tank-wheel-drawer\", ctx);\n    this.wheelProgram.setTransform(this.spriteMatrix);\n  }\n\n  draw(camera, dt) {\n    let angle = this.tank.model.body.GetAngle();\n    camera.matrix.save();\n    this.drawSmoke(dt);\n    const scale = this.size;\n    let leftWheelsDist = this.tank.model.behaviour.details.leftWheelsDist;\n    let rightWheelsDist = this.tank.model.behaviour.details.rightWheelsDist;\n    let leftWheelsAngle = this.tank.model.behaviour.details.leftWheelsAngle;\n    let rightWheelsAngle = this.tank.model.behaviour.details.rightWheelsAngle;\n    let position = this.tank.model.body.GetPosition();\n    camera.matrix.translate(position.x, position.y);\n    camera.matrix.rotate(-angle);\n    let l = Math.floor(leftWheelsDist % this.wheelSpriteCount);\n    let r = Math.floor(rightWheelsDist % this.wheelSpriteCount);\n    if (l < 0) l = this.wheelSpriteCount + l;\n    if (r < 0) r = this.wheelSpriteCount + r;\n    this.wheelProgram.use();\n    this.wheelProgram.prepare();\n    this.drawWheel(l, 0.82, -0.85, leftWheelsAngle);\n    this.drawWheel(l, 0.82, -0.18, 0);\n    this.drawWheel(l, 0.82, 0.48, -leftWheelsAngle);\n    this.drawWheel(r, -0.82, -0.85, rightWheelsAngle);\n    this.drawWheel(r, -0.82, -0.18, 0);\n    this.drawWheel(r, -0.82, 0.48, -rightWheelsAngle);\n    this.wheelProgram.matrixUniform.setMatrix(camera.matrix.m);\n    this.wheelProgram.draw();\n    this.bodyProgram.prepare();\n    this.bodyProgram.use();\n    this.bodyProgram.drawMaskedSprite(this.bodyBrightSprite, this.bodyDarkSprite, this.bodyLightMask, -scale * 0.8, -scale * 1.15, scale * 1.6, scale * 2);\n    this.bodyProgram.setLightAngle(-angle);\n    this.bodyProgram.matrixUniform.setMatrix(camera.matrix.m);\n    this.bodyProgram.draw();\n    camera.matrix.restore();\n  }\n\n  drawWheel(sprite, x, y, angle) {\n    let scale = this.size;\n    this.spriteMatrix.save();\n    this.spriteMatrix.translate(scale * x, scale * y);\n    if (angle) this.spriteMatrix.rotate(angle);\n    this.wheelProgram.drawSprite(this.wheelSprites[sprite], -scale * 0.18, -scale * 0.3, scale * 0.36, scale * 0.6);\n    this.spriteMatrix.restore();\n  }\n\n}\n\nclass MonsterTank extends ClientTank {\n  constructor(model) {\n    super(model);\n    this.engine = new Engine({\n      sound: FX.ENGINE_1,\n      gears: [{\n        high: 1.9,\n        gearing: 1\n      }, {\n        low: 1.4,\n        gearing: 0.8\n      }],\n      multiplier: 20,\n      pitch: 0.8\n    });\n  }\n\n  static getDrawer() {\n    return Drawer;\n  }\n\n  static getModel() {\n    return MonsterTankModel;\n  }\n\n  static getName() {\n    return \"Монстр\";\n  }\n\n  static getDescription() {\n    return \"Рассекайте шоссе 66 на монстре! Скоростной пулемёт \" + \"поможет сбить прицел соперника, а мощный двигатель и \" + \"хорошая маневренность позволят оторваться почти от \" + \"любых видов военной техники.\";\n  }\n\n  static getStats() {\n    return {\n      damage: 4,\n      health: 20,\n      speed: 46,\n      shootrate: 2,\n      reload: 7\n    };\n  }\n\n}\n\nClientTank.register(MonsterTank);\nmodule.exports = MonsterTank;","deps":{"../clienttank":"/Users/Temich/PycharmProjects/tanks/src/client/tanks/clienttank.js","src/client/engine":"/Users/Temich/PycharmProjects/tanks/src/client/engine.js","src/client/sprite":"/Users/Temich/PycharmProjects/tanks/src/client/sprite.js","src/client/graphics/matrix3":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/matrix3.js","src/client/graphics/programs/lightmasktextureprogram":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/lightmasktextureprogram.js","src/client/graphics/programs/textureprogram":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/textureprogram.js","src/client/graphics/drawers/tankdrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/tankdrawer.js","src/client/sound/fx":"/Users/Temich/PycharmProjects/tanks/src/client/sound/fx.js","src/tanks/models/monster":"/Users/Temich/PycharmProjects/tanks/src/tanks/models/monster.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/blockdrawer.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/blockdrawer.js","source":"const Sprite = require(\"../../../sprite\");\n\nconst GameMap = require('src/utils/map/gamemap');\n\nclass BlockDrawer {\n  constructor() {\n    this.id = 0;\n  }\n\n  loadSprites() {\n    this.crackSprites = [Sprite.named(\"blocks/crack/1\"), Sprite.named(\"blocks/crack/2\"), Sprite.named(\"blocks/crack/3\"), Sprite.named(\"blocks/crack/4\"), Sprite.named(\"blocks/crack/5\")];\n  }\n  /**\n   *\n   * @param {TextureProgram} program\n   * @param x\n   * @param y\n   * @param {BlockState} block\n   */\n\n\n  draw(program, x, y, block) {\n    if (!block.constructor.typeId) return;\n    let crack = Math.floor(block.damage * 6);\n\n    if (crack) {\n      program.drawSprite(this.crackSprites[crack - 1], x, y, GameMap.BLOCK_SIZE, GameMap.BLOCK_SIZE);\n    }\n  }\n\n}\n\nmodule.exports = BlockDrawer;","deps":{"../../../sprite":"/Users/Temich/PycharmProjects/tanks/src/client/sprite.js","src/utils/map/gamemap":"/Users/Temich/PycharmProjects/tanks/src/utils/map/gamemap.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/edgedblockdrawer.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/edgedblockdrawer.js","source":"const BlockDrawer = require(\"./blockdrawer\");\n\nconst Sprite = require(\"../../../sprite\");\n\nconst GameMap = require(\"../../../../utils/map/gamemap\");\n\nclass EdgedBlockDrawer extends BlockDrawer {\n  constructor() {\n    super();\n    this.variants = null;\n    this.spritePath = \"blocks/concrete\";\n  }\n\n  loadSprites() {\n    super.loadSprites();\n    this.variants = [];\n\n    if (Array.isArray(this.spritePath)) {\n      for (let path of this.spritePath) {\n        this.variants.push(this.loadVariant(path));\n      }\n    } else if (typeof this.spritePath == \"string\") {\n      this.variants.push(this.loadVariant(this.spritePath));\n    }\n\n    this.spriteSize = this.variants[0][0].rect.w;\n    this.halfSpriteSize = this.spriteSize / 2;\n  }\n\n  loadVariant(path) {\n    if (path.length && !path.endsWith(\"/\")) {\n      path += \"/\";\n    }\n\n    let allWalls = Sprite.named(path + \"all-walls\");\n    let allSides = Sprite.named(path + \"all-sides\");\n    let allCorners = Sprite.named(path + \"all-corners\");\n    let leftRightWalls = Sprite.named(path + \"left-right-walls\");\n    let topBottomWalls = Sprite.named(path + \"top-bottom-walls\");\n    return [allWalls, topBottomWalls, leftRightWalls, allCorners, allSides];\n  }\n\n  drawSlice(program, x, y, slice, s, h, dx, dy) {\n    dx += slice.x;\n    dy += slice.y;\n    program.vertexBuffer.appendArray([x, y, dx, dy, x + h, y, dx + s, dy, x, y + h, dx, dy + s, x + h, y + h, dx + s, dy + s]);\n    let base = program.textures * 4;\n    program.indexBuffer.appendArray([base, base + 1, base + 3, base, base + 2, base + 3]);\n    program.textures++;\n  }\n\n  draw(program, x, y, block) {\n    if (!this.variants) {\n      this.loadSprites();\n    }\n\n    let variant;\n    if (block.variant) variant = this.variants[block.variant];else variant = this.variants[0];\n    x *= GameMap.BLOCK_SIZE;\n    y *= GameMap.BLOCK_SIZE;\n    const half = GameMap.BLOCK_SIZE / 2;\n\n    if ((block.facing & 0b111111111111) === 0b000000000000) {\n      this.drawSlice(program, x, y, variant[0].rect, this.spriteSize, GameMap.BLOCK_SIZE, 0, 0);\n    } else if ((block.facing & 0b111111111111) === 0b100100100100) {\n      this.drawSlice(program, x, y, variant[4].rect, this.spriteSize, GameMap.BLOCK_SIZE, 0, 0);\n    } else {\n      const s = this.halfSpriteSize;\n      const h = GameMap.BLOCK_SIZE / 2;\n      this.drawSlice(program, x, y + half, variant[block.facing >> 9 & 7].rect, s, h, 0, s);\n      this.drawSlice(program, x + half, y + half, variant[block.facing >> 6 & 7].rect, s, h, s, s);\n      this.drawSlice(program, x + half, y, variant[block.facing >> 3 & 7].rect, s, h, s, 0);\n      this.drawSlice(program, x, y, variant[block.facing & 7].rect, s, h, 0, 0);\n    }\n\n    super.draw(program, x, y, block);\n  }\n\n}\n\nmodule.exports = EdgedBlockDrawer;","deps":{"../../../sprite":"/Users/Temich/PycharmProjects/tanks/src/client/sprite.js","../../../../utils/map/gamemap":"/Users/Temich/PycharmProjects/tanks/src/utils/map/gamemap.js","./blockdrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/blockdrawer.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/brick.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/brick.js","source":"const EdgedBlockDrawer = require(\"../edgedblockdrawer\");\n\nconst MapDrawer = require(\"../../mapdrawer\");\n\nclass BrickBlockDrawer extends EdgedBlockDrawer {\n  constructor() {\n    super();\n    this.spritePath = \"blocks/brick\";\n  }\n\n}\n\nMapDrawer.registerBlockLoader(1, new BrickBlockDrawer());\nmodule.exports = BrickBlockDrawer;","deps":{"../../mapdrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/mapdrawer.js","../edgedblockdrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/edgedblockdrawer.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/chat/chatcontainer.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/chat/chatcontainer.js","source":"/* @load-resource: './chat.scss' */\nconst View = require('src/client/ui/view');\n\nconst HTMLEscape = require('src/utils/htmlescape');\n\nconst Color = require('src/utils/color');\n\nclass ChatContainer extends View {\n  constructor() {\n    super();\n    this.element.addClass(\"chat-container\");\n    this.chat = $(\"<div>\").addClass(\"chat\");\n    this.input = $(\"<input>\").addClass(\"chat-input\").hide();\n    this.input.on(\"keydown\", evt => {\n      if (evt.key === \"Enter\") {\n        let value = this.input.val().trim();\n\n        if (value.length) {\n          this.emit(\"chat\", value);\n        }\n      } else if (evt.key !== \"Escape\") return;\n\n      this.hideInput();\n      evt.stopPropagation();\n    });\n    this.element.append(this.chat);\n    this.element.append(this.input);\n  }\n\n  showInput() {\n    this.input.show();\n    this.input.focus();\n    this.emit(\"input-focus\");\n  }\n\n  hideInput() {\n    this.input.blur();\n    this.input.hide();\n    this.input.val(\"\");\n    this.emit(\"input-blur\");\n  }\n\n  addMessage(text) {\n    text = this.parseColor(HTMLEscape(text));\n    this.chat.append($(\"<div>\").html(text));\n    let element = this.element.get(0);\n    element.scrollTop = element.scrollHeight - element.clientHeight;\n  }\n\n  parseColor(text) {\n    // Some examples:\n    // §F00; This text will be colored red\n    // §0F0; This text will be colored green,§; but this text will be styled as default\n    // §!00F; This text will become bold and blue,§!; and this is a bold text with default color\n    return Color.replace(text, function (color, bold, text) {\n      if (bold) {\n        if (color) return \"<span style='font-weight:bold;color:#\" + color + \";'>\" + text + \"</span>\";\n        return \"<span style='font-weight:bold;'>\" + text + \"</span>\";\n      } else {\n        if (color) return \"<span style='color:#\" + color + \";'>\" + text + \"</span>\";else return text;\n      }\n    });\n  }\n\n  clear() {\n    this.chat.html(\"\");\n  }\n\n}\n\nmodule.exports = ChatContainer;","deps":{"src/utils/color":"/Users/Temich/PycharmProjects/tanks/src/utils/color.js","src/utils/htmlescape":"/Users/Temich/PycharmProjects/tanks/src/utils/htmlescape.js","src/client/ui/view":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/ui/overlay.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/ui/overlay.js","source":"/* @load-resource: './overlay.scss' */\nconst EventEmitter = require(\"../../utils/eventemitter\");\n\nclass Overlay extends EventEmitter {\n  constructor(options) {\n    super();\n    this.overlay = $(\"<div>\").addClass(\"overlay\");\n    this.shown = false;\n    this.root = options.root;\n    this.root.append(this.overlay);\n    this.overlay.hide();\n  }\n\n  show() {\n    if (this.shown) {\n      return;\n    }\n\n    this.shown = true;\n    this.overlay.show();\n    this.overlay.fadeIn();\n    this.overlay[0].focus();\n  }\n\n  hide(callback) {\n    if (!this.shown) {\n      return;\n    }\n\n    this.shown = false;\n    this.overlay.fadeOut(700, callback);\n    this.overlay[0].blur();\n  }\n\n}\n\nmodule.exports = Overlay;","deps":{"../../utils/eventemitter":"/Users/Temich/PycharmProjects/tanks/src/utils/eventemitter.js"}},"/Users/Temich/PycharmProjects/tanks/src/networking/packets/roomlistrequestpacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/roomlistrequestpacket.js","source":"const BinaryPacket = require(\"../binarypacket\");\n\nclass RoomListRequestPacket extends BinaryPacket {\n  static typeName() {\n    return 5;\n  }\n  /**\n   * @param {boolean} request Indicates if room list update should be enabled.\n   */\n\n\n  constructor(request) {\n    super();\n    this.request = request;\n  }\n\n  toBinary(encoder) {\n    /** @type {number} */\n    const byte = this.request ? 1 : 0;\n    encoder.writeUint8(byte);\n  }\n\n  static fromBinary(decoder) {\n    return new RoomListRequestPacket(decoder.readUint8());\n  }\n\n}\n\nBinaryPacket.register(RoomListRequestPacket);\nmodule.exports = RoomListRequestPacket;","deps":{"../binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/primaryoverlay.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/primaryoverlay.js","source":"const Overlay = require('src/client/ui/overlay');\n\nconst ControlsContainer = require(\"./controls/controlscontainer\");\n\nconst PlayMenuContainer = require(\"./play-menu/playmenucontainer\");\n\nconst TankPreviewContainer = require(\"./tank-preview/tankpreviewcontainer\");\n\nconst TankSelectContainer = require(\"./tank-select/tankselectcontainer\");\n\nconst RoomListRequestPacket = require('src/networking/packets/roomlistrequestpacket');\n\nconst RoomSelectContainer = require(\"./room-select/roomselectcontainer\");\n\nclass PrimaryOverlay extends Overlay {\n  constructor(options) {\n    super(options);\n    this.shown = false;\n    this.game = options.game;\n    this.menuContainer = $(\"<div>\");\n    this.steeringContainer = $(\"<div>\").hide();\n    this.overlay.append(this.menuContainer);\n    this.overlay.append(this.steeringContainer);\n    this.createTankPreviewMenu();\n    this.createPlayMenu();\n    this.createServerDropdown();\n    this.createTankSelectContainer();\n    this.createSteeringContainer();\n  }\n\n  shouldShowSteering() {\n    return localStorage.getItem(\"showHints\") !== \"0\";\n  }\n\n  setShouldShowSteering(value) {\n    localStorage.setItem(\"showHints\", value ? \"1\" : \"0\");\n  }\n\n  createPlayMenu() {\n    this.playMenu = new PlayMenuContainer();\n    this.playMenu.on(\"play\", () => {\n      if (this.shouldShowSteering() && !this.steeringShown) {\n        this.steeringShown = true;\n        this.menuContainer.fadeOut(() => {\n          this.steeringContainer.fadeIn(300);\n        });\n      } else {\n        this.emitPlay();\n        this.hide();\n      }\n    });\n    this.menuContainer.append(this.playMenu.element);\n  }\n\n  emitPlay() {\n    this.emit(\"play\", this.playMenu.nickInput.val(), this.tankSelectMenu.selectedTank);\n  }\n\n  createSteeringContainer() {\n    this.steeringMenu = new ControlsContainer();\n    this.steeringMenu.on(\"confirm\", disable => {\n      this.setShouldShowSteering(!disable);\n      this.hide(() => {\n        this.steeringContainer.hide();\n        this.menuContainer.show();\n      });\n      this.emitPlay();\n    });\n    this.steeringContainer.append(this.steeringMenu.element);\n  }\n\n  createServerDropdown() {\n    this.roomSelectContainer = new RoomSelectContainer();\n    this.menuContainer.append(this.roomSelectContainer.element);\n  }\n\n  createTankSelectContainer() {\n    this.tankSelectMenu = new TankSelectContainer();\n    this.tankSelectMenu.on(\"select\", tank => this.selectTank(tank));\n    this.selectTank(this.tankSelectMenu.selectedTank);\n    this.menuContainer.append(this.tankSelectMenu.element);\n  }\n\n  selectTank(tank) {\n    this.selectedTank = tank;\n    this.tankPreviewMenu.previewTank(tank);\n  }\n\n  createTankPreviewMenu() {\n    this.tankPreviewMenu = new TankPreviewContainer();\n    this.menuContainer.append(this.tankPreviewMenu.element);\n  }\n\n  show() {\n    if (this.shown) return;\n    super.show();\n    this.game.client.send(new RoomListRequestPacket(true));\n    this.tankSelectMenu.loop.start();\n  }\n\n  hide(callback) {\n    if (!this.shown) return;\n    super.hide(callback);\n    this.game.client.send(new RoomListRequestPacket(false));\n    this.tankSelectMenu.loop.stop();\n  }\n\n}\n\nmodule.exports = PrimaryOverlay;","deps":{"src/networking/packets/roomlistrequestpacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/roomlistrequestpacket.js","src/client/ui/overlay":"/Users/Temich/PycharmProjects/tanks/src/client/ui/overlay.js","./play-menu/playmenucontainer":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/play-menu/playmenucontainer.js","./controls/controlscontainer":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/controls/controlscontainer.js","./tank-preview/tankpreviewcontainer":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/tank-preview/tankpreviewcontainer.js","./tank-select/tankselectcontainer":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/tank-select/tankselectcontainer.js","./room-select/roomselectcontainer":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/room-select/roomselectcontainer.js"}},"/Users/Temich/PycharmProjects/tanks/src/effects/world/explode/worldexplodeeffectmodel.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/effects/world/explode/worldexplodeeffectmodel.js","source":"const WorldEffectModel = require(\"../worldeffectmodel\");\n\nclass WorldExplodeEffectModel extends WorldEffectModel {\n  static typeName() {\n    return 2;\n  }\n  /**\n   * Explode power\n   * @type {number}\n   */\n\n\n  /**\n   * @param {Object} options\n   * @param {number} options.x\n   * @param {number} options.y\n   * @param {number} [options.power]\n   */\n  constructor(options) {\n    super(options);\n    this.power = 4;\n    if (options.power) this.power = options.power;\n  }\n\n  toBinary(encoder) {\n    super.toBinary(encoder);\n    encoder.writeFloat32(this.power);\n  }\n\n  static fromBinary(decoder) {\n    let effect = super.fromBinary(decoder);\n    effect.power = decoder.readFloat32();\n    return effect;\n  }\n\n}\n\nWorldEffectModel.register(WorldExplodeEffectModel);\nmodule.exports = WorldExplodeEffectModel;","deps":{"../worldeffectmodel":"/Users/Temich/PycharmProjects/tanks/src/effects/world/worldeffectmodel.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/effects/world/types/clientworldexplodeeffect.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/effects/world/types/clientworldexplodeeffect.js","source":"const ClientWorldEffect = require(\"../clientworldeffect\");\n\nconst WorldExplodeEffectModel = require('src/effects/world/explode/worldexplodeeffectmodel');\n\nclass ClientWorldExplodeEffect extends ClientWorldEffect {\n  constructor(model, world) {\n    super(model, world);\n    this.model = void 0;\n    this.model = model;\n  }\n  /**\n   * @type {WorldExplodeEffectModel}\n   */\n\n\n  tick(dt) {\n    this.world.explosionEffectPool.start(this.model.x, this.model.y, this.model.power);\n    this.die();\n  }\n\n}\n\nClientWorldEffect.associate(WorldExplodeEffectModel, ClientWorldExplodeEffect);\nmodule.exports = ClientWorldExplodeEffect;","deps":{"../clientworldeffect":"/Users/Temich/PycharmProjects/tanks/src/client/effects/world/clientworldeffect.js","src/effects/world/explode/worldexplodeeffectmodel":"/Users/Temich/PycharmProjects/tanks/src/effects/world/explode/worldexplodeeffectmodel.js"}},"/Users/Temich/PycharmProjects/tanks/src/networking/packets/effectcreatepacket.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/effectcreatepacket.js","source":"const BinaryPacket = require(\"../binarypacket\");\n\nconst EffectModel = require('src/effects/effectmodel');\n\nclass EffectCreatePacket extends BinaryPacket {\n  static typeName() {\n    return 14;\n  }\n  /**\n   * @param {EffectModel} effect\n   */\n\n\n  constructor(effect) {\n    super();\n    this.effect = effect;\n  }\n\n  toBinary(encoder) {\n    EffectModel.serialize(this.effect, encoder);\n  }\n\n  static fromBinary(decoder) {\n    const effect = EffectModel.deserialize(decoder, EffectModel);\n    return new this(effect);\n  }\n\n}\n\nBinaryPacket.register(EffectCreatePacket);\nmodule.exports = EffectCreatePacket;","deps":{"../binarypacket":"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js","src/effects/effectmodel":"/Users/Temich/PycharmProjects/tanks/src/effects/effectmodel.js"}},"/Users/Temich/PycharmProjects/tanks/src/server/effects/servereffect.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/server/effects/servereffect.js","source":"const AbstractEffect = require('src/effects/abstracteffect');\n\nclass ServerEffect extends AbstractEffect {\n  /**\n   * Finds server-side implementation of the effect model\n   * @param model {EffectModel}\n   * @returns {ServerEffect}\n   */\n  static fromModel(model) {\n    let clazz =\n    /** @type Class<ServerEffect> */\n    this.Types.get(model.constructor);\n    if (clazz) return new clazz(model);\n    return null;\n  }\n\n}\n\nServerEffect.shouldSynchroniseRemoval = true;\nmodule.exports = ServerEffect;","deps":{"src/effects/abstracteffect":"/Users/Temich/PycharmProjects/tanks/src/effects/abstracteffect.js"}},"/Users/Temich/PycharmProjects/tanks/src/server/effects/world/serverworldeffect.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/server/effects/world/serverworldeffect.js","source":"const ServerEffect = require(\"../servereffect\");\n\nconst WorldEffectModel = require('src/effects/world/worldeffectmodel');\n/**\n * This class unites all the world effect implementations on the server\n * side. If the effect is visual and should not have a separate logic\n * on the server side (does not scatter players, does not break\n * blocks, etc.), it is enough to set only its {@link WorldEffectModel} and\n * not to use this class. You also should not initialize this class\n * directly, use {@link ServerWorldEffect#fromModel fromModel} static method\n * instead\n */\n\n\nclass ServerWorldEffect extends ServerEffect {\n  /**\n   * @type WorldEffectModel\n   */\n\n  /**\n   * @type ServerGameWorld\n   */\n\n  /**\n   * @private\n   * Creates server-side world effect class, linked to specific\n   * {@link WorldEffectModel} and {@link ServerGameWorld}. This\n   * constructor should not be called directly, use\n   * {@link ServerWorldEffect#fromModel fromModel} static method\n   * instead\n   * @param {WorldEffectModel} model\n   * @param {ServerGameWorld} world\n   */\n  constructor(model, world) {\n    super(model);\n    this.model = void 0;\n    this.world = void 0;\n    this.model = model;\n    this.world = world;\n  } // noinspection JSCheckFunctionSignatures\n\n  /**\n   * Wraps the {@link WorldEffectModel} in corresponding\n   * {@link ServerWorldEffect} class. If this effect has any additional\n   * server-side logic, the instance of appropriate subclass will be\n   * returned. Otherwise, this method returns {@link ServerWorldEffect}\n   * instance\n   * @param model {WorldEffectModel} Effect model to wrap\n   * @param world {ServerWorldEffect} A world which this effect will be created in\n   * @returns {ServerWorldEffect}\n   */\n\n\n  static fromModel(model, world) {\n    let clazz =\n    /** @type Class<ServerWorldEffect> */\n    this.Types.get(model.constructor);\n    if (clazz) return new clazz(model, world); // If this model has no server-side implementation, return\n    // default class\n\n    if (model instanceof WorldEffectModel) {\n      return new ServerWorldEffect(model, world);\n    }\n\n    throw new TypeError(\"The 'model' argument should inherit WorldEffectModel\");\n  }\n\n}\n\nmodule.exports = ServerWorldEffect;","deps":{"../servereffect":"/Users/Temich/PycharmProjects/tanks/src/server/effects/servereffect.js","src/effects/world/worldeffectmodel":"/Users/Temich/PycharmProjects/tanks/src/effects/world/worldeffectmodel.js"}},"/Users/Temich/PycharmProjects/tanks/src/server/entity/bullet/serverbullet.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/server/entity/bullet/serverbullet.js","source":"const WorldExplodeEffectModel = require('src/effects/world/explode/worldexplodeeffectmodel');\n\nconst ServerWorldEffect = require('src/server/effects/world/serverworldeffect');\n\nconst ServerEntity = require(\"../serverentity\");\n\nconst GameMap = require(\"../../../utils/map/gamemap\");\n\nclass ServerBullet extends ServerEntity {\n  /** @type Player */\n  constructor(model) {\n    super(model);\n    this.shooter = null;\n    this.wallDamage = 0;\n    this.playerDamage = 0;\n    this.explodePower = 0;\n    this.mass = 3;\n    this.startVelocity = 20;\n  }\n\n  tick(dt) {\n    let dx = this.model.dx * dt;\n    let dy = this.model.dy * dt;\n\n    if (dx !== 0 || dy !== 0) {\n      let collision = this.checkWallHit(this.model.x, this.model.y, dx, dy);\n      let world = this.shooter.world;\n\n      if (collision) {\n        this.model.x = collision.point.x;\n        this.model.y = collision.point.y;\n\n        if (this.wallDamage) {\n          if (world.map.getBlock(collision.block.x, collision.block.y)) {\n            world.map.damageBlock(collision.block.x, collision.block.y, this.wallDamage);\n          }\n        }\n\n        this.die();\n        return;\n      }\n\n      let playerCollision = this.checkPlayerHit(this.model.x, this.model.y, dx, dy);\n\n      if (playerCollision) {\n        this.model.x += dx * playerCollision.distance;\n        this.model.y += dy * playerCollision.distance;\n        this.die();\n        return;\n      }\n    }\n\n    super.tick(dt);\n  }\n\n  die() {\n    if (this.model.dead) return;\n    this.model.dead = true;\n\n    if (this.explodePower) {\n      let effect = new WorldExplodeEffectModel({\n        x: this.model.x,\n        y: this.model.y,\n        power: this.explodePower\n      });\n      this.shooter.world.addEffect(ServerWorldEffect.fromModel(effect, this.shooter.world));\n    }\n  }\n\n}\n\nmodule.exports = ServerBullet;","deps":{"../../../utils/map/gamemap":"/Users/Temich/PycharmProjects/tanks/src/utils/map/gamemap.js","src/effects/world/explode/worldexplodeeffectmodel":"/Users/Temich/PycharmProjects/tanks/src/effects/world/explode/worldexplodeeffectmodel.js","../serverentity":"/Users/Temich/PycharmProjects/tanks/src/server/entity/serverentity.js","src/server/effects/world/serverworldeffect":"/Users/Temich/PycharmProjects/tanks/src/server/effects/world/serverworldeffect.js"}},"/Users/Temich/PycharmProjects/tanks/src/weapon/weapon.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/weapon/weapon.js","source":"const Box2D = require(\"../library/box2d\");\n\nconst Bullet42mmModel = require(\"../entity/bullet/models/42mm\");\n\nconst ServerBullet = require(\"../server/entity/bullet/serverbullet\");\n\nclass Weapon {\n  /**\n   * Indicates whether weapon is currently shooting\n   * @type {boolean}\n   */\n\n  /**\n   * Trigger axle. Weapon will shoot if its value is above 0.5\n   * @type {Axle}\n   */\n\n  /**\n   * Tanks that equipped with this weapon\n   * @type {ServerTank}\n   */\n  constructor(config) {\n    this.engaged = false;\n    this.triggerAxle = null;\n    this.tank = null;\n    config = config || {};\n    this.config = config;\n    this.maxAmmo = config.maxAmmo || Infinity;\n    this.shootRate = config.shootRate || 2000;\n    this.reloadTime = config.reloadTime || 4000;\n    this.bulletType = config.bulletType || Bullet42mmModel;\n    this.tank = config.tank;\n    this.triggerAxle = config.triggerAxle;\n    this.ammo = this.maxAmmo;\n    this.isReloading = false;\n    this.shootingTime = null;\n    this.engaged = false;\n  }\n\n  reload() {\n    if (this.isReloading) return;\n    this.isReloading = true;\n    this.shootingTime = Date.now();\n  }\n\n  launchBullet(tank, x, y, rotation) {\n    let sin, cos;\n\n    if (rotation === undefined) {\n      sin = tank.model.matrix.sin;\n      cos = tank.model.matrix.cos;\n      rotation = tank.model.body.GetAngle();\n    } else {\n      sin = Math.sin(rotation);\n      cos = Math.cos(rotation);\n    }\n\n    const bullet = new this.bulletType();\n    const entity = ServerBullet.fromModel(bullet);\n    entity.shooter = tank.player;\n    bullet.rotation = rotation;\n    bullet.x = x;\n    bullet.y = y;\n    bullet.dx = -sin * entity.startVelocity;\n    bullet.dy = cos * entity.startVelocity;\n    tank.world.createEntity(entity);\n    tank.model.body.ApplyImpulse(new Box2D.b2Vec2(-bullet.dx * entity.mass, -bullet.dy * entity.mass), new Box2D.b2Vec2(x, y));\n  }\n\n  tick() {\n    if (!this.triggerAxle) return;\n\n    if (this.tank.model.health <= 0) {\n      if (this.engaged) {\n        this.engaged = false;\n        this.onDisengage();\n      }\n    } else if (this.triggerAxle.needsUpdate()) {\n      let engaged = this.triggerAxle.getValue() > 0.5;\n\n      if (engaged !== this.engaged) {\n        this.engaged = engaged;\n\n        if (engaged) {\n          this.onEngage();\n        } else {\n          this.onDisengage();\n        }\n      }\n    }\n\n    if (this.engaged && this.ready()) {\n      this.shoot();\n    }\n  }\n\n  onEngage() {}\n\n  onDisengage() {}\n\n  shoot() {\n    let position = this.tank.model.body.GetPosition();\n    this.launchBullet(this.tank, position.x, position.y);\n    this.popBullet();\n  }\n\n  popBullet() {\n    this.ammo--;\n\n    if (this.ammo === 0) {\n      this.reload();\n    } else {\n      this.shootingTime = Date.now();\n    }\n  }\n\n  ready() {\n    if (!this.shootingTime) return true;\n    const time = Date.now() - this.shootingTime;\n\n    if (this.isReloading) {\n      if (time >= this.reloadTime) {\n        this.shootingTime = null;\n        this.isReloading = false;\n        this.ammo = this.maxAmmo;\n        return true;\n      } else return false;\n    } else {\n      return time >= this.shootRate;\n    }\n  }\n\n  getId() {\n    return this.id;\n  }\n\n}\n\nmodule.exports = Weapon;","deps":{"../library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","../entity/bullet/models/42mm":"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/42mm.js","../server/entity/bullet/serverbullet":"/Users/Temich/PycharmProjects/tanks/src/server/entity/bullet/serverbullet.js"}},"/Users/Temich/PycharmProjects/tanks/src/weapon/models/cannon.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/weapon/models/cannon.js","source":"const Weapon = require(\"../weapon\");\n\nconst CannonBall = require(\"../../entity/bullet/models/cannonball\");\n\nclass WeaponCannon extends Weapon {\n  constructor(config) {\n    config = Object.assign({\n      maxAmmo: 5,\n      shootRate: 2000,\n      reloadTime: 7000,\n      bulletType: CannonBall\n    }, config);\n    super(config);\n    this.id = 2;\n  }\n\n}\n\nmodule.exports = WeaponCannon;","deps":{"../../entity/bullet/models/cannonball":"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/cannonball.js","../weapon":"/Users/Temich/PycharmProjects/tanks/src/weapon/weapon.js"}},"/Users/Temich/PycharmProjects/tanks/src/tanks/models/bigboi.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/tanks/models/bigboi.js","source":"const TankModel = require(\"../tankmodel\");\n\nconst PhysicsUtils = require(\"../../utils/physicsutils.js\");\n\nconst BasicTankBehaviour = require(\"../physics/trucktankbehaviour\");\n\nconst Box2D = require(\"../../library/box2d\");\n\nconst Cannon = require(\"../../weapon/models/cannon\");\n\nclass BigBoiTank extends TankModel {\n  constructor(options) {\n    super(options);\n    this.behaviour = new BasicTankBehaviour(this, {\n      lateralFriction: 150,\n      power: 40000,\n      angulardamping: 2,\n      angularFriction: 0.1,\n      truckSlipperness: 0\n    });\n  }\n\n  static getWeapon() {\n    return Cannon;\n  }\n\n  static getMaximumHealth() {\n    return 20;\n  }\n\n  static getId() {\n    return 5;\n  }\n\n  initPhysics(world) {\n    this.world = world;\n    let size = 9;\n    const segment = size / 2;\n    let bodyFixture = PhysicsUtils.squareFixture(size, size * 0.87, null, {\n      density: 3.5\n    });\n    let trackFixtures = PhysicsUtils.horizontalSquareFixtures(segment, size, new Box2D.b2Vec2(size, 0), {\n      density: 2\n    });\n    this.body = PhysicsUtils.dynamicBody(world, {\n      linearDamping: 0.5\n    });\n    this.body.CreateFixture(bodyFixture);\n\n    for (let fixture of trackFixtures) this.body.CreateFixture(fixture);\n  }\n\n}\n\nTankModel.register(BigBoiTank);\nmodule.exports = BigBoiTank;","deps":{"../../library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","../../utils/physicsutils.js":"/Users/Temich/PycharmProjects/tanks/src/utils/physicsutils.js","../tankmodel":"/Users/Temich/PycharmProjects/tanks/src/tanks/tankmodel.js","../physics/trucktankbehaviour":"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/trucktankbehaviour.js","../../weapon/models/cannon":"/Users/Temich/PycharmProjects/tanks/src/weapon/models/cannon.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/bigboi.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/bigboi.js","source":"const ClientTank = require(\"../clienttank\");\n\nconst TankDrawer = require(\"../../graphics/drawers/tankdrawer\");\n\nconst BigBoiTankModel = require(\"../../../tanks/models/bigboi\");\n\nconst Engine = require(\"../../engine\");\n\nconst FX = require(\"../../sound/fx\");\n\nconst Sprite = require(\"../../sprite\");\n\nconst LightMaskTextureProgram = require(\"../../graphics/programs/lightmasktextureprogram\");\n\nconst TruckProgram = require(\"../../graphics/programs/truckprogram\");\n\nclass Drawer extends TankDrawer {\n  constructor(tank, ctx) {\n    super(tank, ctx);\n    this.size = 9;\n    this.bodyBrightSprite = Sprite.named(\"tanks/golden-bigboi/body-bright\");\n    this.bodyDarkSprite = Sprite.named(\"tanks/golden-bigboi/body-dark\");\n    this.bodyLightMask = Sprite.named(\"tanks/golden-bigboi/mask\");\n    this.truckSprite = Sprite.named(\"tanks/bigboi/truck\");\n    this.bodyProgram = new LightMaskTextureProgram(\"tank-body-drawer\", ctx);\n    this.truckProgram = new TruckProgram(\"tank-truck-drawer\", ctx);\n    this.truckProgram.use();\n    this.truckProgram.setSprite(this.truckSprite);\n    this.truckProgram.setTruckLength(4.0);\n    this.truckProgram.setTruckRadius(0.25);\n  }\n\n  draw(camera, dt) {\n    let angle = this.tank.model.body.GetAngle();\n    camera.matrix.save();\n    this.drawSmoke(dt);\n    const scale = this.size;\n    const dscale = scale * 2;\n    let leftTrackDist = this.tank.model.behaviour.details.leftTrackDist;\n    let rightTrackDist = this.tank.model.behaviour.details.rightTrackDist;\n    let position = this.tank.model.body.GetPosition();\n    camera.matrix.translate(position.x, position.y);\n    camera.matrix.rotate(-angle);\n    this.truckProgram.use();\n    this.truckProgram.prepare();\n    this.truckProgram.drawTruck(scale / 2, -scale, scale, dscale, 4, leftTrackDist);\n    this.truckProgram.drawTruck(-scale * 3 / 2, -scale, scale, dscale, 4, rightTrackDist);\n    this.truckProgram.matrixUniform.setMatrix(camera.matrix.m);\n    this.truckProgram.draw();\n    this.bodyProgram.prepare();\n    this.bodyProgram.use();\n    this.bodyProgram.drawMaskedSprite(this.bodyBrightSprite, this.bodyDarkSprite, this.bodyLightMask, -scale, -scale * 0.92, scale * 2, scale * 1.98);\n    this.bodyProgram.setLightAngle(-angle);\n    this.bodyProgram.matrixUniform.setMatrix(camera.matrix.m);\n    this.bodyProgram.draw();\n    camera.matrix.restore();\n  }\n\n}\n\nclass BigboiTank extends ClientTank {\n  constructor(model) {\n    super(model);\n    this.engine = new Engine({\n      sound: FX.ENGINE_1,\n      gears: [{\n        high: 1.9,\n        gearing: 1\n      }, {\n        low: 1.4,\n        gearing: 0.8\n      }],\n      multiplier: 20,\n      pitch: 0.8\n    });\n  }\n\n  static getDrawer() {\n    return Drawer;\n  }\n\n  static getModel() {\n    return BigBoiTankModel;\n  }\n\n  static getName() {\n    return \"Big Boi\";\n  }\n\n  static getDescription() {\n    return \"Это невероятное чудо техники создано, чтобы \" + \"уничтожать всё на своём пути. Снаряд этого танка, \" + \"имея огромную массу, способен резко изменить \" + \"траекторию движения соперника или вовсе закрутить и обездвижить его.\";\n  }\n\n  static getStats() {\n    return {\n      damage: 4,\n      health: 20,\n      speed: 46,\n      shootrate: 2,\n      reload: 7\n    };\n  }\n\n}\n\nClientTank.register(BigboiTank);\nmodule.exports = BigboiTank;","deps":{"../../sprite":"/Users/Temich/PycharmProjects/tanks/src/client/sprite.js","../clienttank":"/Users/Temich/PycharmProjects/tanks/src/client/tanks/clienttank.js","../../engine":"/Users/Temich/PycharmProjects/tanks/src/client/engine.js","../../graphics/programs/lightmasktextureprogram":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/lightmasktextureprogram.js","../../graphics/drawers/tankdrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/tankdrawer.js","../../graphics/programs/truckprogram":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/truckprogram.js","../../sound/fx":"/Users/Temich/PycharmProjects/tanks/src/client/sound/fx.js","../../../tanks/models/bigboi":"/Users/Temich/PycharmProjects/tanks/src/tanks/models/bigboi.js"}},"/Users/Temich/PycharmProjects/tanks/src/effects/world/explode/worldexplodeeffectmodelpool.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/effects/world/explode/worldexplodeeffectmodelpool.js","source":"const GameMap = require('src/utils/map/gamemap');\n\nconst Box2D = require('src/library/box2d');\n\nclass WorldExplodeEffectModelPool {\n  /**\n   * @type GameWorld\n   */\n  constructor(config) {\n    this.world = void 0;\n    this.world = config.world;\n    this.powerDamping = 0.01;\n    this.stepsPerSecond = 30;\n    this.stepsWaiting = 0;\n    /**\n     * @type Map<number, Map<number, Object>>\n     */\n\n    this.walkers = new Map();\n    this.gridSize = GameMap.BLOCK_SIZE;\n    this.offsetMap = [1, 0, 1, -1, 0, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, 1];\n\n    this.roundOffsetMap = (() => {\n      let array = [];\n\n      for (let i = 0; i < Math.PI * 2; i += Math.PI / 4) {\n        array.push(Math.sin(i));\n        array.push(Math.cos(i));\n      }\n\n      return array;\n    })(); // Сколько единиц скорости соответствует\n    // одной единицы энергии ячейки\n\n\n    this.waveCoefficient = 1; // 10% энергии взрыва уходит на урон блокам\n    // Остальные 90% остаются у блока\n\n    this.damageEnergyFraction = 0.1; // Какому усилию соответствует единица скорости волны\n    // Этот коэффициент настраивает силу отталкивания танков\n\n    this.forceCoefficient = 10000; // Практика показала, что если смотреть на два блока,\n    // а не на один, при рассчете разницы давления, то\n    // сила отталкивания будет рассчитана более правильно.\n\n    this.pressureDifferentialDistance = this.gridSize * 2;\n  }\n\n  isBlock(x, y) {\n    let block = this.world.map.getBlock(Math.floor(x / GameMap.BLOCK_SIZE), Math.floor(y / GameMap.BLOCK_SIZE));\n    if (!block) return true;\n    return block.constructor.isSolid;\n  }\n  /**\n   * Adds a high pressure zone to this pool (aka an explosion source). If\n   * given coordinates does not match the pool grid, the pressure will\n   * be distributed among the nearest grid cells according to the\n   * linear interpolation algorhitm\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} power\n   */\n\n\n  start(x, y, power) {\n    let shift = this.gridSize / 2;\n    power /= 4;\n    this.startParticular(x + shift, y + shift, power);\n    this.startParticular(x - shift, y + shift, power);\n    this.startParticular(x + shift, y - shift, power);\n    this.startParticular(x - shift, y - shift, power);\n  }\n  /**\n   * @private\n   * @param x\n   * @param y\n   * @param power\n   * @return {[{vx: Number, vy: Number, x: Number, vn: Number, y: Number, power: Number}]}\n   */\n\n\n  interpolateWalkers(x, y, power) {\n    // Linear interpolation alghoritm\n    let gridX = x / this.gridSize;\n    let gridY = y / this.gridSize;\n    let dx = gridX - (gridX = Math.floor(gridX - 0.5) + 0.5);\n    let dy = gridY - (gridY = Math.floor(gridY - 0.5) + 0.5);\n    let walkers = [this.walker(gridX * this.gridSize, gridY * this.gridSize, 0, 0, power * (1 - dx))];\n    if (dx > 0) walkers.push(this.walker((gridX + 1) * this.gridSize, gridY * this.gridSize, 0, 0, power * dx));\n\n    if (dy > 0) {\n      if (dx > 0) {\n        walkers.push(this.walker((gridX + 1) * this.gridSize, (gridY + 1) * this.gridSize, 0, 0, walkers[1].power * dy));\n        walkers[1].power *= 1 - dy;\n      }\n\n      walkers.push(this.walker(gridX * this.gridSize, (gridY + 1) * this.gridSize, 0, 0, walkers[0].power * dy));\n      walkers[0].power *= 1 - dy;\n    }\n\n    return walkers;\n  }\n  /**\n   * @private\n   * @param x\n   * @param y\n   * @param power\n   */\n\n\n  startParticular(x, y, power) {\n    let walkers = this.interpolateWalkers(x, y, power); // Координаты ячейки, находящейся ближе всего к взрыву\n\n    const sourceX = (Math.floor(x / this.gridSize) + 0.5) * this.gridSize;\n    const sourceY = (Math.floor(y / this.gridSize) + 0.5) * this.gridSize; // Надоело строить из себя англичанина. Короче, эта функция говорит,\n    // есть ли путь из точки, куда попал снаряд, в соседнюю точку. Сам по\n    // себе взрыв в начале распространяется по четырем ячейкам, так\n    // что здесь проверяются только углы (sourceX, y), (x, sourceY) А если\n    // что-то из этого равно исходным координатам, достаточно проверить только\n    // одну точку - ту, которая дается в параметр\n\n    const possible = (x, y) => {\n      if (this.isBlock(x, y)) return false;\n      return x === sourceX || y === sourceY || !this.isBlock(sourceX, y) || !this.isBlock(x, sourceY);\n    };\n\n    let powerToSpread = 0;\n    let succeededWalkers = []; // Здесь мы ищем, на какие точки давление может быть\n    // распределено, а на какие - нет.\n\n    for (let walker of walkers) {\n      if (possible(walker.x, walker.y)) {\n        succeededWalkers.push(walker);\n      } else {\n        powerToSpread += walker.power;\n      }\n    }\n\n    powerToSpread /= succeededWalkers.length;\n\n    for (let walker of succeededWalkers) {\n      let current = this.getWalker(this.walkers, walker.x, walker.y);\n\n      if (current) {\n        current.power += powerToSpread + walker.power;\n      } else {\n        walker.power += powerToSpread;\n        this.addWalker(this.walkers, walker);\n      }\n    }\n  } // Не хочется оборачивать эту структуру в класс, потому что это замедлит код.\n\n  /**\n   * @private\n   * @param x\n   * @param y\n   * @param vx\n   * @param vy\n   * @param power\n   * @return {{vx: *, vy: *, x: *, vn: number, y: *, power: *}}\n   */\n\n\n  walker(x, y, vx, vy, power) {\n    return {\n      x: x,\n      y: y,\n      vx: vx,\n      vy: vy,\n      vn: 1,\n      power: power\n    };\n  }\n  /**\n   * @private\n   * @param map\n   * @param x\n   * @param y\n   * @return {{vx: *, vy: *, x: *, vn: number, y: *, power: *}|null}\n   */\n\n\n  getWalker(map, x, y) {\n    let row, column;\n\n    if ((row = map.get(x)) && (column = row.get(y))) {\n      return column;\n    }\n\n    return null;\n  }\n  /**\n   * @private\n   * @param map\n   * @param walker\n   */\n\n\n  addWalker(map, walker) {\n    let row;\n\n    if (row = map.get(walker.x)) {\n      row.set(walker.y, walker);\n    } else {\n      map.set(walker.x, new Map([[walker.y, walker]]));\n    }\n  }\n  /**\n   * @private\n   * @param dt\n   */\n\n\n  step(dt) {\n    this.tickEntities(dt);\n    this.stepsWaiting -= 1;\n    let newWalkers = new Map();\n\n    const walk = (walker, dx, dy, power) => {\n      let x = walker.x + dx * this.gridSize;\n      let y = walker.y + dy * this.gridSize;\n      if (this.isBlock(x, y)) return;\n      let vx = walker.vx + dx * power * this.waveCoefficient;\n      let vy = walker.vy + dy * power * this.waveCoefficient;\n      let current = this.getWalker(newWalkers, x, y);\n\n      if (current) {\n        current.vx += vx;\n        current.vy += vy;\n        current.vn++;\n        current.power += power;\n      } else {\n        this.addWalker(newWalkers, this.walker(x, y, vx, vy, power));\n      }\n    };\n\n    let sibling = new Array(8);\n\n    for (let columns of this.walkers.values()) {\n      for (let walker of columns.values()) {\n        let x = walker.x;\n        let y = walker.y;\n        let total = 1;\n\n        for (let j = 0, i = 0; j < 8; j++) {\n          let dx = this.offsetMap[i++];\n          let dy = this.offsetMap[i++];\n\n          if (this.isBlock(x + dx * this.gridSize, y + dy * this.gridSize)) {\n            sibling[j] = -this.damageEnergyFraction; // Reflection algorithm\n            // Sibling element is negative meaning block is being damaged\n\n            if (dx && !dy && dx > 0 === walker.vx > 0) walker.vx = -walker.vx;\n            if (!dx && dy && dy > 0 === walker.vy > 0) walker.vy = -walker.vy;\n          } else sibling[j] = 1;\n        }\n\n        for (let j = 0, i = 0; j < 8; j++) {\n          let dx = this.offsetMap[i++];\n          let dy = this.offsetMap[i++];\n          if (j % 2 === 1) continue;\n          let power = dx * walker.vx + dy * walker.vy;\n          if (sibling[j] < 0) power /= this.waveCoefficient;\n          power += 1;\n\n          if (power > 0) {\n            sibling[j] *= power;\n          } else {\n            sibling[j] = 0;\n          }\n        }\n\n        for (let j = 1; j <= 7; j += 2) {\n          sibling[j] *= Math.max(0, sibling[j - 1]) + Math.max(0, sibling[(j + 1) % 8]);\n        }\n\n        for (let j = 0; j < 8; j++) {\n          total += Math.abs(sibling[j]);\n        }\n\n        walker.power = (walker.power - this.powerDamping) / total;\n        walker.vx /= total;\n        walker.vy /= total;\n        if (walker.power <= 0) continue;\n        walk(walker, 0, 0, walker.power);\n\n        for (let j = 0, i = 0; j < 8; j++) {\n          let dx = this.offsetMap[i++];\n          let dy = this.offsetMap[i++];\n\n          if (sibling[j] > 0) {\n            walk(walker, dx, dy, walker.power * sibling[j]);\n          } else if (sibling[j] < 0) {\n            this.damageBlock(walker.x + dx * this.gridSize, walker.y + dy * this.gridSize, -sibling[j] * walker.power);\n          }\n        }\n      }\n    }\n\n    for (let columns of this.walkers.values()) {\n      for (let walker of columns.values()) {\n        walker.vx /= walker.vn;\n        walker.vy /= walker.vn;\n        walker.vn = 1;\n      }\n    }\n\n    this.walkers = newWalkers;\n  }\n\n  damageBlock(x, y, damage) {}\n\n  mapPower(walkers, x, y) {\n    const relX = x / this.gridSize - 0.5;\n    const relY = y / this.gridSize - 0.5;\n    const fromX = (Math.floor(relX) + 0.5) * this.gridSize;\n    const fromY = (Math.floor(relY) + 0.5) * this.gridSize;\n    const toX = (Math.ceil(relX) + 0.5) * this.gridSize;\n    const toY = (Math.ceil(relY) + 0.5) * this.gridSize;\n    let resultPower = 0;\n\n    for (let gridX = fromX; gridX <= toX; gridX += this.gridSize) {\n      let row = this.walkers.get(gridX);\n      if (!row) continue;\n\n      for (let gridY = fromY; gridY <= toY; gridY += this.gridSize) {\n        let walker = row.get(gridY);\n        if (!walker) continue;\n        let dx = 1 - Math.abs(gridX - x) / this.gridSize;\n        let dy = 1 - Math.abs(gridY - y) / this.gridSize;\n        let fraction = dx * dy;\n        resultPower += walker.power * fraction;\n      }\n    }\n\n    return resultPower;\n  }\n\n  tickEntities(dt) {\n    let gridDifference = this.gridSize / GameMap.BLOCK_SIZE;\n\n    for (let player of this.world.players.values()) {\n      let tank = player.tank;\n      if (!tank) continue;\n      let position = tank.model.body.GetPosition();\n      const x = position.x;\n      const y = position.y;\n      const sourceWalkerPower = this.mapPower(this.walkers, x, y);\n      let resultVx = 0;\n      let resultVy = 0;\n      let maxPowerDifference = 0; // Checking nearby walkers\n\n      for (let i = 0; i < this.roundOffsetMap.length;) {\n        let dx = this.roundOffsetMap[i++];\n        let dy = this.roundOffsetMap[i++];\n        let skip = false;\n        let gridX;\n        let gridY;\n\n        for (let distance = this.gridSize; distance <= this.pressureDifferentialDistance; distance += GameMap.BLOCK_SIZE) {\n          gridX = x + dx * distance;\n          gridY = y + dy * distance;\n\n          if (this.isBlock(gridX, gridY)) {\n            skip = true;\n            continue;\n          }\n        }\n\n        if (skip) continue;\n        let power = this.mapPower(this.walkers, gridX, gridY);\n        let powerDifference = sourceWalkerPower - power;\n        if (powerDifference > maxPowerDifference) maxPowerDifference = powerDifference;\n        resultVx += dx * powerDifference;\n        resultVy += dy * powerDifference;\n      }\n\n      let length = Math.sqrt(resultVx ** 2 + resultVy ** 2);\n      if (length == 0) return 0;\n      resultVx /= length;\n      resultVy /= length;\n      maxPowerDifference *= this.forceCoefficient;\n      resultVx *= maxPowerDifference;\n      resultVy *= maxPowerDifference;\n      tank.model.body.ApplyImpulse(new Box2D.b2Vec2(resultVx, resultVy), position);\n    }\n  }\n\n  normalize(x) {\n    return (1 - 1 / (Math.abs(x) + 1)) * Math.sign(x);\n  }\n\n  tick(dt) {\n    if (this.walkers.size === 0) return;\n    this.stepsWaiting += this.stepsPerSecond * dt;\n\n    while (this.stepsWaiting > 1) this.step(1 / this.stepsPerSecond);\n  }\n\n}\n\nmodule.exports = WorldExplodeEffectModelPool;","deps":{"src/library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","src/utils/map/gamemap":"/Users/Temich/PycharmProjects/tanks/src/utils/map/gamemap.js"}},"/Users/Temich/PycharmProjects/tanks/src/gameworld.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/gameworld.js","source":"const Box2D = require('src/library/box2d');\n\nconst GameMap = require('src/utils/map/gamemap');\n\nconst EventEmitter = require('src/utils/eventemitter');\n\nconst WorldExplodeEffectModelPool = require('src/effects/world/explode/worldexplodeeffectmodelpool');\n\nclass GameWorld extends EventEmitter {\n  /**\n   * @type {Map<number, GameWorld>}\n   */\n\n  /**\n   * @type {GameMap}\n   */\n\n  /**\n   * @type {Map<number, Player>}\n   */\n\n  /**\n   * @type {Map<number, AbstractEntity>}\n   */\n\n  /**\n   * @type {Map<number, AbstractEffect>}\n   */\n\n  /**\n   * @type WorldExplodeEffectModelPool\n   */\n  constructor(options) {\n    super();\n    this.world = void 0;\n    this.map = void 0;\n    this.players = new Map();\n    this.entities = new Map();\n    this.effects = new Map();\n    this.explosionEffectPool = void 0;\n    options = Object.assign({\n      physicsTick: 0.002,\n      maxTicks: 10,\n      positionSteps: 1,\n      velocitySteps: 1\n    }, options);\n    this.world = new Box2D.b2World(new Box2D.b2Vec2(), true);\n    this.map = options.map;\n    this.physicsTick = options.physicsTick;\n    this.maxTicks = options.maxTicks;\n    this.positionSteps = options.positionSteps;\n    this.velocitySteps = options.velocitySteps;\n    this.createExplosionPool();\n  }\n\n  createExplosionPool() {\n    this.explosionEffectPool = new WorldExplodeEffectModelPool({\n      world: this\n    });\n  } // TODO: Вынести в отдельный класс\n\n\n  rebuildBlockPhysics() {\n    for (let player of this.players.values()) {\n      if (!player.tank) continue;\n      let position = player.tank.model.body.GetPosition();\n      const x = Math.floor(position.x / GameMap.BLOCK_SIZE);\n      const y = Math.floor(position.y / GameMap.BLOCK_SIZE);\n      const tx = x + 2;\n      const ty = y + 2;\n      let n = 0;\n\n      for (let i = x - 2; i <= tx; i++) {\n        for (let j = y - 2; j <= ty; j++, n++) {\n          if (i === x && j === y) continue;\n          let block = player.blockMap[n];\n          let mapBlock = this.map.getBlock(i, j);\n\n          if (mapBlock && mapBlock.constructor.isSolid || i < 0 || j < 0 || i >= this.map.width || j >= this.map.height) {\n            let pos = block.GetPosition();\n            pos.x = (i + 0.5) * GameMap.BLOCK_SIZE;\n            pos.y = (j + 0.5) * GameMap.BLOCK_SIZE;\n            block.SetPosition(pos);\n            block.m_fixtureList.m_filter.maskBits = 0xFFFF;\n          } else {\n            if (block.m_fixtureList.m_filter.maskBits) {\n              let pos = block.GetPosition();\n              pos.Set(-1000, -1000);\n              block.SetPosition(pos);\n            }\n\n            block.m_fixtureList.m_filter.maskBits = 0;\n          }\n        }\n      }\n    }\n  }\n\n  processPhysics(dt) {\n    this.explosionEffectPool.tick(dt);\n    let steps = Math.floor(dt / this.physicsTick);\n    if (steps > this.maxTicks) steps = this.maxTicks;\n\n    for (let i = 0; i < steps; i++) this.world.Step(this.physicsTick, 1, 1);\n\n    this.rebuildBlockPhysics();\n    this.world.ClearForces();\n\n    for (let player of this.players.values()) {\n      if (player.tank) player.tank.tick(dt);\n    }\n  }\n\n  processEntities(dt) {\n    for (let entity of this.entities.values()) {\n      entity.tick(dt);\n      if (entity.model.dead) this.removeEntity(entity);\n    }\n  }\n\n  processEffects(dt) {\n    for (let effect of this.effects.values()) {\n      effect.tick(dt);\n\n      if (effect.dead) {\n        this.removeEffect(effect);\n      }\n    }\n  }\n\n  tick(dt) {\n    // Processing entities first because\n    // otherwise processPhysics method\n    // does an excessive initial tick\n    // to new bullets\n    this.processEntities(dt);\n    this.processPhysics(dt);\n    this.processEffects(dt);\n  }\n\n  createEntity(entity) {\n    entity.game = this;\n    this.entities.set(entity.model.id, entity);\n    this.emit(\"entity-create\", entity);\n  }\n\n  removeEntity(entity) {\n    this.entities.delete(entity.model.id);\n    this.emit(\"entity-remove\", entity);\n  }\n\n  createPlayer(player) {\n    if (this.players.has(player.id)) {\n      this.players.get(player.id).destroy();\n    }\n\n    player.world = this;\n    this.players.set(player.id, player);\n    player.setupPhysics();\n    this.emit(\"player-create\", player);\n  }\n\n  removePlayer(player) {\n    player.destroy(); //player.team.remove(player);\n\n    this.players.delete(player.id);\n    this.emit(\"player-remove\", player);\n  }\n\n  addTankEffect(effect, tank) {\n    this.emit(\"effect-create\", effect, tank);\n  }\n\n  removeTankEffect(effect, tank) {\n    this.emit(\"effect-remove\", effect, tank);\n  }\n\n  addEffect(effect) {\n    if (this.effects.has(effect.model.id)) return;\n    this.effects.set(effect.model.id, effect);\n    this.emit(\"effect-create\", effect);\n  }\n\n  removeEffect(effect) {\n    if (this.effects.delete(effect.model.id)) {\n      this.emit(\"effect-remove\", effect);\n    }\n  }\n\n}\n\nmodule.exports = GameWorld;","deps":{"src/utils/eventemitter":"/Users/Temich/PycharmProjects/tanks/src/utils/eventemitter.js","src/library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","src/utils/map/gamemap":"/Users/Temich/PycharmProjects/tanks/src/utils/map/gamemap.js","src/effects/world/explode/worldexplodeeffectmodelpool":"/Users/Temich/PycharmProjects/tanks/src/effects/world/explode/worldexplodeeffectmodelpool.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/game/clientgameworld.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/game/clientgameworld.js","source":"const GameWorld = require(\"../../gameworld\");\n\nclass ClientGameWorld extends GameWorld {\n  /**\n   * @type Player\n   */\n\n  /**\n   * @type Particle[]\n   */\n  constructor(options) {\n    super(options);\n    this.player = null;\n    this.particles = [];\n  }\n\n  processParticles(dt) {\n    for (let i = 0, l = this.particles.length; i < l; i++) {\n      let p = this.particles[i];\n      p.tick(dt);\n\n      if (p.dead) {\n        this.particles.splice(i--, 1);\n        l--;\n      }\n    }\n  }\n\n  tick(dt) {\n    super.tick(dt);\n    this.processParticles(dt);\n  }\n\n}\n\nmodule.exports = ClientGameWorld;","deps":{"../../gameworld":"/Users/Temich/PycharmProjects/tanks/src/gameworld.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/game/scenes/gamescene.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/game/scenes/gamescene.js","source":"const Box2D = require('src/library/box2d');\n\nconst Scene = require(\"../../scenes/scene\");\n\nconst GameMap = require(\"../../../utils/map/gamemap.js\");\n\nconst ClientEntity = require(\"../../entity/cliententity\");\n\nconst ClientTank = require(\"../../tanks/clienttank.js\");\n\nconst EventContainer = require(\"../../ui/overlay/events/eventcontainer\");\n\nconst ClientGameWorld = require('src/client/game/clientgameworld');\n\nconst MapPacket = require('src/networking/packets/mappacket');\n\nconst PlayerJoinPacket = require('src/networking/packets/playerjoinpacket');\n\nconst PlayerSpawnPacket = require('src/networking/packets/playerspawnpacket');\n\nconst TankLocationsPacket = require('src/networking/packets/gamestatepacket');\n\nconst PlayerControlsPacket = require('src/networking/packets/playercontrolspacket');\n\nconst PlayerConfigPacket = require('src/networking/packets/playerconfigpacket');\n\nconst PlayerChatPacket = require('src/networking/packets/playerchatpacket');\n\nconst PlayerRespawnPacket = require('src/networking/packets/playerrespawnpacket');\n\nconst EntityCreatePacket = require('src/networking/packets/entitycreatepacket');\n\nconst EntityRemovePacket = require('src/networking/packets/entityremovepacket');\n\nconst EntityListPacket = require('src/networking/packets/entitylistpacket');\n\nconst BlockUpdatePacket = require('src/networking/packets/blockupdatepacket');\n\nconst PlayerLeavePacket = require('src/networking/packets/playerleavepacket');\n\nconst RoomListPacket = require('src/networking/packets/roomlistpacket');\n\nconst PlayerRoomRequestPacket = require('src/networking/packets/playerroomrequestpacket');\n\nconst PlayerRoomChangePacket = require('src/networking/packets/playerroomchangepacket');\n\nconst EffectCreatePacket = require('src/networking/packets/effectcreatepacket');\n\nconst EffectRemovePacket = require('src/networking/packets/effectremovepacket');\n\nconst WorldEffectModel = require('src/effects/world/worldeffectmodel');\n\nconst TankEffectModel = require('src/effects/tank/tankeffectmodel');\n\nconst ClientTankEffect = require('src/client/effects/tank/clienttankeffect');\n\nconst ClientWorldEffect = require('src/client/effects/world/clientworldeffect');\n\nconst ControlPanel = require(\"../ui/controlpanel\");\n\nconst Client = require(\"../../networking/client\");\n\nconst Camera = require(\"../../camera\");\n\nconst Keyboard = require(\"../../controls/interact/keyboardcontroller.js\");\n\nconst PrimaryOverlay = require(\"../ui/overlay/primary/primaryoverlay\");\n\nconst ChatContainer = require(\"../ui/overlay/chat/chatcontainer\");\n\nconst TouchController = require(\"../../controls/interact/touchcontroller\");\n\nconst PlayerControls = require(\"../../controls/playercontrols\");\n\nconst GamepadManager = require(\"../../controls/interact/gamepadmanager\");\n\nconst MapDrawer = require(\"../../graphics/drawers/mapdrawer\");\n\nconst ParticleProgram = require(\"../../graphics/programs/particleprogram\");\n\nconst TextureProgram = require(\"../../graphics/programs/textureprogram\");\n\nconst ExplodePoolDrawer = require(\"../../graphics/drawers/explodepooldrawer\");\n\nclass GameScene extends Scene {\n  /**\n   * @type ClientGameWorld\n   */\n  constructor(config) {\n    super(config);\n    this.world = void 0;\n    this.config = config;\n    this.config.bgscale = this.config.bgscale || 2;\n    this.controlsUpdateInterval = 0.1; // seconds\n\n    this.camera = new Camera({\n      baseScale: 3,\n      viewport: new Box2D.b2Vec2(this.screen.width, this.screen.height),\n      defaultPosition: new Box2D.b2Vec2(0, 0),\n      inertial: true\n    });\n    this.keyboard = new Keyboard();\n    this.controls = new ControlPanel();\n    this.gamepad = new GamepadManager();\n    this.touchController = new TouchController(this.controls, this.screen.canvas);\n    this.playerControls = new PlayerControls();\n    this.playerControls.setupKeyboard(this.keyboard);\n    this.playerControls.setupGamepad(this.gamepad);\n    this.playerControls.on(\"respawn\", () => {\n      if (this.world && this.world.player.tank) {\n        this.client.send(new PlayerRespawnPacket());\n      }\n    });\n    this.keyboard.startListening();\n    this.touchController.startListening();\n    this.gamepad.startListening();\n    this.setupUpdateLoop();\n    this.alive = false;\n    this.client = new Client({\n      ip: this.screen.config[\"ip\"]\n    });\n    this.mapDrawer = new MapDrawer(this.camera, this.screen.ctx);\n    this.particleProgram = new ParticleProgram(\"particle-drawer-program\", this.screen.ctx);\n    this.entityProgram = new TextureProgram(\"entity-drawer\", this.screen.ctx);\n    this.explodePoolDrawer = new ExplodePoolDrawer(this.camera, this.screen);\n    this.createChat();\n    this.initOverlay();\n    this.initEvents();\n    this.connect();\n    this.layout();\n    this.overlay.show();\n  }\n\n  initOverlay() {\n    this.overlay = new PrimaryOverlay({\n      root: this.overlayContainer,\n      game: this\n    });\n    this.overlay.on(\"play\", (nick, tank) => {\n      if (this.world && this.world.player) {\n        if (tank.getModel().getId() === this.world.player.tank.model.constructor.getId()) {\n          return;\n        }\n      }\n\n      this.client.send(new PlayerConfigPacket(nick, tank.getModel()));\n    });\n    this.overlay.roomSelectContainer.on(\"select\", room => {\n      this.client.send(new PlayerRoomRequestPacket(room));\n    });\n    this.keyboard.keybinding(\"Escape\", () => {\n      if (this.world && this.world.player) {\n        if (this.overlay.shown) {\n          this.overlay.hide();\n        } else {\n          this.overlay.show();\n        }\n      }\n    });\n  }\n\n  initEvents() {\n    this.eventContainer = new EventContainer();\n    this.overlayContainer.append(this.eventContainer.element);\n  }\n\n  setupUpdateLoop() {\n    const update = () => {\n      this.screen.loop.scheduleTask(update, this.controlsUpdateInterval);\n\n      if (this.world && this.world.player && this.world.player.tank.model.controls.shouldUpdate()) {\n        this.client.send(new PlayerControlsPacket(this.world.player.tank.model.controls));\n      }\n    };\n\n    update();\n  }\n\n  newPlayer(player, tank) {\n    this.world.createPlayer(player);\n    player.setTank(ClientTank.fromModel(tank));\n    player.tank.world = this.world;\n    player.tank.setupDrawer(this.screen.ctx);\n    player.tank.model.initPhysics(this.world.world);\n    return player;\n  }\n\n  connect() {\n    this.client.connectToServer();\n    this.client.on(MapPacket, packet => {\n      if (this.world) return;\n      this.camera.defaultPosition.x = packet.map.width / 2 * GameMap.BLOCK_SIZE;\n      this.camera.defaultPosition.y = packet.map.height / 2 * GameMap.BLOCK_SIZE;\n\n      if (this.world === null) {\n        this.camera.reset();\n      }\n\n      this.world = new ClientGameWorld({\n        map: packet.map\n      });\n    });\n    this.client.on(PlayerJoinPacket, packet => {\n      this.newPlayer(packet.player, packet.tank);\n    });\n    this.client.on(PlayerSpawnPacket, packet => {\n      const player = this.newPlayer(packet.player, packet.tank);\n      this.playerControls.connectTankControls(player.tank.model.controls);\n      this.camera.target = player.tank.model.body.GetPosition();\n      this.camera.targetVelocity = player.tank.model.body.GetLinearVelocity();\n      this.world.player = player;\n      this.overlay.hide();\n    });\n    this.client.on(TankLocationsPacket, packet => {\n      packet.updateTankLocations(this.world.players);\n    });\n    this.client.on(PlayerChatPacket, packet => {\n      this.chatContainer.addMessage(packet.text);\n    });\n    this.client.on(EntityListPacket, packet => {\n      packet.updateEntities(this.world.entities);\n    });\n    this.client.on(EntityCreatePacket, packet => {\n      packet.createEntities(model => {\n        let wrapper = ClientEntity.fromModel(model);\n        if (wrapper) this.world.entities.set(model.id, wrapper);\n      });\n    });\n    this.client.on(EntityRemovePacket, packet => {\n      packet.updateEntities(this.world.entities);\n    });\n    this.client.on(BlockUpdatePacket, packet => {\n      this.world.map.setBlock(packet.x, packet.y, packet.block);\n      this.mapDrawer.reset();\n    });\n    this.client.on(PlayerLeavePacket, packet => {\n      const player = this.world.players.get(packet.playerId);\n      this.world.removePlayer(player);\n    });\n    this.client.on(RoomListPacket, packet => {\n      this.overlay.roomSelectContainer.updateRooms(packet.rooms);\n    });\n    this.client.on(PlayerRoomChangePacket, packet => {\n      if (packet.error) {\n        let event = \"Не удалось подключиться к игре '\" + packet.room + \"': \" + packet.error;\n        this.eventContainer.createEvent(event);\n      } else {\n        this.playerControls.disconnectTankControls();\n        this.world = null;\n        this.chatContainer.clear();\n        this.overlay.roomSelectContainer.selectRoom(packet.room);\n      }\n    });\n    this.effects = new Map();\n    this.client.on(EffectCreatePacket, packet => {\n      let effect = packet.effect;\n      if (this.effects.has(effect.id)) this.effects.get(effect.id).die();\n\n      if (effect instanceof TankEffectModel) {\n        let player = this.world.players.get(effect.tankId);\n        if (!player || !player.tank) return;\n        let tank =\n        /** @type ClientTank */\n        player.tank;\n        let wrapper = ClientTankEffect.fromModel(effect, tank);\n        tank.effects.set(effect.id, wrapper);\n        this.effects.set(effect.id, wrapper);\n      } else if (effect instanceof WorldEffectModel) {\n        let wrapper = ClientWorldEffect.fromModel(effect, this.world);\n        this.world.effects.set(effect.id, wrapper);\n        this.effects.set(effect.id, wrapper);\n      }\n    });\n    this.client.on(EffectRemovePacket, packet => {\n      let effect = this.effects.get(packet.id);\n      effect.die();\n      this.effects.delete(packet.id);\n\n      if (effect.model instanceof TankEffectModel) {\n        let player = this.world.players.get(effect.model.tankId);\n        if (!player || !player.tank) return;\n        let tank =\n        /** @type ClientTank */\n        player.tank;\n        tank.effects.delete(packet.id);\n      } else if (effect.model instanceof WorldEffectModel) {\n        this.world.effects.delete(packet.id);\n      }\n    });\n  }\n\n  layout() {\n    this.camera.viewport.x = this.screen.width;\n    this.camera.viewport.y = this.screen.height;\n  }\n\n  createChat() {\n    this.chatContainer = new ChatContainer();\n    this.overlayContainer.append(this.chatContainer.element);\n    this.keyboard.keybinding(\"Enter\", () => {\n      if (this.world && this.world.player) {\n        this.chatContainer.showInput();\n      }\n    });\n    this.chatContainer.on(\"chat\", text => this.client.send(new PlayerChatPacket(text)));\n    this.chatContainer.on(\"input-focus\", () => {\n      this.keyboard.stopListening();\n    });\n    this.chatContainer.on(\"input-blur\", () => {\n      this.keyboard.startListening();\n      this.screen.canvas.focus();\n    });\n  }\n\n  pause() {\n    cancelAnimationFrame(this.timer);\n  }\n\n  draw(ctx, dt) {\n    this.gamepad.refresh();\n    this.playerControls.refresh();\n\n    if (!this.world) {\n      return;\n    }\n\n    this.screen.swapFramebuffers();\n    this.screen.clear(); // Drawing the scene\n\n    this.camera.tick(dt);\n    this.drawEntities();\n    this.mapDrawer.draw(this.world.map);\n    this.drawPlayers(dt);\n    this.drawParticles(dt); // Post-processing\n\n    this.screen.setScreenFramebuffer();\n    this.screen.clear();\n    this.explodePoolDrawer.draw(this.world.explosionEffectPool, dt);\n    this.world.tick(dt);\n  }\n\n  drawParticles() {\n    if (this.world.particles.length) {\n      this.particleProgram.use();\n      this.particleProgram.prepare();\n\n      for (let particle of this.world.particles) {\n        this.particleProgram.drawParticle(particle);\n      }\n\n      this.particleProgram.matrixUniform.setMatrix(this.camera.matrix.m);\n      this.particleProgram.draw();\n    }\n  }\n\n  drawPlayers(dt) {\n    let players = this.world.players;\n\n    for (let player of players.values()) {\n      player.tank.drawer.draw(this.camera, dt);\n    }\n  }\n\n  drawEntities() {\n    let entities = this.world.entities;\n\n    if (entities.size > 0) {\n      this.entityProgram.use();\n      this.entityProgram.prepare();\n\n      for (let entity of entities.values()) {\n        entity.drawer.draw(this.entityProgram);\n      }\n\n      this.entityProgram.matrixUniform.setMatrix(this.camera.matrix.m);\n      this.entityProgram.draw();\n    }\n  }\n\n}\n\nmodule.exports = GameScene;","deps":{"src/library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","../../scenes/scene":"/Users/Temich/PycharmProjects/tanks/src/client/scenes/scene.js","../ui/controlpanel":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/controlpanel.js","../../../utils/map/gamemap.js":"/Users/Temich/PycharmProjects/tanks/src/utils/map/gamemap.js","../../controls/interact/touchcontroller":"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/touchcontroller.js","../../controls/interact/keyboardcontroller.js":"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/keyboardcontroller.js","../../graphics/programs/particleprogram":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/particleprogram.js","../../camera":"/Users/Temich/PycharmProjects/tanks/src/client/camera.js","../../graphics/drawers/mapdrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/mapdrawer.js","../../graphics/drawers/explodepooldrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/explodepooldrawer.js","src/client/effects/world/clientworldeffect":"/Users/Temich/PycharmProjects/tanks/src/client/effects/world/clientworldeffect.js","../../tanks/clienttank.js":"/Users/Temich/PycharmProjects/tanks/src/client/tanks/clienttank.js","../../controls/interact/gamepadmanager":"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/gamepadmanager.js","../../controls/playercontrols":"/Users/Temich/PycharmProjects/tanks/src/client/controls/playercontrols.js","src/networking/packets/playerleavepacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerleavepacket.js","src/networking/packets/effectremovepacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/effectremovepacket.js","src/networking/packets/mappacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/mappacket.js","src/networking/packets/playerspawnpacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerspawnpacket.js","src/networking/packets/playercontrolspacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playercontrolspacket.js","src/networking/packets/gamestatepacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/gamestatepacket.js","src/networking/packets/blockupdatepacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/blockupdatepacket.js","src/networking/packets/playerconfigpacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerconfigpacket.js","src/networking/packets/playerrespawnpacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerrespawnpacket.js","src/networking/packets/entityremovepacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/entityremovepacket.js","src/networking/packets/playerchatpacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerchatpacket.js","src/networking/packets/playerroomrequestpacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerroomrequestpacket.js","src/networking/packets/entitylistpacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/entitylistpacket.js","src/networking/packets/roomlistpacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/roomlistpacket.js","src/networking/packets/playerroomchangepacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerroomchangepacket.js","src/networking/packets/playerjoinpacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerjoinpacket.js","src/client/effects/tank/clienttankeffect":"/Users/Temich/PycharmProjects/tanks/src/client/effects/tank/clienttankeffect.js","src/effects/world/worldeffectmodel":"/Users/Temich/PycharmProjects/tanks/src/effects/world/worldeffectmodel.js","src/client/game/clientgameworld":"/Users/Temich/PycharmProjects/tanks/src/client/game/clientgameworld.js","src/effects/tank/tankeffectmodel":"/Users/Temich/PycharmProjects/tanks/src/effects/tank/tankeffectmodel.js","../ui/overlay/chat/chatcontainer":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/chat/chatcontainer.js","../../ui/overlay/events/eventcontainer":"/Users/Temich/PycharmProjects/tanks/src/client/ui/overlay/events/eventcontainer.js","src/networking/packets/entitycreatepacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/entitycreatepacket.js","src/networking/packets/effectcreatepacket":"/Users/Temich/PycharmProjects/tanks/src/networking/packets/effectcreatepacket.js","../../entity/cliententity":"/Users/Temich/PycharmProjects/tanks/src/client/entity/cliententity.js","../../graphics/programs/textureprogram":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/textureprogram.js","../../networking/client":"/Users/Temich/PycharmProjects/tanks/src/client/networking/client.js","../ui/overlay/primary/primaryoverlay":"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/primaryoverlay.js"}},"/Users/Temich/PycharmProjects/tanks/src/server/effects/tank/servertankeffect.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/server/effects/tank/servertankeffect.js","source":"const ServerEffect = require(\"../servereffect\");\n\nconst TankEffectModel = require('src/effects/tank/tankeffectmodel');\n/**\n * This class unites all the tank effect implementations on the server\n * side. If the effect is visual and should not have a separate logic\n * on the server side (does not scatter players, does not break\n * blocks, etc.), it is enough to set only its {@link EffectModel} and\n * not to use this class. You also should not initialize this class\n * directly, use {@link ServerTankEffect#fromModel fromModel} static method\n * instead\n */\n\n\nclass ServerTankEffect extends ServerEffect {\n  /**\n   * @type TankEffectModel\n   */\n\n  /**\n   * @type ServerTank\n   */\n\n  /**\n   * @private\n   * Creates server-side tank effect class, linked to specific\n   * {@link TankEffectModel} and {@link ServerTank}. This\n   * constructor should not be called directly, use\n   * {@link ServerTankEffect#fromModel fromModel} static method\n   * instead\n   * @param {TankEffectModel} model\n   * @param {ServerTank} tank\n   */\n  constructor(model, tank) {\n    super(model);\n    this.model = void 0;\n    this.tank = void 0;\n    this.model = model;\n    this.tank = tank;\n  } // noinspection JSCheckFunctionSignatures\n\n  /**\n   * Wraps the {@link TankEffectModel} in corresponding\n   * {@link ServerTankEffect} class. If this effect has any additional\n   * server-side logic, the instance of appropriate subclass will be\n   * returned. Otherwise, this method returns {@link ServerTankEffect}\n   * instance\n   * @param model {TankEffectModel} Effect model to wrap\n   * @param tank {ServerTank} A tank this effect will appear on\n   * @returns {ServerTankEffect}\n   */\n\n\n  static fromModel(model, tank) {\n    let clazz =\n    /** @type Class<ServerTankEffect> */\n    super.fromModel(model);\n    if (clazz) return new clazz(model, tank); // If this model has no server-side implementation, return\n    // default class\n\n    if (model instanceof TankEffectModel) {\n      return new ServerTankEffect(model, tank);\n    }\n\n    throw new TypeError(\"The 'model' argument should inherit TankEffectModel\");\n  }\n\n}\n\nmodule.exports = ServerTankEffect;","deps":{"src/effects/tank/tankeffectmodel":"/Users/Temich/PycharmProjects/tanks/src/effects/tank/tankeffectmodel.js","../servereffect":"/Users/Temich/PycharmProjects/tanks/src/server/effects/servereffect.js"}},"/Users/Temich/PycharmProjects/tanks/src/weapon/models/flamethrower.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/weapon/models/flamethrower.js","source":"const Weapon = require(\"../weapon\");\n\nconst TankFireEffectModel = require('src/effects/tank/tankfireeffectmodel');\n\nconst ServerTankEffect = require('src/server/effects/tank/servertankeffect');\n\nclass Flamethrower extends Weapon {\n  constructor(config) {\n    config = Object.assign({\n      damage: 10,\n      radius: 90,\n      angle: Math.PI / 3\n    }, config);\n    super(config);\n    this.damage = config.damage;\n    this.radius = config.radius;\n    this.angle = config.angle;\n    this.squareRadius = this.radius ** 2;\n    this.fireEffect = new TankFireEffectModel();\n    this.serverEffect = ServerTankEffect.fromModel(this.fireEffect, this.tank);\n  }\n\n  ready() {\n    return true;\n  }\n\n  shoot() {\n    const tank = this.tank; // const player = tank.player\n\n    const pAngle = (tank.model.rotation + Math.PI) % (Math.PI * 2) - Math.PI;\n\n    for (let p of tank.world.players.values()) {\n      if (!p || p.tank === tank) continue;\n      const anotherTank = p.tank;\n      const x = anotherTank.model.x - tank.model.x;\n      const y = anotherTank.model.y - tank.model.y;\n      const dist = x ** 2 + y ** 2;\n      if (dist > this.squareRadius) continue;\n      let angle = Math.atan2(x, y) + pAngle;\n      if (angle > Math.PI) angle -= Math.PI * 2;\n      if (angle < -Math.PI) angle += Math.PI * 2;\n      if (Math.abs(angle) >= this.angle / 2) continue; //const damage = (Math.sqrt(1 - dist / this.squareRadius)) * this.damage * tank.world.room.spt\n      //p.tank.damage(damage, player.id)\n    }\n  }\n\n  onEngage() {\n    super.onEngage();\n    this.tank.addEffect(this.serverEffect);\n  }\n\n  onDisengage() {\n    super.onDisengage();\n    this.tank.removeEffect(this.serverEffect);\n  }\n\n}\n\nmodule.exports = Flamethrower;","deps":{"../weapon":"/Users/Temich/PycharmProjects/tanks/src/weapon/weapon.js","src/effects/tank/tankfireeffectmodel":"/Users/Temich/PycharmProjects/tanks/src/effects/tank/tankfireeffectmodel.js","src/server/effects/tank/servertankeffect":"/Users/Temich/PycharmProjects/tanks/src/server/effects/tank/servertankeffect.js"}},"/Users/Temich/PycharmProjects/tanks/src/tanks/models/nasty.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/tanks/models/nasty.js","source":"const TankModel = require(\"../tankmodel\");\n\nconst PhysicsUtils = require(\"../../utils/physicsutils.js\");\n\nconst Box2D = require(\"../../library/box2d\");\n\nconst AirbagTankBehaviour = require(\"../physics/airbagbehaviour\");\n\nconst WeaponFlamethrower = require(\"../../weapon/models/flamethrower\");\n\nclass NastyTank extends TankModel {\n  constructor(options) {\n    super(options);\n    this.behaviour = new AirbagTankBehaviour(this, {});\n  }\n\n  static getWeapon() {\n    return WeaponFlamethrower;\n  }\n\n  static getMaximumHealth() {\n    return 15;\n  }\n\n  static getId() {\n    return 7;\n  }\n\n  initPhysics(world) {\n    this.world = world;\n    let size = 9;\n    const vertexArray = [new Box2D.b2Vec2(-1.00, -1.10), new Box2D.b2Vec2(-0.80, -1.30), new Box2D.b2Vec2(0.80, -1.30), new Box2D.b2Vec2(1.00, -1.10), new Box2D.b2Vec2(1.00, -0.25), new Box2D.b2Vec2(0.55, 0.90), new Box2D.b2Vec2(-0.55, 0.90), new Box2D.b2Vec2(-1.00, -0.25)];\n    vertexArray.forEach(v => v.Multiply(size));\n    let bodyFixture = PhysicsUtils.vertexFixture(vertexArray);\n    this.body = PhysicsUtils.dynamicBody(world, {\n      linearDamping: 0.8,\n      angularDamping: 0.7\n    });\n    this.body.CreateFixture(bodyFixture);\n    this.world = world;\n  }\n\n}\n\nTankModel.register(NastyTank);\nmodule.exports = NastyTank;","deps":{"../../utils/physicsutils.js":"/Users/Temich/PycharmProjects/tanks/src/utils/physicsutils.js","../../library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","../tankmodel":"/Users/Temich/PycharmProjects/tanks/src/tanks/tankmodel.js","../physics/airbagbehaviour":"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/airbagbehaviour.js","../../weapon/models/flamethrower":"/Users/Temich/PycharmProjects/tanks/src/weapon/models/flamethrower.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/nasty.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/nasty.js","source":"const ClientTank = require(\"../clienttank\");\n\nconst TankDrawer = require('src/client/graphics/drawers/tankdrawer');\n\nconst NastyTankModel = require('src/tanks/models/nasty');\n\nconst Engine = require('src/client/engine');\n\nconst FX = require('src/client/sound/fx');\n\nconst Sprite = require('src/client/sprite');\n\nconst LightMaskTextureProgram = require('src/client/graphics/programs/lightmasktextureprogram');\n\nconst TextureProgram = require('src/client/graphics/programs/textureprogram');\n\nconst Matrix3 = require('src/client/graphics/matrix3');\n\nclass Drawer extends TankDrawer {\n  constructor(tank, ctx) {\n    super(tank, ctx);\n    this.size = 9;\n    this.bodyBrightSprite = Sprite.named(\"tanks/nasty/body-bright\");\n    this.bodyDarkSprite = Sprite.named(\"tanks/nasty/body-dark\");\n    this.bodyLightMask = Sprite.named(\"tanks/nasty/mask\");\n    this.ruderSprite = Sprite.named(\"tanks/nasty/ruder\");\n    this.bodyProgram = new LightMaskTextureProgram(\"tank-body-drawer\", ctx);\n    this.textureProgram = new TextureProgram(\"tank-texture-drawer\", ctx);\n    this.propellerSprites = [];\n    this.spriteMatrix = new Matrix3();\n    this.spriteMatrix.translate(0, -this.size * 1.22);\n    this.ruderAngle = Math.PI / 4;\n\n    for (let i = 1; i <= 4; i++) this.propellerSprites.push(Sprite.named(\"tanks/nasty/propeller_\" + i));\n  }\n\n  draw(camera, dt) {\n    let angle = this.tank.model.body.GetAngle();\n    camera.matrix.save();\n    this.drawSmoke(dt);\n    const scale = this.size;\n    let position = this.tank.model.body.GetPosition();\n    camera.matrix.translate(position.x, position.y);\n    camera.matrix.rotate(-angle);\n    let propellerDist = this.tank.model.behaviour.details.propellerDist;\n    let ruderAngle = this.tank.model.controls.getSteer() * this.ruderAngle;\n    const propeller = this.propellerSprites[Math.round(propellerDist) % 4];\n    this.bodyProgram.use();\n    this.bodyProgram.prepare();\n    this.bodyProgram.drawMaskedSprite(this.bodyBrightSprite, this.bodyDarkSprite, this.bodyLightMask, -scale * 0.96, -scale * 1.32, scale * 1.92, scale * 2.64);\n    this.bodyProgram.matrixUniform.setMatrix(camera.matrix.m);\n    this.bodyProgram.setLightAngle(-angle);\n    this.bodyProgram.draw();\n    this.textureProgram.use();\n    this.textureProgram.prepare();\n    this.textureProgram.drawSprite(propeller, -scale * 0.76, -scale * 1.06, scale * 0.6, scale * 0.08);\n    this.textureProgram.drawSprite(propeller, scale * 0.17, -scale * 1.06, scale * 0.6, scale * 0.08);\n    this.textureProgram.setTransform(this.spriteMatrix);\n    this.spriteMatrix.save();\n    this.spriteMatrix.translate(-scale * 0.46, 0);\n    let ruderSine = Math.sin(ruderAngle);\n    let ruderCos = Math.cos(ruderAngle);\n    this.spriteMatrix.turn(ruderSine, ruderCos);\n    this.textureProgram.drawSprite(this.ruderSprite, -scale * 0.06, -scale * 0.44, scale * 0.12, scale * 0.5);\n    this.spriteMatrix.restore();\n    this.spriteMatrix.save();\n    this.spriteMatrix.translate(scale * 0.46, 0);\n    this.spriteMatrix.turn(ruderSine, ruderCos);\n    this.textureProgram.drawSprite(this.ruderSprite, -scale * 0.06, -scale * 0.44, scale * 0.12, scale * 0.5);\n    this.spriteMatrix.restore();\n    this.textureProgram.setTransform(null);\n    this.textureProgram.matrixUniform.setMatrix(camera.matrix.m);\n    this.textureProgram.draw();\n    camera.matrix.restore();\n  }\n\n}\n\nclass NastyTank extends ClientTank {\n  constructor(model) {\n    super(model);\n    this.engine = new Engine({\n      sound: FX.ENGINE_4,\n      multiplier: 20,\n      pitch: 0.9,\n      volume: 0.6\n    });\n  }\n\n  static getDrawer() {\n    return Drawer;\n  }\n\n  static getModel() {\n    return NastyTankModel;\n  }\n\n  static getName() {\n    return \"Мерзила\";\n  }\n\n  static getDescription() {\n    return \"Любите запах напалма на утрам? Тогда эта машина - \" + \"идеальный выбор для вас! Сложный в управлении, но чудовищно \" + \"разрушительный танк с огнемётом на воздушной подушке.\";\n  }\n\n  static getStats() {\n    return {\n      damage: 4,\n      health: 15,\n      speed: 110,\n      shootrate: undefined,\n      reload: undefined\n    };\n  }\n\n}\n\nClientTank.register(NastyTank);\nmodule.exports = NastyTank;","deps":{"../clienttank":"/Users/Temich/PycharmProjects/tanks/src/client/tanks/clienttank.js","src/client/engine":"/Users/Temich/PycharmProjects/tanks/src/client/engine.js","src/client/sprite":"/Users/Temich/PycharmProjects/tanks/src/client/sprite.js","src/client/graphics/matrix3":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/matrix3.js","src/client/graphics/programs/textureprogram":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/textureprogram.js","src/client/graphics/programs/lightmasktextureprogram":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/lightmasktextureprogram.js","src/client/graphics/drawers/tankdrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/tankdrawer.js","src/client/sound/fx":"/Users/Temich/PycharmProjects/tanks/src/client/sound/fx.js","src/tanks/models/nasty":"/Users/Temich/PycharmProjects/tanks/src/tanks/models/nasty.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/game/game.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/game/game.js","source":"/* @load-resource: './style.css' */\nconst Screen = require(\"../screen\");\n\nconst LoadingScene = require(\"../scenes/loading/loadingscene\");\n\nconst GameScene = require(\"./scenes/gamescene\");\n\nconst Progress = require(\"../utils/progress\");\n\nconst Sprite = require(\"../sprite\");\n\nrequire('src/utils/physicsutils.js').setupPhysics();\n/*\n * At this point we have all necessary modules loaded, so\n * it's time to initialize all dynamic modules. These\n * calls will be transformed into multiple require calls\n * for each file in those directories\n */\n\n\n[require('/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/16mm.js'),require('/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/42mm.js'),require('/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/cannonball.js'),require('/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/mine.js')];\n\n[require('/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/bigboi.js'),require('/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/monster.js'),require('/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/nasty.js'),require('/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/sniper.js')];\n\n[require('/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/brick.js'),require('/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/concrete.js'),require('/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/stone.js'),require('/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/unbreakable.js'),require('/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/wood.js')];\n\n[require('/Users/Temich/PycharmProjects/tanks/src/client/effects/tank/types/clienttankfireeffect.js'),require('/Users/Temich/PycharmProjects/tanks/src/client/effects/tank/types/clienttankpelletseffect.js')];\n\n[require('/Users/Temich/PycharmProjects/tanks/src/client/effects/world/types/clientworldexplodeeffect.js')];\n\nclass Game extends Screen {\n  constructor(config) {\n    super(config); //this.soundEngine = new SoundEngine()\n  }\n\n  initialize() {\n    super.initialize();\n    let spriteDownloadProgress = new Progress(); // let soundDownloadProgress = new Progress()\n\n    let totalProgress = new Progress(); //\n\n    totalProgress.addSubtask(spriteDownloadProgress); // totalProgress.addSubtask(soundDownloadProgress)\n\n    this.setScene(new LoadingScene({\n      screen: this,\n      progress: totalProgress\n    }));\n    Sprite.download(spriteDownloadProgress, this.ctx, {\n      mipMapLevels: 1\n    }).then(() => {\n      Sprite.applyTexture(this.ctx, 0);\n      this.setScene(new GameScene({\n        screen: this\n      })); //    return this.soundEngine.download(soundDownloadProgress)\n    }); //     .then(() => {\n    //     this.setScene(new GameScene({\n    //         screen: this\n    //     }))\n    // })\n  }\n\n}\n\nwindow.Game = Game;\nmodule.exports = Game;","deps":{"../utils/progress":"/Users/Temich/PycharmProjects/tanks/src/client/utils/progress.js","../sprite":"/Users/Temich/PycharmProjects/tanks/src/client/sprite.js","../screen":"/Users/Temich/PycharmProjects/tanks/src/client/screen.js","src/utils/physicsutils.js":"/Users/Temich/PycharmProjects/tanks/src/utils/physicsutils.js","/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/concrete.js":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/concrete.js","/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/stone.js":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/stone.js","/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/unbreakable.js":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/unbreakable.js","/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/wood.js":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/wood.js","/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/brick.js":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/brick.js","../scenes/loading/loadingscene":"/Users/Temich/PycharmProjects/tanks/src/client/scenes/loading/loadingscene.js","/Users/Temich/PycharmProjects/tanks/src/client/effects/tank/types/clienttankpelletseffect.js":"/Users/Temich/PycharmProjects/tanks/src/client/effects/tank/types/clienttankpelletseffect.js","/Users/Temich/PycharmProjects/tanks/src/client/effects/tank/types/clienttankfireeffect.js":"/Users/Temich/PycharmProjects/tanks/src/client/effects/tank/types/clienttankfireeffect.js","/Users/Temich/PycharmProjects/tanks/src/client/effects/world/types/clientworldexplodeeffect.js":"/Users/Temich/PycharmProjects/tanks/src/client/effects/world/types/clientworldexplodeeffect.js","/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/mine.js":"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/mine.js","/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/16mm.js":"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/16mm.js","/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/42mm.js":"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/42mm.js","/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/cannonball.js":"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/cannonball.js","/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/monster.js":"/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/monster.js","/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/bigboi.js":"/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/bigboi.js","./scenes/gamescene":"/Users/Temich/PycharmProjects/tanks/src/client/game/scenes/gamescene.js","/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/nasty.js":"/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/nasty.js","/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/sniper.js":"/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/sniper.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/index.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/index.js","source":"var BrowserCheckView = require(\"../utils/browsercheck/browsercheckview\");\n\n$(document).ready(function () {\n  BrowserCheckView(downloadGameScript);\n});\n\nfunction startGame() {\n  var root = $(\"<div>\").addClass(\"game-root\");\n  $(document.body).append(root);\n  var editor = new MapEditor({\n    root: root\n  });\n  editor.loop.start();\n  editor.canvas.focus();\n  window.editor = editor;\n}\n\nfunction downloadGameScript() {\n  var script = document.createElement(\"script\");\n  script.src = \"./editor.js\";\n  script.onload = startGame;\n  document.head.appendChild(script);\n}","deps":{"../utils/browsercheck/browsercheckview":"/Users/Temich/PycharmProjects/tanks/src/client/utils/browsercheck/browsercheckview.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/loop/requestframeloop.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/loop/requestframeloop.js","source":"const Loop = require(\"./loop\");\n\nclass RequestFrameLoop extends Loop {\n  constructor(game) {\n    super(game);\n    this.timeMultiplier = 0.001;\n    this.request = false;\n  }\n\n  start() {\n    if (this.request) {\n      return;\n    }\n\n    this.request = true;\n    requestAnimationFrame(time => {\n      this.request = false;\n      super.start();\n      this.perform(time);\n      this.stop();\n    });\n  }\n\n}\n\nmodule.exports = RequestFrameLoop;","deps":{"./loop":"/Users/Temich/PycharmProjects/tanks/src/utils/loop/loop.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/draghandler.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/draghandler.js","source":"const DocumentEventHandler = require(\"./documenteventhandler\");\n\nclass DragHandler extends DocumentEventHandler {\n  constructor(target) {\n    super();\n    this.target = target;\n    this.dragging = false;\n    this.oldX = 0;\n    this.oldY = 0;\n    this.isMacOS = navigator.userAgent.indexOf(\"Mac\") !== -1;\n    this.draggingEnabled = true;\n    this.oldScale = 1;\n  }\n\n  startListening() {\n    this.bind(\"mouseup\", this.mouseUp);\n    this.bind(\"mousedown\", this.mouseDown);\n    this.bind(\"mousemove\", this.mouseMove);\n    this.bind(\"wheel\", this.wheel);\n    this.bind('gesturestart', this.zoomStart);\n    this.bind('gesturechange', this.zoomChange);\n    this.bind('gestureend', this.zoomChange);\n  }\n\n  zoomStart(event) {\n    event.preventDefault();\n    this.oldScale = event.scale;\n  }\n\n  zoomChange(event) {\n    event.preventDefault();\n\n    if (this.isMacOS) {\n      if (event.scale) {\n        this.emit(\"zoom\", event.scale / this.oldScale);\n        this.oldScale = event.scale;\n      }\n    }\n  }\n\n  mouseDown(event) {\n    event.preventDefault();\n\n    if (event.which === 1 && this.draggingEnabled || event.which === 2) {\n      this.dragging = true;\n    }\n\n    this.oldX = event.pageX;\n    this.oldY = event.pageY;\n  }\n\n  mouseUp(event) {\n    event.preventDefault();\n    this.dragging = false;\n  }\n\n  mouseMove(event) {\n    event.preventDefault();\n\n    if (this.dragging) {\n      let dx = event.pageX - this.oldX;\n      let dy = event.pageY - this.oldY;\n      this.emit(\"drag\", -dx, -dy);\n    }\n\n    this.oldX = event.pageX;\n    this.oldY = event.pageY;\n  }\n\n  wheel(event) {\n    event.preventDefault();\n\n    if (event.ctrlKey) {\n      if (event.deltaY) this.emit(\"zoom\", 1 - event.deltaY / 200);\n    } else if (this.isMacOS) {\n      if (event.deltaX || event.deltaY) this.emit(\"drag\", event.deltaX, event.deltaY);\n      if (event.deltaZ) this.emit(\"zoom\", 1 + event.deltaZ / 200);\n    } else {\n      this.emit(\"zoom\", 1 - event.deltaY / 200);\n    }\n  }\n\n}\n\nmodule.exports = DragHandler;","deps":{"./documenteventhandler":"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/documenteventhandler.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/drag.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/drag.js","source":"const Tool = require(\"../tool\");\n\nclass Drag extends Tool {\n  constructor(scene) {\n    super(scene);\n    this.image = \"../assets/mapeditor/drag.png\";\n    this.locksDragging = false;\n  }\n\n  becomeActive() {\n    this.setCursor(\"grab\");\n  }\n\n  mouseDown(x, y) {\n    super.mouseUp();\n    this.setCursor(\"grabbing\");\n  }\n\n  mouseUp() {\n    this.setCursor(\"grab\");\n  }\n\n  resignActive() {\n    this.setCursor(null);\n  }\n\n}\n\nmodule.exports = Drag;","deps":{"../tool":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/tool.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/fill.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/fill.js","source":"const Tool = require(\"../tool\");\n\nconst GameMap = require(\"../../../../utils/map/gamemap\");\n\nclass Fill extends Tool {\n  constructor(scene) {\n    super(scene);\n    this.image = \"../assets/mapeditor/fill.png\";\n    this.actionName = \"Заливка\";\n  }\n\n  mouseDown(x, y) {\n    super.mouseDown(x, y);\n    x = Math.floor(x / GameMap.BLOCK_SIZE);\n    y = Math.floor(y / GameMap.BLOCK_SIZE);\n    this.fill(x, y);\n  }\n\n  getBitset(bitset, index) {\n    return bitset[Math.floor(index >> 3)] & 1 << (index & 0b111);\n  }\n\n  setBitset(bitset, index, value) {\n    let byte = Math.floor(index >> 3);\n    let bit = index & 0b111;\n    bitset[byte] &= ~(1 << bit);\n\n    if (value) {\n      bitset[byte] |= 1 << bit;\n    }\n  }\n\n  fill(x, y) {\n    const map = this.manager.map;\n    let baseBlock = map.getBlock(x, y);\n    if (!baseBlock) return;\n    let baseId = baseBlock.constructor.typeId;\n    let copy = new Uint8Array(Math.ceil(map.data.length / 8));\n    let carets = [x + y * map.width];\n\n    while (carets.length) {\n      let newCarets = [];\n\n      for (let caret of carets) {\n        if (this.getBitset(copy, caret)) {\n          continue;\n        }\n\n        let x = caret % map.width;\n        let y = Math.floor(caret / map.width);\n        let block = map.getBlock(x, y);\n\n        if (block.constructor.typeId !== baseId) {\n          continue;\n        }\n\n        map.setBlock(x, y, this.manager.selectedBlock.clone());\n        this.setBitset(copy, caret, true);\n        if (x > 0) newCarets.push(caret - 1);\n        if (x < map.width - 1) newCarets.push(caret + 1);\n        if (y > 0) newCarets.push(caret - map.width);\n        if (y < map.height - 1) newCarets.push(caret + map.width);\n      }\n\n      carets = newCarets;\n    }\n\n    this.manager.setNeedsRedraw(true);\n    map.history.commitActions(this.actionName);\n  }\n\n}\n\nmodule.exports = Fill;","deps":{"../../../../utils/map/gamemap":"/Users/Temich/PycharmProjects/tanks/src/utils/map/gamemap.js","../tool":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/tool.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/spawnzone.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/spawnzone.js","source":"const Tool = require(\"../tool\");\n\nconst ParticleProgram = require(\"../../../graphics/programs/particleprogram\");\n\nconst Particle = require(\"../../../particles/particle\");\n\nconst Color = require(\"../../../../utils/color\");\n\nconst SpawnZone = require(\"../../../../utils/map/spawnzone\");\n\nconst GameMap = require(\"../../../../utils/map/gamemap\");\n\nclass SpawnZoneTool extends Tool {\n  /**\n   * @type {Map<number, Color>}\n   */\n  constructor(manager) {\n    super(manager);\n    this.colors = null;\n    this.image = \"../assets/mapeditor/spawnzones.png\";\n    this.actionName = \"Зона спавна\";\n    this.selectedTeam = null;\n    this.program = new ParticleProgram(\"spawn-zones-program\", this.manager.screen.ctx);\n    this.colors = new Map([[0, new Color(255, 0, 0)], [1, new Color(0, 255, 0)], [2, new Color(0, 0, 255)]]);\n    this.setupMenu();\n    this.setupDecorations();\n  }\n  /**\n   *\n   * @param i {number}\n   * @param color {Color}\n   * @returns {jQuery}\n   */\n\n\n  createTeamButton(i, color) {\n    return $(\"<div>\").addClass(\"tool inline\").append($(\"<div>\").addClass(\"wrapper\").css(\"background-color\", color.code())).click(e => this.selectTeam($(e.target).closest(\".tool\"), i));\n  }\n\n  selectTeam(button, i) {\n    button.parent().find(\".tool.selected\").removeClass(\"selected\");\n    button.addClass(\"selected\");\n    this.selectedTeam = i;\n    this.clearZoneButton.attr(\"disabled\", false);\n  }\n\n  setupMenu() {\n    this.clearZoneButton = $(\"<button>\").text(\"Очистить\").attr(\"disabled\", true).click(() => {\n      if (this.selectedTeam !== null) {\n        this.deleteZone(this.selectedTeam);\n        this.manager.setNeedsRedraw();\n      }\n    });\n    this.settingsView = $(\"<div>\");\n\n    for (let [index, color] of this.colors) {\n      this.settingsView.append(this.createTeamButton(index, color));\n    }\n\n    this.settingsView.append(this.clearZoneButton).css(\"width\", \"240px\").css(\"height\", \"100%\");\n  }\n\n  setupDecorations() {\n    this.decorations = new Map();\n\n    for (let [index, color] of this.colors) {\n      let decoration = new Particle({\n        color: color.withAlpha(0.5)\n      });\n      this.decorations.set(index, decoration);\n    }\n  }\n\n  drawDecorations() {\n    super.drawDecorations();\n    this.program.use();\n    this.program.prepare();\n\n    for (let zone of this.manager.map.spawnZones) {\n      let decoration = this.decorations.get(zone.id);\n      decoration.x = zone.centerX() * GameMap.BLOCK_SIZE;\n      decoration.y = zone.centerY() * GameMap.BLOCK_SIZE;\n      decoration.width = zone.width() * GameMap.BLOCK_SIZE;\n      decoration.height = zone.height() * GameMap.BLOCK_SIZE;\n      this.program.drawParticle(decoration);\n    }\n\n    this.program.matrixUniform.setMatrix(this.manager.camera.matrix.m);\n    this.program.draw();\n  }\n\n  becomeActive() {\n    super.becomeActive();\n    this.manager.setNeedsRedraw();\n  }\n\n  resignActive() {\n    super.resignActive();\n    this.manager.setNeedsRedraw();\n  }\n\n  deleteZone(id) {\n    let i = 0;\n\n    for (let zone of this.manager.map.spawnZones) {\n      if (zone.id === id) {\n        this.manager.map.spawnZones.splice(i, 1);\n        break;\n      }\n\n      i++;\n    }\n  }\n\n  getZone(id) {\n    for (let zone of this.manager.map.spawnZones) {\n      if (zone.id === id) {\n        return zone;\n      }\n    }\n\n    return null;\n  }\n\n  mouseDown(x, y) {\n    super.mouseDown(x, y);\n    if (this.selectedTeam === null) return;\n    let zone = this.getZone(this.selectedTeam);\n\n    if (!zone) {\n      zone = new SpawnZone(this.selectedTeam);\n      this.manager.map.spawnZones.push(zone);\n    }\n\n    zone.x1 = Math.floor(x / GameMap.BLOCK_SIZE);\n    zone.y1 = Math.floor(y / GameMap.BLOCK_SIZE);\n    zone.x2 = zone.x1;\n    zone.y2 = zone.y1;\n  }\n\n  mouseMove(x, y) {\n    super.mouseMove(x, y);\n\n    if (this.selectedTeam !== null && this.dragging) {\n      let zone = this.getZone(this.selectedTeam);\n      zone.x2 = Math.floor(x / GameMap.BLOCK_SIZE);\n      zone.y2 = Math.floor(y / GameMap.BLOCK_SIZE);\n      this.manager.setNeedsRedraw();\n    }\n  }\n\n}\n\nmodule.exports = SpawnZoneTool;","deps":{"../../../../utils/color":"/Users/Temich/PycharmProjects/tanks/src/utils/color.js","../../../particles/particle":"/Users/Temich/PycharmProjects/tanks/src/client/particles/particle.js","../../../../utils/map/spawnzone":"/Users/Temich/PycharmProjects/tanks/src/utils/map/spawnzone.js","../../../../utils/map/gamemap":"/Users/Temich/PycharmProjects/tanks/src/utils/map/gamemap.js","../tool":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/tool.js","../../../graphics/programs/particleprogram":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/particleprogram.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/eraser.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/eraser.js","source":"const Pencil = require(\"./pencil\");\n\nconst AirBlockState = require(\"../../../../utils/map/blockstate/types/airblockstate\");\n\nclass Eraser extends Pencil {\n  constructor(manager) {\n    super(manager);\n    this.image = \"../assets/mapeditor/eraser.png\";\n    this.actionName = \"Ластик\";\n  }\n\n  fragment(x, y) {\n    if (this.manager.map.getBlock(x, y).constructor.typeId) {\n      this.manager.map.setBlock(x, y, new AirBlockState());\n    }\n  }\n\n  becomeActive() {\n    this.setCursor(\"url(../assets/mapeditor/cursors/eraser.png) 0 32, auto\");\n  }\n\n}\n\nmodule.exports = Eraser;","deps":{"./pencil":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/pencil.js","../../../../utils/map/blockstate/types/airblockstate":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/airblockstate.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/tool.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/tool.js","source":"class Tool {\n  /**\n   * Path to tool icon\n   * @type {string|null}\n   */\n\n  /**\n   * Localized tool name\n   * @type {string|null}\n   */\n\n  /**\n   * Tool manager associated with this tool\n   * @type {ToolManager}\n   */\n  constructor(manager) {\n    this.image = null;\n    this.name = null;\n    this.manager = null;\n    this.image = null;\n    this.manager = manager;\n    this.name = null;\n    this.dragging = false;\n    this.cursor = null;\n    this.locksDragging = true;\n    this.settingsView = null;\n  }\n\n  setCursor(cursor) {\n    this.cursor = cursor;\n    this.manager.updateCursor();\n  }\n\n  mouseDown(x, y) {\n    this.dragging = true;\n  }\n\n  mouseMove(x, y) {}\n\n  mouseUp() {\n    this.dragging = false;\n  }\n\n  becomeActive() {}\n\n  resignActive() {}\n\n  drawDecorations() {}\n\n  trace(x1, y1, x2, y2, callback) {\n    let dx = x2 - x1;\n    let dy = y2 - y1;\n    callback(x1, y1);\n\n    if (dx === 0 && dy === 0) {\n      return;\n    }\n\n    let adx = Math.abs(dx);\n    let ady = Math.abs(dy);\n    let sx = dx > 0;\n    let sy = dy > 0;\n\n    if (adx > ady) {\n      dx /= adx;\n      dy /= adx;\n    } else {\n      dx /= ady;\n      dy /= ady;\n    }\n\n    let x = x1;\n    let y = y1;\n\n    while (true) {\n      callback(Math.floor(x), Math.floor(y));\n      x += dx;\n      y += dy;\n      if (dx !== 0 && x !== x2 && x > x2 === sx || dy !== 0 && y !== y2 && y > y2 === sy) break;\n    }\n  }\n\n}\n\nmodule.exports = Tool;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/toolmanager.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/toolmanager.js","source":"const DocumentEventHandler = require(\"../../controls/interact/documenteventhandler\");\n\nconst Camera = require(\"../../camera\");\n\nconst Screen = require(\"../../screen\");\n\nconst Tool = require(\"../tools/tool\");\n\nclass ToolManager extends DocumentEventHandler {\n  /**\n   * @type Camera\n   */\n\n  /**\n   * @type {HTMLCanvasElement}\n   */\n\n  /**\n   * @type {KeyboardController}\n   */\n\n  /**\n   * @type {Tool}\n   */\n\n  /**\n   * @type {EditorMap}\n   */\n\n  /**\n   * @type Screen\n   */\n\n  /**\n   * @type {BlockState}\n   */\n\n  /**\n   * @param screen {Screen}\n   * @param camera {Camera}\n   * @param map {EditorMap}\n   */\n  constructor(screen, camera, map) {\n    super();\n    this.camera = null;\n    this.canvas = null;\n    this.keyboard = null;\n    this.selectedTool = null;\n    this.map = null;\n    this.screen = null;\n    this.selectedBlock = null;\n    this.screen = screen;\n    this.camera = camera;\n    this.map = map;\n    this.selectedTool = null;\n    this.selectedBlock = null;\n    this.target = this.screen.canvas;\n    this.startListening();\n  }\n\n  setNeedsRedraw(force) {\n    this.emit(\"redraw\", force);\n  }\n\n  startListening() {\n    this.bind(\"mousedown\", this.mouseDown);\n    this.bind(\"mouseup\", this.mouseUp);\n    this.bind(\"mousemove\", this.mouseMove);\n  }\n\n  mouseDown(event) {\n    event.preventDefault();\n\n    if (this.selectedTool && event.which === 1) {\n      let x = event.pageX / this.screen.width * 2 - 1;\n      let y = -(event.pageY / this.screen.height * 2 - 1);\n      this.camera.matrix.save();\n      this.camera.matrix.inverse();\n      this.selectedTool.mouseDown(this.camera.matrix.transformX(x, y), this.camera.matrix.transformY(x, y));\n      this.camera.matrix.restore();\n    }\n  }\n\n  mouseUp(event) {\n    event.preventDefault();\n\n    if (this.selectedTool) {\n      this.selectedTool.mouseUp();\n    }\n  }\n\n  mouseMove(event) {\n    event.preventDefault();\n\n    if (this.selectedTool) {\n      let x = event.pageX / this.screen.width * 2 - 1;\n      let y = -(event.pageY / this.screen.height * 2 - 1);\n      this.camera.matrix.save();\n      this.camera.matrix.inverse();\n      this.selectedTool.mouseMove(this.camera.matrix.transformX(x, y), this.camera.matrix.transformY(x, y));\n      this.camera.matrix.restore();\n    }\n  }\n\n  selectTool(tool) {\n    if (this.selectedTool) {\n      this.selectedTool.resignActive();\n    }\n\n    this.selectedTool = tool;\n\n    if (this.selectedTool) {\n      this.selectedTool.becomeActive();\n      this.updateCursor();\n    }\n  }\n\n  selectBlock(block) {\n    this.selectedBlock = block;\n  }\n\n  getCursor() {\n    if (this.selectedTool && this.selectedTool.cursor) {\n      return this.selectedTool.cursor;\n    } else {\n      return \"default\";\n    }\n  }\n\n  updateCursor() {\n    this.screen.canvas.style.cursor = this.getCursor();\n  }\n\n  createEvent(name) {\n    this.emit(\"event\", name);\n  }\n\n}\n\nmodule.exports = ToolManager;","deps":{"../../camera":"/Users/Temich/PycharmProjects/tanks/src/client/camera.js","../../screen":"/Users/Temich/PycharmProjects/tanks/src/client/screen.js","../../controls/interact/documenteventhandler":"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/documenteventhandler.js","../tools/tool":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/tool.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/run.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/run.js","source":"const Tool = require(\"../tool\");\n\nconst SniperTank = require(\"../../../tanks/models/sniper\");\n\nconst Box2D = require(\"../../../../library/box2d\");\n\nconst PlayerControls = require(\"../../../controls/playercontrols\");\n\nconst KeyboardController = require(\"../../../controls/interact/keyboardcontroller\");\n\nclass RunTool extends Tool {\n  constructor(manager) {\n    super(manager);\n    this.image = \"../assets/mapeditor/tank.png\";\n    this.setupMenu();\n    this.selectingLocation = false;\n    this.world = new Box2D.b2World(new Box2D.b2Vec2(0, 0));\n    this.tank = new SniperTank();\n    this.tank.setupDrawer(this.manager.screen.ctx);\n    this.tank.model.initPhysics(this.world);\n    this.keyboard = new KeyboardController();\n    this.playerControls = new PlayerControls();\n    this.playerControls.setupKeyboard(this.keyboard);\n    this.playerControls.connectTankControls(this.tank.model.controls);\n    this.running = false;\n    this.timer = 0;\n  }\n\n  setupMenu() {\n    this.runButton = $(\"<div>\").addClass(\"tool inline\").css(\"background-image\", \"url(../assets/mapeditor/start.png)\").click(() => this.toggle());\n    this.locationButton = $(\"<div>\").addClass(\"tool inline\").css(\"background-image\", \"url(../assets/mapeditor/locate.png)\").click(() => this.selectLocation());\n    this.settingsView = $(\"<div>\").append(this.locationButton).append(this.runButton).css(\"width\", \"100px\").css(\"height\", \"100%\");\n  }\n\n  toggle() {\n    this.running = !this.running;\n\n    if (this.running) {\n      this.bindCamera();\n    } else {\n      this.unbindCamera();\n    }\n  }\n\n  bindCamera() {\n    this.manager.setNeedsRedraw();\n    this.manager.camera.inertial = true;\n    this.manager.camera.target = this.tank.model.body.GetPosition();\n  }\n\n  unbindCamera() {\n    this.manager.camera.target = this.manager.camera.getPosition();\n    this.manager.camera.shaking.Set(0, 0);\n    this.manager.camera.shakeVelocity.Set(0, 0);\n    this.manager.camera.inertial = false;\n  }\n\n  selectLocation() {\n    this.locationButton.toggleClass(\"selected\");\n    this.selectingLocation = !this.selectingLocation;\n  }\n\n  drawDecorations() {\n    if (this.running) {\n      this.tick();\n      this.manager.setNeedsRedraw();\n    } else {\n      this.tank.drawer.draw(this.manager.camera, 0);\n    }\n  }\n\n  tick() {\n    let now = Date.now() / 1000;\n    let dt = now - this.timer;\n    this.timer = now;\n    if (dt > 0.1) dt = 0.1;\n    let steps = Math.floor(dt * 500);\n    if (steps > 10) steps = 10;\n\n    for (let i = 0; i < steps; i++) this.world.Step(1 / 500, 1, 1);\n\n    this.world.ClearForces();\n    this.tank.tick(dt);\n    this.tank.drawer.draw(this.manager.camera, dt);\n  }\n\n  mouseMove(x, y) {\n    super.mouseMove(x, y);\n  }\n\n  becomeActive() {\n    super.becomeActive();\n    this.manager.setNeedsRedraw();\n    this.keyboard.startListening();\n  }\n\n  resignActive() {\n    super.resignActive();\n    this.manager.setNeedsRedraw();\n    this.keyboard.stopListening();\n\n    if (this.running) {\n      this.unbindCamera();\n    }\n  }\n\n}\n\nmodule.exports = RunTool;","deps":{"../../../../library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","../../../controls/playercontrols":"/Users/Temich/PycharmProjects/tanks/src/client/controls/playercontrols.js","../tool":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/tool.js","../../../controls/interact/keyboardcontroller":"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/keyboardcontroller.js","../../../tanks/models/sniper":"/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/sniper.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/brushprogram.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/brushprogram.js","source":"/* @load-resource: '../shaders/fragment/brush-fragment.glsl' */\n\n/* @load-resource: '../shaders/vertex/brush-vertex.glsl' */\nconst Program = require(\"../program\");\n\nconst Shader = require(\"../shader\");\n\nconst GLBuffer = require(\"../glbuffer\");\n\nconst GameMap = require(\"../../../utils/map/gamemap\");\n\nclass BrushProgram extends Program {\n  constructor(name, ctx) {\n    let vertexShader = new Shader(\"brush-vertex\", Shader.VERTEX).compile(ctx);\n    let fragmentShader = new Shader(\"brush-fragment\", Shader.FRAGMENT).compile(ctx);\n    super(name, vertexShader, fragmentShader);\n    this.link(ctx);\n    this.ctx = ctx;\n    this.vertexBuffer = new GLBuffer({\n      gl: ctx,\n      drawMode: this.ctx.STATIC_DRAW\n    }).createBuffer();\n    this.vertexBuffer.extend(8);\n    this.indexBuffer = this.createIndexBuffer();\n    this.indexBuffer.appendArray([0, 1, 3, 0, 2, 3]);\n    this.indexBuffer.updateData();\n    this.vertexPositionAttribute = this.getAttribute(\"a_vertex_position\");\n    this.matrixUniform = this.getUniform(\"u_matrix\");\n    this.colorUniform = this.getUniform(\"u_color\");\n    this.brushCenterUniform = this.getUniform(\"u_brush_center\");\n    this.brushDiameterUniform = this.getUniform(\"u_brush_diameter\");\n    this.brushSquareRadiusUniform = this.getUniform(\"u_brush_square_radius\");\n    this.blockSizeUniform = this.getUniform(\"u_block_size\");\n    this.vertexLength = 2;\n    this.particles = 0;\n  }\n\n  prepare() {\n    this.vertexBuffer.bind();\n    this.indexBuffer.bind();\n    const bytes = this.vertexBuffer.clazz.BYTES_PER_ELEMENT;\n    const stride = this.vertexLength * bytes;\n    this.ctx.enableVertexAttribArray(this.vertexPositionAttribute);\n    this.ctx.vertexAttribPointer(this.vertexPositionAttribute, 2, this.ctx.FLOAT, false, stride, 0);\n  }\n\n  setBrushDiameter(diameter) {\n    let radius = diameter / 2;\n    let s = GameMap.BLOCK_SIZE;\n    this.brushDiameterUniform.set1i(diameter);\n    this.brushSquareRadiusUniform.set1f(radius ** 2 * s ** 2);\n  }\n\n  setBrushBounds(x1, y1, x2, y2) {\n    this.vertexBuffer.array[0] = x1;\n    this.vertexBuffer.array[1] = y1;\n    this.vertexBuffer.array[2] = x2;\n    this.vertexBuffer.array[3] = y1;\n    this.vertexBuffer.array[4] = x1;\n    this.vertexBuffer.array[5] = y2;\n    this.vertexBuffer.array[6] = x2;\n    this.vertexBuffer.array[7] = y2;\n    this.vertexBuffer.updateData();\n  }\n\n  draw() {\n    this.vertexBuffer.updateData();\n    this.ctx.drawElements(this.ctx.TRIANGLES, 6, this.ctx.UNSIGNED_SHORT, 0);\n    this.ctx.disableVertexAttribArray(this.vertexPositionAttribute);\n  }\n\n}\n\nmodule.exports = BrushProgram;","deps":{"../glbuffer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/glbuffer.js","../shader":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/shader.js","../program":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/program.js","../../../utils/map/gamemap":"/Users/Temich/PycharmProjects/tanks/src/utils/map/gamemap.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/history/history.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/history/history.js","source":"class History {\n  constructor() {\n    this.history = [];\n    this.currentModifications = [];\n    this.historyIndex = -1;\n  }\n\n  commitActions(name) {\n    this.history.push({\n      modifications: this.currentModifications,\n      actionName: name\n    });\n    this.currentModifications = [];\n    this.historyIndex++;\n  }\n\n  registerModification(modification) {\n    if (this.historyIndex < this.history.length - 1) this.history = this.history.slice(0, this.historyIndex + 1);\n    this.currentModifications.push(modification);\n  }\n\n  revertModifications(modifications) {\n    for (let i = modifications.length - 1; i >= 0; i--) modifications[i].revert();\n  }\n\n  performModifications(modifications) {\n    for (let modification of modifications) {\n      modification.perform();\n    }\n  }\n\n  goBack() {\n    if (this.currentModifications.length) {\n      return null;\n    } else if (this.history.length && this.historyIndex !== -1) {\n      let index = this.historyIndex;\n      this.historyIndex--;\n      this.revertModifications(this.history[index].modifications);\n      return this.history[index];\n    }\n\n    return null;\n  }\n\n  goForward() {\n    if (this.historyIndex >= this.history.length - 1) return null;\n    this.historyIndex++;\n    this.performModifications(this.history[this.historyIndex].modifications);\n    return this.history[this.historyIndex];\n  }\n\n}\n\nmodule.exports = History;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/client/ui/elements/range/range.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/ui/elements/range/range.js","source":"/* @load-resource: './range.scss' */\nconst View = require(\"../../view\");\n\nclass RangeView extends View {\n  constructor() {\n    super();\n    this.element.addClass(\"range-input\");\n    this.thumb = $(\"<div>\").addClass(\"thumb\");\n    this.track = $(\"<div>\").addClass(\"track\");\n    this.thumbContainer = $(\"<div>\").addClass(\"thumb-container\");\n    this.thumbContainer.append(this.thumb);\n    this.element.append(this.thumbContainer);\n    this.element.append(this.track);\n    this.value = 0;\n    this.dragging = false;\n    this.oldX = 0;\n    this.dragX = 0;\n    this.thumb.on(\"mousedown\", e => {\n      if (e.which !== 1) return;\n      this.oldX = e.pageX;\n      this.dragging = true;\n      this.trackWidth = this.track.width();\n    });\n    document.addEventListener(\"mouseup\", e => {\n      if (!this.dragging) return;\n      if (e.which !== 1) return;\n      this.dragX = this.getPosition();\n      this.dragging = false;\n    });\n    document.addEventListener(\"mousemove\", e => {\n      if (!this.dragging) return;\n      this.dragX += e.pageX - this.oldX;\n      this.oldX = e.pageX;\n      this.setValue(this.getPosition() / this.trackWidth);\n      this.emit(\"value\", this.value);\n    });\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.thumb.css(\"left\", (value * 100).toFixed(2) + \"%\");\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  getPosition() {\n    return Math.min(this.trackWidth, Math.max(this.dragX, 0));\n  }\n\n}\n\nmodule.exports = RangeView;","deps":{"../../view":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/pencil.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/pencil.js","source":"const Tool = require(\"../tool\");\n\nconst GameMap = require(\"../../../../utils/map/gamemap\");\n\nconst RangeView = require(\"../../../ui/elements/range/range\");\n\nconst BrushProgram = require(\"../../../graphics/programs/brushprogram\");\n\nclass Pencil extends Tool {\n  constructor(scene) {\n    super(scene);\n    this.image = \"../assets/mapeditor/pencil.png\";\n    this.actionName = \"Карандаш\";\n    this.decorationProgram = new BrushProgram(\"brush-program\", this.manager.screen.ctx);\n    this.decorationProgram.use();\n    this.decorationProgram.blockSizeUniform.set1f(GameMap.BLOCK_SIZE);\n    this.decorationProgram.colorUniform.set4f(0, 1, 0, 0.5);\n    this.brushX = 0;\n    this.brushY = 0;\n    this.brushPositionKnown = false;\n    this.isSquare = false;\n    this.setupMenu();\n    this.setThickness(1);\n  }\n\n  setupMenu() {\n    this.thicknessRangeInput = new RangeView();\n    this.thicknessRangeInput.element.css(\"height\", \"100%\");\n    this.thicknessLabel = $(\"<div>\").addClass(\"text\");\n    this.thicknessContainer = $(\"<div>\").addClass(\"container\").css(\"width\", \"25px\").append(this.thicknessLabel);\n    this.roundModeButton = $(\"<div>\").addClass(\"tool inline selected\").css(\"background-image\", \"url(../assets/mapeditor/round-brush.png)\").click(() => {\n      this.roundModeButton.addClass(\"selected\");\n      this.squareModeButton.removeClass(\"selected\");\n      this.isSquare = false;\n    });\n    this.squareModeButton = $(\"<div>\").addClass(\"tool inline\").css(\"background-image\", \"url(../assets/mapeditor/square-brush.png)\").click(() => {\n      this.roundModeButton.removeClass(\"selected\");\n      this.squareModeButton.addClass(\"selected\");\n      this.isSquare = true;\n    });\n    this.thicknessRangeInput.on(\"value\", value => {\n      this.setThickness(Math.round(value * 16) + 1);\n    });\n    this.settingsView = $(\"<div>\").append(this.thicknessRangeInput.element).append(this.thicknessContainer).append(this.roundModeButton).append(this.squareModeButton).css(\"width\", \"278px\").css(\"height\", \"100%\");\n  }\n\n  setThickness(thickness) {\n    this.thickness = thickness;\n    this.thicknessLabel.text(String(this.thickness));\n  }\n\n  mouseDown(x, y) {\n    super.mouseDown(x, y);\n    this.onMouse(x, y, false);\n  }\n\n  mouseMove(x, y) {\n    this.onMouse(x, y, true);\n  }\n\n  onMouse(x, y, continuous) {\n    this.brushPositionKnown = true;\n    let blockX;\n    let blockY;\n\n    if (this.thickness % 2 === 0) {\n      blockX = Math.floor(x / GameMap.BLOCK_SIZE + 0.5) * GameMap.BLOCK_SIZE;\n      blockY = Math.floor(y / GameMap.BLOCK_SIZE + 0.5) * GameMap.BLOCK_SIZE;\n    } else {\n      blockX = (Math.floor(x / GameMap.BLOCK_SIZE) + 0.5) * GameMap.BLOCK_SIZE;\n      blockY = (Math.floor(y / GameMap.BLOCK_SIZE) + 0.5) * GameMap.BLOCK_SIZE;\n    }\n\n    if (!continuous || blockX !== this.brushX || blockY !== this.brushY) {\n      this.brushX = blockX;\n      this.brushY = blockY;\n\n      if (this.dragging) {\n        this.performDrawing(this.brushX, this.brushY, continuous);\n      } else {\n        this.manager.setNeedsRedraw(false);\n      }\n    }\n  }\n\n  performDrawing(x, y, trace) {\n    x = Math.floor(x / GameMap.BLOCK_SIZE);\n    y = Math.floor(y / GameMap.BLOCK_SIZE);\n\n    if (trace) {\n      this.trace(this.oldX, this.oldY, x, y, (x, y) => this.draw(x, y));\n    } else {\n      this.draw(x, y);\n    }\n\n    this.oldX = x;\n    this.oldY = y;\n  }\n\n  mouseUp() {\n    super.mouseUp();\n    this.manager.map.history.commitActions(this.actionName);\n  }\n\n  draw(x, y) {\n    const radius = this.thickness / 2;\n    const area = Math.ceil(radius);\n    let lowX = x - area;\n    let lowY = y - area;\n    let highX = Math.min(this.manager.map.width - 1, x + area - 1);\n    let highY = Math.min(this.manager.map.height - 1, y + area - 1);\n\n    if (this.thickness % 2 !== 0) {\n      lowX++;\n      lowY++;\n    }\n\n    lowX = Math.max(0, x - area);\n    lowY = Math.max(0, y - area);\n    if (highX < 0 || highY < 0 || lowX >= this.manager.map.width || lowY >= this.manager.map.height) return;\n    let squareThickness = radius ** 2;\n    let sdx = lowX - x;\n    let sdy = lowY - y;\n\n    if (this.thickness % 2 === 0) {\n      sdx += 0.5;\n      sdy += 0.5;\n    }\n\n    for (let bx = lowX, dx = sdx; bx <= highX; bx++, dx++) {\n      for (let by = lowY, dy = sdy; by <= highY; by++, dy++) {\n        if (this.isSquare || dx ** 2 + dy ** 2 <= squareThickness) {\n          this.fragment(bx, by);\n        }\n      }\n    }\n\n    this.manager.setNeedsRedraw(true);\n  }\n\n  fragment(x, y) {\n    if (this.manager.map.getBlock(x, y).constructor.typeId === this.manager.selectedBlock.constructor.typeId) return;\n    let block = this.manager.selectedBlock.clone();\n    this.manager.map.setBlock(x, y, block);\n  }\n\n  becomeActive() {\n    this.setCursor(\"url(../assets/mapeditor/cursors/pencil.png) 0 32, auto\");\n    this.brushPositionKnown = false;\n  }\n\n  drawDecorations() {\n    const s = GameMap.BLOCK_SIZE;\n    const x = this.brushX / s;\n    const y = this.brushY / s;\n    const radius = this.thickness / 2;\n    const lowX = Math.max(0, x - radius);\n    const lowY = Math.max(0, y - radius);\n    const highX = Math.min(this.manager.map.width, x + radius);\n    const highY = Math.min(this.manager.map.height, y + radius);\n    if (highX < 0 || highY < 0 || lowX >= this.manager.map.width || lowY >= this.manager.map.height) return;\n    this.decorationProgram.use();\n    this.decorationProgram.prepare();\n    this.decorationProgram.setBrushBounds(lowX * s, lowY * s, highX * s, highY * s);\n    this.decorationProgram.brushCenterUniform.set2f(this.brushX, this.brushY);\n    this.decorationProgram.matrixUniform.setMatrix(this.manager.camera.matrix.m);\n\n    if (this.isSquare) {\n      this.decorationProgram.setBrushDiameter(0);\n    } else {\n      this.decorationProgram.setBrushDiameter(this.thickness);\n    }\n\n    this.decorationProgram.draw();\n  }\n\n}\n\nmodule.exports = Pencil;","deps":{"../../../../utils/map/gamemap":"/Users/Temich/PycharmProjects/tanks/src/utils/map/gamemap.js","../tool":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/tool.js","../../../graphics/programs/brushprogram":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/brushprogram.js","../../../ui/elements/range/range":"/Users/Temich/PycharmProjects/tanks/src/client/ui/elements/range/range.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/history/modification/mapmodification.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/history/modification/mapmodification.js","source":"class MapModification {\n  /**\n   *\n   * @type {EditorMap}\n   */\n\n  /**\n   *\n   * @param map {EditorMap}\n   */\n  constructor(map) {\n    this.map = null;\n    this.map = map;\n  }\n\n  perform() {}\n\n  revert() {}\n\n}\n\nmodule.exports = MapModification;","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/history/modification/mapareamodification.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/history/modification/mapareamodification.js","source":"const MapModification = require(\"./mapmodification\");\n\nconst AirBlockState = require(\"../../../../utils/map/blockstate/types/airblockstate\");\n\nclass MapAreaModification extends MapModification {\n  constructor(map, area, newData) {\n    super(map);\n    this.area = area;\n    this.oldData = this.fetchData(area);\n    this.newData = newData;\n  }\n\n  fetchData() {\n    let result = [];\n    let minX = Math.max(0, this.area.minX);\n    let minY = Math.max(0, this.area.minY);\n    let maxX = Math.min(this.map.width, this.area.maxX);\n    let maxY = Math.min(this.map.height, this.area.maxY);\n\n    for (let y = minY; y < maxY; y++) {\n      for (let x = minX; x < maxX; x++) {\n        result.push(this.map.getBlock(x, y));\n      }\n    }\n\n    return result;\n  }\n\n  setArea(data) {\n    let sourceIndex = 0;\n    let minX = Math.max(0, this.area.minX);\n    let minY = Math.max(0, this.area.minY);\n    let maxX = Math.min(this.map.width, this.area.maxX);\n    let maxY = Math.min(this.map.height, this.area.maxY);\n    let width = maxX - minX;\n    let destinationIndex = minX + minY * this.map.width;\n    let delta = this.area.width() - width; // Updating blocks\n\n    for (let y = minY; y < maxY; y++) {\n      for (let x = minX; x < maxX; x++) {\n        if (data) {\n          this.map.data[destinationIndex++] = data[sourceIndex++];\n        } else {\n          this.map.data[destinationIndex++] = new AirBlockState();\n        }\n      }\n\n      destinationIndex -= width - this.map.width;\n      sourceIndex += delta;\n    } // Fast block update\n\n\n    minX = Math.max(0, this.area.minX - 1);\n    minY = Math.max(0, this.area.minY - 1);\n    maxX = Math.min(this.map.width, this.area.maxX + 1);\n    maxY = Math.min(this.map.height, this.area.maxY + 1);\n    width = maxX - minX;\n    destinationIndex = minX + minY * this.map.width;\n\n    for (let y = minY; y < maxY; y++) {\n      for (let x = minX; x < maxX; x++) {\n        this.map.data[destinationIndex++].update(this.map, x, y);\n      }\n\n      destinationIndex -= width - this.map.width;\n    }\n  }\n\n  perform() {\n    this.setArea(this.newData);\n  }\n\n  revert() {\n    this.setArea(this.oldData);\n  }\n\n}\n\nmodule.exports = MapAreaModification;","deps":{"../../../../utils/map/blockstate/types/airblockstate":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/airblockstate.js","./mapmodification":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/history/modification/mapmodification.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/menu/map-preview/mappreviewcontainer.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/menu/map-preview/mappreviewcontainer.js","source":"/* @load-resource: './map-preview.scss' */\nconst View = require(\"../../../../../ui/view\");\n\nconst MapStorage = require(\"../../../../mapstorage\");\n\nconst MapDrawer = require(\"../../../../../graphics/drawers/mapdrawer\");\n\nconst Camera = require(\"../../../../../camera\");\n\nconst GameMap = require(\"../../../../../../utils/map/gamemap\");\n\nconst Box2D = require(\"../../../../../../library/box2d\");\n\nconst Sprite = require(\"../../../../../sprite\");\n\nclass MapPreviewContainer extends View {\n  constructor() {\n    super();\n    /** @type GameMap */\n\n    this.map = null;\n    /** @type MapDrawer */\n\n    this.mapDrawer = null;\n    /** @type HTMLCanvasElement */\n\n    this.canvas = null;\n    /** @type WebGLRenderingContextBase */\n\n    this.ctx = null;\n    /** @type Camera */\n\n    this.camera = null;\n    this.element.addClass(\"menu editor-map-preview\");\n    this.noMapSelectedLabel = $(\"<div>\").addClass(\"center-text-container\").append($(\"<div>\").addClass(\"center-text\").append($(\"<div>\").addClass(\"large\").text(\"Карта не выбрана\")).append($(\"<div>\").addClass(\"small\").text(\"Выберите карту в меню слева\")));\n    this.preview = $(\"<div>\").addClass(\"map-preview-container\");\n    this.header = $(\"<input>\").addClass(\"map-title\");\n    this.footer = $(\"<div>\").addClass(\"footer\");\n    this.downloadButton = $(\"<button>\").text(\"Скачать\").click(() => this.downloadMap());\n    this.editButton = $(\"<button>\").text(\"Открыть\").click(() => this.openMap());\n    this.deleteButton = $(\"<button>\").css(\"background-color\", \"#bb2b19\").css(\"position\", \"absolute\").css(\"left\", \"6px\").text(\"Удалить\").click(() => this.deleteMap());\n    this.footer.append(this.downloadButton);\n    this.footer.append(this.editButton);\n    this.footer.append(this.deleteButton);\n    const self = this;\n    this.header.on(\"change\", function () {\n      if (self.map) {\n        self.map.name = this.value;\n        self.emit(\"rename-commit\", self.map);\n      }\n    });\n    this.header.on(\"input\", function () {\n      if (self.map) {\n        self.map.name = this.value;\n        self.emit(\"rename\", self.map);\n      }\n    });\n    this.header.on(\"keyup\", event => {\n      if (event.originalEvent.code === \"Enter\") this.header.blur();\n    });\n    this.initCanvas();\n    this.preview.append(this.header);\n    this.preview.append(this.footer);\n    this.element.append(this.preview);\n    this.element.append(this.noMapSelectedLabel);\n    this.preview.hide();\n    this.noMapSelectedLabel.show();\n  }\n\n  initCanvas() {\n    this.canvasContainer = $(\"<div>\").addClass(\"map-canvas-container\");\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.classList.add(\"map-preview-canvas\");\n    this.canvasContainer.append($(this.canvas));\n    this.preview.append(this.canvasContainer);\n    this.ctx = this.canvas.getContext(\"webgl\");\n    this.ctx.clearColor(1.0, 1.0, 1.0, 1.0);\n    this.ctx.clear(this.ctx.COLOR_BUFFER_BIT);\n    this.ctx.blendFunc(this.ctx.SRC_ALPHA, this.ctx.ONE_MINUS_SRC_ALPHA);\n    this.ctx.enable(this.ctx.BLEND);\n    Sprite.applyTexture(this.ctx, 0);\n    this.camera = new Camera({\n      baseScale: 1,\n      viewport: new Box2D.b2Vec2(this.canvas.clientWidth, this.canvas.clientHeight),\n      defaultPosition: new Box2D.b2Vec2(0, 0)\n    });\n    this.mapDrawer = new MapDrawer(this.camera, this.ctx);\n  }\n\n  deleteMap() {\n    this.emit(\"delete\", this.map);\n  }\n\n  openMap() {\n    this.emit(\"open\", this.map);\n  }\n\n  downloadMap() {\n    const a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style.display = \"none\";\n    let data = MapStorage.writeMap(this.map, [GameMap.BinaryOptions.SIZE_FLAG, GameMap.BinaryOptions.DATA_FLAG, GameMap.BinaryOptions.SPAWN_ZONES_FLAG]);\n    const blob = new Blob([data], {\n      type: \"octet/stream\"\n    });\n    const url = window.URL.createObjectURL(blob);\n    a.href = url;\n    a.download = this.map.name + \".map\";\n    a.click();\n    window.URL.revokeObjectURL(url);\n    a.remove();\n  }\n\n  previewMap(map) {\n    if (!!map !== !!this.map) {\n      if (map) {\n        this.preview.show();\n        this.noMapSelectedLabel.hide();\n      } else {\n        this.preview.hide();\n        this.noMapSelectedLabel.show();\n      }\n    }\n\n    if (map && map.needsUpdate) {\n      map.update();\n    }\n\n    this.header.blur();\n    this.map = map;\n\n    if (this.map) {\n      if (this.map.name) this.header.val(this.map.name);else this.header.val(\"Карта\");\n    } else {\n      this.header.val(\"\");\n    }\n\n    this.drawMap();\n  }\n\n  drawMap() {\n    this.mapDrawer.reset();\n    this.ctx.clear(this.ctx.COLOR_BUFFER_BIT);\n\n    if (this.map != null) {\n      if (this.camera.viewport.x === 0) {\n        this.camera.viewport.x = this.canvas.clientWidth;\n        this.camera.viewport.y = this.canvas.clientHeight;\n        this.canvas.width = this.canvas.clientWidth * window.devicePixelRatio;\n        this.canvas.height = this.canvas.clientHeight * window.devicePixelRatio;\n        this.ctx.viewport(0, 0, this.ctx.drawingBufferWidth, this.ctx.drawingBufferHeight);\n      }\n\n      let mapWidth = this.map.width * GameMap.BLOCK_SIZE;\n      let mapHeight = this.map.height * GameMap.BLOCK_SIZE;\n      this.camera.baseScale = Math.min(this.camera.viewport.x / mapWidth, this.camera.viewport.y / mapHeight);\n      this.camera.defaultPosition.Set(mapWidth / 2, mapHeight / 2);\n      this.camera.reset();\n      this.camera.tick(0);\n      this.mapDrawer.draw(this.map);\n    }\n  }\n\n}\n\nmodule.exports = MapPreviewContainer;","deps":{"../../../../../camera":"/Users/Temich/PycharmProjects/tanks/src/client/camera.js","../../../../../../library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","../../../../../sprite":"/Users/Temich/PycharmProjects/tanks/src/client/sprite.js","../../../../../ui/view":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js","../../../../mapstorage":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/mapstorage.js","../../../../../../utils/map/gamemap":"/Users/Temich/PycharmProjects/tanks/src/utils/map/gamemap.js","../../../../../graphics/drawers/mapdrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/mapdrawer.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/editormapbinaryoptions.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/editormapbinaryoptions.js","source":"const MapBinaryOptions = require(\"../../utils/map/mapbinaryoptions\");\n\nclass EditorMapBinaryOptions extends MapBinaryOptions {\n  constructor() {\n    super();\n    this.NAME_FLAG = 0x0010;\n    this.addFlagHandler(new MapBinaryOptions.FlagHandler(this.NAME_FLAG).setPacker((encoder, options) => {\n      encoder.writeString(options.name || \"\");\n    }).setUnpacker((decoder, options) => {\n      options.name = decoder.readString();\n    }));\n  }\n\n}\n\nEditorMapBinaryOptions.shared = new EditorMapBinaryOptions();\nmodule.exports = EditorMapBinaryOptions;","deps":{"../../utils/map/mapbinaryoptions":"/Users/Temich/PycharmProjects/tanks/src/utils/map/mapbinaryoptions.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/history/modification/mapblockmodification.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/history/modification/mapblockmodification.js","source":"const MapModification = require(\"./mapmodification\");\n\nclass MapBlockModification extends MapModification {\n  constructor(map, x, y, newBlock) {\n    super(map);\n    this.x = x;\n    this.y = y;\n    this.oldBlock = map.getBlock(x, y);\n    this.newBlock = newBlock;\n  }\n\n  perform() {\n    this.map.preventNativeModificationRegistering = true;\n    this.map.setBlock(this.x, this.y, this.newBlock);\n    this.map.preventNativeModificationRegistering = false;\n  }\n\n  revert() {\n    this.map.preventNativeModificationRegistering = true;\n    this.map.setBlock(this.x, this.y, this.oldBlock);\n    this.map.preventNativeModificationRegistering = false;\n  }\n\n}\n\nmodule.exports = MapBlockModification;","deps":{"./mapmodification":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/history/modification/mapmodification.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/editormap.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/editormap.js","source":"const GameMap = require(\"../../utils/map/gamemap\");\n\nconst EditorMapBinaryOptions = require(\"./editormapbinaryoptions\");\n\nconst History = require(\"./history/history\");\n\nconst MapBlockModification = require(\"./history/modification/mapblockmodification\");\n\nconst AirBlockState = require(\"../../utils/map/blockstate/types/airblockstate\");\n\nclass EditorMap extends GameMap {\n  /**\n   * @type {History}\n   */\n\n  /**\n   * @type {boolean}\n   */\n  constructor(options) {\n    super(options);\n    this.history = null;\n    this.preventNativeModificationRegistering = false;\n\n    if (!options.data) {\n      let count = options.width * options.height;\n      this.data = new Array(count);\n\n      while (count--) {\n        this.data[count] = new AirBlockState();\n      }\n    }\n\n    this.size = 0;\n    this.name = options.name;\n    this.history = new History();\n  }\n\n  setBlock(x, y, data) {\n    if (!this.preventNativeModificationRegistering) this.history.registerModification(new MapBlockModification(this, x, y, data));\n    super.setBlock(x, y, data);\n  }\n\n}\n\nEditorMap.BinaryOptions = EditorMapBinaryOptions.shared;\nmodule.exports = EditorMap;","deps":{"../../utils/map/gamemap":"/Users/Temich/PycharmProjects/tanks/src/utils/map/gamemap.js","../../utils/map/blockstate/types/airblockstate":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/airblockstate.js","./history/history":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/history/history.js","./editormapbinaryoptions":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/editormapbinaryoptions.js","./history/modification/mapblockmodification":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/history/modification/mapblockmodification.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/area.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/area.js","source":"const Tool = require(\"../tool\");\n\nconst Rectangle = require(\"../../../../utils/rectangle\");\n\nconst ParticleProgram = require(\"../../../graphics/programs/particleprogram\");\n\nconst Particle = require(\"../../../particles/particle\");\n\nconst Color = require(\"../../../../utils/color\");\n\nconst KeyboardController = require(\"../../../controls/interact/keyboardcontroller\");\n\nconst MapDrawer = require(\"../../../graphics/drawers/mapdrawer\");\n\nconst EditorMap = require(\"../../editormap\");\n\nconst MapAreaModification = require(\"../../history/modification/mapareamodification\");\n\nclass AreaTool extends Tool {\n  constructor(manager) {\n    super(manager);\n    this.area = new Rectangle();\n    this.image = \"../assets/mapeditor/area.png\";\n    this.program = new ParticleProgram(\"area-program\", this.manager.screen.ctx);\n    this.copyBufferDrawer = new MapDrawer(this.manager.camera, this.manager.screen.ctx);\n    this.decoration = new Particle({\n      color: new Color(127, 127, 127, 0.5)\n    });\n    this.copyBuffer = null;\n    this.keyboard = new KeyboardController();\n    this.keyboard.keybinding(\"Cmd-C\", () => this.copy(false));\n    this.keyboard.keybinding(\"Cmd-V\", () => this.paste());\n    this.keyboard.keybinding(\"Cmd-X\", () => this.copy(true));\n    this.keyboard.keybinding(\"Cmd-D\", () => this.resetSelection());\n    this.keyboard.keybinding(\"Backspace\", () => this.deleteArea());\n    this.initialAreaState = false;\n    this.movingArea = false;\n    this.pasting = false;\n    this.hover = false;\n    this.oldX = 0;\n    this.oldY = 0;\n  }\n\n  deleteArea() {\n    if (!this.area.isValid()) return;\n    this.manager.createEvent(this.area.width() * this.area.height() + \" блок(-ов) удалено\");\n    let areaModification = new MapAreaModification(this.manager.map, this.area.clone(), void 0);\n    areaModification.perform();\n    this.manager.map.history.registerModification(areaModification);\n    this.manager.map.history.commitActions(\"Удаление\");\n    this.resetSelection();\n    this.manager.setNeedsRedraw(true);\n  }\n\n  copy(cut) {\n    if (!this.area.isValid()) return;\n    let bound = this.area.bounding(0, 0, this.manager.map.width, this.manager.map.height);\n    if (bound.minX >= bound.maxX || bound.minY >= bound.maxY) return;\n    let width = bound.width();\n    let height = bound.height();\n    this.copyBuffer = new EditorMap({\n      width: width,\n      height: height,\n      data: new Array(width * height),\n      name: \"Буфер обмена\"\n    });\n    let sourceIndex = bound.minX + bound.minY * this.manager.map.width;\n    let destinationIndex = 0;\n\n    for (let y = bound.minY; y < bound.maxY; y++) {\n      for (let x = bound.minX; x < bound.maxX; x++) {\n        this.copyBuffer.data[destinationIndex++] = this.manager.map.data[sourceIndex++];\n      }\n\n      sourceIndex -= width - this.manager.map.height;\n    }\n\n    if (cut) {\n      this.manager.createEvent(width * height + \" блок(-ов) вырезано\");\n      let bound = this.area.bounding(0, 0, this.manager.map.width, this.manager.map.height);\n      let areaModification = new MapAreaModification(this.manager.map, bound, void 0);\n      areaModification.perform();\n      this.manager.map.history.registerModification(areaModification);\n      this.manager.map.history.commitActions(\"Вырезание\");\n      this.resetSelection();\n    } else {\n      this.manager.createEvent(width * height + \" блок(-ов) скопировано\");\n    }\n  }\n\n  paste() {\n    if (this.pasting) {\n      this.commitPaste();\n    }\n\n    if (!this.copyBuffer) {\n      this.manager.createEvent(\"Нечего вставлять\");\n      return;\n    }\n\n    this.pasting = true;\n    let width = this.copyBuffer.width;\n    let height = this.copyBuffer.height;\n    let position = this.manager.camera.position;\n    let cameraX = Math.floor(position.x / EditorMap.BLOCK_SIZE);\n    let cameraY = Math.floor(position.y / EditorMap.BLOCK_SIZE);\n    this.area.setFrom(Math.floor(cameraX - width / 2), Math.floor(cameraY - height / 2));\n    this.area.setTo(Math.floor(cameraX + width / 2), Math.floor(cameraY + height / 2));\n    this.manager.createEvent(width * height + \" блок(-ов) вставлено\");\n    this.manager.setNeedsRedraw();\n  }\n\n  resetSelection() {\n    this.area.invalidate();\n    this.manager.setNeedsRedraw();\n  }\n\n  commitPaste() {\n    this.pasting = false;\n    let modification = new MapAreaModification(this.manager.map, this.area.clone(), this.copyBuffer.data.map(a => a.clone()));\n    modification.perform();\n    this.manager.map.history.registerModification(modification);\n    this.manager.map.history.commitActions(\"Вставка\");\n    this.manager.setNeedsRedraw(true);\n  }\n\n  mouseDown(x, y) {\n    super.mouseDown(x, y);\n    x = Math.floor(x / EditorMap.BLOCK_SIZE);\n    y = Math.floor(y / EditorMap.BLOCK_SIZE);\n    this.oldX = x;\n    this.oldY = y;\n\n    if (this.area.isValid()) {\n      if (this.area.contains(x, y)) {\n        this.movingArea = true;\n        return;\n      }\n    }\n\n    if (this.pasting) {\n      this.commitPaste();\n      this.resetSelection();\n      return;\n    }\n\n    this.area.setFrom(x, y);\n    this.area.setTo(x, y);\n    this.initialAreaState = true;\n  }\n\n  mouseUp() {\n    super.mouseUp();\n\n    if (this.area.width() === 0 && this.area.height() === 0) {\n      if (this.pasting) {\n        this.commitPaste();\n      }\n\n      this.resetSelection();\n    }\n\n    this.initialAreaState = false;\n    this.movingArea = false;\n  }\n\n  mouseMove(x, y) {\n    super.mouseMove(x, y);\n    x = Math.floor(x / EditorMap.BLOCK_SIZE);\n    y = Math.floor(y / EditorMap.BLOCK_SIZE);\n\n    if (this.dragging) {\n      if (this.initialAreaState) {\n        if (x >= this.area.x1) x++;\n        if (y >= this.area.y1) y++;\n        this.area.setTo(x, y);\n        this.manager.setNeedsRedraw();\n      } else if (this.movingArea) {\n        this.area.translate(x - this.oldX, y - this.oldY);\n        this.manager.setNeedsRedraw();\n      }\n    }\n\n    let hover = this.area.isValid() && this.area.contains(x, y);\n\n    if (hover !== this.hover) {\n      this.hover = hover;\n\n      if (hover) {\n        this.setCursor(\"move\");\n      } else {\n        this.setCursor(\"default\");\n      }\n    }\n\n    this.oldX = x;\n    this.oldY = y;\n  }\n\n  drawDecorations() {\n    super.drawDecorations();\n    this.program.use();\n    this.program.prepare();\n\n    if (this.area.isValid()) {\n      this.decoration.x = this.area.centerX() * EditorMap.BLOCK_SIZE;\n      this.decoration.y = this.area.centerY() * EditorMap.BLOCK_SIZE;\n      this.decoration.width = this.area.width() * EditorMap.BLOCK_SIZE;\n      this.decoration.height = this.area.height() * EditorMap.BLOCK_SIZE;\n      this.program.drawParticle(this.decoration);\n    }\n\n    this.program.matrixUniform.setMatrix(this.manager.camera.matrix.m);\n    this.program.draw();\n\n    if (this.pasting) {\n      this.manager.camera.matrix.save();\n      let x = this.area.minX * EditorMap.BLOCK_SIZE;\n      let y = this.area.minY * EditorMap.BLOCK_SIZE;\n      this.manager.camera.position.x -= x;\n      this.manager.camera.position.y -= y;\n      this.manager.camera.matrix.translate(x, y);\n      this.copyBufferDrawer.draw(this.copyBuffer);\n      this.manager.camera.matrix.restore();\n      this.manager.camera.position.x += x;\n      this.manager.camera.position.y += y;\n    }\n  }\n\n  becomeActive() {\n    super.becomeActive();\n    this.manager.setNeedsRedraw();\n    this.keyboard.startListening();\n  }\n\n  resignActive() {\n    super.resignActive();\n    this.manager.setNeedsRedraw();\n    this.keyboard.stopListening();\n  }\n\n}\n\nmodule.exports = AreaTool;","deps":{"../../../../utils/rectangle":"/Users/Temich/PycharmProjects/tanks/src/utils/rectangle.js","../../../../utils/color":"/Users/Temich/PycharmProjects/tanks/src/utils/color.js","../../../particles/particle":"/Users/Temich/PycharmProjects/tanks/src/client/particles/particle.js","../tool":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/tool.js","../../../graphics/programs/particleprogram":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/particleprogram.js","../../../controls/interact/keyboardcontroller":"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/keyboardcontroller.js","../../../graphics/drawers/mapdrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/mapdrawer.js","../../history/modification/mapareamodification":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/history/modification/mapareamodification.js","../../editormap":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/editormap.js"}},"/Users/Temich/PycharmProjects/tanks/src/utils/base64.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/utils/base64.js","source":"let Encoder, Decoder;\n\nif (typeof TextEncoder == \"undefined\") {\n  Encoder = require('ut' + 'il').TextEncoder;\n} else {\n  Encoder = TextEncoder;\n}\n\nif (typeof TextDecoder == \"undefined\") {\n  Decoder = require('ut' + 'il').TextEncoder;\n} else {\n  Decoder = TextDecoder;\n}\n\nconst base64abc = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"+\", \"/\"];\nconst base64codes = [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 62, 255, 255, 255, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 255, 255, 255, 0, 255, 255, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255, 255, 255, 255, 255, 255, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51];\n\nfunction getBase64Code(charCode) {\n  if (charCode >= base64codes.length) {\n    throw new Error(\"Unable to parse base64 string.\");\n  }\n\n  const code = base64codes[charCode];\n\n  if (code === 255) {\n    throw new Error(\"Unable to parse base64 string.\");\n  }\n\n  return code;\n}\n\nfunction bytesToBase64(bytes) {\n  let result = '',\n      i,\n      l = bytes.length;\n\n  for (i = 2; i < l; i += 3) {\n    result += base64abc[bytes[i - 2] >> 2];\n    result += base64abc[(bytes[i - 2] & 0x03) << 4 | bytes[i - 1] >> 4];\n    result += base64abc[(bytes[i - 1] & 0x0F) << 2 | bytes[i] >> 6];\n    result += base64abc[bytes[i] & 0x3F];\n  }\n\n  if (i === l + 1) {\n    // 1 octet yet to write\n    result += base64abc[bytes[i - 2] >> 2];\n    result += base64abc[(bytes[i - 2] & 0x03) << 4];\n    result += \"==\";\n  }\n\n  if (i === l) {\n    // 2 octets yet to write\n    result += base64abc[bytes[i - 2] >> 2];\n    result += base64abc[(bytes[i - 2] & 0x03) << 4 | bytes[i - 1] >> 4];\n    result += base64abc[(bytes[i - 1] & 0x0F) << 2];\n    result += \"=\";\n  }\n\n  return result;\n}\n\nfunction base64ToBytes(str) {\n  if (str.length % 4 !== 0) {\n    throw new Error(\"Unable to parse base64 string.\");\n  }\n\n  const index = str.indexOf(\"=\");\n\n  if (index !== -1 && index < str.length - 2) {\n    throw new Error(\"Unable to parse base64 string.\");\n  }\n\n  let missingOctets = 0,\n      n = str.length,\n      result = new Uint8Array(3 * (n / 4)),\n      buffer;\n\n  if (str.endsWith(\"==\")) {\n    missingOctets = 2;\n  } else if (str.endsWith(\"=\")) {\n    missingOctets = 1;\n  }\n\n  for (let i = 0, j = 0; i < n; i += 4, j += 3) {\n    buffer = getBase64Code(str.charCodeAt(i)) << 18 | getBase64Code(str.charCodeAt(i + 1)) << 12 | getBase64Code(str.charCodeAt(i + 2)) << 6 | getBase64Code(str.charCodeAt(i + 3));\n    result[j] = buffer >> 16;\n    result[j + 1] = buffer >> 8 & 0xFF;\n    result[j + 2] = buffer & 0xFF;\n  }\n\n  return result.subarray(0, result.length - missingOctets);\n}\n\nfunction base64encode(str, encoder) {\n  encoder = encoder || new Encoder();\n  return bytesToBase64(encoder.encode(str));\n}\n\nfunction base64decode(str, decoder) {\n  decoder = decoder || new Decoder();\n  return decoder.decode(base64ToBytes(str));\n}\n\nmodule.exports = {\n  base64ToBytes: base64ToBytes,\n  bytesToBase64: bytesToBase64,\n  base64encode: base64encode,\n  base64decode: base64decode\n};","deps":{}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/dialog/dialogview.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/dialog/dialogview.js","source":"const View = require(\"../../../../ui/view\");\n\nclass DialogView extends View {\n  constructor() {\n    super();\n    this.element.addClass(\"menu dialog\");\n    this.header = $(\"<div>\").addClass(\"title\");\n    this.message = $(\"<div>\").addClass(\"message\");\n    this.footer = $(\"<div>\").addClass(\"footer\");\n    this.element.append(this.header);\n    this.element.append(this.message);\n    this.element.append(this.footer);\n  }\n\n  title(text) {\n    this.header.text(text);\n  }\n\n  text(text) {\n    this.message.text(text);\n  }\n\n  addButton(config) {\n    let button = $(\"<button>\");\n    button.text(config.title);\n    if (config.color) button.css(\"background-color\", config.color);\n\n    if (config.side === \"left\") {\n      button.css(\"position\", \"absolute\");\n      button.css(\"left\", \"6px\");\n    }\n\n    if (config.width) {\n      button.css(\"width\", config.width);\n    }\n\n    if (config.onclick) {\n      button.click(() => {\n        config.onclick();\n        if (config.closes) this.emit(\"decision\");\n      });\n    } else if (config.closes) {\n      button.click(() => this.emit(\"decision\"));\n    }\n\n    this.footer.append(button);\n    return button;\n  }\n\n}\n\nmodule.exports = DialogView;","deps":{"../../../../ui/view":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/dialog/dialogoverlay.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/dialog/dialogoverlay.js","source":"const Overlay = require(\"../../../../ui/overlay\");\n\nconst DialogView = require(\"./dialogview\");\n\nclass DialogOverlay extends Overlay {\n  constructor(options) {\n    super(options);\n    this.dialog = new DialogView();\n    this.overlay.append(this.dialog.element);\n    this.requiresDecision = false;\n    this.dialog.on(\"decision\", () => this.hide());\n  }\n\n  show() {\n    this.overlay.attr(\"tabindex\", 1);\n    this.overlay.focus();\n\n    if (!this.requiresDecision) {\n      this.overlay.click(event => {\n        if (event.target === this.overlay) {\n          this.hide();\n        }\n      });\n      this.overlay.on(\"keydown\", event => {\n        if (event.code === \"Escape\") {\n          this.hide();\n        }\n      });\n    }\n\n    super.show();\n  }\n\n  hide(callback) {\n    this.overlay.blur();\n    super.hide(() => {\n      this.overlay.remove();\n      callback && callback();\n    });\n  }\n\n}\n\nmodule.exports = DialogOverlay;","deps":{"../../../../ui/overlay":"/Users/Temich/PycharmProjects/tanks/src/client/ui/overlay.js","./dialogview":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/dialog/dialogview.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/element/dragoverlay.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/element/dragoverlay.js","source":"/* @load-resource: './drag-overlay.scss' */\nconst DocumentEventHandler = require(\"../../../controls/interact/documenteventhandler\");\n\nclass DragOverlay extends DocumentEventHandler {\n  constructor(root) {\n    super();\n    this.root = root;\n    this.element = $(\"<div>\").addClass(\"drag-overlay\");\n    this.target = [this.root[0], this.element[0]];\n    this.hovered = false;\n  }\n\n  startListening() {\n    this.bind(\"dragenter\", this.dragEnter);\n    this.bind(\"dragover\", this.dragOver);\n    this.bind(\"dragleave\", this.dragLeave);\n    this.bind(\"drop\", this.drop);\n  }\n\n  dragEnter(event) {\n    event.preventDefault();\n\n    if (!this.hovered) {\n      this.element.addClass(\"visible\");\n      this.hovered = true;\n    }\n  }\n\n  dragOver(event) {\n    event.preventDefault();\n  }\n\n  dragLeave(event) {\n    event.preventDefault();\n\n    if (this.hovered && event.target && $(event.target).closest(\".drag-overlay\")[0]) {\n      this.element.removeClass(\"visible\");\n      this.hovered = false;\n    }\n  }\n\n  drop(event) {\n    event.preventDefault();\n\n    if (this.hovered) {\n      this.element.removeClass(\"visible\");\n      let files = event.dataTransfer.files;\n      let length = files.length;\n\n      while (length--) {\n        (function (i, self) {\n          let file = event.dataTransfer.files.item(i);\n          let fileReader = new FileReader();\n\n          fileReader.onload = function (event) {\n            self.emit(\"file\", {\n              buffer: event.target.result,\n              name: file.name\n            });\n          };\n\n          fileReader.readAsArrayBuffer(file);\n        })(length, this);\n      }\n\n      this.hovered = false;\n    }\n  }\n\n}\n\nmodule.exports = DragOverlay;","deps":{"../../../controls/interact/documenteventhandler":"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/documenteventhandler.js"}},"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/utils/common.js":{"file":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/utils/common.js","source":"'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\nfunction _has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n","deps":{}},"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/constants.js":{"file":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/constants.js","source":"'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  //Z_MEM_ERROR:     -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n","deps":{}},"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/zstream.js":{"file":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/zstream.js","source":"'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n","deps":{}},"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/messages.js":{"file":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/messages.js","source":"'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n","deps":{}},"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/gzheader.js":{"file":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/gzheader.js","source":"'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n","deps":{}},"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/utils/strings.js":{"file":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/utils/strings.js","source":"// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n","deps":{"./common":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/utils/common.js"}},"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/crc32.js":{"file":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/crc32.js","source":"'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n","deps":{}},"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/adler32.js":{"file":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/adler32.js","source":"'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n","deps":{}},"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/inffast.js":{"file":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/inffast.js","source":"'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  var s_window;               /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n","deps":{}},"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/inftrees.js":{"file":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/inftrees.js","source":"'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = require('../utils/common');\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n","deps":{"../utils/common":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/utils/common.js"}},"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/inflate.js":{"file":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/inflate.js","source":"'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils         = require('../utils/common');\nvar adler32       = require('./adler32');\nvar crc32         = require('./crc32');\nvar inflate_fast  = require('./inffast');\nvar inflate_table = require('./inftrees');\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\nvar Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\nvar Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nvar    HEAD = 1;       /* i: waiting for magic header */\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\nvar            DIST = 23;      /* i: waiting for distance code */\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\nvar            LIT = 26;       /* o: waiting for output space to write literal */\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\nvar    BAD = 30;       /* got a data error -- remain here until reset */\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\n\n\nfunction zswap32(q) {\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n}\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n  this.work = new utils.Buf16(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\nfunction inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n}\n\nfunction inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n}\n\nfunction inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n}\n\nfunction inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n}\n\nfunction inflateInit(strm) {\n  return inflateInit2(strm, DEF_WBITS);\n}\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\n\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\nfunction fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    var sym;\n\n    lenfix = new utils.Buf32(512);\n    distfix = new utils.Buf32(32);\n\n    /* literal/length table */\n    sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n}\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new utils.Buf8(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      utils.arraySet(state.window, src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n}\n\nfunction inflate(strm, flush) {\n  var state;\n  var input, output;          // input/output buffers\n  var next;                   /* next input INDEX */\n  var put;                    /* next output INDEX */\n  var have, left;             /* available input and output */\n  var hold;                   /* bit buffer */\n  var bits;                   /* bits in bit buffer */\n  var _in, _out;              /* save starting available input and output */\n  var copy;                   /* number of stored or match bytes to copy */\n  var from;                   /* where to copy match bytes from */\n  var from_source;\n  var here = 0;               /* current decoding table entry */\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  var len;                    /* length to copy for repeats, bits to drop */\n  var ret;                    /* return code */\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n  var opts;\n\n  var n; // temporary var for NEED_BITS\n\n  var order = /* permutation of code lengths */\n    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n        state.dmax = 1 << len;\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Array(state.head.extra_len);\n              }\n              utils.arraySet(\n                state.head.extra,\n                input,\n                next,\n                // extra field is limited to 65536 bytes\n                // - no need for additional size check\n                copy,\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          utils.arraySet(output, input, next, copy, put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inflate_fast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n}\n\nfunction inflateEnd(strm) {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  var state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n}\n\nfunction inflateGetHeader(strm, head) {\n  var state;\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n}\n\nfunction inflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var state;\n  var dictid;\n  var ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n}\n\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/\n","deps":{"../utils/common":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/utils/common.js","./crc32":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/crc32.js","./adler32":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/adler32.js","./inffast":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/inffast.js","./inftrees":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/inftrees.js"}},"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/inflate.js":{"file":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/inflate.js","source":"'use strict';\n\n\nvar zlib_inflate = require('./zlib/inflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar c            = require('./zlib/constants');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\nvar GZheader     = require('./zlib/gzheader');\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  if (!(this instanceof Inflate)) return new Inflate(options);\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== c.Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var dictionary = this.options.dictionary;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status === c.Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n    }\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 aligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n","deps":{"./utils/common":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/utils/common.js","./utils/strings":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/utils/strings.js","./zlib/constants":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/constants.js","./zlib/zstream":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/zstream.js","./zlib/messages":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/messages.js","./zlib/gzheader":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/gzheader.js","./zlib/inflate":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/inflate.js"}},"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/trees.js":{"file":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/trees.js","source":"'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\nvar utils = require('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n","deps":{"../utils/common":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/utils/common.js"}},"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/deflate.js":{"file":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/deflate.js","source":"'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg     = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n        );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n","deps":{"./crc32":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/crc32.js","../utils/common":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/utils/common.js","./adler32":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/adler32.js","./messages":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/messages.js","./trees":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/trees.js"}},"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/deflate.js":{"file":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/deflate.js","source":"'use strict';\n\n\nvar zlib_deflate = require('./zlib/deflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  if (!(this instanceof Deflate)) return new Deflate(options);\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    var dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n","deps":{"./utils/common":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/utils/common.js","./zlib/zstream":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/zstream.js","./zlib/messages":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/messages.js","./utils/strings":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/utils/strings.js","./zlib/deflate":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/deflate.js"}},"/Users/Temich/PycharmProjects/tanks/node_modules/pako/index.js":{"file":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/index.js","source":"// Top level file is just a mixin of submodules & constants\n'use strict';\n\nvar assign    = require('./lib/utils/common').assign;\n\nvar deflate   = require('./lib/deflate');\nvar inflate   = require('./lib/inflate');\nvar constants = require('./lib/zlib/constants');\n\nvar pako = {};\n\nassign(pako, deflate, inflate, constants);\n\nmodule.exports = pako;\n","deps":{"./lib/utils/common":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/utils/common.js","./lib/zlib/constants":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/constants.js","./lib/inflate":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/inflate.js","./lib/deflate":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/deflate.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/mapstorage.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/mapstorage.js","source":"const Base64 = require(\"../../utils/base64\");\n\nconst BinaryDecoder = require(\"../../serialization/binary/binarydecoder\");\n\nconst BinaryEncoder = require(\"../../serialization/binary/binaryencoder\");\n\nconst pako = require(\"pako\");\n\nconst EditorMap = require(\"./editormap\");\n\nclass MapStorage {\n  static read() {\n    let base64 = window.localStorage.getItem(\"editor-maps\");\n\n    if (base64) {\n      let result = [];\n\n      try {\n        let data = Base64.base64ToBytes(base64);\n        this.dataDecoder.reset();\n        this.dataDecoder.readData(data.buffer);\n        let maps = this.dataDecoder.readUint16();\n\n        while (maps--) {\n          let length = this.dataDecoder.readUint32();\n          let bytes = this.dataDecoder.readUint8(length);\n          result.push(this.readMap(bytes));\n        }\n      } catch (ignored) {\n        console.error(ignored);\n        return [];\n      }\n\n      return result;\n    }\n\n    return [];\n  }\n\n  static write(maps) {\n    this.dataEncoder.reset();\n    this.dataEncoder.writeUint16(maps.length);\n    let length = maps.length;\n\n    for (let i = 0; i < length; i++) {\n      let bytes = this.writeMap(maps[i]);\n      maps[i].size = bytes.length;\n      this.dataEncoder.writeUint32(bytes.length);\n      this.dataEncoder.writeUint8Array(bytes);\n    }\n\n    let buffer = this.dataEncoder.compile();\n    window.localStorage.setItem(\"editor-maps\", Base64.bytesToBase64(new Uint8Array(buffer)));\n  }\n\n  static readMap(buffer) {\n    let raw = pako.inflate(buffer);\n    this.mapDecoder.reset();\n    this.mapDecoder.readData(raw.buffer);\n    let map = EditorMap.fromBinary(this.mapDecoder);\n    map.size = buffer.length;\n    return map;\n  }\n  /**\n   *\n   * @param map {GameMap}\n   * @param flags {number[]?}\n   * @returns {Uint8Array}\n   */\n\n\n  static writeMap(map, flags) {\n    this.mapEncoder.reset();\n    map.toBinary(this.mapEncoder, flags);\n    return pako.gzip(new Uint8Array(this.mapEncoder.compile()));\n  }\n\n}\n\nMapStorage.dataDecoder = new BinaryDecoder({\n  largeIndices: true\n});\nMapStorage.mapDecoder = new BinaryDecoder({\n  largeIndices: true\n});\nMapStorage.dataEncoder = new BinaryEncoder({\n  largeIndices: true\n});\nMapStorage.mapEncoder = new BinaryEncoder({\n  largeIndices: true\n});\nmodule.exports = MapStorage;","deps":{"../../serialization/binary/binaryencoder":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/binaryencoder.js","../../serialization/binary/binarydecoder":"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/binarydecoder.js","./editormap":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/editormap.js","../../utils/base64":"/Users/Temich/PycharmProjects/tanks/src/utils/base64.js","pako":"/Users/Temich/PycharmProjects/tanks/node_modules/pako/index.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/menu/map-list/mapselectcontainer.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/menu/map-list/mapselectcontainer.js","source":"/* @load-resource: './map-list.scss' */\nconst View = require(\"../../../../../ui/view\");\n\nconst MapStorage = require(\"../../../../mapstorage\");\n\nconst DragListener = require(\"../../../element/dragoverlay\");\n\nconst Utils = require(\"../../../../../../utils/utils\");\n\nclass MapSelectContainer extends View {\n  constructor(options) {\n    super(options);\n    this.element.addClass(\"menu editor-map-list\");\n    this.noMapsLabel = $(\"<div>\").addClass(\"center-text-container\").append($(\"<div>\").addClass(\"center-text\").append($(\"<div>\").addClass(\"large\").text(\"Нет карт\")).append($(\"<div>\").addClass(\"small\").text(\"Создайте новую карту или перетяните файл в это окно\")));\n    this.mapContainer = $(\"<div>\").addClass(\"map-list-container\");\n    this.mapList = $(\"<div>\").addClass(\"map-list\");\n    this.footer = $(\"<div>\").addClass(\"footer\");\n    this.createNewMapButton = $(\"<button>\").text(\"Создать новую карту\").click(() => this.emit(\"create\"));\n    this.mapContainer.append(this.mapList);\n    this.element.append(this.mapContainer);\n    this.element.append(this.footer);\n    this.footer.append(this.createNewMapButton);\n    this.mapContainer.append(this.noMapsLabel);\n    this.maps = [];\n    this.dragListener = new DragListener(this.element);\n    this.element.append(this.dragListener.element);\n    this.dragListener.startListening();\n    this.dragListener.on(\"file\", file => {\n      try {\n        let map = MapStorage.readMap(file.buffer);\n        if (!map.name) map.name = Utils.trimFileExtension(file.name);\n        this.maps.push(map);\n        this.saveMaps();\n      } catch (e) {\n        console.error(e);\n      }\n    });\n    this.selectedMap = null;\n    this.loadMaps();\n  }\n\n  loadMaps() {\n    this.maps = MapStorage.read();\n    this.refreshMaps();\n  }\n\n  saveMaps() {\n    try {\n      MapStorage.write(this.maps);\n      this.refreshMaps();\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n\n    return true;\n  }\n\n  updateMapTitle(map) {\n    let index = this.maps.indexOf(map);\n    if (index === -1) return;\n    $(this.mapList.children().get(index)).find(\".title\").text(map.name || \"Карта\");\n  }\n\n  refreshMaps() {\n    this.mapList.find(\".map-row\").remove();\n\n    if (this.maps.length) {\n      this.noMapsLabel.hide();\n      const self = this;\n\n      for (let map of this.maps) {\n        const row = $(\"<div>\").addClass(\"map-row\");\n        const block = $(\"<div>\").addClass(\"block\");\n        row.append(block);\n        block.append($(\"<div>\").addClass(\"title\").text(map.name || \"Карта\"));\n        block.append($(\"<div>\").addClass(\"size\").append($(\"<span>\").addClass(\"width\").text(String(map.width))).append(\" x \").append($(\"<span>\").addClass(\"height\").text(String(map.height))).append($(\"<span>\").addClass(\"text\").text(\" блоков, \")).append($(\"<span>\").addClass(\"size\").text(String(map.size))).append($(\"<span>\").addClass(\"text\").text(\" байт.\")));\n        block.click({\n          map: map\n        }, function (event) {\n          const block = $(this);\n          block.closest(\".map-list\").find(\".map-row .block.selected\").removeClass(\"selected\");\n          block.addClass(\"selected\");\n          self.selected(event.data.map);\n        });\n        this.mapList.append(row);\n      }\n    } else {\n      this.noMapsLabel.show();\n    }\n  }\n\n  selected(map) {\n    if (this.selectedMap !== map) {\n      this.emit(\"select\", map);\n      this.selectedMap = map;\n    }\n  }\n\n}\n\nmodule.exports = MapSelectContainer;","deps":{"../../../../../../utils/utils":"/Users/Temich/PycharmProjects/tanks/src/utils/utils.js","../../../../../ui/view":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js","../../../element/dragoverlay":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/element/dragoverlay.js","../../../../mapstorage":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/mapstorage.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/menu/menuoverlay.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/menu/menuoverlay.js","source":"const Overlay = require(\"../../../../ui/overlay\");\n\nconst MapSelectContainer = require(\"./map-list/mapselectcontainer\");\n\nconst MapPreviewContainer = require(\"./map-preview/mappreviewcontainer\");\n\nconst DialogOverlay = require(\"../../overlay/dialog/dialogoverlay\");\n\nconst EditorMap = require(\"../../../editormap\");\n\nclass MenuOverlay extends Overlay {\n  constructor(options) {\n    super(options);\n    this.mapSelect = new MapSelectContainer();\n    this.mapPreview = new MapPreviewContainer();\n    this.overlay.append(this.mapPreview.element);\n    this.overlay.append(this.mapSelect.element);\n    this.mapSelect.on(\"select\", map => {\n      this.mapPreview.previewMap(map);\n    });\n    this.mapPreview.on(\"rename\", map => {\n      this.mapSelect.updateMapTitle(map);\n    });\n    this.mapPreview.on(\"rename-commit\", () => {\n      this.mapSelect.saveMaps();\n    });\n    this.mapPreview.on(\"open\", map => {\n      this.emit(\"open\", map);\n    });\n    this.mapSelect.on(\"create\", () => {\n      this.createMap();\n    });\n    this.mapPreview.on(\"delete\", map => {\n      this.deleteMap(map);\n    });\n  }\n\n  createMap() {\n    let creationOverlay = new DialogOverlay({\n      root: this.overlay\n    });\n    creationOverlay.dialog.element.append($(\"<table>\").addClass(\"inputs\").append($(\"<tbody>\").append($(\"<tr>\").append($(\"<td>\").append(\"Имя карты\")).append($(\"<td>\").append($(\"<input>\").addClass(\"name\").attr(\"placeholder\", \"Карта\")))).append($(\"<tr>\").append($(\"<td>\").append(\"Ширина\")).append($(\"<td>\").append($(\"<input>\").addClass(\"width\").attr(\"placeholder\", \"50\").attr(\"type\", \"number\")))).append($(\"<tr>\").append($(\"<td>\").append(\"Высота\")).append($(\"<td>\").append($(\"<input>\").addClass(\"height\").attr(\"placeholder\", \"50\").attr(\"type\", \"number\"))))));\n    creationOverlay.dialog.addButton({\n      title: \"Создать карту\",\n      onclick: () => {\n        let width = creationOverlay.dialog.element.find(\"input.width\").val() || \"50\";\n        let height = creationOverlay.dialog.element.find(\"input.height\").val() || \"50\";\n        let name = creationOverlay.dialog.element.find(\"input.name\").val() || \"Карта\";\n        width = parseInt(width);\n        height = parseInt(height);\n\n        if (Number.isNaN(width) || Number.isNaN(height) || width < 0 || height < 0 || width * height > 65535) {\n          return;\n        }\n\n        let map = new EditorMap({\n          name: name,\n          width: width,\n          height: height\n        });\n        this.mapSelect.maps.push(map);\n        this.mapSelect.saveMaps();\n        this.mapSelect.refreshMaps();\n        creationOverlay.hide();\n      }\n    });\n    creationOverlay.dialog.addButton({\n      title: \"Отмена\",\n      closes: true,\n      side: \"left\"\n    });\n    creationOverlay.show();\n  }\n\n  deleteMap(map) {\n    let step = 0;\n    let deletionOverlay = new DialogOverlay({\n      root: this.overlay\n    });\n    let deleteButton = null;\n    let denyButton = null;\n\n    const next = () => {\n      deleteButton && deleteButton.remove();\n      denyButton && denyButton.remove();\n      dialog();\n      step++;\n    };\n\n    const deleteMap = () => {\n      this.mapSelect.maps.splice(this.mapSelect.maps.indexOf(map), 1);\n      this.mapSelect.saveMaps();\n      this.mapSelect.refreshMaps();\n      this.mapPreview.previewMap(null);\n    };\n\n    const dialog = () => {\n      if (step === 0) {\n        if (localStorage.getItem(\"dialog-passed\") === \"1\") {\n          deletionOverlay.dialog.title(\"Ладно, ладно\");\n          deletionOverlay.dialog.text(\"Раз уж ты так уверен в себе\");\n          deleteButton = deletionOverlay.dialog.addButton({\n            title: \"Наконец-то\",\n            color: \"#bb2b19\",\n            closes: true,\n            onclick: () => {\n              localStorage.setItem(\"dialog-passed\", \"2\");\n              deleteMap();\n            }\n          });\n          denyButton = deletionOverlay.dialog.addButton({\n            title: \"Нет, я передумал\",\n            side: \"left\",\n            closes: true,\n            onclick: () => {\n              localStorage.setItem(\"dialog-passed\", \"0\");\n            }\n          });\n        } else if (localStorage.getItem(\"dialog-passed\") === \"2\") {\n          deletionOverlay.dialog.title(\"Снова ты?\");\n          deletionOverlay.dialog.text(\"Что прикажете делать, Ваше Решительное Величество?\");\n          deleteButton = deletionOverlay.dialog.addButton({\n            title: \"Казнить\",\n            color: \"#bb2b19\",\n            closes: true,\n            onclick: deleteMap\n          });\n          denyButton = deletionOverlay.dialog.addButton({\n            title: \"Помиловать\",\n            side: \"left\",\n            closes: true\n          });\n        } else {\n          deletionOverlay.dialog.title(\"Удалить карту?\");\n          deletionOverlay.dialog.text(\"Ты хорошо подумал?\");\n          deleteButton = deletionOverlay.dialog.addButton({\n            title: \"Да, отстань\",\n            color: \"#bb2b19\",\n            closes: false,\n            onclick: next\n          });\n          denyButton = deletionOverlay.dialog.addButton({\n            title: \"Я случайно нажал\",\n            side: \"left\",\n            closes: true\n          });\n        }\n      } else if (step === 1) {\n        deletionOverlay.dialog.title(\"Точно?\");\n        deletionOverlay.dialog.text(\"Может еще подумаешь? Такие решения так быстро не принимаются...\");\n        deleteButton = deletionOverlay.dialog.addButton({\n          title: \"Да, точно.\",\n          color: \"#bb2b19\",\n          closes: false,\n          side: \"left\",\n          onclick: next\n        });\n        denyButton = deletionOverlay.dialog.addButton({\n          title: \"О нет, я снова ошибся\",\n          closes: true\n        });\n      } else if (step === 2) {\n        deletionOverlay.dialog.title(\"Не...\");\n        deletionOverlay.dialog.text(\"Ты слишком торопишься с решениями. Лучше обсуди это с мамой.\");\n        localStorage.setItem(\"dialog-passed\", \"1\");\n        denyButton = deletionOverlay.dialog.addButton({\n          title: \"Какого хрена?\",\n          closes: true,\n          width: \"288px\"\n        });\n      }\n    };\n\n    next();\n    deletionOverlay.show();\n  }\n\n  redraw() {\n    this.mapPreview.drawMap();\n  }\n\n  saveMaps() {\n    return this.mapSelect.saveMaps();\n  }\n\n}\n\nmodule.exports = MenuOverlay;","deps":{"../../../../ui/overlay":"/Users/Temich/PycharmProjects/tanks/src/client/ui/overlay.js","../../../editormap":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/editormap.js","./map-preview/mappreviewcontainer":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/menu/map-preview/mappreviewcontainer.js","../../overlay/dialog/dialogoverlay":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/dialog/dialogoverlay.js","./map-list/mapselectcontainer":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/menu/map-list/mapselectcontainer.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/toolsettings/toolsettingsview.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/toolsettings/toolsettingsview.js","source":"/* @load-resource: '/src/client/ui/overlay.scss' */\n\n/* @load-resource: './tool-settings.scss' */\nconst View = require('src/client/ui/view');\n\nclass ToolSettingsView extends View {\n  constructor() {\n    super();\n    this.element.addClass(\"menu editor-tool-settings\");\n    this.element.css(\"opacity\", \"0\");\n    this.element.hide();\n    this.hidden = true;\n  }\n\n  setupTool(tool) {\n    if (tool.settingsView) {\n      this.show();\n      this.element.children().detach();\n      this.element.css(\"width\", tool.settingsView.width() + \"px\");\n      this.element.append(tool.settingsView);\n    } else {\n      this.hide();\n    }\n  }\n\n  show() {\n    if (this.hidden) {\n      this.element.show();\n      this.element.css(\"opacity\", \"1\");\n      this.hidden = false;\n    }\n  }\n\n  hide() {\n    if (!this.hidden) {\n      this.element.css(\"opacity\", \"0\");\n      this.hidden = true;\n      setTimeout(() => {\n        if (this.hidden) this.element.hide();\n      }, 500);\n    }\n  }\n\n}\n\nmodule.exports = ToolSettingsView;","deps":{"src/client/ui/view":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/blockselect/blockselectbutton.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/blockselect/blockselectbutton.js","source":"/* @load-resource: '/src/client/ui/overlay.scss' */\n\n/* @load-resource: './block-select.scss' */\nconst View = require('src/client/ui/view');\n\nclass BlockSelectButton extends View {\n  constructor() {\n    super();\n    this.element.addClass(\"menu editor-block-select\");\n  }\n\n  previewBlock(block) {\n    this.element.css(\"background-image\", \"url(../assets/mapeditor/blocks/\" + block.constructor.typeName + \".png)\");\n  }\n\n}\n\nmodule.exports = BlockSelectButton;","deps":{"src/client/ui/view":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/blockselect/blockselectmenu.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/blockselect/blockselectmenu.js","source":"/* @load-resource: './block-select.scss' */\nconst View = require('src/client/ui/view');\n\nconst BlockState = require('src/utils/map/blockstate/blockstate');\n\nclass BlockSelectMenu extends View {\n  constructor() {\n    super();\n    this.element.addClass(\"menu editor-block-select-menu\");\n    this.element.append($(\"<div>\").addClass(\"title\").text(\"Выбор блока\"));\n    this.list = $(\"<div>\").addClass(\"block-list\");\n    this.element.append(this.list);\n\n    for (let [id, Block] of BlockState.Types) {\n      if (id === 0) continue;\n      let name = Block.typeName;\n      this.list.append($(\"<div>\").addClass(\"block-button\").css(\"background-image\", \"url(../assets/mapeditor/blocks/\" + name + \".png)\").click({\n        id: id,\n        name: name\n      }, event => {\n        const Block = BlockState.getBlockStateClass(event.data.id);\n        const block = new Block();\n        this.emit(\"select\", block);\n      }));\n    }\n  }\n\n}\n\nmodule.exports = BlockSelectMenu;","deps":{"src/client/ui/view":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js","src/utils/map/blockstate/blockstate":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstate.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/blockselect/blockselectoverlay.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/blockselect/blockselectoverlay.js","source":"const Overlay = require('src/client/ui/overlay');\n\nconst BlockSelectMenu = require(\"./blockselectmenu\");\n\nclass BlockSelectOverlay extends Overlay {\n  constructor(options) {\n    super(options);\n    this.menu = new BlockSelectMenu();\n    this.overlay.append(this.menu.element);\n    this.overlay.attr(\"tabindex\", 1);\n    this.overlay.keydown(event => {\n      if (event.key === \"Escape\") {\n        this.hide();\n      }\n    });\n    this.overlay.on(\"click\", event => {\n      if (event.target === this.overlay[0]) {\n        this.hide();\n      }\n    });\n    this.menu.on(\"select\", (name, block) => {\n      this.emit(\"select\", name, block);\n      this.hide();\n    });\n  }\n\n}\n\nmodule.exports = BlockSelectOverlay;","deps":{"src/client/ui/overlay":"/Users/Temich/PycharmProjects/tanks/src/client/ui/overlay.js","./blockselectmenu":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/blockselect/blockselectmenu.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/toolbar/toolbar.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/toolbar/toolbar.js","source":"/* @load-resource: '/src/client/ui/overlay.scss' */\n\n/* @load-resource: './toolbar.scss' */\nconst View = require('src/client/ui/view');\n\nconst BrickBlockState = require('src/utils/map/blockstate/types/brickblockstate');\n\nconst BlockSelectOverlay = require(\"../blockselect/blockselectoverlay\");\n\nconst BlockSelectButton = require(\"../blockselect/blockselectbutton\");\n\nclass ToolbarView extends View {\n  constructor(options) {\n    super();\n    this.element.addClass(\"editor-toolbar\");\n    this.toolList = $(\"<div>\").addClass(\"menu editor-toollist\");\n    this.blockSelector = new BlockSelectButton();\n    this.element.append(this.toolList);\n    this.element.append(this.blockSelector.element);\n    this.blockSelector.element.click(() => {\n      this.blockSelectOverlay.show();\n    });\n    this.blockSelectOverlay = new BlockSelectOverlay({\n      root: options.root\n    });\n    this.blockSelectOverlay.on(\"select\", (name, block) => {\n      this.selectBlock(name, block);\n    });\n    this.selectedTool = null;\n  }\n\n  loadSavedBlock() {\n    let savedBlockName = localStorage.getItem(\"editor-block-name\");\n    let savedBlockData = localStorage.getItem(\"editor-block-data\");\n\n    if (savedBlockData && savedBlockData) {\n      this.selectBlock(savedBlockName, savedBlockData);\n    } else {\n      this.selectBlock(new BrickBlockState());\n    }\n  }\n\n  selectBlock(block) {\n    this.blockSelector.previewBlock(block);\n    this.emit(\"block-select\", block);\n  }\n  /**\n   * Adds tool icon to toolbar\n   * @param tool {Tool}\n   */\n\n\n  addTool(tool) {\n    const self = this;\n    this.toolList.append($(\"<div>\").addClass(\"tool\").css(\"background-image\", \"url(\" + tool.image + \")\").attr(\"alt\", tool.name).click(function () {\n      const block = $(this);\n      block.closest(\".editor-toolbar\").find(\".tool.selected\").removeClass(\"selected\");\n      block.addClass(\"selected\");\n      self.emit(\"tool-select\", tool);\n    }));\n  }\n\n}\n\nmodule.exports = ToolbarView;","deps":{"src/client/ui/view":"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js","../blockselect/blockselectbutton":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/blockselect/blockselectbutton.js","../blockselect/blockselectoverlay":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/blockselect/blockselectoverlay.js","src/utils/map/blockstate/types/brickblockstate":"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/brickblockstate.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/scenes/mapeditorscene.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/scenes/mapeditorscene.js","source":"/* @load-resource: '../styles.css' */\nconst Scene = require(\"../../scenes/scene\");\n\nconst MapDrawer = require(\"../../graphics/drawers/mapdrawer\");\n\nconst Camera = require(\"../../camera\");\n\nconst MenuOverlay = require(\"../ui/overlay/menu/menuoverlay\");\n\nconst Box2D = require(\"../../../library/box2d\");\n\nconst GameMap = require(\"../../../utils/map/gamemap\");\n\nconst KeyboardController = require(\"../../controls/interact/keyboardcontroller\");\n\nconst DragHandler = require(\"../../controls/interact/draghandler\");\n\nconst ToolbarView = require(\"../ui/overlay/workspace/toolbar/toolbar\");\n\nconst ToolManager = require(\"../tools/toolmanager\");\n\nconst EventContainer = require(\"../../ui/overlay/events/eventcontainer\");\n\nconst ToolSettingsView = require(\"../ui/overlay/workspace/toolsettings/toolsettingsview\");\n\nclass MapEditorScene extends Scene {\n  constructor(config) {\n    super(config);\n    this.time = 0;\n    this.progress = config.progress;\n    this.keyboard = new KeyboardController();\n    this.keyboard.startListening();\n    this.map = null;\n    this.dragHandler = new DragHandler(this.screen.canvas);\n    this.dragHandler.draggingEnabled = false;\n    this.dragHandler.startListening();\n    this.camera = new Camera({\n      baseScale: 1,\n      viewport: new Box2D.b2Vec2(0, 0),\n      defaultPosition: new Box2D.b2Vec2(0, 0),\n      limit: false\n    });\n    this.camera.intertial = false;\n    this.setupWorkspace();\n    this.mapDrawer = new MapDrawer(this.camera, this.screen.ctx);\n    this.menuOverlay = new MenuOverlay({\n      root: this.overlayContainer\n    });\n    this.menuOverlay.on(\"open\", map => {\n      this.map = map;\n      this.toolManager.map = map;\n      this.mapDrawer.reset();\n\n      if (this.map) {\n        if (!this.camera.target) {\n          this.camera.target = new Box2D.b2Vec2(0, 0);\n        }\n\n        this.camera.target.x = this.map.width * GameMap.BLOCK_SIZE / 2;\n        this.camera.target.y = this.map.height * GameMap.BLOCK_SIZE / 2;\n        this.camera.reset();\n        this.menuOverlay.hide();\n      } else {\n        this.camera.target = null;\n      }\n\n      this.screen.loop.start();\n    });\n    this.dragHandler.on(\"drag\", (dx, dy) => {\n      if (this.map) {\n        this.camera.target.x += dx / this.camera.baseScale;\n        this.camera.target.y += dy / this.camera.baseScale;\n        this.screen.loop.start();\n      }\n    });\n    this.dragHandler.on(\"zoom\", zoom => {\n      if (this.map) {\n        this.camera.baseScale *= zoom;\n        this.screen.loop.start();\n      }\n    });\n    this.keyboard.keybinding(\"Escape\", event => {\n      if (this.menuOverlay.shown) {\n        this.menuOverlay.hide();\n      } else {\n        this.menuOverlay.redraw();\n        this.menuOverlay.show();\n      }\n    });\n    this.keyboard.keybinding(\"Cmd-Z\", event => {\n      let entry = this.map.history.goBack();\n      if (entry) this.eventContainer.createEvent(\"Отменено: \" + entry.actionName);else this.eventContainer.createEvent(\"Нечего отменять\");\n      this.setNeedsRedraw(true);\n    });\n    this.keyboard.keybinding(\"Cmd-Y\", event => {\n      let entry = this.map.history.goForward();\n      if (entry) this.eventContainer.createEvent(\"Повторено: \" + entry.actionName);else this.eventContainer.createEvent(\"Нечего повторять\");\n      this.setNeedsRedraw(true);\n    });\n    this.keyboard.keybinding(\"Cmd-S\", event => {\n      if (this.menuOverlay.saveMaps()) {\n        this.eventContainer.createEvent(\"Карты сохранены\");\n      } else {\n        this.eventContainer.createEvent(\"Карты не сохранились. Что-то сломалось. Грр. Скачай карту ручками и покажи Артему чем насрало в консоль.\");\n      }\n    });\n    this.menuOverlay.show();\n    this.layout();\n  }\n\n  setNeedsRedraw(force) {\n    if (force) this.mapDrawer.reset();\n    this.screen.loop.start();\n  }\n\n  setupWorkspace() {\n    this.eventContainer = new EventContainer();\n    this.toolSettingsView = new ToolSettingsView();\n    this.toolManager = new ToolManager(this.screen, this.camera, this.map);\n    this.toolManager.on(\"redraw\", force => this.setNeedsRedraw(force));\n    this.toolManager.on(\"event\", text => this.eventContainer.createEvent(text));\n    this.toolbar = new ToolbarView({\n      root: this.overlayContainer\n    });\n    this.toolbar.on(\"tool-select\", tool => {\n      this.dragHandler.draggingEnabled = !tool.locksDragging;\n      this.toolSettingsView.setupTool(tool);\n      this.toolManager.selectTool(tool);\n    });\n    this.toolbar.on(\"block-select\", block => {\n      this.toolManager.selectBlock(block);\n    });\n    this.toolbar.loadSavedBlock();\n\n    [require('/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/area.js'),require('/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/drag.js'),require('/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/eraser.js'),require('/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/fill.js'),require('/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/pencil.js'),require('/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/run.js'),require('/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/spawnzone.js')].map(Tool => new Tool(this.toolManager)).forEach(tool => this.toolbar.addTool(tool));\n\n    this.overlayContainer.append(this.toolSettingsView.element);\n    this.overlayContainer.append(this.toolbar.element);\n    this.overlayContainer.append(this.eventContainer.element);\n  }\n\n  layout() {\n    super.layout();\n    this.screen.loop.start();\n    this.camera.viewport.x = this.screen.width;\n    this.camera.viewport.y = this.screen.height;\n  }\n\n  draw(ctx, dt) {\n    if (!this.map) return;\n    this.camera.tick(dt);\n    this.mapDrawer.draw(this.map);\n\n    if (this.toolManager.selectedTool) {\n      this.toolManager.selectedTool.drawDecorations();\n    }\n  }\n\n}\n\nmodule.exports = MapEditorScene;","deps":{"../../../library/box2d":"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js","../../camera":"/Users/Temich/PycharmProjects/tanks/src/client/camera.js","../../scenes/scene":"/Users/Temich/PycharmProjects/tanks/src/client/scenes/scene.js","../../graphics/drawers/mapdrawer":"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/mapdrawer.js","../../../utils/map/gamemap":"/Users/Temich/PycharmProjects/tanks/src/utils/map/gamemap.js","../../controls/interact/keyboardcontroller":"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/keyboardcontroller.js","../../ui/overlay/events/eventcontainer":"/Users/Temich/PycharmProjects/tanks/src/client/ui/overlay/events/eventcontainer.js","../../controls/interact/draghandler":"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/draghandler.js","/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/drag.js":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/drag.js","/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/fill.js":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/fill.js","/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/spawnzone.js":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/spawnzone.js","/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/eraser.js":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/eraser.js","../tools/toolmanager":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/toolmanager.js","/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/run.js":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/run.js","/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/pencil.js":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/pencil.js","/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/area.js":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/area.js","../ui/overlay/menu/menuoverlay":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/menu/menuoverlay.js","../ui/overlay/workspace/toolsettings/toolsettingsview":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/toolsettings/toolsettingsview.js","../ui/overlay/workspace/toolbar/toolbar":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/toolbar/toolbar.js"}},"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/editor.js":{"file":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/editor.js","source":"/* @load-resource: './style.css' */\nconst Screen = require(\"../screen\");\n\nconst Progress = require(\"../utils/progress\");\n\nconst Sprite = require(\"../sprite\");\n\nconst MapEditorScene = require(\"./scenes/mapeditorscene\");\n\nconst LoadingScene = require(\"../scenes/loading/loadingscene\");\n\nconst RequestFrameLoop = require(\"../../utils/loop/requestframeloop\");\n\nrequire(\"../../utils/physicsutils.js\").setupPhysics();\n\nclass MapEditor extends Screen {\n  constructor(config) {\n    super(config);\n  }\n\n  initLoop() {\n    this.loop = new RequestFrameLoop(this);\n  }\n\n  initialize() {\n    let spriteDownloadProgress = new Progress(); // let soundDownloadProgress = new Progress()\n\n    let totalProgress = new Progress(); //\n\n    totalProgress.addSubtask(spriteDownloadProgress); // totalProgress.addSubtask(soundDownloadProgress)\n\n    this.setScene(new LoadingScene({\n      screen: this,\n      progress: totalProgress\n    }));\n    Sprite.download(spriteDownloadProgress, this.ctx).then(() => {\n      Sprite.applyTexture(this.ctx, 0);\n      this.setScene(new MapEditorScene({\n        screen: this\n      })); //    return this.soundEngine.download(soundDownloadProgress)\n    }); //     .then(() => {\n    //     this.setScene(new GameScene({\n    //         screen: this\n    //     }))\n    // })\n  }\n\n}\n\nwindow.MapEditor = MapEditor;","deps":{"../sprite":"/Users/Temich/PycharmProjects/tanks/src/client/sprite.js","../../utils/physicsutils.js":"/Users/Temich/PycharmProjects/tanks/src/utils/physicsutils.js","../utils/progress":"/Users/Temich/PycharmProjects/tanks/src/client/utils/progress.js","../screen":"/Users/Temich/PycharmProjects/tanks/src/client/screen.js","../scenes/loading/loadingscene":"/Users/Temich/PycharmProjects/tanks/src/client/scenes/loading/loadingscene.js","../../utils/loop/requestframeloop":"/Users/Temich/PycharmProjects/tanks/src/utils/loop/requestframeloop.js","./scenes/mapeditorscene":"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/scenes/mapeditorscene.js"}}},"mtimes":{"/Users/Temich/PycharmProjects/tanks/src/client/utils/browsercheck/browsercheck.js":1594024744000,"/Users/Temich/PycharmProjects/tanks/src/client/utils/browsercheck/browsercheckview.js":1594391917000,"/Users/Temich/PycharmProjects/tanks/src/client/game/index.js":1596234916000,"/Users/Temich/PycharmProjects/tanks/src/client/utils/progress.js":1592344948000,"/Users/Temich/PycharmProjects/tanks/src/client/utils/canvasfactory.js":1594017026000,"/Users/Temich/PycharmProjects/tanks/src/client/engine.js":1591901579000,"/Users/Temich/PycharmProjects/tanks/src/utils/color.js":1598817292000,"/Users/Temich/PycharmProjects/tanks/src/client/sound/fx.js":1596460708000,"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/controlpanel.js":1591809537000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/concrete.js":1593466471000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/stone.js":1594484316000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/unbreakable.js":1593345510000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/wood.js":1593439953000,"/Users/Temich/PycharmProjects/tanks/src/library/box2d.js":1594201608000,"/Users/Temich/PycharmProjects/tanks/src/utils/loop/renderloop.js":1591568133000,"/Users/Temich/PycharmProjects/tanks/src/client/utils/downloader.js":1591717409000,"/Users/Temich/PycharmProjects/tanks/src/client/sprite.js":1594216697000,"/Users/Temich/PycharmProjects/tanks/src/utils/loop/scheduledtask.js":1591561706000,"/Users/Temich/PycharmProjects/tanks/src/utils/loop/loop.js":1592649331000,"/Users/Temich/PycharmProjects/tanks/src/client/screen.js":1596235647000,"/Users/Temich/PycharmProjects/tanks/src/client/scenes/scene.js":1594392016000,"/Users/Temich/PycharmProjects/tanks/src/client/particles/particle.js":1596196401000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/matrix3.js":1594548524000,"/Users/Temich/PycharmProjects/tanks/src/client/camera.js":1593968009000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/lightmasktextureprogram.js":1594291015000,"/Users/Temich/PycharmProjects/tanks/src/client/particles/fireparticle.js":1596200315000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/particleprogram.js":1597403172000,"/Users/Temich/PycharmProjects/tanks/src/client/scenes/loading/loadingscene.js":1594392016000,"/Users/Temich/PycharmProjects/tanks/src/utils/eventemitter.js":1592666919000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/textureprogram.js":1596231823000,"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/touchcontroller.js":1591810060000,"/Users/Temich/PycharmProjects/tanks/src/tanks/controls/axle.js":1591788286000,"/Users/Temich/PycharmProjects/tanks/src/client/controls/playercontrols.js":1591912485000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/mapdrawer.js":1596231408000,"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/16mm.js":1594577338000,"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/clientbullet.js":1592684869000,"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/cannonball.js":1593979770000,"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/cannonball.js":1593979003000,"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/mine.js":1592686382000,"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/mine.js":1592686098000,"/Users/Temich/PycharmProjects/tanks/src/client/effects/world/clientworldeffect.js":1595017332000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/entitydrawer.js":1592674413000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/basicentitydrawer.js":1594547281000,"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/16mm.js":1593895890000,"/Users/Temich/PycharmProjects/tanks/src/utils/physicsutils.js":1592672196000,"/Users/Temich/PycharmProjects/tanks/src/tanks/abstracttank.js":1594987214000,"/Users/Temich/PycharmProjects/tanks/src/client/tanks/clienttank.js":1594844423000,"/Users/Temich/PycharmProjects/tanks/src/entity/abstractentity.js":1592673484000,"/Users/Temich/PycharmProjects/tanks/src/entity/entitymodel.js":1594988428000,"/Users/Temich/PycharmProjects/tanks/src/client/entity/cliententity.js":1592664171000,"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/trucktankbehaviour.js":1592672772000,"/Users/Temich/PycharmProjects/tanks/src/utils/rotationalmatrix.js":1592677731000,"/Users/Temich/PycharmProjects/tanks/src/weapon/models/42mm.js":1594577045000,"/Users/Temich/PycharmProjects/tanks/src/tanks/models/sniper.js":1596457785000,"/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/sniper.js":1596457912000,"/Users/Temich/PycharmProjects/tanks/src/utils/binaryoptions.js":1593687598000,"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/bulletmodel.js":1592657735000,"/Users/Temich/PycharmProjects/tanks/src/entity/bullet/models/42mm.js":1594988402000,"/Users/Temich/PycharmProjects/tanks/src/client/entity/bullet/models/42mm.js":1592686123000,"/Users/Temich/PycharmProjects/tanks/src/client/particles/smoke.js":1593591082000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/tankdrawer.js":1593931089000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/glbuffer.js":1593429916000,"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/documenteventhandler.js":1595021805000,"/Users/Temich/PycharmProjects/tanks/src/client/controls/gamepadaxle.js":1596307925000,"/Users/Temich/PycharmProjects/tanks/src/client/controls/gamepadbutton.js":1591892122000,"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/gamepadmanager.js":1596461761000,"/Users/Temich/PycharmProjects/tanks/src/client/particles/explodeparticle.js":1596210455000,"/Users/Temich/PycharmProjects/tanks/src/client/ui/view.js":1594391443000,"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/buffer.js":1594193586000,"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/airblockstate.js":1593346504000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/postprocessingprogram.js":1596236918000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/uniform.js":1593845952000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/program.js":1596225928000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/shaderloader.js":1594291490000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/shader.js":1592233603000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/truckprogram.js":1594290999000,"/Users/Temich/PycharmProjects/tanks/src/client/ui/overlay/events/eventview.js":1594390749000,"/Users/Temich/PycharmProjects/tanks/src/client/ui/overlay/events/eventcontainer.js":1594289106000,"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/play-menu/playmenucontainer.js":1595023062000,"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/controls/controlscontainer.js":1595022690000,"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/tankbehaviour.js":1594980842000,"/Users/Temich/PycharmProjects/tanks/src/tanks/controls/tankcontrols.js":1594586041000,"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/binaryencoder.js":1593949658000,"/Users/Temich/PycharmProjects/tanks/src/networking/binarypacket.js":1596203739000,"/Users/Temich/PycharmProjects/tanks/src/serialization/serializationgroup.js":1591200139000,"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/serializable.js":1596203346000,"/Users/Temich/PycharmProjects/tanks/src/tanks/tankmodel.js":1594577586000,"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/binarypool.js":1591193605000,"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/binarydecoder.js":1593902963000,"/Users/Temich/PycharmProjects/tanks/src/client/networking/client.js":1595076285000,"/Users/Temich/PycharmProjects/tanks/src/utils/rectangle.js":1593811612000,"/Users/Temich/PycharmProjects/tanks/src/utils/map/spawnzone.js":1593793999000,"/Users/Temich/PycharmProjects/tanks/src/utils/map/mapbinaryoptions.js":1593590397000,"/Users/Temich/PycharmProjects/tanks/src/client/controls/buttonaxle.js":1592649331000,"/Users/Temich/PycharmProjects/tanks/src/client/controls/keyaxle.js":1593114634000,"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/keyboardcontroller.js":1593168568000,"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstatebinaryoptions.js":1596463095000,"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstate.js":1593687976000,"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/concreteblockstate.js":1593692092000,"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/stoneblockstate.js":1594484590000,"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/brickblockstate.js":1594485414000,"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/unbreakableblockstate.js":1593692092000,"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/types/woodblockstate.js":1593692119000,"/Users/Temich/PycharmProjects/tanks/src/utils/map/blockstate/blockstateloader.js":1594844001000,"/Users/Temich/PycharmProjects/tanks/src/client/ui/elements/dropdown/dropdown.js":1594538880000,"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/room-select/roomselectcontainer.js":1594538630000,"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/tank-preview/statscale.js":1594198948000,"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/tank-preview/tankpreviewcontainer.js":1594287797000,"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/tank-select/tankselectelement.js":1594200290000,"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/tank-select/tankselectcontainer.js":1594287800000,"/Users/Temich/PycharmProjects/tanks/src/utils/utils.js":1592901991000,"/Users/Temich/PycharmProjects/tanks/src/server/entity/serverentity.js":1596463919000,"/Users/Temich/PycharmProjects/tanks/src/utils/map/gamemap.js":1594902324000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/explodepooldrawer.js":1597398943000,"/Users/Temich/PycharmProjects/tanks/src/effects/abstracteffect.js":1594994228000,"/Users/Temich/PycharmProjects/tanks/src/client/effects/clienteffect.js":1594985543000,"/Users/Temich/PycharmProjects/tanks/src/client/effects/tank/clienttankeffect.js":1595004935000,"/Users/Temich/PycharmProjects/tanks/src/utils/htmlescape.js":1593954071000,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/gamestatepacket.js":1596205635000,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerconfigpacket.js":1592840648000,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerrespawnpacket.js":1591907437000,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/entityremovepacket.js":1592680954000,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerchatpacket.js":1591798001000,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerroomrequestpacket.js":1594503209000,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/entitylistpacket.js":1593981837000,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/roomlistpacket.js":1592840648000,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerroomchangepacket.js":1594558331000,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerleavepacket.js":1593978136000,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/effectremovepacket.js":1594985153000,"/Users/Temich/PycharmProjects/tanks/src/effects/tank/tankeffectmodel.js":1595002659000,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/mappacket.js":1593901244000,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerspawnpacket.js":1593021104000,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playercontrolspacket.js":1591786208000,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/entitycreatepacket.js":1593949555000,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/blockupdatepacket.js":1596208369000,"/Users/Temich/PycharmProjects/tanks/src/utils/player.js":1594987122000,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/playerjoinpacket.js":1591740567000,"/Users/Temich/PycharmProjects/tanks/src/effects/effectmodel.js":1595004253000,"/Users/Temich/PycharmProjects/tanks/src/effects/world/worldeffectmodel.js":1596191027000,"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/wheeledtankbehaviour.js":1594549698000,"/Users/Temich/PycharmProjects/tanks/src/tanks/physics/airbagbehaviour.js":1594540954000,"/Users/Temich/PycharmProjects/tanks/src/weapon/models/machinegun.js":1594893130000,"/Users/Temich/PycharmProjects/tanks/src/tanks/models/monster.js":1594578607000,"/Users/Temich/PycharmProjects/tanks/src/effects/tank/tankfireeffectmodel.js":1595002645000,"/Users/Temich/PycharmProjects/tanks/src/client/effects/tank/types/clienttankfireeffect.js":1594994233000,"/Users/Temich/PycharmProjects/tanks/src/client/particles/pellet.js":1593591038000,"/Users/Temich/PycharmProjects/tanks/src/client/effects/tank/types/clienttankpelletseffect.js":1594850916000,"/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/monster.js":1594844317000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/blockdrawer.js":1596463662000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/edgedblockdrawer.js":1596463559000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/drawers/block/types/brick.js":1593114709000,"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/chat/chatcontainer.js":1598807932000,"/Users/Temich/PycharmProjects/tanks/src/client/ui/overlay.js":1594493147000,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/roomlistrequestpacket.js":1592840648000,"/Users/Temich/PycharmProjects/tanks/src/client/game/ui/overlay/primary/primaryoverlay.js":1595023518000,"/Users/Temich/PycharmProjects/tanks/src/effects/world/explode/worldexplodeeffectmodel.js":1596189196000,"/Users/Temich/PycharmProjects/tanks/src/client/effects/world/types/clientworldexplodeeffect.js":1596191162000,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/effectcreatepacket.js":1595002034000,"/Users/Temich/PycharmProjects/tanks/src/server/effects/servereffect.js":1595072832000,"/Users/Temich/PycharmProjects/tanks/src/server/effects/world/serverworldeffect.js":1595076137000,"/Users/Temich/PycharmProjects/tanks/src/server/entity/bullet/serverbullet.js":1597402601000,"/Users/Temich/PycharmProjects/tanks/src/weapon/weapon.js":1595072501000,"/Users/Temich/PycharmProjects/tanks/src/weapon/models/cannon.js":1594577383000,"/Users/Temich/PycharmProjects/tanks/src/tanks/models/bigboi.js":1594577571000,"/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/bigboi.js":1594844301000,"/Users/Temich/PycharmProjects/tanks/src/effects/world/explode/worldexplodeeffectmodelpool.js":1597402816000,"/Users/Temich/PycharmProjects/tanks/src/gameworld.js":1597405893000,"/Users/Temich/PycharmProjects/tanks/src/client/game/clientgameworld.js":1596192812000,"/Users/Temich/PycharmProjects/tanks/src/client/game/scenes/gamescene.js":1596286833000,"/Users/Temich/PycharmProjects/tanks/src/server/effects/tank/servertankeffect.js":1595071407000,"/Users/Temich/PycharmProjects/tanks/src/weapon/models/flamethrower.js":1595072431000,"/Users/Temich/PycharmProjects/tanks/src/tanks/models/nasty.js":1594578553000,"/Users/Temich/PycharmProjects/tanks/src/client/tanks/models/nasty.js":1594844331000,"/Users/Temich/PycharmProjects/tanks/src/client/game/game.js":1599463756857,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/index.js":1594393023000,"/Users/Temich/PycharmProjects/tanks/src/utils/loop/requestframeloop.js":1593534367000,"/Users/Temich/PycharmProjects/tanks/src/client/controls/interact/draghandler.js":1593599215000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/drag.js":1593186677000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/fill.js":1593718373000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/spawnzone.js":1593793920000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/eraser.js":1593272858000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/tool.js":1593852922000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/toolmanager.js":1593797822000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/run.js":1593551852000,"/Users/Temich/PycharmProjects/tanks/src/client/graphics/programs/brushprogram.js":1594291022000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/history/history.js":1593273348000,"/Users/Temich/PycharmProjects/tanks/src/client/ui/elements/range/range.js":1594288765000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/pencil.js":1594288730000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/history/modification/mapmodification.js":1593809897000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/history/modification/mapareamodification.js":1593812089000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/menu/map-preview/mappreviewcontainer.js":1594393275000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/editormapbinaryoptions.js":1593237555000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/history/modification/mapblockmodification.js":1593807614000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/editormap.js":1593809933000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/tools/types/area.js":1593812182000,"/Users/Temich/PycharmProjects/tanks/src/utils/base64.js":1592772100000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/dialog/dialogview.js":1593415127000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/dialog/dialogoverlay.js":1593416566000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/element/dragoverlay.js":1594393058000,"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/utils/common.js":499162500000,"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/constants.js":499162500000,"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/zstream.js":499162500000,"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/messages.js":499162500000,"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/gzheader.js":499162500000,"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/utils/strings.js":499162500000,"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/crc32.js":499162500000,"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/adler32.js":499162500000,"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/inffast.js":499162500000,"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/inftrees.js":499162500000,"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/inflate.js":499162500000,"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/inflate.js":499162500000,"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/trees.js":499162500000,"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/zlib/deflate.js":499162500000,"/Users/Temich/PycharmProjects/tanks/node_modules/pako/lib/deflate.js":499162500000,"/Users/Temich/PycharmProjects/tanks/node_modules/pako/index.js":499162500000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/mapstorage.js":1593464514000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/menu/map-list/mapselectcontainer.js":1594393158000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/menu/menuoverlay.js":1594206857000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/toolsettings/toolsettingsview.js":1594491959000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/blockselect/blockselectbutton.js":1594491912000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/blockselect/blockselectmenu.js":1594491928000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/blockselect/blockselectoverlay.js":1594491934000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/ui/overlay/workspace/toolbar/toolbar.js":1594491951000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/scenes/mapeditorscene.js":1598790159000,"/Users/Temich/PycharmProjects/tanks/src/client/mapeditor/editor.js":1599463458366},"dependentFiles":{}}