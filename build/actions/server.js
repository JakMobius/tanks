(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;
},{}],2:[function(require,module,exports){
var _typeof = require("@babel/runtime/helpers/typeof");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

module.exports = _interopRequireWildcard;
},{"@babel/runtime/helpers/typeof":3}],3:[function(require,module,exports){
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;
},{}],4:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],5:[function(require,module,exports){

},{}],6:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],7:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

},{"./support/isBuffer":6,"inherits":11}],8:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":4,"ieee754":10}],9:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],10:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],11:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],12:[function(require,module,exports){
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.JSON5 = factory());
}(this, (function () { 'use strict';

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var _global = createCommonjsModule(function (module) {
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') { __g = global; } // eslint-disable-line no-undef
	});

	var _core = createCommonjsModule(function (module) {
	var core = module.exports = { version: '2.6.5' };
	if (typeof __e == 'number') { __e = core; } // eslint-disable-line no-undef
	});
	var _core_1 = _core.version;

	var _isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	var _anObject = function (it) {
	  if (!_isObject(it)) { throw TypeError(it + ' is not an object!'); }
	  return it;
	};

	var _fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var _descriptors = !_fails(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});

	var document = _global.document;
	// typeof document.createElement is 'object' in old IE
	var is = _isObject(document) && _isObject(document.createElement);
	var _domCreate = function (it) {
	  return is ? document.createElement(it) : {};
	};

	var _ie8DomDefine = !_descriptors && !_fails(function () {
	  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
	});

	// 7.1.1 ToPrimitive(input [, PreferredType])

	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var _toPrimitive = function (it, S) {
	  if (!_isObject(it)) { return it; }
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) { return val; }
	  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) { return val; }
	  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) { return val; }
	  throw TypeError("Can't convert object to primitive value");
	};

	var dP = Object.defineProperty;

	var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  _anObject(O);
	  P = _toPrimitive(P, true);
	  _anObject(Attributes);
	  if (_ie8DomDefine) { try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ } }
	  if ('get' in Attributes || 'set' in Attributes) { throw TypeError('Accessors not supported!'); }
	  if ('value' in Attributes) { O[P] = Attributes.value; }
	  return O;
	};

	var _objectDp = {
		f: f
	};

	var _propertyDesc = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var _hide = _descriptors ? function (object, key, value) {
	  return _objectDp.f(object, key, _propertyDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var hasOwnProperty = {}.hasOwnProperty;
	var _has = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

	var id = 0;
	var px = Math.random();
	var _uid = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

	var _library = false;

	var _shared = createCommonjsModule(function (module) {
	var SHARED = '__core-js_shared__';
	var store = _global[SHARED] || (_global[SHARED] = {});

	(module.exports = function (key, value) {
	  return store[key] || (store[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: _core.version,
	  mode: _library ? 'pure' : 'global',
	  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
	});
	});

	var _functionToString = _shared('native-function-to-string', Function.toString);

	var _redefine = createCommonjsModule(function (module) {
	var SRC = _uid('src');

	var TO_STRING = 'toString';
	var TPL = ('' + _functionToString).split(TO_STRING);

	_core.inspectSource = function (it) {
	  return _functionToString.call(it);
	};

	(module.exports = function (O, key, val, safe) {
	  var isFunction = typeof val == 'function';
	  if (isFunction) { _has(val, 'name') || _hide(val, 'name', key); }
	  if (O[key] === val) { return; }
	  if (isFunction) { _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key))); }
	  if (O === _global) {
	    O[key] = val;
	  } else if (!safe) {
	    delete O[key];
	    _hide(O, key, val);
	  } else if (O[key]) {
	    O[key] = val;
	  } else {
	    _hide(O, key, val);
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString() {
	  return typeof this == 'function' && this[SRC] || _functionToString.call(this);
	});
	});

	var _aFunction = function (it) {
	  if (typeof it != 'function') { throw TypeError(it + ' is not a function!'); }
	  return it;
	};

	// optional / simple context binding

	var _ctx = function (fn, that, length) {
	  _aFunction(fn);
	  if (that === undefined) { return fn; }
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var PROTOTYPE = 'prototype';

	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
	  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
	  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
	  var key, own, out, exp;
	  if (IS_GLOBAL) { source = name; }
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
	    // extend global
	    if (target) { _redefine(target, key, out, type & $export.U); }
	    // export
	    if (exports[key] != out) { _hide(exports, key, exp); }
	    if (IS_PROTO && expProto[key] != out) { expProto[key] = out; }
	  }
	};
	_global.core = _core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	var _export = $export;

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	var _toInteger = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

	// 7.2.1 RequireObjectCoercible(argument)
	var _defined = function (it) {
	  if (it == undefined) { throw TypeError("Can't call method on  " + it); }
	  return it;
	};

	// true  -> String#at
	// false -> String#codePointAt
	var _stringAt = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(_defined(that));
	    var i = _toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) { return TO_STRING ? '' : undefined; }
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

	var $at = _stringAt(false);
	_export(_export.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos) {
	    return $at(this, pos);
	  }
	});

	var codePointAt = _core.String.codePointAt;

	var max = Math.max;
	var min = Math.min;
	var _toAbsoluteIndex = function (index, length) {
	  index = _toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

	var fromCharCode = String.fromCharCode;
	var $fromCodePoint = String.fromCodePoint;

	// length should be 1, old FF problem
	_export(_export.S + _export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x) {
	    var arguments$1 = arguments;
	 // eslint-disable-line no-unused-vars
	    var res = [];
	    var aLen = arguments.length;
	    var i = 0;
	    var code;
	    while (aLen > i) {
	      code = +arguments$1[i++];
	      if (_toAbsoluteIndex(code, 0x10ffff) !== code) { throw RangeError(code + ' is not a valid code point'); }
	      res.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
	      );
	    } return res.join('');
	  }
	});

	var fromCodePoint = _core.String.fromCodePoint;

	// This is a generated file. Do not edit.
	var Space_Separator = /[\u1680\u2000-\u200A\u202F\u205F\u3000]/;
	var ID_Start = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/;
	var ID_Continue = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/;

	var unicode = {
		Space_Separator: Space_Separator,
		ID_Start: ID_Start,
		ID_Continue: ID_Continue
	};

	var util = {
	    isSpaceSeparator: function isSpaceSeparator (c) {
	        return typeof c === 'string' && unicode.Space_Separator.test(c)
	    },

	    isIdStartChar: function isIdStartChar (c) {
	        return typeof c === 'string' && (
	            (c >= 'a' && c <= 'z') ||
	        (c >= 'A' && c <= 'Z') ||
	        (c === '$') || (c === '_') ||
	        unicode.ID_Start.test(c)
	        )
	    },

	    isIdContinueChar: function isIdContinueChar (c) {
	        return typeof c === 'string' && (
	            (c >= 'a' && c <= 'z') ||
	        (c >= 'A' && c <= 'Z') ||
	        (c >= '0' && c <= '9') ||
	        (c === '$') || (c === '_') ||
	        (c === '\u200C') || (c === '\u200D') ||
	        unicode.ID_Continue.test(c)
	        )
	    },

	    isDigit: function isDigit (c) {
	        return typeof c === 'string' && /[0-9]/.test(c)
	    },

	    isHexDigit: function isHexDigit (c) {
	        return typeof c === 'string' && /[0-9A-Fa-f]/.test(c)
	    },
	};

	var source;
	var parseState;
	var stack;
	var pos;
	var line;
	var column;
	var token;
	var key;
	var root;

	var parse = function parse (text, reviver) {
	    source = String(text);
	    parseState = 'start';
	    stack = [];
	    pos = 0;
	    line = 1;
	    column = 0;
	    token = undefined;
	    key = undefined;
	    root = undefined;

	    do {
	        token = lex();

	        // This code is unreachable.
	        // if (!parseStates[parseState]) {
	        //     throw invalidParseState()
	        // }

	        parseStates[parseState]();
	    } while (token.type !== 'eof')

	    if (typeof reviver === 'function') {
	        return internalize({'': root}, '', reviver)
	    }

	    return root
	};

	function internalize (holder, name, reviver) {
	    var value = holder[name];
	    if (value != null && typeof value === 'object') {
	        for (var key in value) {
	            var replacement = internalize(value, key, reviver);
	            if (replacement === undefined) {
	                delete value[key];
	            } else {
	                value[key] = replacement;
	            }
	        }
	    }

	    return reviver.call(holder, name, value)
	}

	var lexState;
	var buffer;
	var doubleQuote;
	var sign;
	var c;

	function lex () {
	    lexState = 'default';
	    buffer = '';
	    doubleQuote = false;
	    sign = 1;

	    for (;;) {
	        c = peek();

	        // This code is unreachable.
	        // if (!lexStates[lexState]) {
	        //     throw invalidLexState(lexState)
	        // }

	        var token = lexStates[lexState]();
	        if (token) {
	            return token
	        }
	    }
	}

	function peek () {
	    if (source[pos]) {
	        return String.fromCodePoint(source.codePointAt(pos))
	    }
	}

	function read () {
	    var c = peek();

	    if (c === '\n') {
	        line++;
	        column = 0;
	    } else if (c) {
	        column += c.length;
	    } else {
	        column++;
	    }

	    if (c) {
	        pos += c.length;
	    }

	    return c
	}

	var lexStates = {
	    default: function default$1 () {
	        switch (c) {
	        case '\t':
	        case '\v':
	        case '\f':
	        case ' ':
	        case '\u00A0':
	        case '\uFEFF':
	        case '\n':
	        case '\r':
	        case '\u2028':
	        case '\u2029':
	            read();
	            return

	        case '/':
	            read();
	            lexState = 'comment';
	            return

	        case undefined:
	            read();
	            return newToken('eof')
	        }

	        if (util.isSpaceSeparator(c)) {
	            read();
	            return
	        }

	        // This code is unreachable.
	        // if (!lexStates[parseState]) {
	        //     throw invalidLexState(parseState)
	        // }

	        return lexStates[parseState]()
	    },

	    comment: function comment () {
	        switch (c) {
	        case '*':
	            read();
	            lexState = 'multiLineComment';
	            return

	        case '/':
	            read();
	            lexState = 'singleLineComment';
	            return
	        }

	        throw invalidChar(read())
	    },

	    multiLineComment: function multiLineComment () {
	        switch (c) {
	        case '*':
	            read();
	            lexState = 'multiLineCommentAsterisk';
	            return

	        case undefined:
	            throw invalidChar(read())
	        }

	        read();
	    },

	    multiLineCommentAsterisk: function multiLineCommentAsterisk () {
	        switch (c) {
	        case '*':
	            read();
	            return

	        case '/':
	            read();
	            lexState = 'default';
	            return

	        case undefined:
	            throw invalidChar(read())
	        }

	        read();
	        lexState = 'multiLineComment';
	    },

	    singleLineComment: function singleLineComment () {
	        switch (c) {
	        case '\n':
	        case '\r':
	        case '\u2028':
	        case '\u2029':
	            read();
	            lexState = 'default';
	            return

	        case undefined:
	            read();
	            return newToken('eof')
	        }

	        read();
	    },

	    value: function value () {
	        switch (c) {
	        case '{':
	        case '[':
	            return newToken('punctuator', read())

	        case 'n':
	            read();
	            literal('ull');
	            return newToken('null', null)

	        case 't':
	            read();
	            literal('rue');
	            return newToken('boolean', true)

	        case 'f':
	            read();
	            literal('alse');
	            return newToken('boolean', false)

	        case '-':
	        case '+':
	            if (read() === '-') {
	                sign = -1;
	            }

	            lexState = 'sign';
	            return

	        case '.':
	            buffer = read();
	            lexState = 'decimalPointLeading';
	            return

	        case '0':
	            buffer = read();
	            lexState = 'zero';
	            return

	        case '1':
	        case '2':
	        case '3':
	        case '4':
	        case '5':
	        case '6':
	        case '7':
	        case '8':
	        case '9':
	            buffer = read();
	            lexState = 'decimalInteger';
	            return

	        case 'I':
	            read();
	            literal('nfinity');
	            return newToken('numeric', Infinity)

	        case 'N':
	            read();
	            literal('aN');
	            return newToken('numeric', NaN)

	        case '"':
	        case "'":
	            doubleQuote = (read() === '"');
	            buffer = '';
	            lexState = 'string';
	            return
	        }

	        throw invalidChar(read())
	    },

	    identifierNameStartEscape: function identifierNameStartEscape () {
	        if (c !== 'u') {
	            throw invalidChar(read())
	        }

	        read();
	        var u = unicodeEscape();
	        switch (u) {
	        case '$':
	        case '_':
	            break

	        default:
	            if (!util.isIdStartChar(u)) {
	                throw invalidIdentifier()
	            }

	            break
	        }

	        buffer += u;
	        lexState = 'identifierName';
	    },

	    identifierName: function identifierName () {
	        switch (c) {
	        case '$':
	        case '_':
	        case '\u200C':
	        case '\u200D':
	            buffer += read();
	            return

	        case '\\':
	            read();
	            lexState = 'identifierNameEscape';
	            return
	        }

	        if (util.isIdContinueChar(c)) {
	            buffer += read();
	            return
	        }

	        return newToken('identifier', buffer)
	    },

	    identifierNameEscape: function identifierNameEscape () {
	        if (c !== 'u') {
	            throw invalidChar(read())
	        }

	        read();
	        var u = unicodeEscape();
	        switch (u) {
	        case '$':
	        case '_':
	        case '\u200C':
	        case '\u200D':
	            break

	        default:
	            if (!util.isIdContinueChar(u)) {
	                throw invalidIdentifier()
	            }

	            break
	        }

	        buffer += u;
	        lexState = 'identifierName';
	    },

	    sign: function sign$1 () {
	        switch (c) {
	        case '.':
	            buffer = read();
	            lexState = 'decimalPointLeading';
	            return

	        case '0':
	            buffer = read();
	            lexState = 'zero';
	            return

	        case '1':
	        case '2':
	        case '3':
	        case '4':
	        case '5':
	        case '6':
	        case '7':
	        case '8':
	        case '9':
	            buffer = read();
	            lexState = 'decimalInteger';
	            return

	        case 'I':
	            read();
	            literal('nfinity');
	            return newToken('numeric', sign * Infinity)

	        case 'N':
	            read();
	            literal('aN');
	            return newToken('numeric', NaN)
	        }

	        throw invalidChar(read())
	    },

	    zero: function zero () {
	        switch (c) {
	        case '.':
	            buffer += read();
	            lexState = 'decimalPoint';
	            return

	        case 'e':
	        case 'E':
	            buffer += read();
	            lexState = 'decimalExponent';
	            return

	        case 'x':
	        case 'X':
	            buffer += read();
	            lexState = 'hexadecimal';
	            return
	        }

	        return newToken('numeric', sign * 0)
	    },

	    decimalInteger: function decimalInteger () {
	        switch (c) {
	        case '.':
	            buffer += read();
	            lexState = 'decimalPoint';
	            return

	        case 'e':
	        case 'E':
	            buffer += read();
	            lexState = 'decimalExponent';
	            return
	        }

	        if (util.isDigit(c)) {
	            buffer += read();
	            return
	        }

	        return newToken('numeric', sign * Number(buffer))
	    },

	    decimalPointLeading: function decimalPointLeading () {
	        if (util.isDigit(c)) {
	            buffer += read();
	            lexState = 'decimalFraction';
	            return
	        }

	        throw invalidChar(read())
	    },

	    decimalPoint: function decimalPoint () {
	        switch (c) {
	        case 'e':
	        case 'E':
	            buffer += read();
	            lexState = 'decimalExponent';
	            return
	        }

	        if (util.isDigit(c)) {
	            buffer += read();
	            lexState = 'decimalFraction';
	            return
	        }

	        return newToken('numeric', sign * Number(buffer))
	    },

	    decimalFraction: function decimalFraction () {
	        switch (c) {
	        case 'e':
	        case 'E':
	            buffer += read();
	            lexState = 'decimalExponent';
	            return
	        }

	        if (util.isDigit(c)) {
	            buffer += read();
	            return
	        }

	        return newToken('numeric', sign * Number(buffer))
	    },

	    decimalExponent: function decimalExponent () {
	        switch (c) {
	        case '+':
	        case '-':
	            buffer += read();
	            lexState = 'decimalExponentSign';
	            return
	        }

	        if (util.isDigit(c)) {
	            buffer += read();
	            lexState = 'decimalExponentInteger';
	            return
	        }

	        throw invalidChar(read())
	    },

	    decimalExponentSign: function decimalExponentSign () {
	        if (util.isDigit(c)) {
	            buffer += read();
	            lexState = 'decimalExponentInteger';
	            return
	        }

	        throw invalidChar(read())
	    },

	    decimalExponentInteger: function decimalExponentInteger () {
	        if (util.isDigit(c)) {
	            buffer += read();
	            return
	        }

	        return newToken('numeric', sign * Number(buffer))
	    },

	    hexadecimal: function hexadecimal () {
	        if (util.isHexDigit(c)) {
	            buffer += read();
	            lexState = 'hexadecimalInteger';
	            return
	        }

	        throw invalidChar(read())
	    },

	    hexadecimalInteger: function hexadecimalInteger () {
	        if (util.isHexDigit(c)) {
	            buffer += read();
	            return
	        }

	        return newToken('numeric', sign * Number(buffer))
	    },

	    string: function string () {
	        switch (c) {
	        case '\\':
	            read();
	            buffer += escape();
	            return

	        case '"':
	            if (doubleQuote) {
	                read();
	                return newToken('string', buffer)
	            }

	            buffer += read();
	            return

	        case "'":
	            if (!doubleQuote) {
	                read();
	                return newToken('string', buffer)
	            }

	            buffer += read();
	            return

	        case '\n':
	        case '\r':
	            throw invalidChar(read())

	        case '\u2028':
	        case '\u2029':
	            separatorChar(c);
	            break

	        case undefined:
	            throw invalidChar(read())
	        }

	        buffer += read();
	    },

	    start: function start () {
	        switch (c) {
	        case '{':
	        case '[':
	            return newToken('punctuator', read())

	        // This code is unreachable since the default lexState handles eof.
	        // case undefined:
	        //     return newToken('eof')
	        }

	        lexState = 'value';
	    },

	    beforePropertyName: function beforePropertyName () {
	        switch (c) {
	        case '$':
	        case '_':
	            buffer = read();
	            lexState = 'identifierName';
	            return

	        case '\\':
	            read();
	            lexState = 'identifierNameStartEscape';
	            return

	        case '}':
	            return newToken('punctuator', read())

	        case '"':
	        case "'":
	            doubleQuote = (read() === '"');
	            lexState = 'string';
	            return
	        }

	        if (util.isIdStartChar(c)) {
	            buffer += read();
	            lexState = 'identifierName';
	            return
	        }

	        throw invalidChar(read())
	    },

	    afterPropertyName: function afterPropertyName () {
	        if (c === ':') {
	            return newToken('punctuator', read())
	        }

	        throw invalidChar(read())
	    },

	    beforePropertyValue: function beforePropertyValue () {
	        lexState = 'value';
	    },

	    afterPropertyValue: function afterPropertyValue () {
	        switch (c) {
	        case ',':
	        case '}':
	            return newToken('punctuator', read())
	        }

	        throw invalidChar(read())
	    },

	    beforeArrayValue: function beforeArrayValue () {
	        if (c === ']') {
	            return newToken('punctuator', read())
	        }

	        lexState = 'value';
	    },

	    afterArrayValue: function afterArrayValue () {
	        switch (c) {
	        case ',':
	        case ']':
	            return newToken('punctuator', read())
	        }

	        throw invalidChar(read())
	    },

	    end: function end () {
	        // This code is unreachable since it's handled by the default lexState.
	        // if (c === undefined) {
	        //     read()
	        //     return newToken('eof')
	        // }

	        throw invalidChar(read())
	    },
	};

	function newToken (type, value) {
	    return {
	        type: type,
	        value: value,
	        line: line,
	        column: column,
	    }
	}

	function literal (s) {
	    for (var i = 0, list = s; i < list.length; i += 1) {
	        var c = list[i];

	        var p = peek();

	        if (p !== c) {
	            throw invalidChar(read())
	        }

	        read();
	    }
	}

	function escape () {
	    var c = peek();
	    switch (c) {
	    case 'b':
	        read();
	        return '\b'

	    case 'f':
	        read();
	        return '\f'

	    case 'n':
	        read();
	        return '\n'

	    case 'r':
	        read();
	        return '\r'

	    case 't':
	        read();
	        return '\t'

	    case 'v':
	        read();
	        return '\v'

	    case '0':
	        read();
	        if (util.isDigit(peek())) {
	            throw invalidChar(read())
	        }

	        return '\0'

	    case 'x':
	        read();
	        return hexEscape()

	    case 'u':
	        read();
	        return unicodeEscape()

	    case '\n':
	    case '\u2028':
	    case '\u2029':
	        read();
	        return ''

	    case '\r':
	        read();
	        if (peek() === '\n') {
	            read();
	        }

	        return ''

	    case '1':
	    case '2':
	    case '3':
	    case '4':
	    case '5':
	    case '6':
	    case '7':
	    case '8':
	    case '9':
	        throw invalidChar(read())

	    case undefined:
	        throw invalidChar(read())
	    }

	    return read()
	}

	function hexEscape () {
	    var buffer = '';
	    var c = peek();

	    if (!util.isHexDigit(c)) {
	        throw invalidChar(read())
	    }

	    buffer += read();

	    c = peek();
	    if (!util.isHexDigit(c)) {
	        throw invalidChar(read())
	    }

	    buffer += read();

	    return String.fromCodePoint(parseInt(buffer, 16))
	}

	function unicodeEscape () {
	    var buffer = '';
	    var count = 4;

	    while (count-- > 0) {
	        var c = peek();
	        if (!util.isHexDigit(c)) {
	            throw invalidChar(read())
	        }

	        buffer += read();
	    }

	    return String.fromCodePoint(parseInt(buffer, 16))
	}

	var parseStates = {
	    start: function start () {
	        if (token.type === 'eof') {
	            throw invalidEOF()
	        }

	        push();
	    },

	    beforePropertyName: function beforePropertyName () {
	        switch (token.type) {
	        case 'identifier':
	        case 'string':
	            key = token.value;
	            parseState = 'afterPropertyName';
	            return

	        case 'punctuator':
	            // This code is unreachable since it's handled by the lexState.
	            // if (token.value !== '}') {
	            //     throw invalidToken()
	            // }

	            pop();
	            return

	        case 'eof':
	            throw invalidEOF()
	        }

	        // This code is unreachable since it's handled by the lexState.
	        // throw invalidToken()
	    },

	    afterPropertyName: function afterPropertyName () {
	        // This code is unreachable since it's handled by the lexState.
	        // if (token.type !== 'punctuator' || token.value !== ':') {
	        //     throw invalidToken()
	        // }

	        if (token.type === 'eof') {
	            throw invalidEOF()
	        }

	        parseState = 'beforePropertyValue';
	    },

	    beforePropertyValue: function beforePropertyValue () {
	        if (token.type === 'eof') {
	            throw invalidEOF()
	        }

	        push();
	    },

	    beforeArrayValue: function beforeArrayValue () {
	        if (token.type === 'eof') {
	            throw invalidEOF()
	        }

	        if (token.type === 'punctuator' && token.value === ']') {
	            pop();
	            return
	        }

	        push();
	    },

	    afterPropertyValue: function afterPropertyValue () {
	        // This code is unreachable since it's handled by the lexState.
	        // if (token.type !== 'punctuator') {
	        //     throw invalidToken()
	        // }

	        if (token.type === 'eof') {
	            throw invalidEOF()
	        }

	        switch (token.value) {
	        case ',':
	            parseState = 'beforePropertyName';
	            return

	        case '}':
	            pop();
	        }

	        // This code is unreachable since it's handled by the lexState.
	        // throw invalidToken()
	    },

	    afterArrayValue: function afterArrayValue () {
	        // This code is unreachable since it's handled by the lexState.
	        // if (token.type !== 'punctuator') {
	        //     throw invalidToken()
	        // }

	        if (token.type === 'eof') {
	            throw invalidEOF()
	        }

	        switch (token.value) {
	        case ',':
	            parseState = 'beforeArrayValue';
	            return

	        case ']':
	            pop();
	        }

	        // This code is unreachable since it's handled by the lexState.
	        // throw invalidToken()
	    },

	    end: function end () {
	        // This code is unreachable since it's handled by the lexState.
	        // if (token.type !== 'eof') {
	        //     throw invalidToken()
	        // }
	    },
	};

	function push () {
	    var value;

	    switch (token.type) {
	    case 'punctuator':
	        switch (token.value) {
	        case '{':
	            value = {};
	            break

	        case '[':
	            value = [];
	            break
	        }

	        break

	    case 'null':
	    case 'boolean':
	    case 'numeric':
	    case 'string':
	        value = token.value;
	        break

	    // This code is unreachable.
	    // default:
	    //     throw invalidToken()
	    }

	    if (root === undefined) {
	        root = value;
	    } else {
	        var parent = stack[stack.length - 1];
	        if (Array.isArray(parent)) {
	            parent.push(value);
	        } else {
	            parent[key] = value;
	        }
	    }

	    if (value !== null && typeof value === 'object') {
	        stack.push(value);

	        if (Array.isArray(value)) {
	            parseState = 'beforeArrayValue';
	        } else {
	            parseState = 'beforePropertyName';
	        }
	    } else {
	        var current = stack[stack.length - 1];
	        if (current == null) {
	            parseState = 'end';
	        } else if (Array.isArray(current)) {
	            parseState = 'afterArrayValue';
	        } else {
	            parseState = 'afterPropertyValue';
	        }
	    }
	}

	function pop () {
	    stack.pop();

	    var current = stack[stack.length - 1];
	    if (current == null) {
	        parseState = 'end';
	    } else if (Array.isArray(current)) {
	        parseState = 'afterArrayValue';
	    } else {
	        parseState = 'afterPropertyValue';
	    }
	}

	// This code is unreachable.
	// function invalidParseState () {
	//     return new Error(`JSON5: invalid parse state '${parseState}'`)
	// }

	// This code is unreachable.
	// function invalidLexState (state) {
	//     return new Error(`JSON5: invalid lex state '${state}'`)
	// }

	function invalidChar (c) {
	    if (c === undefined) {
	        return syntaxError(("JSON5: invalid end of input at " + line + ":" + column))
	    }

	    return syntaxError(("JSON5: invalid character '" + (formatChar(c)) + "' at " + line + ":" + column))
	}

	function invalidEOF () {
	    return syntaxError(("JSON5: invalid end of input at " + line + ":" + column))
	}

	// This code is unreachable.
	// function invalidToken () {
	//     if (token.type === 'eof') {
	//         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)
	//     }

	//     const c = String.fromCodePoint(token.value.codePointAt(0))
	//     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)
	// }

	function invalidIdentifier () {
	    column -= 5;
	    return syntaxError(("JSON5: invalid identifier character at " + line + ":" + column))
	}

	function separatorChar (c) {
	    console.warn(("JSON5: '" + (formatChar(c)) + "' in strings is not valid ECMAScript; consider escaping"));
	}

	function formatChar (c) {
	    var replacements = {
	        "'": "\\'",
	        '"': '\\"',
	        '\\': '\\\\',
	        '\b': '\\b',
	        '\f': '\\f',
	        '\n': '\\n',
	        '\r': '\\r',
	        '\t': '\\t',
	        '\v': '\\v',
	        '\0': '\\0',
	        '\u2028': '\\u2028',
	        '\u2029': '\\u2029',
	    };

	    if (replacements[c]) {
	        return replacements[c]
	    }

	    if (c < ' ') {
	        var hexString = c.charCodeAt(0).toString(16);
	        return '\\x' + ('00' + hexString).substring(hexString.length)
	    }

	    return c
	}

	function syntaxError (message) {
	    var err = new SyntaxError(message);
	    err.lineNumber = line;
	    err.columnNumber = column;
	    return err
	}

	var stringify = function stringify (value, replacer, space) {
	    var stack = [];
	    var indent = '';
	    var propertyList;
	    var replacerFunc;
	    var gap = '';
	    var quote;

	    if (
	        replacer != null &&
	        typeof replacer === 'object' &&
	        !Array.isArray(replacer)
	    ) {
	        space = replacer.space;
	        quote = replacer.quote;
	        replacer = replacer.replacer;
	    }

	    if (typeof replacer === 'function') {
	        replacerFunc = replacer;
	    } else if (Array.isArray(replacer)) {
	        propertyList = [];
	        for (var i = 0, list = replacer; i < list.length; i += 1) {
	            var v = list[i];

	            var item = (void 0);

	            if (typeof v === 'string') {
	                item = v;
	            } else if (
	                typeof v === 'number' ||
	                v instanceof String ||
	                v instanceof Number
	            ) {
	                item = String(v);
	            }

	            if (item !== undefined && propertyList.indexOf(item) < 0) {
	                propertyList.push(item);
	            }
	        }
	    }

	    if (space instanceof Number) {
	        space = Number(space);
	    } else if (space instanceof String) {
	        space = String(space);
	    }

	    if (typeof space === 'number') {
	        if (space > 0) {
	            space = Math.min(10, Math.floor(space));
	            gap = '          '.substr(0, space);
	        }
	    } else if (typeof space === 'string') {
	        gap = space.substr(0, 10);
	    }

	    return serializeProperty('', {'': value})

	    function serializeProperty (key, holder) {
	        var value = holder[key];
	        if (value != null) {
	            if (typeof value.toJSON5 === 'function') {
	                value = value.toJSON5(key);
	            } else if (typeof value.toJSON === 'function') {
	                value = value.toJSON(key);
	            }
	        }

	        if (replacerFunc) {
	            value = replacerFunc.call(holder, key, value);
	        }

	        if (value instanceof Number) {
	            value = Number(value);
	        } else if (value instanceof String) {
	            value = String(value);
	        } else if (value instanceof Boolean) {
	            value = value.valueOf();
	        }

	        switch (value) {
	        case null: return 'null'
	        case true: return 'true'
	        case false: return 'false'
	        }

	        if (typeof value === 'string') {
	            return quoteString(value, false)
	        }

	        if (typeof value === 'number') {
	            return String(value)
	        }

	        if (typeof value === 'object') {
	            return Array.isArray(value) ? serializeArray(value) : serializeObject(value)
	        }

	        return undefined
	    }

	    function quoteString (value) {
	        var quotes = {
	            "'": 0.1,
	            '"': 0.2,
	        };

	        var replacements = {
	            "'": "\\'",
	            '"': '\\"',
	            '\\': '\\\\',
	            '\b': '\\b',
	            '\f': '\\f',
	            '\n': '\\n',
	            '\r': '\\r',
	            '\t': '\\t',
	            '\v': '\\v',
	            '\0': '\\0',
	            '\u2028': '\\u2028',
	            '\u2029': '\\u2029',
	        };

	        var product = '';

	        for (var i = 0; i < value.length; i++) {
	            var c = value[i];
	            switch (c) {
	            case "'":
	            case '"':
	                quotes[c]++;
	                product += c;
	                continue

	            case '\0':
	                if (util.isDigit(value[i + 1])) {
	                    product += '\\x00';
	                    continue
	                }
	            }

	            if (replacements[c]) {
	                product += replacements[c];
	                continue
	            }

	            if (c < ' ') {
	                var hexString = c.charCodeAt(0).toString(16);
	                product += '\\x' + ('00' + hexString).substring(hexString.length);
	                continue
	            }

	            product += c;
	        }

	        var quoteChar = quote || Object.keys(quotes).reduce(function (a, b) { return (quotes[a] < quotes[b]) ? a : b; });

	        product = product.replace(new RegExp(quoteChar, 'g'), replacements[quoteChar]);

	        return quoteChar + product + quoteChar
	    }

	    function serializeObject (value) {
	        if (stack.indexOf(value) >= 0) {
	            throw TypeError('Converting circular structure to JSON5')
	        }

	        stack.push(value);

	        var stepback = indent;
	        indent = indent + gap;

	        var keys = propertyList || Object.keys(value);
	        var partial = [];
	        for (var i = 0, list = keys; i < list.length; i += 1) {
	            var key = list[i];

	            var propertyString = serializeProperty(key, value);
	            if (propertyString !== undefined) {
	                var member = serializeKey(key) + ':';
	                if (gap !== '') {
	                    member += ' ';
	                }
	                member += propertyString;
	                partial.push(member);
	            }
	        }

	        var final;
	        if (partial.length === 0) {
	            final = '{}';
	        } else {
	            var properties;
	            if (gap === '') {
	                properties = partial.join(',');
	                final = '{' + properties + '}';
	            } else {
	                var separator = ',\n' + indent;
	                properties = partial.join(separator);
	                final = '{\n' + indent + properties + ',\n' + stepback + '}';
	            }
	        }

	        stack.pop();
	        indent = stepback;
	        return final
	    }

	    function serializeKey (key) {
	        if (key.length === 0) {
	            return quoteString(key, true)
	        }

	        var firstChar = String.fromCodePoint(key.codePointAt(0));
	        if (!util.isIdStartChar(firstChar)) {
	            return quoteString(key, true)
	        }

	        for (var i = firstChar.length; i < key.length; i++) {
	            if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {
	                return quoteString(key, true)
	            }
	        }

	        return key
	    }

	    function serializeArray (value) {
	        if (stack.indexOf(value) >= 0) {
	            throw TypeError('Converting circular structure to JSON5')
	        }

	        stack.push(value);

	        var stepback = indent;
	        indent = indent + gap;

	        var partial = [];
	        for (var i = 0; i < value.length; i++) {
	            var propertyString = serializeProperty(String(i), value);
	            partial.push((propertyString !== undefined) ? propertyString : 'null');
	        }

	        var final;
	        if (partial.length === 0) {
	            final = '[]';
	        } else {
	            if (gap === '') {
	                var properties = partial.join(',');
	                final = '[' + properties + ']';
	            } else {
	                var separator = ',\n' + indent;
	                var properties$1 = partial.join(separator);
	                final = '[\n' + indent + properties$1 + ',\n' + stepback + ']';
	            }
	        }

	        stack.pop();
	        indent = stepback;
	        return final
	    }
	};

	var JSON5 = {
	    parse: parse,
	    stringify: stringify,
	};

	var lib = JSON5;

	var es5 = lib;

	return es5;

})));

},{}],13:[function(require,module,exports){
// Top level file is just a mixin of submodules & constants
'use strict';

var assign    = require('./lib/utils/common').assign;

var deflate   = require('./lib/deflate');
var inflate   = require('./lib/inflate');
var constants = require('./lib/zlib/constants');

var pako = {};

assign(pako, deflate, inflate, constants);

module.exports = pako;

},{"./lib/deflate":14,"./lib/inflate":15,"./lib/utils/common":16,"./lib/zlib/constants":19}],14:[function(require,module,exports){
'use strict';


var zlib_deflate = require('./zlib/deflate');
var utils        = require('./utils/common');
var strings      = require('./utils/strings');
var msg          = require('./zlib/messages');
var ZStream      = require('./zlib/zstream');

var toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH      = 0;
var Z_FINISH        = 4;

var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_SYNC_FLUSH    = 2;

var Z_DEFAULT_COMPRESSION = -1;

var Z_DEFAULT_STRATEGY    = 0;

var Z_DEFLATED  = 8;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
 * push a chunk with explicit flush (call [[Deflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  if (!(this instanceof Deflate)) return new Deflate(options);

  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new ZStream();
  this.strm.avail_out = 0;

  var status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    var dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK) {
      throw new Error(msg[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) { return false; }

  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
      if (this.options.to === 'string') {
        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH) {
    status = zlib_deflate.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): output data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  var deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


exports.Deflate = Deflate;
exports.deflate = deflate;
exports.deflateRaw = deflateRaw;
exports.gzip = gzip;

},{"./utils/common":16,"./utils/strings":17,"./zlib/deflate":21,"./zlib/messages":26,"./zlib/zstream":28}],15:[function(require,module,exports){
'use strict';


var zlib_inflate = require('./zlib/inflate');
var utils        = require('./utils/common');
var strings      = require('./utils/strings');
var c            = require('./zlib/constants');
var msg          = require('./zlib/messages');
var ZStream      = require('./zlib/zstream');
var GZheader     = require('./zlib/gzheader');

var toString = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  if (!(this instanceof Inflate)) return new Inflate(options);

  this.options = utils.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  var status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== c.Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new GZheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);

  // Setup dictionary
  if (opt.dictionary) {
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      opt.dictionary = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      opt.dictionary = new Uint8Array(opt.dictionary);
    }
    if (opt.raw) { //In raw mode we need to set the dictionary early
      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);
      if (status !== c.Z_OK) {
        throw new Error(msg[status]);
      }
    }
  }
}

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var dictionary = this.options.dictionary;
  var status, _mode;
  var next_out_utf8, tail, utf8str;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) { return false; }
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = strings.binstring2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

    if (status === c.Z_NEED_DICT && dictionary) {
      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);
    }

    if (status === c.Z_BUF_ERROR && allowBufError === true) {
      status = c.Z_OK;
      allowBufError = false;
    }

    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {

        if (this.options.to === 'string') {

          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

          this.onData(utf8str);

        } else {
          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
        }
      }
    }

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) {
      allowBufError = true;
    }

  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

  if (status === c.Z_STREAM_END) {
    _mode = c.Z_FINISH;
  }

  // Finalize on the last chunk.
  if (_mode === c.Z_FINISH) {
    status = zlib_inflate.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === c.Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === c.Z_SYNC_FLUSH) {
    this.onEnd(c.Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): output data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === c.Z_OK) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 aligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


exports.Inflate = Inflate;
exports.inflate = inflate;
exports.inflateRaw = inflateRaw;
exports.ungzip  = inflate;

},{"./utils/common":16,"./utils/strings":17,"./zlib/constants":19,"./zlib/gzheader":22,"./zlib/inflate":24,"./zlib/messages":26,"./zlib/zstream":28}],16:[function(require,module,exports){
'use strict';


var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');

function _has(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);

},{}],17:[function(require,module,exports){
// String encode/decode helpers
'use strict';


var utils = require('./common');


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new utils.Buf8(256);
for (var q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
exports.string2buf = function (str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new utils.Buf8(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring(buf, len) {
  // On Chrome, the arguments in a function call that are allowed is `65534`.
  // If the length of the buffer is smaller than that, we can use this optimization,
  // otherwise we will take a slower path.
  if (len < 65534) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert byte array to binary string
exports.buf2binstring = function (buf) {
  return buf2binstring(buf, buf.length);
};


// Convert binary string (typed, when possible)
exports.binstring2buf = function (str) {
  var buf = new utils.Buf8(str.length);
  for (var i = 0, len = buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};


// convert array to string
exports.buf2string = function (buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
exports.utf8border = function (buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means buffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

},{"./common":16}],18:[function(require,module,exports){
'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;

},{}],19:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

},{}],20:[function(require,module,exports){
'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;

},{}],21:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils   = require('../utils/common');
var trees   = require('./trees');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var msg     = require('./messages');

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

},{"../utils/common":16,"./adler32":18,"./crc32":20,"./messages":26,"./trees":27}],22:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;

},{}],23:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

},{}],24:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils         = require('../utils/common');
var adler32       = require('./adler32');
var crc32         = require('./crc32');
var inflate_fast  = require('./inffast');
var inflate_table = require('./inftrees');

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;           /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Array(state.head.extra_len);
              }
              utils.arraySet(
                state.head.extra,
                input,
                next,
                // extra field is limited to 65536 bytes
                // - no need for additional size check
                copy,
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          utils.arraySet(output, input, next, copy, put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

},{"../utils/common":16,"./adler32":18,"./crc32":20,"./inffast":23,"./inftrees":25}],25:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = require('../utils/common');

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

},{"../utils/common":16}],26:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

},{}],27:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

var utils = require('../utils/common');

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;

},{"../utils/common":16}],28:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;

},{}],29:[function(require,module,exports){
// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

},{}],30:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":8}],31:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":30}],32:[function(require,module,exports){
module.exports={
  "name": "tanks",
  "version": "0.0.1",
  "description": "Browser action game project.",
  "main": "main.js",
  "dependencies": {
    "@types/node": "^14.14.17",
    "chalk": "^4.1.0",
    "express": "^4.16.0",
    "express-session": "^1.17.1",
    "hbs": "^4.1.1",
    "json5": "^2.1.3",
    "mongodb": "^3.1.0",
    "mongodb-client-encryption": "^1.1.0",
    "pako": "^1.0.11",
    "readable-stream": "^3.6.0",
    "through2": "^4.0.2",
    "util": "^0.12.3",
    "vinyl-fs": "^3.0.3",
    "websocket": "^1.0.32"
  },
  "devDependencies": {
    "@babel/cli": "^7.12.10",
    "@babel/core": "^7.12.10",
    "@babel/plugin-proposal-class-properties": "^7.10.1",
    "@babel/plugin-syntax-class-properties": "^7.12.1",
    "@babel/plugin-syntax-dynamic-import": "^7.8.3",
    "@babel/plugin-transform-runtime": "^7.12.10",
    "@babel/plugin-transform-typescript": "^7.12.1",
    "@babel/preset-env": "^7.12.11",
    "@babel/preset-flow": "^7.12.1",
    "@jsdevtools/sourcemapify": "^2.0.2",
    "aliasify": "^2.1.0",
    "atlaspack": "^1.0.0",
    "babel-core": "^6.26.3",
    "babel-plugin-import-dir": "^2.0.0",
    "babel-plugin-module-resolver": "^4.1.0",
    "babel-plugin-transform-dirname-filename": "^1.1.0",
    "babel-plugin-wildcard": "^6.0.0",
    "babel-preset-latest-node": "^5.2.0",
    "babelify": "^10.0.0",
    "browserify": "^16.5.1",
    "browserify-incremental": "^3.1.1",
    "browserify-transform-tools": "^1.7.0",
    "bundle-collapser": "^1.4.0",
    "canvas": "^2.6.1",
    "chai": "^4.2.0",
    "glsl-deparser": "^1.0.0",
    "glsl-min-stream": "^1.0.0",
    "glsl-parser": "^2.0.1",
    "glsl-tokenizer": "^2.1.5",
    "gulp-sourcemaps": "^3.0.0",
    "mocha": "^7.2.0",
    "node-sass": "^4.14.1",
    "nyc": "^15.1.0",
    "stream-array": "^1.1.2",
    "string-to-stream": "^3.0.1",
    "tinyify": "^2.5.2",
    "typescript": "^4.1.3"
  },
  "scripts": {
    "test": "mocha --reporter list",
    "build-server": "cd build; cd actions; node build-server.js",
    "start-server": "cd build; cd actions; node -r source-map-support/register start-server.js -s autorun",
    "start-server-in-game-configuration": "node src/server/main.js -pn port=25566 -s configure-game-server",
    "start-server-in-hub-configuration": "node src/server/main.js -s configure-hub -pn port=25565",
    "clear-cache": "cd build; cd actions; node clear-cache.js",
    "commit-client": "cd build; cd actions; node commit-client.js",
    "commit-mapeditor": "cd build; cd actions; node commit-mapeditor.js /Library/WebServer/Documents/new-tanks-online",
    "commit-hub": "cd build; cd actions; node commit-hub.js",
    "create-texture-atlas": "cd atlas; node atlas_creator.js"
  },
  "nyc": {
    "instrument": true,
    "sourceMap": true,
    "exclude": [
      "node_modules"
    ]
  },
  "author": "JakMobius",
  "license": "ISC",
  "optionalDependencies": {
    "fsevents": "^2.1.3"
  }
}

},{}],33:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class AbstractEffect {
  /**
   * @type EffectModel
   */

  /**
   * @param {EffectModel} model
   */
  constructor(model) {
    this.dead = void 0;
    this.Types = void 0;
    this.model = void 0;
    this.model = model;
    this.dead = false;
  }

  tick(dt) {}
  /**
   * @type {Map<Class<EffectModel>, Class<AbstractEffect>>}
   */


  /**
   * @param modelClass {Class<EffectModel>}
   * @param effectClass {Class<AbstractEffect>}
   */
  static associate(modelClass, effectClass) {
    this.Types.set(modelClass, effectClass);
  }
  /**
   * @param model {EffectModel}
   * @returns {AbstractEffect | null}
   */


  static fromModel(model) {
    let clazz = this.Types.get(model.constructor);
    if (!clazz) return null;
    return new clazz(model);
  }

  die() {
    this.dead = true;
  }

}

AbstractEffect.Types = new Map();
var _default = AbstractEffect;
exports.default = _default;

},{}],34:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _serializable = _interopRequireDefault(require("../serialization/binary/serializable"));

/**
 * @abstract
 * This class represents an effect model, which contains all necessary
 * data to create an side-specific effect class instance
 */
class EffectModel extends _serializable.default {
  /**
   * @private
   * @type {number}
   */

  /**
   * Unique effect identifier
   */

  /**
   * @param {Object?} [options]
   * @param {number} [options.id]
   */
  constructor(options) {
    super();
    this.id = void 0;

    if (options) {
      if (options.id === undefined) {
        this.id = EffectModel.globalId++;
      } else {
        this.id = options.id;
      }
    }
  }

  static groupName() {
    return 2;
  }

  toBinary(encoder) {
    encoder.writeFloat64(this.id);
  }

  static fromBinary(decoder) {
    return new this({
      id: decoder.readFloat64()
    });
  }

}

EffectModel.globalId = 0;
var _default = EffectModel;
exports.default = _default;

},{"../serialization/binary/serializable":53,"@babel/runtime/helpers/interopRequireDefault":1}],35:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _worldeffectmodel = _interopRequireDefault(require("../worldeffectmodel"));

class WorldExplodeEffectModel extends _worldeffectmodel.default {
  static typeName() {
    return 2;
  }
  /**
   * Explode power
   * @type {number}
   */


  /**
   * @param {Object} options
   * @param {number} options.x
   * @param {number} options.y
   * @param {number} [options.power]
   */
  constructor(options) {
    super(options);
    this.power = 4;
    if (options.power) this.power = options.power;
  }

  toBinary(encoder) {
    super.toBinary(encoder);
    encoder.writeFloat32(this.power);
  }

  static fromBinary(decoder) {
    let effect = super.fromBinary(decoder);
    effect.power = decoder.readFloat32();
    return effect;
  }

}

_worldeffectmodel.default.register(WorldExplodeEffectModel);

var _default = WorldExplodeEffectModel;
exports.default = _default;

},{"../worldeffectmodel":36,"@babel/runtime/helpers/interopRequireDefault":1}],36:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _effectmodel = _interopRequireDefault(require("../effectmodel"));

/**
 * @abstract
 */
class WorldEffectModel extends _effectmodel.default {
  /**
   * @type Number
   */

  /**
   * @type Number
   */

  /**
   * @param {Object} options
   * @param {number} options.x
   * @param {number} options.y
   */
  constructor(options) {
    super(options);
    this.x = void 0;
    this.y = void 0;
    this.x = options.x;
    this.y = options.y;
  }

  toBinary(encoder) {
    super.toBinary(encoder);
    encoder.writeFloat32(this.x);
    encoder.writeFloat32(this.y);
  }

  static fromBinary(decoder) {
    let model = super.fromBinary(decoder);
    model.x = decoder.readFloat32();
    model.y = decoder.readFloat32();
    return model;
  }

}

var _default = WorldEffectModel;
exports.default = _default;

},{"../effectmodel":34,"@babel/runtime/helpers/interopRequireDefault":1}],37:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _binarypacket = _interopRequireDefault(require("./binarypacket"));

var _clientConnection = _interopRequireDefault(require("./client-connection"));

class AbstractClient {
  /**
   * @type {AbstractConnection}
   */
  constructor(config) {
    this.config = void 0;
    this.listeners = void 0;
    this.queue = void 0;
    this.connected = void 0;
    this.connection = void 0;
    this.config = config;
    this.listeners = new Map();
    this.connection = this.createConnection();
    this.queue = [];
  }
  /**
   * @returns {AbstractConnection}
   */


  createConnection() {
    return new _clientConnection.default(this);
  }

  on(what, handler) {
    if (this.listeners.has(what)) {
      this.listeners.get(what).push(handler);
    } else {
      this.listeners.set(what, [handler]);
    }
  }

  emit(event) {
    let listeners = this.listeners.get(event);
    let args = Array.prototype.slice.call(arguments, 1);

    if (listeners) {
      for (let listener of listeners) {
        listener.apply(null, args);
      }
    }
  }
  /**
   * @abstract
   */


  connectToServer() {}

  onOpen() {
    this.connected = true;

    for (let packet of this.queue) this.writePacket(packet);

    this.queue = [];
    this.emit("open");
  }

  onConnection() {
    this.onOpen();
  }
  /**
   * @param buffer {ArrayBuffer}
   */


  onData(buffer) {
    let decoder = _binarypacket.default.binaryDecoder;
    decoder.reset();
    decoder.readData(buffer);

    let packet = _binarypacket.default.deserialize(decoder, _binarypacket.default);

    if (packet) {
      this.handlePacket(packet);
    } else {//decoder.reset()
      //console.warn("Unknown packet type: " + decoder.readUint16())
    }
  }

  handlePacket(packet) {
    for (let [clazz, listeners] of this.listeners) {
      if (clazz instanceof Function && packet.constructor === clazz) {
        for (let listener of listeners) {
          listener(packet);
        }
      }
    }
  }

  onError(error) {
    this.emit("error", error);
    this.connected = false;
  }

  onClose(code, reason) {
    this.emit("close", code, reason);
    this.connected = false;
  }
  /**
   * @abstract
   * @returns {boolean}
   */


  isOpen() {}
  /**
   * @abstract
   * @returns {boolean}
   */


  isConnecting() {}

  sendPacket(packet) {
    if (this.isOpen()) {
      this.writePacket(packet.getData());
    } else if (this.isConnecting()) {
      this.queue.push(packet);
    }
  }
  /**
   * @abstract
   * @protected
   * @param {ArrayBuffer} data
   */


  writePacket(data) {}
  /**
   * @abstract
   * Disconnect socket from server
   */


  disconnect() {}

}

var _default = AbstractClient;
exports.default = _default;

},{"./binarypacket":39,"./client-connection":40,"@babel/runtime/helpers/interopRequireDefault":1}],38:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * @abstract
 */
class AbstractConnection {
  /**
   * @abstract
   * @returns boolean
   */
  isReady() {}
  /**
   * @abstract
   * @param bytes {BinaryPacket}
   */


  send(bytes) {}
  /**
   * @abstract
   */


  close(reason) {}

}

var _default = AbstractConnection;
exports.default = _default;

},{}],39:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _serializable = _interopRequireDefault(require("../serialization/binary/serializable"));

var _binaryencoder = _interopRequireDefault(require("../serialization/binary/binaryencoder"));

var _binarydecoder = _interopRequireDefault(require("../serialization/binary/binarydecoder"));

/**
 * @abstract
 * This class is a binary data packet that can be transmitted over a
 * network with low redundancy. There is two packet types: standalone
 * and contextual. Standalone packets do not require any other data in
 * order to record and read information. Contextual packets only read
 * information when used by handlers.
 *
 * To create a standalone packet, inherit this class in the same way
 * as {@link BinarySerializable}. Then, in the
 * {@link BinaryPacket#fromBinary fromBinary} static function, you can
 * read data from the decoder and return an instance of your package.
 *
 * To create a contextual packet, you only need to overwrite the
 * {@link BinaryPacket#typeName typeName} static function.
 * {@link BinaryPacket} itself will take care of instantiating your package
 * and writing the decoder to the {@link BinaryPacket.decoder decoder}
 * field. Then you will be able to use the obtained data in any method
 * you create. In this way, you will only be able to read the data
 * when the handler accesses the package, with the possible
 * transmission of any contextual information. Please note that your
 * data will not be available after the packet is processed as the
 * decoder buffer is released for reuse.
 */
class BinaryPacket extends _serializable.default {
  constructor() {
    super();
    /**
     * @type {ArrayBuffer} Compiled binary data of the packet.
     */

    this.data = void 0;
    this.decoder = void 0;
    this.data = null;
    /**
     * @type {BinaryDecoder} A decoder saved for the handlers.
     * Valid until it is reused.
     */

    this.decoder = null;
    /*
     Considering that the buffer will only be reused after the
     data packet is processed, we can store it for handlers to
     use. (Although it's always going to be
     BinaryDecoder.shared... Uhh... Nevermind...)
     */
  }

  encode() {
    let encoder = BinaryPacket.binaryEncoder;
    encoder.largeIndices = this.constructor.requireLargeIndices;
    encoder.reset();
    BinaryPacket.serialize(this, encoder);
    return encoder.compile();
  }
  /**
   * When called once, packet get compiled and can no longer change
   * its data
   * @returns {ArrayBuffer} Packet data
   */


  getData() {
    if (this.data == null) {
      this.data = this.encode();
    }

    return this.data;
  }
  /**
   * Sends the packet to {@link AbstractConnection}. When called once, packet
   * get compiled and can no longer change its data
   * @param connection {AbstractConnection} The packet receiver.
   */


  sendTo(connection) {
    if (!this.shouldSend() || !connection.isReady()) {
      return;
    }

    connection.send(this);
  }

  shouldSend() {
    return true;
  }

  static fromBinary(decoder) {
    let packet = new this();
    packet.decoder = decoder;
    return packet;
  }

}

BinaryPacket.SERIALIZATION_GROUP_NAME = 3;
BinaryPacket.requireLargeIndices = false;
BinaryPacket.binaryEncoder = new _binaryencoder.default({
  writeIndexMode: true
});
BinaryPacket.binaryDecoder = new _binarydecoder.default({
  readIndexMode: true
});

BinaryPacket.groupName = () => BinaryPacket.SERIALIZATION_GROUP_NAME;

var _default = BinaryPacket;
exports.default = _default;

},{"../serialization/binary/binarydecoder":49,"../serialization/binary/binaryencoder":50,"../serialization/binary/serializable":53,"@babel/runtime/helpers/interopRequireDefault":1}],40:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _abstractConnection = _interopRequireDefault(require("./abstract-connection"));

class ClientConnection extends _abstractConnection.default {
  /**
   * @param client {AbstractClient}
   */
  constructor(client) {
    super();
    this.client = void 0;
    this.client = client;
  }

  isReady() {
    // We can send messages when client is opening
    // because packets will be enqueued in this
    // case.
    return this.client.isOpen() || this.client.isConnecting();
  }

  send(packet) {
    this.client.sendPacket(packet);
  }

  close(reason) {
    this.client.disconnect(reason);
  }

}

var _default = ClientConnection;
exports.default = _default;

},{"./abstract-connection":38,"@babel/runtime/helpers/interopRequireDefault":1}],41:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _binarypacket = _interopRequireDefault(require("../../binarypacket"));

var _clusterHandshake = _interopRequireDefault(require("../../../server/socket/cluster-handshake"));

class HandshakePacket extends _binarypacket.default {
  constructor(data) {
    super();
    this.handshakeData = void 0;
    this.handshakeData = data;
  }

  toBinary(encoder) {
    encoder.writeUint8Array(this.handshakeData);
  }

  static fromBinary(decoder) {
    return new this(decoder.readUint8(_clusterHandshake.default.handshakeBytes));
  }

  static typeName() {
    return 1001;
  }

}

_binarypacket.default.register(HandshakePacket);

var _default = HandshakePacket;
exports.default = _default;

},{"../../../server/socket/cluster-handshake":109,"../../binarypacket":39,"@babel/runtime/helpers/interopRequireDefault":1}],42:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _binarypacket = _interopRequireDefault(require("../../binarypacket"));

/**
 * This packet is sent by hub when handshake succeeds
 */
class HandshakeSuccessPacket extends _binarypacket.default {
  static typeName() {
    return 1002;
  }

  toBinary(encoder) {}

  static fromBinary(decoder) {
    return new this();
  }

}

_binarypacket.default.register(HandshakeSuccessPacket);

var _default = HandshakeSuccessPacket;
exports.default = _default;

},{"../../binarypacket":39,"@babel/runtime/helpers/interopRequireDefault":1}],43:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _binarypacket = _interopRequireDefault(require("../../binarypacket"));

var _roomConfig = _interopRequireDefault(require("/Users/Temich/PycharmProjects/tanks/src/server/room/room-config"));

class RoomCreationRequestPacket extends _binarypacket.default {
  static typeName() {
    return 1003;
  }
  /**
   * @param config {RoomConfig} Configuration of room to create
   */


  constructor(config) {
    super();
    this.config = void 0;
    this.config = config;
  }

  toBinary(encoder) {
    this.config.toBinary(encoder);
  }

  static fromBinary(decoder) {
    let config =
    /** @type {RoomConfig} */
    _roomConfig.default.fromBinary(decoder);

    return new RoomCreationRequestPacket(config);
  }

}

_binarypacket.default.register(RoomCreationRequestPacket);

var _default = RoomCreationRequestPacket;
exports.default = _default;

},{"../../binarypacket":39,"/Users/Temich/PycharmProjects/tanks/src/server/room/room-config":107,"@babel/runtime/helpers/interopRequireDefault":1}],44:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _binarypacket = _interopRequireDefault(require("../../binarypacket"));

class PlayerChatPacket extends _binarypacket.default {
  static typeName() {
    return 8;
  }

  constructor(text) {
    super();
    this.text = void 0;
    this.text = text;
  }

  toBinary(encoder) {
    encoder.writeString(this.text);
  }

  static fromBinary(decoder) {
    return new PlayerChatPacket(decoder.readString());
  }

}

_binarypacket.default.register(PlayerChatPacket);

var _default = PlayerChatPacket;
exports.default = _default;

},{"../../binarypacket":39,"@babel/runtime/helpers/interopRequireDefault":1}],45:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _binarypacket = _interopRequireDefault(require("../../binarypacket"));

class PlayerRoomChangePacket extends _binarypacket.default {
  static typeName() {
    return 18;
  }

  constructor(room, error) {
    super();
    this.room = void 0;
    this.error = void 0;
    this.room = room;
    this.error = error;
  }

  toBinary(encoder) {
    encoder.writeUint8(this.error ? 0 : 1);
    encoder.writeString(this.room);

    if (this.error) {
      encoder.writeString(this.error);
    }
  }

  static fromBinary(decoder) {
    let isSuccess = decoder.readUint8();
    let room = decoder.readString();
    let error = isSuccess ? null : decoder.readString();
    return new this(room, error);
  }

  static allow(room) {
    return new this(room);
  }

  static deny(room, error) {
    return new this(room, error);
  }

}

_binarypacket.default.register(PlayerRoomChangePacket);

var _default = PlayerRoomChangePacket;
exports.default = _default;

},{"../../binarypacket":39,"@babel/runtime/helpers/interopRequireDefault":1}],46:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _binarypacket = _interopRequireDefault(require("../../binarypacket"));

/**
 * This packet is sent when player wants to join the room
 */
class PlayerRoomRequestPacket extends _binarypacket.default {
  static typeName() {
    return 17;
  }

  constructor(room) {
    super();
    this.room = void 0;
    this.room = room;
  }

  toBinary(encoder) {
    encoder.writeString(this.room);
  }

  static fromBinary(decoder) {
    return new PlayerRoomRequestPacket(decoder.readString());
  }

}

_binarypacket.default.register(PlayerRoomRequestPacket);

var _default = PlayerRoomRequestPacket;
exports.default = _default;

},{"../../binarypacket":39,"@babel/runtime/helpers/interopRequireDefault":1}],47:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _binarypacket = _interopRequireDefault(require("../../binarypacket"));

class RoomListPacket extends _binarypacket.default {
  static typeName() {
    return 16;
  }

  constructor(rooms) {
    super();
    this.rooms = void 0;
    this.rooms = rooms;
  }

  toBinary(encoder) {
    encoder.writeUint8(this.rooms.length);

    for (let room of this.rooms) {
      encoder.writeString(room.name);
      encoder.writeUint16(room.online);
      encoder.writeUint16(room.maxOnline);
    }
  }

  static fromBinary(decoder) {
    let rooms = [];
    let count = decoder.readUint8();

    for (let i = 0; i < count; i++) {
      let name = decoder.readString();
      let online = decoder.readUint16();
      let maxOnline = decoder.readUint16();
      rooms.push({
        name: name,
        online: online,
        maxOnline: maxOnline
      });
    }

    return new RoomListPacket(rooms);
  }

}

_binarypacket.default.register(RoomListPacket);

var _default = RoomListPacket;
exports.default = _default;

},{"../../binarypacket":39,"@babel/runtime/helpers/interopRequireDefault":1}],48:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _binarypacket = _interopRequireDefault(require("../../binarypacket"));

class RoomListRequestPacket extends _binarypacket.default {
  static typeName() {
    return 5;
  }
  /**
   * @param {boolean} request Indicates if room list update should be enabled.
   */


  constructor(request) {
    super();
    this.request = void 0;
    this.request = request;
  }

  toBinary(encoder) {
    /** @type {number} */
    const byte = this.request ? 1 : 0;
    encoder.writeUint8(byte);
  }

  static fromBinary(decoder) {
    return new RoomListRequestPacket(decoder.readUint8());
  }

}

_binarypacket.default.register(RoomListRequestPacket);

var _default = RoomListRequestPacket;
exports.default = _default;

},{"../../binarypacket":39,"@babel/runtime/helpers/interopRequireDefault":1}],49:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _binarypool = _interopRequireDefault(require("./binarypool"));

class BinaryDecoder extends _binarypool.default {
  /**
   * Shared instance of `BinaryDecoder`
   * @type {BinaryDecoder}
   */
  constructor(options) {
    options = options || {};
    super();
    this.largeIndices = void 0;
    this.readIndexMode = void 0;
    this.buffers = void 0;

    this.readInt8 = n => this.buffers.get(_binarypool.default.INT8).next(n);

    this.readUint8 = n => this.buffers.get(_binarypool.default.UINT8).next(n);

    this.readInt16 = n => this.buffers.get(_binarypool.default.INT16).next(n);

    this.readUint16 = n => this.buffers.get(_binarypool.default.UINT16).next(n);

    this.readInt32 = n => this.buffers.get(_binarypool.default.INT32).next(n);

    this.readUint32 = n => this.buffers.get(_binarypool.default.UINT32).next(n);

    this.readFloat32 = n => this.buffers.get(_binarypool.default.FLOAT32).next(n);

    this.readFloat64 = n => this.buffers.get(_binarypool.default.FLOAT64).next(n);

    this.readString = () => {
      let buffer = this.buffers.get(_binarypool.default.UINT16);
      let codes = [];
      let code;

      while ((code = buffer.next()) !== 0) {
        codes.push(code);
      }

      return String.fromCharCode.apply(null, codes);
    };

    this.largeIndices = options.largeIndices;
    this.readIndexMode = options.readIndexMode;
    /** @type {Map<Number, BinaryBuffer>} */

    this.buffers = new Map();
    this.setupBuffers();
  }
  /**
   * Reads binary data to buffers. Then
   * it's possible to use read functions
   * as `readString` or `readUint32`
   * @param array {ArrayBuffer} Data buffer to read.
   */


  readData(array) {
    let compilerBytes = Uint16Array.BYTES_PER_ELEMENT;
    let bufferIndex = 0;
    let arrayPointer = 0;
    let offset = compilerBytes * _binarypool.default.bufferTypes.size;

    if (this.readIndexMode) {
      this.largeIndices = !!new Uint8Array(array, 0, 1)[0];
      array = array.slice(1);
    }

    if (this.largeIndices) {
      offset *= 2;
    }

    for (let buffer of this.buffers.values()) {
      let size;

      if (this.largeIndices) {
        let words = new Uint16Array(array, compilerBytes * bufferIndex * 2, 2);
        size = words[0] + (words[1] << 16);
      } else {
        size = new Uint16Array(array, compilerBytes * bufferIndex, 1)[0];
      }

      if (size === 0) {
        bufferIndex++;
        continue;
      }

      let bytes = buffer.clazz.BYTES_PER_ELEMENT;
      let alignment = Math.max(bytes, compilerBytes);
      arrayPointer = Math.ceil(arrayPointer / alignment) * alignment;
      buffer.read(array, offset + arrayPointer, size);
      arrayPointer += size * bytes;
      bufferIndex++;
    }
  }
  /**
   * Private function. Should never be used outside.
   */


  setupBuffers() {
    for (let [type, buffer] of _binarypool.default.bufferTypes.entries()) {
      let newBuffer = buffer.clone();
      newBuffer.createBuffer();
      this.buffers.set(type, newBuffer);
    }
  } // Reading functions

  /**
   * Reads and returns an signed 8-bit integer or `Int8Array` when `n > 1`.
   * @param n{Number?} Number of entries to read.
   */


  // Operating buffer pointers

  /**
   * Resets pointer of each buffer
   */
  reset() {
    for (let buffer of this.buffers.values()) {
      buffer.reset();
    }
  }
  /**
   * Saves pointer state of each buffer.
   * Return to the last saved state
   * by calling `restore` method
   */


  save() {
    for (let buffer of this.buffers.values()) {
      buffer.save();
    }
  }
  /**
   * Restores last saved pointer state
   * of each buffer. See also `save`
   */


  restore() {
    for (let buffer of this.buffers.values()) {
      buffer.save();
    }
  }

}

BinaryDecoder.shared = new BinaryDecoder();
var _default = BinaryDecoder;
exports.default = _default;

},{"./binarypool":51,"@babel/runtime/helpers/interopRequireDefault":1}],50:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _buffer = _interopRequireDefault(require("./buffer"));

var _binarypool = _interopRequireDefault(require("./binarypool"));

class BinaryEncoder extends _binarypool.default {
  constructor(options) {
    options = options || {};
    super();
    this.buffers = void 0;
    this.largeIndices = void 0;
    this.writeIndexMode = void 0;
    this.compileBuffer = new _buffer.default({
      clazz: Uint16Array,
      capacity: 512
    });

    this.writeInt8 = int8 => {
      this.buffers.get(BinaryEncoder.INT8).push(int8);
    };

    this.writeUint8 = uint8 => {
      this.buffers.get(BinaryEncoder.UINT8).push(uint8);
    };

    this.writeInt16 = int16 => {
      this.buffers.get(BinaryEncoder.INT16).push(int16);
    };

    this.writeUint16 = uint16 => {
      this.buffers.get(BinaryEncoder.UINT16).push(uint16);
    };

    this.writeInt32 = int32 => {
      this.buffers.get(BinaryEncoder.INT32).push(int32);
    };

    this.writeUint32 = uint32 => {
      this.buffers.get(BinaryEncoder.UINT32).push(uint32);
    };

    this.writeFloat32 = float32 => {
      this.buffers.get(BinaryEncoder.FLOAT32).push(float32);
    };

    this.writeFloat64 = float64 => {
      this.buffers.get(BinaryEncoder.FLOAT64).push(float64);
    };

    this.writeString = string => {
      let buffer = this.buffers.get(BinaryEncoder.UINT16);

      for (let i = 0, l = string.length; i < l; i++) {
        let code = string.charCodeAt(i);
        buffer.push(code);
      }

      buffer.push(0); // Adding string end character '\0'
    };

    this.writeInt8Array = int8Array => this.buffers.get(BinaryEncoder.INT8).appendArray(int8Array);

    this.writeUint8Array = uint8Array => this.buffers.get(BinaryEncoder.UINT8).appendArray(uint8Array);

    this.writeInt16Array = int16Array => this.buffers.get(BinaryEncoder.INT16).appendArray(int16Array);

    this.writeUint16Array = uint16Array => this.buffers.get(BinaryEncoder.UINT16).appendArray(uint16Array);

    this.writeInt32Array = int32Array => this.buffers.get(BinaryEncoder.INT32).appendArray(int32Array);

    this.writeUint32Array = uint32Array => this.buffers.get(BinaryEncoder.UINT32).appendArray(uint32Array);

    this.writeFloat32Array = float32Array => this.buffers.get(BinaryEncoder.FLOAT32).appendArray(float32Array);

    this.writeFloat64Array = float64Array => this.buffers.get(BinaryEncoder.FLOAT64).appendArray(float64Array);

    this.buffers = new Map();
    this.largeIndices = !!options.largeIndices;
    this.writeIndexMode = !!options.writeIndexMode;
    this.setupBuffers();
  }

  setupBuffers() {
    for (let [type, buffer] of BinaryEncoder.bufferTypes.entries()) {
      let newBuffer = buffer.clone();
      newBuffer.createBuffer();
      this.buffers.set(type, newBuffer);
    }

    this.compileBuffer.createBuffer();
  }

  reset() {
    for (let buffer of this.buffers.values()) {
      buffer.reset();
    }
  }
  /**
   * Writes signed byte to buffer
   * @param int8 {number} value to write
   */


  compile() {
    this.compileBuffer.reset();

    if (this.largeIndices) {
      for (let buffer of this.buffers.values()) {
        this.compileBuffer.push(buffer.pointer & 0xFFFF);
        this.compileBuffer.push(buffer.pointer >> 16 & 0xFFFF);
      }
    } else {
      for (let buffer of this.buffers.values()) {
        this.compileBuffer.push(buffer.pointer);
      }
    }

    for (let buffer of this.buffers.values()) {
      this.compileBuffer.appendBuffer(buffer);
    }

    if (this.writeIndexMode) {
      let result = new Uint8Array(this.compileBuffer.pointer * 2 + 1);
      result[0] = Number(this.largeIndices);
      result.set(new Uint8Array(this.compileBuffer.toArrayBuffer()), 1);
      return result.buffer;
    } else {
      return this.compileBuffer.toArrayBuffer();
    }
  }

}

BinaryEncoder.shared = new BinaryEncoder();
var _default = BinaryEncoder;
exports.default = _default;

},{"./binarypool":51,"./buffer":52,"@babel/runtime/helpers/interopRequireDefault":1}],51:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _buffer = _interopRequireDefault(require("./buffer"));

class BinaryPool {
  constructor() {
    this.INT8 = void 0;
    this.UINT8 = void 0;
    this.INT16 = void 0;
    this.UINT16 = void 0;
    this.INT32 = void 0;
    this.UINT32 = void 0;
    this.FLOAT32 = void 0;
    this.FLOAT64 = void 0;
  }

}

BinaryPool.INT8 = 0;
BinaryPool.UINT8 = 1;
BinaryPool.INT16 = 2;
BinaryPool.UINT16 = 3;
BinaryPool.INT32 = 4;
BinaryPool.UINT32 = 5;
BinaryPool.FLOAT32 = 6;
BinaryPool.FLOAT64 = 7;
BinaryPool.bufferTypes = new Map([[BinaryPool.INT8, new _buffer.default({
  clazz: Int8Array,
  capacity: 128
})], [BinaryPool.UINT8, new _buffer.default({
  clazz: Uint8Array,
  capacity: 128
})], [BinaryPool.INT16, new _buffer.default({
  clazz: Int16Array,
  capacity: 128
})], [BinaryPool.UINT16, new _buffer.default({
  clazz: Uint16Array,
  capacity: 128
})], [BinaryPool.INT32, new _buffer.default({
  clazz: Int32Array,
  capacity: 128
})], [BinaryPool.UINT32, new _buffer.default({
  clazz: Uint32Array,
  capacity: 128
})], [BinaryPool.FLOAT32, new _buffer.default({
  clazz: Float32Array,
  capacity: 128
})], [BinaryPool.FLOAT64, new _buffer.default({
  clazz: Float64Array,
  capacity: 128
})]]);
var _default = BinaryPool;
exports.default = _default;

},{"./buffer":52,"@babel/runtime/helpers/interopRequireDefault":1}],52:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class Buffer {
  /**
   * Buffer base capacity.
   * If the `initialCapacity` equals to
   * 128, then buffer actual capacity
   * is multiply of 128.
   * @type {Number|Null}
   */

  /**
   * Buffer internal class type.
   * @type {Class<TypedArray>}
   */

  /**
   * Current entry pointer. Increased
   * when reading or writing data.
   * @type {number}
   */
  constructor(options) {
    this.initialCapacity = void 0;
    this.array = void 0;
    this.stack = void 0;
    this.capacity = null;
    this.clazz = null;
    this.pointer = 0;
    this.initialCapacity = options.capacity || 128;
    this.capacity = 0;
    this.clazz = options.clazz;
    this.pointer = 0;
    this.array = null;
    this.stack = [];
  }
  /**
   * Initializes the buffer. It's required to
   * call this method if you want to
   * use the dynamic buffer.
   */


  createBuffer() {
    this.capacity = this.initialCapacity;
    this.array = new this.clazz(this.capacity);
    return this;
  }
  /**
   * if `minimumCapacity` parameter is provided, extends the
   * buffer to nearest greater multiple of `capacity`
   * bytes. if not, extends the buffer by `capacity` bytes.
   * If the required number of bytes if less then actual
   * capacity, this method does nothing
   * @param minimumCapacity {Number?} Minimum buffer capacity.
   * @returns {boolean} `true`, if buffer has been reallocated, `false` otherwise
   */


  extend(minimumCapacity) {
    if (minimumCapacity === undefined) {
      this.capacity += this.initialCapacity;
    } else {
      if (minimumCapacity <= this.capacity) return false;
      this.capacity = Math.ceil(minimumCapacity / this.initialCapacity) * this.initialCapacity;
    }

    let oldBuffer = this.array;
    this.array = new this.clazz(this.capacity);
    this.array.set(oldBuffer);
    return true;
  }
  /**
   * Resets the pointer to zero, allowing
   * to read buffer from start or reuse
   * it by overwriting old content.
   */


  reset() {
    this.pointer = 0;
  }
  /**
   * Converts this dynamic buffer into static `ArrayBuffer`
   * @returns {ArrayBuffer}
   */


  toArrayBuffer() {
    return this.array.buffer.slice(0, this.pointer * this.clazz.BYTES_PER_ELEMENT);
  }
  /**
   * Appends single value to the end of this buffer.
   * The value should bound to the buffer type,
   * otherwise it will be clamped.
   * @param value {Number}
   */


  push(value) {
    if (this.pointer >= this.capacity) {
      this.extend();
    }

    this.array[this.pointer++] = value;
  }
  /**
   * Appends `Array` to the end of this buffer.
   * @param array {Array|TypedArray} Array to append.
   */


  appendArray(array) {
    let newSize = this.pointer + array.length;

    if (newSize >= this.capacity) {
      this.extend(newSize);
    }

    this.array.set(array, this.pointer);
    this.pointer += array.length;
  }
  /**
   * Appends another buffer to the end of this buffer.
   * Usable when compiling multiple buffers into one.
   * @param buffer {Buffer} Buffer to append.
   */


  appendBuffer(buffer) {
    if (buffer.pointer === 0) {
      return;
    }

    let bytes = buffer.array.BYTES_PER_ELEMENT;
    let selfBytes = this.array.BYTES_PER_ELEMENT;
    let size = Math.ceil(bytes / selfBytes * buffer.pointer);
    let alignment = Math.max(bytes, selfBytes); // Align pointer

    this.pointer = Math.ceil(this.pointer * selfBytes / alignment) * alignment / selfBytes;
    let temp = new this.clazz(buffer.array.buffer, 0, size);
    this.appendArray(temp);
  }
  /**
   * Reads `TypedArray` to internal buffer. Then it's
   * possible to use `next(n)` method.
   * @param array {TypedArray} An array to read data. Should be the same type as the buffer.
   * @param pointer {Number} How many bytes to skip before start reading.
   * @param size {Number} Number of overlay to read
   */


  read(array, pointer, size) {
    this.extend(size);
    let buffer = new this.clazz(array, pointer, size);
    this.array.set(buffer); // Allow to read buffer from begin with `next` method

    this.pointer = 0;
  }

  next(n) {
    if (n === undefined || n <= 1) {
      return this.array[this.pointer++];
    } else if (typeof n == "number") {
      let temp = this.array.slice(this.pointer, this.pointer + n);
      this.pointer += n;
      return temp;
    }
  }
  /**
   * Makes a new buffer with the same options.
   * Does not copy buffer content.
   * @returns {Buffer}
   */


  clone() {
    return new Buffer({
      capacity: this.initialCapacity,
      clazz: this.clazz
    });
  }
  /**
   * Saves current buffer pointer to stack.
   * Return to last saved pointer
   * by calling `restore` method.
   */


  save() {
    this.stack.push(this.pointer);
  }
  /**
   * Returns to last saved buffer pointer.
   * See also `save` method.
   */


  restore() {
    this.pointer = this.stack.pop();
  }

}

var _default = Buffer;
exports.default = _default;

},{}],53:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _serializationgroup = _interopRequireDefault(require("../serializationgroup"));

/**
 * @abstract
 * This abstract class allows to serialize and deserialize any object
 * into binary data. Subclasses should implement {@link toBinary},
 * {@link fromBinary} methods and static {@link typeName} function.
 * Separation between serialization groups is done by overriding
 * static {@link groupName} method. This class should never
 * be constructed directly.
 * Refer to the documentation of the appropriate methods.
 */
class BinarySerializable {
  /**
   * Returns newly created or cached group object for the provided key.
   * @param key The key for group to be returned.
   * @returns {Group} Returns group for this key.
   */
  static getGroup(key) {
    let registry = BinarySerializable.groups[key];

    if (!registry) {
      registry = BinarySerializable.groups[key] = new _serializationgroup.default();
    }

    return registry;
  }
  /**
   * @abstract
   * To serialize and deserialize subclass instances, use
   * {@link serialize} and {@link deserialize} static
   * functions. This function should never be called on {@link BinarySerializable} class.
   * @param {BinaryEncoder} encoder The encoder which will store object data
   */


  toBinary(encoder) {
    throw new Error("Abstract class instancing is illegal");
  }
  /**
   * @abstract
   * To serialize and deserialize the base class instances, use
   * {@link serialize} and {@link deserialize} static functions.
   * @param {BinaryDecoder} decoder The {@link BinaryDecoder} which contains source object data.
   * @returns {BinarySerializable} The deserialized object
   */


  static fromBinary(decoder) {
    throw new Error("Abstract class instancing is illegal");
  }
  /**
   * Uses {@link toBinary} method to serialize subclass instances to
   * object. Suitable for network transporting. Call {@link deserialize} to get exact
   * same object copy.
   * @param {BinaryEncoder} encoder where object serialization will be stored.
   * @param {BinarySerializable} object to be serialized
   */


  static serialize(object, encoder) {
    if (object.constructor["name"] === BinarySerializable.constructor["name"]) {
      throw new Error(`Cannot serialize abstract class.`);
    }

    encoder.writeInt16(object.constructor.typeName());
    object.toBinary(encoder);
  }
  /**
   * Uses {@link fromBinary} method to deserialize instance from
   * binary data, returned by {@link serialize} function.
   * @param {BinaryDecoder} decoder The object to be deserialized
   * @param group {Number|Class} The serialization group name. Can be either undefined, number or {@link BinarySerializable} subclass.
   * @returns {BinarySerializable} The deserialized object or `null` if base class was not found.
   */


  static deserialize(decoder, group) {
    if (typeof group == "function") {
      if (group.prototype instanceof BinarySerializable) {
        group = group.groupName();
      } else {
        throw new Error("Illegal argument: second argument must be either undefined, number or 'BinarySerializable' subclass.");
      }
    } else if (group === undefined) {
      group = BinarySerializable.BASE_GROUP_NAME;
    } else if (typeof group != "number") {
      throw new Error("Illegal argument: second argument must be either undefined, number or 'BinarySerializable' subclass.");
    }

    const type = decoder.readInt16();
    const clazz = this.getGroup(group).get(type);

    if (!clazz) {
      return null;
    }

    return clazz.fromBinary(decoder);
  }
  /**
   * @abstract
   * Each registered subclass should have a type identifier to be
   * deserialized. Return value should fit Int16 (-32,768 to +32,767)
   * This function should never be called on {@link BinarySerializable} class instance
   * @returns {number} Type identifier for specific {@link BinarySerializable}
   * subclass.
   */


  static typeName() {
    throw new Error(`Abstract class does not have type name.`);
  }
  /**
   * Used to separate different serialization groups.
   * @example
   * // If you are about to serialize both `Entity`
   * // and `Particle` classes, you would separate them
   * // in different groups. With that being done, you will be
   * // able to use same hardcoded type names for your entities
   * // and particles.
   *
   * class Entity extends BinarySerializable {
   *     static groupName() { return 1 } // Using group named "1" for entities
   * }
   *
   * class Projectile extends Entity {
   *     static typeName() { return 1 }
   * }
   * BinarySerializable.register(Projectile) // Don't forget to register class
   *
   * class Animal extends Entity {
   *     static typeName() { return 2 }
   * }
   * BinarySerializable.register(Animal)
   *
   *
   * // Using separate group to serialize particles
   *
   * class Particle extends BinarySerializable {
   *     static groupName() { return 2 } // Using group named "2" for particles
   * }
   *
   * class FireParticle extends Particle {
   *     static typeName() { return 1 }
   * }
   * BinarySerializable.register(FireParticle)
   *
   * class ExplodeParticle extends Particle {
   *     static typeName() { return 2 }
   * }
   * BinarySerializable.register(ExplodeParticle)
   *
   * @returns {number} Group name as unique number.
   */


  static groupName() {
    return BinarySerializable.BASE_GROUP_NAME;
  }
  /**
   * Writes {@link BinarySerializable} subclass to internal registry. This
   * function should be used to deserialize your custom class with
   * {@link deserialize} static function.
   * @param {Class<BinarySerializable>} clazz The class to register.
   */


  static register(clazz) {
    let group = clazz.groupName();
    let registry = this.getGroup(group);
    return registry.register(clazz);
  }

}

BinarySerializable.BASE_GROUP_NAME = -1;
BinarySerializable.groups = [];
var _default = BinarySerializable;
exports.default = _default;

},{"../serializationgroup":54,"@babel/runtime/helpers/interopRequireDefault":1}],54:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class Group {
  constructor() {
    this.array = [];
  }

  register(clazz) {
    const clazzType = clazz.typeName();

    for (let eachClazz of this.array) {
      if (eachClazz.typeName() === clazzType) {
        throw new Error(`Type name '${clazzType}' is already registered in this group.`);
      }
    }

    this.array.push(clazz);
  }

  get(type) {
    for (let eachClazz of this.array) {
      if (eachClazz.typeName() === type) {
        return eachClazz;
      }
    }

    return null;
  }

}

var _default = Group;
exports.default = _default;

},{}],55:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class AIConnection {
  constructor() {
    this.readyState = void 0;
    this.localHandlers = void 0;
    this.externalHandlers = void 0;
    this.readyState = 1;
    this.localHandlers = {
      onMessage: null,
      onClose: null
    };
    this.externalHandlers = {};
  }

  tell(value) {
    this._emitExternal("message", [value]);
  }

  _emitLocal(evt, args) {
    const handler = this.localHandlers[evt];

    if (handler) {
      handler.apply(this, args);
    }
  }

  _emitExternal(evt, args) {
    const handlers = this.externalHandlers[evt];

    if (handlers) {
      for (let handler of handlers) {
        handler.apply(this, args);
      }
    }
  }

  close() {
    this._emitLocal("onClose");

    this._emitExternal("close");
  }

  send(value) {
    this._emitLocal("onMessage", [value]);
  }

  on(event, handler) {
    const handlers = this.externalHandlers[event];

    if (handlers) {
      this.externalHandlers[event].push(handler);
    } else {
      this.externalHandlers[event] = [handler];
    }
  }

}

var _default = AIConnection;
exports.default = _default;

},{}],56:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _socketPortalClient = _interopRequireDefault(require("../socket/socket-portal-client"));

var _ai_connection = _interopRequireDefault(require("./ai_connection"));

class GameBot extends _socketPortalClient.default {
  constructor(config) {
    super(config);
    this.server = void 0;
    this.lifetime = void 0;
    this.tankid = void 0;
    this.nick = void 0;
    this.time = void 0;
    this.isBot = void 0;
    this.alive = void 0;
    this.server = null;
    this.lifetime = 1;
    this.websocket = new _ai_connection.default();
    this.server = null;
    this.tankid = 7;
    this.nick = null;
    this.time = 0;
    this.isBot = true;
  }

  initAI(json) {}

  connectToRoom(room) {
    this.server.configureClient(this, room);
    this.websocket.tell({
      "cmd": "cfg",
      "t": this.tankid,
      "n": this.nick
    });
    this.websocket.tell({
      "cmd": "nhg"
    });
    this.alive = false;
  }

  tick() {
    if (self.alive && self.data.player.tank.model.health <= 0) {
      self.alive = false;
      self.ticksToRespawn = 40;
    }

    if (!self.alive && self.data.player.tank.model.health > 0) {
      self.alive = true;
    }

    if (self.ticksToRespawn > 0 || !self.alive) {
      self.ticksToRespawn--;

      if (self.ticksToRespawn <= 0) {
        this.websocket.tell({
          cmd: "spn"
        });
      }
    }
  }

}

var _default = GameBot;
exports.default = _default;

},{"../socket/socket-portal-client":116,"./ai_connection":55,"@babel/runtime/helpers/interopRequireDefault":1}],57:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _command = _interopRequireDefault(require("./command"));

var _commandflag = _interopRequireDefault(require("./commandflag"));

class BootCommand extends _command.default {
  constructor(options) {
    super(options);
    this.preferencesOverride = void 0;
    this.parsedFlags = void 0;
    this.preferencesOverride = null;
    this.addFlag(new _commandflag.default({
      type: "key",
      name: "script",
      aliases: ["s"],
      description: "Run script(-s) after server start"
    }));
    this.addFlag(new _commandflag.default({
      type: "key",
      name: "preference-string",
      aliases: ["ps"],
      description: "Override preferences with string. Usage: -ps path.to.key=\"value\""
    }));
    this.addFlag(new _commandflag.default({
      type: "key",
      name: "preference-number",
      aliases: ["pn"],
      description: "Override preferences with a number. Usage: -pn path.to.key=value"
    }));
    this.addFlag(new _commandflag.default({
      type: "key",
      name: "preference-boolean",
      aliases: ["pb"],
      description: "Override preferences with a boolean. Usage: -pn path.to.key=true|false"
    }));
    this.parsedFlags = null;
  }

  parsePreferencesFlag(flag) {
    let parts = flag.split("=");
    if (parts.length !== 2) return null;
    let key = parts[0].split(".");
    let value = parts[1];
    return {
      key: key,
      value: value
    };
  }

  parsePreferencesOverrides(parsedFlags) {
    let stringOverride = parsedFlags.get("preference-string");
    let numberOverride = parsedFlags.get("preference-number");
    let booleanOverride = parsedFlags.get("preference-boolean");
    let errors = [];
    let overrides = [];
    if (stringOverride) for (let override of stringOverride) {
      let flag = this.parsePreferencesFlag(override);
      if (flag) overrides.push(flag);else errors.push(`Invalid preference flag syntax: ${flag}`);
    }
    if (numberOverride) for (let override of numberOverride) {
      let flag = this.parsePreferencesFlag(override);

      if (flag) {
        if (Number.isNaN(parseFloat(flag.value))) errors.push(`Invalid number for preference flag: "${flag.value}"`);else {
          flag.value = Number(flag.value);
          overrides.push(flag);
        }
      } else errors.push(`Invalid preference flag syntax: ${flag}`);
    }
    if (booleanOverride) for (let override of booleanOverride) {
      let flag = this.parsePreferencesFlag(override);
      if (!flag) return false;
      flag.value = flag.value.toLowerCase();
      if (flag.value === "true") flag.value = true;else if (flag.value === "false") flag.value = false;else if (flag.value === "1") flag.value = true;else if (flag.value === "0") flag.value = false;else if (flag.value === "yes") flag.value = true;else if (flag.value === "no") flag.value = false;else {
        errors.push(`"${flag.value}" is not a valid boolean`);
        continue;
      }
      overrides.push(flag);
    }
    return {
      errors: errors,
      overrides: overrides
    };
  }

  onPerform(args) {
    let flags = this.findFlags(args.slice(2));

    if (flags.errors) {
      console.log(flags.errors.join("\n"));
      process.exit(-1);
    }

    this.parsedFlags = flags.flags;
    let preferencesOverrideResult = this.parsePreferencesOverrides(this.parsedFlags);

    if (preferencesOverrideResult.errors.length) {
      for (let error of preferencesOverrideResult.errors) {
        console.log(error);
      }

      process.exit(-1);
    }

    this.preferencesOverride = preferencesOverrideResult.overrides;
  }

  runPostInit() {
    let scripts = this.parsedFlags.get("script");

    if (scripts) {
      for (let script of scripts) {
        this.console.runScript(script);
      }
    }
  }

  getName() {
    return "Server boot command";
  }

}

var _default = BootCommand;
exports.default = _default;

},{"./command":58,"./commandflag":59,"@babel/runtime/helpers/interopRequireDefault":1}],58:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _stringrepeat = _interopRequireDefault(require("../../utils/stringrepeat"));

class Command {
  /**
   * @type {Console}
   */

  /**
   * @type {Command[]}
   */

  /**
   * @type {CommandFlag[]}
   */

  /**
   * @type {Command | null}
   */
  constructor(options) {
    this.console = null;
    this.subcommands = [];
    this.flags = [];
    this.supercommand = null;

    if (options) {
      this.console = options.console;
    }
  }
  /**
   * Adds a flag to this command
   */


  addFlag(flag) {
    this.flags.push(flag);
  }
  /**
   * Adds a subcommand to this command
   */


  addSubcommand(subcommand) {
    this.subcommands.push(subcommand);
    subcommand.supercommand = this;
  }
  /**
   * Called when user call the command.
   * @param args Command arguments array
   */


  onPerform(args) {
    if (!this.trySubcommand(args)) {
      this.console.logger.log(this.getHelp());
    }
  }
  /**
   * Search for command-specific flags in given arguments
  	 * @param args: string[]
   * @return {{
   * 		flags: Map<string, string[]|boolean>,
   * 		unknown: string[],
   * 		errors: string[] | null,
   * 		currentFlag: string | null
   * 	}}
   */


  findFlags(args) {
    /**
     * @type {Map<string, string[]|boolean>}
     */
    let knownFlags = new Map();
    let unknownFlags = [];
    let currentFlagName = null;
    /**
     * This variable is intended to indicate if
     * flag value is being readen. We cannot
     * use `currentFlag === null` comparsion here
     * because we want to remain `currentFlag`
     * after the last cycle.
     * @type {boolean}
     */

    let readFlag = false;
    /** @type {CommandFlag | null} */

    let currentFlag = null;
    /** @type {string[]} */

    let errors = [];

    for (let arg of args) {
      if (!readFlag) {
        currentFlag = null;
        currentFlagName = null;
      }

      if (arg.startsWith("-")) {
        let name = arg.substr(1);
        let flag = this.getFlag(name);

        if (!flag) {
          unknownFlags.push(name);
          continue;
        }

        if (flag.type === "key") {
          if (!knownFlags.has(flag.name)) knownFlags.set(flag.name, []);
          currentFlag = flag;
          currentFlagName = name;
          readFlag = true;
        } else {
          if (!knownFlags.has(flag.name)) knownFlags.set(flag.name, true);
        }

        continue;
      }

      if (currentFlag !== null) {
        knownFlags.get(currentFlag.name).push(arg);
      }

      readFlag = false;
    }

    if (readFlag) {
      errors.push(`'-${currentFlagName}' flag requires value`);
    }

    return {
      flags: knownFlags,
      unknown: unknownFlags,
      errors: errors.length ? errors : null,
      currentFlag: currentFlag
    };
  }
  /**
   * Prints formatted flag error
   * @param found
   * @param logger
   */


  logFlagErrors(found, logger) {
    if (found.errors) {
      logger.log(found.errors.join("\n"));
    }

    if (found.unknown.length) {
      logger.log("§FF0;Unknown flags: " + found.unknown.join("\n"));
    }
  }
  /**
   * Tries to find subcommand with provided name
   * @param name Name or alias for subcommand to search
   * @returns `null` if the flag was not found, {@link Command} otherwise
   */


  getSubcommand(name) {
    for (let command of this.subcommands) {
      if (command.getName() === name) {
        return command;
      }
    }

    return null;
  }
  /**
   * Tries to find flag with provided name
   * @param {string} name
   * @returns `null` if the flag was not found, {@link CommandFlag} otherwise
   */


  getFlag(name) {
    for (let flag of this.flags) {
      if (flag.name === name || flag.aliases.indexOf(name) !== -1) {
        return flag;
      }
    }

    return null;
  }
  /**
   * Calls the corresponding subcommand based on command call arguments
   * @param args Call arguments
   * @returns True if subcommand was called successfully, false otherwise
   * @example
   * // Will try to call subcommand called `"create"` with arguments `["empty", "-n", "Empty Room"]`
   * this.trySubcommand(["create", "empty", "-n", "Empty Room"])
   */


  trySubcommand(args) {
    if (args.length === 0) return false;
    let found = this.getSubcommand(args[0]);
    if (!found) return false;
    found.onPerform(args.slice(1));
    return true;
  }
  /**
   * Tries to found commands that could be tab-completed
   * @param args {string[]}
   */


  tryTabCompleteSubcommand(args) {
    if (args.length === 0) return [];
    let subcommand = args[0];

    if (args.length === 1) {
      return this.subcommands.filter(a => a.getName().startsWith(subcommand)).map(a => a.getName());
    }

    let found = this.getSubcommand(subcommand);

    if (found) {
      return found.onTabComplete(args.slice(1));
    }

    return [];
  }
  /**
   * Called when user tab-complete the command.
   * @param args Command arguments array
   */


  onTabComplete(args) {
    return this.tryTabCompleteSubcommand(args);
  }
  /**
   * Getter for command description
   * @returns command description
   */


  getDescription() {
    return null;
  }
  /**
   * Getter for command name
   * @returns {string} command name
   * @abstract
   */


  getName() {
    throw new Error("Abstract method Command.getName called!");
  }
  /**
   * Hierarchy name is joined parent names. For `"commandA commandB commandC"`
   * calling this method on `"commandB"` will return `"commandA commandB"`
   * @returns {string} Hierarchy name.
   */


  getHierarchyName() {
    let result = "";

    for (let parent = this; parent; parent = parent.supercommand) {
      if (result.length) result = " " + result;
      result = parent.getName() + result;
    }

    return result;
  }
  /**
   * Getter for command usage
   * @returns command usage
   */


  getUsage() {
    if (this.subcommands.length) {
      return this.getHierarchyName() + " <" + this.subcommands.map(a => a.getName()).join("|") + ">";
    }

    return this.getHierarchyName();
  }
  /**
   * Indicates if command should be called from a room only.
   * If user tries to call this command from outside the room,
   * localized error will be logged.
   * @returns `true` if command should be called from the room, `false` otherwise.
   */


  requiresRoom() {
    return false;
  }
  /**
   * @returns {string} large help text with usage, flags, and all the stuff user might be searching for
   */


  getHelp() {
    let result = "Использование: " + this.getUsage();

    if (this.subcommands.length) {
      result += "\n";
      let commandUsages = this.subcommands.map(a => " - " + a.getUsage());
      let length = commandUsages.reduce((a, b) => Math.max(a, b.length), 0);
      let i = 0;

      for (let command of this.subcommands) {
        let usage = commandUsages[i++];
        let description = command.getDescription();

        if (description) {
          result += usage + (0, _stringrepeat.default)(" ", length - usage.length) + " - " + description + "\n";
        } else {
          result += usage + "\n";
        }
      }
    }

    if (this.flags.length) {
      result += "\n\nФлаги:\n";
      let flagUsages = this.flags.map(flag => {
        let usage = " -" + flag.name;

        if (flag.aliases.length) {
          usage += " (-" + flag.aliases.join(", -") + ")";
        }

        return usage;
      });
      let length = flagUsages.reduce((a, b) => Math.max(a, b.length), 0);
      let i = 0;

      for (let flag of this.flags) {
        let usage = flagUsages[i++];

        if (flag.description) {
          result += usage + (0, _stringrepeat.default)(" ", length - usage.length) + " - " + flag.description + "\n";
        } else {
          result += usage + "\n";
        }
      }
    }

    return result;
  }

}

var _default = Command;
exports.default = _default;

},{"../../utils/stringrepeat":129,"@babel/runtime/helpers/interopRequireDefault":1}],59:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * Console command flag.
 * @example
 *
 *  // The following configuration will match
 *  // "-n" flag in command:
 *  // room create empty -n "Empty Room"
 *
 *  new CommandFlag({
 *      type: "key",
 *      name: "name",
 *      aliases: ["n"],
 *      description: "Room name"
 *  })
 */
class CommandFlag {
  /**
   * Flag type.
   * @type {"flag"|"key"}
   */

  /**
   * This flag name
   * @type {string}
   */

  /**
   * Aliases for this flag (like -a for -all)
   * @type {string[]}
   */

  /**
   * Human-readable description of this flag. Displayed in 'help' command
   * @type {string|null}
   */

  /**
   * @param {Object} options
   * @param {"flag"|"key"} options.type Type of flag
   * @param {string} options.name Flag name
   * @param {string[]} [options.aliases] Flag aliases
   * @param {string} [options.description] Human-readable description of this flag for console help command
   */
  constructor(options) {
    this.type = void 0;
    this.name = void 0;
    this.aliases = [];
    this.description = void 0;
    this.type = options.type || "flag";
    this.name = options.name;
    this.aliases = options.aliases || [];
    this.description = options.description;
  }

}

var _default = CommandFlag;
exports.default = _default;

},{}],60:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _command = _interopRequireDefault(require("../command"));

var _bot = _interopRequireDefault(require("../../ai/bot"));

class AICommand extends _command.default {
  constructor(...args) {
    super(...args);
    this.observingRoom = void 0;
  }

  onPerform(args) {
    let logger = this.console.logger;

    if (args.length < 1) {
      logger.log("Использование: " + this.getUsage());
      return;
    }

    let action = args[0];

    if (action === "create") {
      const nick = args[1] || "BOT";
      const client = new _bot.default();
      client.server = this.console.server;
      client.nick = nick;
      client.connectToRoom(this.console.observingRoom);
    } else if (action === "list") {
      let botList = [];

      for (let client of this.observingRoom.clients.values()) {
        if (client instanceof _bot.default) {
          botList.push(client);
        }
      }

      for (let bot of botList) {
        logger.log(`#${bot.id}: ${bot.nick}`);
      }
    } else if (action === "remove") {
      if (args[1] === "all") {
        for (let client of this.observingRoom.clients.values()) {
          if (client.isBot) {
            client.connection.close();
          }
        }

        return;
      }

      let target = Number(args[1]);

      if (target === undefined || Number.isNaN(target)) {
        logger.log("Использование: ai remove <id>");
        return;
      }

      let client = this.console.observingRoom.clients.get(target);

      if (client) {
        if (client instanceof _bot.default) {
          client.connection.close();
        } else {
          logger.log(`Клиент #${client.id} не является ботом`);
          logger.log(`Чтобы удалить игрока с карты, используйте команду kick`);
        }
      } else {
        logger.log(`Бота #${target} не существует`);
      }
    } else if (action === "enable") {} else {
      logger.log("Использование: " + this.getUsage());
    }
  }

  onTabComplete(args) {
    return super.onTabComplete(args);
  }

  getDescription() {
    return "Управление AI";
  }

  getName() {
    return "ai";
  }

  getUsage() {
    return "ai <create|remove|list|save|screenshot> [ник]";
  }

  requiresRoom() {
    return true;
  }

}

var _default = AICommand;
exports.default = _default;

},{"../../ai/bot":56,"../command":58,"@babel/runtime/helpers/interopRequireDefault":1}],61:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _command = _interopRequireDefault(require("../command"));

class BanIPCommand extends _command.default {
  constructor(...args) {
    super(...args);
    this.logger = void 0;
    this.server = void 0;
  }

  onPerform(args) {
    if (args.length < 1) {
      this.logger.log("Использование: " + this.getUsage());
      return;
    }

    const name = args.join(" ");
    let kicked = false;

    for (let c of this.server.clients.values()) {
      if (c.data.player && c.data.player.nick.trim() === name) {
        c.connection.close(1000, "Администратор внёс Ваш ip в бан-лист");
        const ip = c.connection._socket.remoteAddress;
        this.server.banned.push(ip);
        this.logger.log(" - Забанен игрок #" + c.id + " с ником " + name + " и ip " + ip);
        kicked = true;
      }
    }

    if (!kicked) {
      this.logger.log("Не найдено игрока (игроков) с ником " + name);
    }
  }

  onTabComplete(args) {
    super.onTabComplete(args);
  }

  getDescription() {
    return "Забанить игрока по айпи (до перезагрузки сервера)";
  }

  getName() {
    return "banip";
  }

  getUsage() {
    return "banip <nick>";
  }

  requiresRoom() {
    return true;
  }

}

var _default = BanIPCommand;
exports.default = _default;

},{"../command":58,"@babel/runtime/helpers/interopRequireDefault":1}],62:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _command = _interopRequireDefault(require("../command"));

class ExitCommand extends _command.default {
  onPerform() {
    // if(this.console.currentLogger !== this.console.server.logger) {
    // 	this.console.render()
    // 	return
    // }
    this.console.server.terminate();
    process.exit(0);
  }

  getName() {
    return "exit";
  }

  getDescription() {
    return "Выйти из комнаты / закрыть сервер";
  }

  getUsage() {
    return "exit";
  }

}

var _default = ExitCommand;
exports.default = _default;

},{"../command":58,"@babel/runtime/helpers/interopRequireDefault":1}],63:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _command = _interopRequireDefault(require("../command"));

var _worldexplodeeffectmodel = _interopRequireDefault(require("/Users/Temich/PycharmProjects/tanks/src/effects/world/explode/worldexplodeeffectmodel"));

var _serverworldeffect = _interopRequireDefault(require("/Users/Temich/PycharmProjects/tanks/src/server/effects/world/serverworldeffect"));

class ExplodeCommand extends _command.default {
  constructor(options) {
    super(options);
    this.defaultPower = void 0;
    this.defaultPower = 4;
  }

  onPerform(args) {
    let logger = this.console.logger;

    if (args.length < 2) {
      logger.log(this.getHelp());
      return;
    }

    let x = Number(args[0]);
    let y = Number(args[1]);
    let power = args.length > 2 ? Number(args[2]) : this.defaultPower;

    if (!Number.isFinite(x)) {
      logger.log("'" + args[0] + "' is not a number");
      return;
    }

    if (!Number.isFinite(y)) {
      logger.log("'" + args[1] + "' is not a number");
      return;
    }

    if (!Number.isFinite(power)) {
      logger.log("'" + args[2] + "' is not a number");
      return;
    }

    let world = this.console.observingRoom.world;
    let effect = new _worldexplodeeffectmodel.default({
      x: x,
      y: y,
      power: power
    });

    let serverEffect = _serverworldeffect.default.fromModel(effect, world);

    world.addEffect(serverEffect);
  }

  getName() {
    return "explode";
  }

  getDescription() {
    return "Expode map point";
  }

  getUsage() {
    return `explode <x> <y> [power=${this.defaultPower}]`;
  }

  requiresRoom() {
    return true;
  }

}

var _default = ExplodeCommand;
exports.default = _default;

},{"../command":58,"/Users/Temich/PycharmProjects/tanks/src/effects/world/explode/worldexplodeeffectmodel":35,"/Users/Temich/PycharmProjects/tanks/src/server/effects/world/serverworldeffect":102,"@babel/runtime/helpers/interopRequireDefault":1}],64:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _command = _interopRequireDefault(require("../command"));

var _chalk = _interopRequireDefault(require("chalk"));

class HelpCommand extends _command.default {
  onPerform(args) {
    let logger = this.console.logger;
    logger.log(_chalk.default.bold("Команды:"));
    let length = 0;

    for (let command of this.console.commands.values()) {
      let usage = command.getUsage() || command;

      if (length < usage.length) {
        length = usage.length;
      }
    }

    let dash = _chalk.default.gray(" - ");

    for (let command of this.console.commands.values()) {
      let str = " " + (command.getUsage() || command);

      for (let i = str.length; i <= length; i++) {
        str += " ";
      }

      let desc = command.getDescription() || "Нет описания";
      logger.log(str + dash + desc);
    }
  }

  getName() {
    return "help";
  }

  getDescription() {
    return "Помощь";
  }

  getUsage() {
    return "help";
  }

}

var _default = HelpCommand;
exports.default = _default;

},{"../command":58,"@babel/runtime/helpers/interopRequireDefault":1,"chalk":"chalk"}],65:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _command = _interopRequireDefault(require("../command"));

class KickCommand extends _command.default {
  constructor(...args) {
    super(...args);
    this.logger = void 0;
    this.server = void 0;
  }

  onPerform(args) {
    if (args.length < 1) {
      this.logger.log("Использование: " + this.getUsage());
      return;
    }

    const name = args.join(" ");
    let kicked = false;

    for (let c of this.server.clients.values()) {
      if (c.data.player && c.data.player.nick.trim() === name) {
        c.connection.close(1000, "Вас кикнули");
        this.logger.log(" - Кикнут игрок #" + c.id + " с ником " + name);
        kicked = true;
      }
    }

    if (!kicked) {
      this.logger.log("Не найдено игрока (игроков) с ником " + name);
    }
  }

  onTabComplete(args) {
    super.onTabComplete(args);
  }

  getDescription() {
    return "Кикнуть клиента";
  }

  getName() {
    return "kick";
  }

  getUsage() {
    return "kick <nick>";
  }

  requiresRoom() {
    return true;
  }

}

var _default = KickCommand;
exports.default = _default;

},{"../command":58,"@babel/runtime/helpers/interopRequireDefault":1}],66:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _command = _interopRequireDefault(require("../../command"));

var _roomcreate = _interopRequireDefault(require("./roomcreate"));

var _roomlist = _interopRequireDefault(require("./roomlist"));

var _roomview = _interopRequireDefault(require("./roomview"));

class RoomCommand extends _command.default {
  constructor(options) {
    super(options);
    this.addSubcommand(new _roomcreate.default(options));
    this.addSubcommand(new _roomlist.default(options));
    this.addSubcommand(new _roomview.default(options));
  }

  getDescription() {
    return "Управление игровыми комнатами";
  }

  getName() {
    return "room";
  }

}

var _default = RoomCommand;
exports.default = _default;

},{"../../command":58,"./roomcreate":67,"./roomlist":68,"./roomview":69,"@babel/runtime/helpers/interopRequireDefault":1}],67:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _command = _interopRequireDefault(require("../../command"));

var _commandflag = _interopRequireDefault(require("../../commandflag"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

__dirname = "/Users/Temich/PycharmProjects/tanks/src/server/commands/types/room";

const mapFolder = _path.default.resolve(__dirname, "../../../maps");

class RoomCreateCommand extends _command.default {
  constructor(options) {
    super(options);
    this.addFlag(new _commandflag.default({
      type: "key",
      name: "name",
      aliases: ["n"],
      description: "Название комнаты"
    }));
    this.addFlag(new _commandflag.default({
      type: "key",
      name: "map",
      aliases: ["m"],
      description: "Путь к файлу с картой (обязательно)"
    }));
  }

  onPerform(args) {
    let logger = this.console.logger;

    if (!this.console.server.gameSocket) {
      logger.log("§F00;This command requires game socket to be running");
      logger.log("§777; ⭑ §;To manage server modules, use 'service' command");
      return;
    }

    let found = this.findFlags(args);
    this.logFlagErrors(found, logger);
    let flags = found.flags;

    if (!flags.has("map")) {
      logger.log(this.getHelp());
      return;
    }

    let mapName = flags.get("map")[0];
    let gameName = mapName;
    if (flags.has("name")) gameName = flags.get("name")[0];

    if (this.console.server.gameSocket.games.get(gameName)) {
      logger.log(`§F00; Room '" + gameName + "' already exists\n` + `§777; ⭑ §;To control existing room, use 'room view' command\n` + `§777; ⭑ §;To delete existing room, use 'room delete' command`);
      return;
    }

    let mapPath = _path.default.resolve(mapFolder, mapName + ".map");

    if (!_fs.default.existsSync(mapPath)) {
      logger.log("§F00;No such map: '" + mapName + "'");
      return;
    }

    logger.log(`§0F0; Room '${gameName}' has been sucessfully created")\n` + `§777; ⭑ §;To control this room, use 'room view "${gameName}"' command`);
  }

  onTabComplete(args) {
    let found = this.findFlags(args);
    let currentFlag = found.currentFlag;
    if (!currentFlag) return [];

    if (currentFlag.name === "map") {
      let last = args[args.length - 1];
      let mapPath = last.split("/");
      let search = mapFolder;
      let l = mapPath.length - 1;

      for (let i = 0; i < l; i++) {
        search = _path.default.resolve(search, mapPath[i]);
      }

      let unfinished = mapPath[l];

      try {
        let result = [];

        for (let file of _fs.default.readdirSync(search)) {
          if (!file.startsWith(unfinished)) continue;
          let name = file;

          let stats = _fs.default.statSync(_path.default.resolve(search, name));

          let isDirectory = stats.isDirectory();

          if (!isDirectory) {
            if (name.endsWith(".map")) {
              name = name.slice(0, -4);
            } else {
              continue;
            }
          }

          name = _path.default.resolve(search, name);
          if (name.startsWith(mapFolder)) name = _path.default.relative(mapFolder, name);
          result.push(name);
        }

        return result;
      } catch (ignored) {
        return [];
      }
    }

    return [];
  }

  getName() {
    return "create";
  }

  getDescription() {
    return "Создать комнату";
  }

}

var _default = RoomCreateCommand;
exports.default = _default;

},{"../../command":58,"../../commandflag":59,"@babel/runtime/helpers/interopRequireDefault":1,"fs":"fs","path":29}],68:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _command = _interopRequireDefault(require("../../command"));

class RoomListCommand extends _command.default {
  onPerform(args) {
    let logger = this.console.logger;
    let rooms = this.console.server.games;
    let roomCount = rooms.size;

    if (roomCount === 0) {
      logger.log(_chalk.default.redBright("Нет активных комнат\n") + _chalk.default.gray(" ⭑ ") + "Для создания новой комнаты используйте команду room create");
    } else {
      let string = "Активных комнат: " + _chalk.default.cyanBright(roomCount) + "\n";
      let totalOnline = 0;

      let dot = _chalk.default.gray(" • ");

      for (let [id, room] of rooms.entries()) {
        let online = room.clients.size;
        totalOnline += online;
        string += dot + id + ": " + online + " онлайн\n";
      }

      string += "Суммарный онлайн: " + _chalk.default.cyanBright(totalOnline);
      logger.log(string);
    }
  }

  getName() {
    return "list";
  }

  getDescription() {
    return "Отобразить список комнат";
  }

}

var _default = RoomListCommand;
exports.default = _default;

},{"../../command":58,"@babel/runtime/helpers/interopRequireDefault":1,"chalk":"chalk"}],69:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _command = _interopRequireDefault(require("../../command"));

class RoomViewCommand extends _command.default {
  onPerform(args) {
    let logger = this.console.logger;

    if (args.length !== 1) {
      logger.log(this.getHelp());
      return;
    }

    let id = args[0];
    let world = this.console.server.gameSocket.games.get(id);

    if (!world) {
      logger.log("No such room: '" + id);
      return;
    }

    this.console.observingRoom = world;
    this.console.window.setPrompt(id);
    this.console.switchToLogger(world.logger);
    this.console.window.render();
  }

  onTabComplete(args) {
    if (args.length === 1) {
      let result = [];

      for (let game of this.console.server.gameSocket.games.keys()) {
        if (game.startsWith(args[0])) {
          result.push(game);
        }
      }

      return result;
    }

    return [];
  }

  getUsage() {
    return "room view <id>";
  }

  getName() {
    return "view";
  }

  getDescription() {
    return "Switch to room";
  }

}

var _default = RoomViewCommand;
exports.default = _default;

},{"../../command":58,"@babel/runtime/helpers/interopRequireDefault":1}],70:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _command = _interopRequireDefault(require("../command"));

class RunCommand extends _command.default {
  onPerform(args) {
    if (args.length !== 1) {
      this.console.logger.log("Использование: " + this.getUsage());
      return;
    }

    this.console.runScript(args[0], 0);
  }

  onTabComplete(args) {
    return super.onTabComplete(args);
  }

  getName() {
    return "run";
  }

  getUsage() {
    return "run <script name>";
  }

  requiresRoom() {
    return super.requiresRoom();
  }

  getDescription() {
    return "Выполнить скрипт";
  }

}

var _default = RunCommand;
exports.default = _default;

},{"../command":58,"@babel/runtime/helpers/interopRequireDefault":1}],71:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _command = _interopRequireDefault(require("../command"));

var _playerchatpacket = _interopRequireDefault(require("/Users/Temich/PycharmProjects/tanks/src/networking/packets/game-packets/playerchatpacket"));

class SayCommand extends _command.default {
  onPerform(args) {
    let text = args.join(" ");
    let packet = new _playerchatpacket.default(text);
    this.console.observingRoom.broadcast(packet);
    this.console.logger.log(text);
  }

  getName() {
    return "say";
  }

  getDescription() {
    return "Broadcast a message to current room";
  }

  getUsage() {
    return `say <message>`;
  }

  requiresRoom() {
    return true;
  }

}

var _default = SayCommand;
exports.default = _default;

},{"../command":58,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/game-packets/playerchatpacket":44,"@babel/runtime/helpers/interopRequireDefault":1}],72:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _command = _interopRequireDefault(require("../../command"));

class ServiceCommand extends _command.default {
  constructor(options) {
    super(options);
    this.actions = void 0;
    this.actions = new Map([["on", {
      hubPage: true,
      gamePage: true,
      rooms: true
    }], ["hub-only", {
      hubPage: true,
      gamePage: false,
      rooms: false
    }], ["game-only", {
      hubPage: false,
      gamePage: true,
      rooms: true
    }], ["socket-only", {
      hubPage: false,
      gamePage: false,
      rooms: true
    }]]);
  }

  onTabComplete(args) {
    if (args.length > 1) return [];
    let last = args[0];
    return Array.from(this.actions.keys()).filter(a => a.startsWith(last));
  }

  onPerform(args) {
    if (args.length !== 1 || !this.actions.has(args[0])) {
      this.console.logger.log(this.getHelp());
      return;
    }

    let server = this.console.server;
    let config = this.actions.get(args[0]);
    server.setHubPageActive(config.hubPage);
    server.setGamePageActive(config.gamePage);
    server.setGameSocketActive(config.rooms);
  }

  getDescription() {
    return "Switch server operation modes";
  }

  getUsage() {
    return "service <" + Array.from(this.actions.keys()).join("|") + ">";
  }

  getName() {
    return "service";
  }

  getHelp() {
    return super.getHelp() + "\n" + " - service on          - all services are enabled\n" + " - service hub-only    - disallow game rooms and discard \"/game\" page requests\n" + " - service game-only   - discard \"/hub\" page requests\n" + " - service socket-only - disable http server, run as websocket only";
  }

}

var _default = ServiceCommand;
exports.default = _default;

},{"../../command":58,"@babel/runtime/helpers/interopRequireDefault":1}],73:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _command = _interopRequireDefault(require("../command"));

class SetTpsCommand extends _command.default {
  constructor(...args) {
    super(...args);
    this.logger = void 0;
    this.observingRoom = void 0;
  }

  onPerform(args) {
    let tps = Number(args[0]);

    if (!tps) {
      this.logger.log("Usage: " + this.getUsage());
      return;
    }

    if (tps > 1000) tps = 1000;
    if (tps < 1) tps = 1;
    tps = Math.round(tps);
    this.observingRoom.speedupGame(tps / 20);
  }

  onTabComplete(args) {
    super.onTabComplete(args);
  }

  getDescription() {
    return "Установить TPS для текущей комнаты";
  }

  getName() {
    return "settps";
  }

  getUsage() {
    return "settps <tps>";
  }

  requiresRoom() {
    return true;
  }

}

var _default = SetTpsCommand;
exports.default = _default;

},{"../command":58,"@babel/runtime/helpers/interopRequireDefault":1}],74:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _command = _interopRequireDefault(require("../command"));

var _commandflag = _interopRequireDefault(require("../commandflag"));

var _chalk = _interopRequireDefault(require("chalk"));

var _filesize = _interopRequireDefault(require("/Users/Temich/PycharmProjects/tanks/src/utils/fs/filesize"));

class StatusCommand extends _command.default {
  constructor(options) {
    super(options);
    this.groupDepth = void 0;
    this.addFlag(new _commandflag.default({
      type: "flag",
      name: "cpu",
      aliases: [],
      description: "Show CPU usage"
    }));
    this.addFlag(new _commandflag.default({
      type: "flag",
      name: "memory",
      aliases: ["mem"],
      description: "Show memory usage"
    }));
    this.addFlag(new _commandflag.default({
      type: "flag",
      name: "socket",
      aliases: ["sock"],
      description: "Show game socket status"
    }));
    this.addFlag(new _commandflag.default({
      type: "flag",
      name: "webserver",
      aliases: ["ws"],
      description: "Show webserver status"
    }));
    this.addFlag(new _commandflag.default({
      type: "flag",
      name: "cluster-link",
      aliases: ["cl"],
      description: "Show webserver status"
    }));
    this.groupDepth = 0;
  }

  activeText(isActive) {
    return isActive ? StatusCommand.activeText : StatusCommand.inactiveText;
  }

  connectingText(isConnected) {
    return isConnected ? StatusCommand.connectedText : StatusCommand.connectingText;
  }

  printStatus(name, status) {
    let prefix = " - ";

    for (let i = 0; i < this.groupDepth; i++) {
      prefix = "  " + prefix;
    }

    if (status === undefined) {
      this.console.logger.log(prefix + name);
    } else {
      this.console.logger.log(prefix + name + ": " + status);
    }
  }

  printStatusIsActive(name, isActive) {
    this.printStatus(name, this.activeText(isActive));
  }

  formatCPUUsage(server, seconds) {
    let cpuMicroseconds = server.cpuUsageWatcher.getCpuUsage(seconds);
    if (cpuMicroseconds < 0) return "§777;unknown";
    let percentage = (cpuMicroseconds / 1000000 / seconds).toFixed(3);
    let string = percentage + "%";
    if (percentage < 50) string = "§0F0;" + string;else if (percentage < 70) string = "§FF0;" + string;else if (percentage < 90) string = "§F70;" + string;else string = "§F00;" + string;
    return string;
  }

  beginStatusGroup() {
    this.groupDepth++;
  }

  endStatusGroup() {
    this.groupDepth--;
  }

  onPerform(args) {
    let flags = this.findFlags(args);
    this.logFlagErrors(flags, this.console.logger);
    this.printServerStatus(flags.flags);
  }

  printServerStatus(flags) {
    let logger = this.console.logger;
    logger.log("Server status:");
    let noFlags = flags.size === 0;
    if (noFlags || flags.get("cpu")) this.printCPUUtilizationStatus(!noFlags);
    if (noFlags || flags.get("memory")) this.printMemoryUtilizationStatus(!noFlags);
    if (noFlags || flags.get("webserver")) this.printWebserverStatus(!noFlags);
    if (noFlags || flags.get("socket")) this.printGameSocketStatus(!noFlags);
    if (noFlags || flags.get("cluster")) this.printClusterLinkStatus(!noFlags);
  }

  printMemoryUtilizationStatus(detailed) {
    let memoryUsage = process.memoryUsage();

    if (detailed) {
      this.printStatus("memory usage");
      this.beginStatusGroup();
      this.printStatus("RSS", "§0FF;" + (0, _filesize.default)(memoryUsage.rss));
      this.printStatus("Heap used", "§0FF;" + (0, _filesize.default)(memoryUsage.heapUsed));
      this.printStatus("Heap total", "§0FF;" + (0, _filesize.default)(memoryUsage.heapTotal));
      this.printStatus("Array buffers", "§0FF;" + (0, _filesize.default)(memoryUsage.arrayBuffers));
      this.printStatus("External", "§0FF;" + (0, _filesize.default)(memoryUsage.external));
      this.endStatusGroup();
    } else {
      this.printStatus("memory usage", "§0FF;" + (0, _filesize.default)(process.memoryUsage().rss));
    }
  }

  printCPUUtilizationStatus(detailed) {
    let server = this.console.server;

    if (detailed) {
      this.printStatus("cpu usage");
      this.beginStatusGroup();
      this.printStatus("10s", this.formatCPUUsage(server, 10));
      this.printStatus("30s", this.formatCPUUsage(server, 30));
      this.printStatus("1m", this.formatCPUUsage(server, 60));
      this.printStatus("5m", this.formatCPUUsage(server, 300));
      this.printStatus("15m", this.formatCPUUsage(server, 900));
      this.endStatusGroup();
    } else {
      this.printStatus("cpu usage: " + this.formatCPUUsage(server, 10));
    }
  }

  printWebserverStatus() {
    let server = this.console.server;
    let isWebServerActive = server.isWebServerActive();
    this.printStatusIsActive("web server", isWebServerActive);

    if (isWebServerActive) {
      this.beginStatusGroup();
      this.printStatusIsActive("hub page", server.webServer.hubModule.enabled);
      this.printStatusIsActive("game page", server.webServer.gameModule.enabled);
      this.endStatusGroup();
    }
  }

  printGameSocketStatus() {
    let server = this.console.server;
    let isGameSocketActive = server.isGameSocketActive();
    this.printStatusIsActive("game socket", isGameSocketActive);

    if (isGameSocketActive) {
      this.beginStatusGroup();
      this.printStatus("active games", _chalk.default.green(server.gameSocket.games.size));
      let totalPlayers = 0;

      for (let game of server.gameSocket.games.values()) totalPlayers += game.clients.size;

      this.printStatus("total players", _chalk.default.green(totalPlayers));
      this.endStatusGroup();
    }
  }

  printClusterLinkStatus() {
    let server = this.console.server;
    let isClusterClientActive = server.isClusterClientActive();
    let isClusterSocketActive = server.isClusterSocketActive();
    let clusterLinkMode;
    if (isClusterClientActive) clusterLinkMode = StatusCommand.clusterLinkClientText;else if (isClusterSocketActive) clusterLinkMode = StatusCommand.clusterLinkServerText;else clusterLinkMode = StatusCommand.inactiveText;
    this.printStatus("cluster link", clusterLinkMode);
    this.beginStatusGroup();

    if (isClusterSocketActive) {
      this.printStatus("remote servers", _chalk.default.green(server.clusterSocket.clients.size));
    }

    if (isClusterClientActive) {
      this.printStatus("connection status", this.connectingText(server.clusterClient.isOpen()));
    }

    this.endStatusGroup();
  }

  getDescription() {
    return "View current server status";
  }

  getUsage() {
    return `status`;
  }

  getName() {
    return "status";
  }

}

StatusCommand.activeText = "§!0F0;active";
StatusCommand.inactiveText = "§!F00;inactive";
StatusCommand.clusterLinkServerText = "§0FF;server";
StatusCommand.clusterLinkClientText = "§F0F;client";
StatusCommand.connectingText = "§!FF0;connecting";
StatusCommand.connectedText = "§!0F0;connected";
var _default = StatusCommand;
exports.default = _default;

},{"../command":58,"../commandflag":59,"/Users/Temich/PycharmProjects/tanks/src/utils/fs/filesize":128,"@babel/runtime/helpers/interopRequireDefault":1,"chalk":"chalk"}],75:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _command = _interopRequireDefault(require("../command"));

class TPSCommand extends _command.default {
  onPerform(args) {// let logger = this.console.logger
    // let ticks = Number(args[0]) || 20
    //
    // if(ticks > 100) {
    //     ticks = 100
    // }
    // if(ticks < 1) {
    //     ticks = 1
    // }
    // ticks = Math.round(ticks)
    //
    // logger.log(`Подсчет среднего времени выполнения ${ticks} тика(ов)`)
    // this.console.observingRoom.profile(ticks, function(time) {
    //     logger.log(`Среднее время выполнения ${ticks} тика(ов): ${Math.round(time)}ms`)
    // })
  }

  getName() {
    return "tps";
  }

  getDescription() {
    return "Посчитать среднее количество миллисекунд, затраченное на один тик";
  }

  getUsage() {
    return "tps [ticks]";
  }

  requiresRoom() {
    return true;
  }

}

var _default = TPSCommand;
exports.default = _default;

},{"../command":58,"@babel/runtime/helpers/interopRequireDefault":1}],76:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _command = _interopRequireDefault(require("../command"));

class UnbanCommand extends _command.default {
  constructor(...args) {
    super(...args);
    this.server = void 0;
  }

  onPerform(args) {
    let logger = this.console.logger;

    if (args.length !== 1) {
      logger.log("Использование: " + this.getUsage());
      return;
    }

    const ip = args[0];
    const index = this.server.banned.indexOf(ip);

    if (index === -1) {
      logger.log("ip " + ip + " не был забанен");
    } else {
      this.server.banned.splice(index, 1);
      logger.log(" - Разбанен ip " + ip);
    }
  }

  onTabComplete(args) {
    super.onTabComplete(args);
  }

  getDescription() {
    return "Разбанить игрока";
  }

  getName() {
    return "unban";
  }

  getUsage() {
    return "unban <ip>";
  }

  requiresRoom() {
    return false;
  }

}

var _default = UnbanCommand;
exports.default = _default;

},{"../command":58,"@babel/runtime/helpers/interopRequireDefault":1}],77:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class ArgumentParser {
  static parseArguments(line, keepQuotes) {
    let escape = false;
    let quoteSymbol = null;
    let comment = null;
    let argument = "";
    let result = [];

    for (let character of line) {
      if (comment) {
        if (character === "\n") comment = false;
        continue;
      }

      if (escape) {
        argument += character;
      } else {
        if (character === "\\") {
          escape = true;
          continue;
        }

        if (quoteSymbol === null) {
          if (character === "\"" || character === "\'") {
            quoteSymbol = character;
            if (keepQuotes) argument += character;
            continue;
          }
        } else {
          if (character === quoteSymbol) {
            if (keepQuotes) argument += character;
            quoteSymbol = null;
            continue;
          }
        }

        if (character === "#") {
          comment = true;
          continue;
        }

        if (character === " " && !quoteSymbol) {
          if (argument) {
            result.push(argument);
            argument = "";
          }

          continue;
        }
      }

      argument += character;
      escape = false;
    }

    result.push(argument);
    return result;
  }

}

var _default = ArgumentParser;
exports.default = _default;

},{}],78:[function(require,module,exports){
"use strict";

/**
 * alias.js - terminfo/cap aliases for blessed.
 * https://github.com/chjj/blessed
 * Taken from terminfo(5) man page.
 */

/* jshint maxlen: 300 */
// jscs:disable maximumLineLength
// jscs:disable
var alias = exports; // These are the boolean capabilities:

alias.bools = {
  //         Variable                                      Cap-                               TCap                                  Description
  //         Booleans                                      name                               Code
  'auto_left_margin': ['bw', 'bw'],
  //                                cub1 wraps from col‐ umn 0 to last column
  'auto_right_margin': ['am', 'am'],
  //                                terminal has auto‐ matic margins
  'back_color_erase': ['bce', 'ut'],
  //                                screen erased with background color
  'can_change': ['ccc', 'cc'],
  //                                terminal can re- define existing col‐ ors
  'ceol_standout_glitch': ['xhp', 'xs'],
  //                                standout not erased by overwriting (hp)
  'col_addr_glitch': ['xhpa', 'YA'],
  //                                only positive motion for hpa/mhpa caps
  'cpi_changes_res': ['cpix', 'YF'],
  //                                changing character pitch changes reso‐ lution
  'cr_cancels_micro_mode': ['crxm', 'YB'],
  //                                using cr turns off micro mode
  'dest_tabs_magic_smso': ['xt', 'xt'],
  //                                tabs destructive, magic so char (t1061)
  'eat_newline_glitch': ['xenl', 'xn'],
  //                                newline ignored after 80 cols (con‐ cept)
  'erase_overstrike': ['eo', 'eo'],
  //                                can erase over‐ strikes with a blank
  'generic_type': ['gn', 'gn'],
  //                                generic line type
  'hard_copy': ['hc', 'hc'],
  //                                hardcopy terminal
  'hard_cursor': ['chts', 'HC'],
  //                                cursor is hard to see
  'has_meta_key': ['km', 'km'],
  //                                Has a meta key (i.e., sets 8th-bit)
  'has_print_wheel': ['daisy', 'YC'],
  //                                printer needs opera‐ tor to change char‐ acter set
  'has_status_line': ['hs', 'hs'],
  //                                has extra status line
  'hue_lightness_saturation': ['hls', 'hl'],
  //                                terminal uses only HLS color notation (Tektronix)
  'insert_null_glitch': ['in', 'in'],
  //                                insert mode distin‐ guishes nulls
  'lpi_changes_res': ['lpix', 'YG'],
  //                                changing line pitch changes resolution
  'memory_above': ['da', 'da'],
  //                                display may be retained above the screen
  'memory_below': ['db', 'db'],
  //                                display may be retained below the screen
  'move_insert_mode': ['mir', 'mi'],
  //                                safe to move while in insert mode
  'move_standout_mode': ['msgr', 'ms'],
  //                                safe to move while in standout mode
  'needs_xon_xoff': ['nxon', 'nx'],
  //                                padding will not work, xon/xoff required
  'no_esc_ctlc': ['xsb', 'xb'],
  //                                beehive (f1=escape, f2=ctrl C)
  'no_pad_char': ['npc', 'NP'],
  //                                pad character does not exist
  'non_dest_scroll_region': ['ndscr', 'ND'],
  //                                scrolling region is non-destructive
  'non_rev_rmcup': ['nrrmc', 'NR'],
  //                                smcup does not reverse rmcup
  'over_strike': ['os', 'os'],
  //                                terminal can over‐ strike
  'prtr_silent': ['mc5i', '5i'],
  //                                printer will not echo on screen
  'row_addr_glitch': ['xvpa', 'YD'],
  //                                only positive motion for vpa/mvpa caps
  'semi_auto_right_margin': ['sam', 'YE'],
  //                                printing in last column causes cr
  'status_line_esc_ok': ['eslok', 'es'],
  //                                escape can be used on the status line
  'tilde_glitch': ['hz', 'hz'],
  //                                cannot print ~'s (hazeltine)
  'transparent_underline': ['ul', 'ul'],
  //                                underline character overstrikes
  'xon_xoff': ['xon', 'xo'] //                                terminal uses xon/xoff handshaking

}; // These are the numeric capabilities:

alias.numbers = {
  //         Variable                                      Cap-                               TCap                                  Description
  //          Numeric                                      name                               Code
  'columns': ['cols', 'co'],
  //                                number of columns in a line
  'init_tabs': ['it', 'it'],
  //                                tabs initially every # spaces
  'label_height': ['lh', 'lh'],
  //                                rows in each label
  'label_width': ['lw', 'lw'],
  //                                columns in each label
  'lines': ['lines', 'li'],
  //                                number of lines on screen or page
  'lines_of_memory': ['lm', 'lm'],
  //                                lines of memory if > line. 0 means varies
  'magic_cookie_glitch': ['xmc', 'sg'],
  //                                number of blank characters left by smso or rmso
  'max_attributes': ['ma', 'ma'],
  //                                maximum combined attributes terminal can handle
  'max_colors': ['colors', 'Co'],
  //                                maximum number of colors on screen
  'max_pairs': ['pairs', 'pa'],
  //                                maximum number of color-pairs on the screen
  'maximum_windows': ['wnum', 'MW'],
  //                                maximum number of defineable windows
  'no_color_video': ['ncv', 'NC'],
  //                                video attributes that cannot be used with colors
  'num_labels': ['nlab', 'Nl'],
  //                                number of labels on screen
  'padding_baud_rate': ['pb', 'pb'],
  //                                lowest baud rate where padding needed
  'virtual_terminal': ['vt', 'vt'],
  //                                virtual terminal number (CB/unix)
  'width_status_line': ['wsl', 'ws'],
  //                                number of columns in status line
  // The  following  numeric  capabilities  are present in the SVr4.0 term structure, but are not yet documented in the man page.  They came in with
  // SVr4's printer support.
  //         Variable                                      Cap-                               TCap                                  Description
  //          Numeric                                      name                               Code
  'bit_image_entwining': ['bitwin', 'Yo'],
  //                                number of passes for each bit-image row
  'bit_image_type': ['bitype', 'Yp'],
  //                                type of bit-image device
  'buffer_capacity': ['bufsz', 'Ya'],
  //                                numbers of bytes buffered before printing
  'buttons': ['btns', 'BT'],
  //                                number of buttons on mouse
  'dot_horz_spacing': ['spinh', 'Yc'],
  //                                spacing of dots hor‐ izontally in dots per inch
  'dot_vert_spacing': ['spinv', 'Yb'],
  //                                spacing of pins ver‐ tically in pins per inch
  'max_micro_address': ['maddr', 'Yd'],
  //                                maximum value in micro_..._address
  'max_micro_jump': ['mjump', 'Ye'],
  //                                maximum value in parm_..._micro
  'micro_col_size': ['mcs', 'Yf'],
  //                                character step size when in micro mode
  'micro_line_size': ['mls', 'Yg'],
  //                                line step size when in micro mode
  'number_of_pins': ['npins', 'Yh'],
  //                                numbers of pins in print-head
  'output_res_char': ['orc', 'Yi'],
  //                                horizontal resolu‐ tion in units per line
  'output_res_horz_inch': ['orhi', 'Yk'],
  //                                horizontal resolu‐ tion in units per inch
  'output_res_line': ['orl', 'Yj'],
  //                                vertical resolution in units per line
  'output_res_vert_inch': ['orvi', 'Yl'],
  //                                vertical resolution in units per inch
  'print_rate': ['cps', 'Ym'],
  //                                print rate in char‐ acters per second
  'wide_char_size': ['widcs', 'Yn'] //                                character step size when in double wide mode

}; // These are the string capabilities:

alias.strings = {
  //         Variable                                    Cap-                             TCap                                   Description
  //          String                                     name                             Code
  'acs_chars': ['acsc', 'ac'],
  //                              graphics charset pairs, based on vt100
  'back_tab': ['cbt', 'bt'],
  //                              back tab (P)
  'bell': ['bel', 'bl'],
  //                              audible signal (bell) (P)
  'carriage_return': ['cr', 'cr'],
  //                              carriage return (P*) (P*)
  'change_char_pitch': ['cpi', 'ZA'],
  //                              Change number of characters per inch to #1
  'change_line_pitch': ['lpi', 'ZB'],
  //                              Change number of lines per inch to #1
  'change_res_horz': ['chr', 'ZC'],
  //                              Change horizontal resolution to #1
  'change_res_vert': ['cvr', 'ZD'],
  //                              Change vertical res‐ olution to #1
  'change_scroll_region': ['csr', 'cs'],
  //                              change region to line #1 to line #2 (P)
  'char_padding': ['rmp', 'rP'],
  //                              like ip but when in insert mode
  'clear_all_tabs': ['tbc', 'ct'],
  //                              clear all tab stops (P)
  'clear_margins': ['mgc', 'MC'],
  //                              clear right and left soft margins
  'clear_screen': ['clear', 'cl'],
  //                              clear screen and home cursor (P*)
  'clr_bol': ['el1', 'cb'],
  //                              Clear to beginning of line
  'clr_eol': ['el', 'ce'],
  //                              clear to end of line (P)
  'clr_eos': ['ed', 'cd'],
  //                              clear to end of screen (P*)
  'column_address': ['hpa', 'ch'],
  //                              horizontal position #1, absolute (P)
  'command_character': ['cmdch', 'CC'],
  //                              terminal settable cmd character in prototype !?
  'create_window': ['cwin', 'CW'],
  //                              define a window #1 from #2,#3 to #4,#5
  'cursor_address': ['cup', 'cm'],
  //                              move to row #1 col‐ umns #2
  'cursor_down': ['cud1', 'do'],
  //                              down one line
  'cursor_home': ['home', 'ho'],
  //                              home cursor (if no cup)
  'cursor_invisible': ['civis', 'vi'],
  //                              make cursor invisi‐ ble
  'cursor_left': ['cub1', 'le'],
  //                              move left one space
  'cursor_mem_address': ['mrcup', 'CM'],
  //                              memory relative cur‐ sor addressing, move to row #1 columns #2
  'cursor_normal': ['cnorm', 've'],
  //                              make cursor appear normal (undo civis/cvvis)
  'cursor_right': ['cuf1', 'nd'],
  //                              non-destructive space (move right one space)
  'cursor_to_ll': ['ll', 'll'],
  //                              last line, first column (if no cup)
  'cursor_up': ['cuu1', 'up'],
  //                              up one line
  'cursor_visible': ['cvvis', 'vs'],
  //                              make cursor very visible
  'define_char': ['defc', 'ZE'],
  //                              Define a character #1, #2 dots wide, descender #3
  'delete_character': ['dch1', 'dc'],
  //                              delete character (P*)
  'delete_line': ['dl1', 'dl'],
  //                              delete line (P*)
  'dial_phone': ['dial', 'DI'],
  //                              dial number #1
  'dis_status_line': ['dsl', 'ds'],
  //                              disable status line
  'display_clock': ['dclk', 'DK'],
  //                              display clock
  'down_half_line': ['hd', 'hd'],
  //                              half a line down
  'ena_acs': ['enacs', 'eA'],
  //                              enable alternate char set
  'enter_alt_charset_mode': ['smacs', 'as'],
  //                              start alternate character set (P)
  'enter_am_mode': ['smam', 'SA'],
  //                              turn on automatic margins
  'enter_blink_mode': ['blink', 'mb'],
  //                              turn on blinking
  'enter_bold_mode': ['bold', 'md'],
  //                              turn on bold (extra bright) mode
  'enter_ca_mode': ['smcup', 'ti'],
  //                              string to start pro‐ grams using cup
  'enter_delete_mode': ['smdc', 'dm'],
  //                              enter delete mode
  'enter_dim_mode': ['dim', 'mh'],
  //                              turn on half-bright mode
  'enter_doublewide_mode': ['swidm', 'ZF'],
  //                              Enter double-wide mode
  'enter_draft_quality': ['sdrfq', 'ZG'],
  //                              Enter draft-quality mode
  'enter_insert_mode': ['smir', 'im'],
  //                              enter insert mode
  'enter_italics_mode': ['sitm', 'ZH'],
  //                              Enter italic mode
  'enter_leftward_mode': ['slm', 'ZI'],
  //                              Start leftward car‐ riage motion
  'enter_micro_mode': ['smicm', 'ZJ'],
  //                              Start micro-motion mode
  'enter_near_letter_quality': ['snlq', 'ZK'],
  //                              Enter NLQ mode
  'enter_normal_quality': ['snrmq', 'ZL'],
  //                              Enter normal-quality mode
  'enter_protected_mode': ['prot', 'mp'],
  //                              turn on protected mode
  'enter_reverse_mode': ['rev', 'mr'],
  //                              turn on reverse video mode
  'enter_secure_mode': ['invis', 'mk'],
  //                              turn on blank mode (characters invisi‐ ble)
  'enter_shadow_mode': ['sshm', 'ZM'],
  //                              Enter shadow-print mode
  'enter_standout_mode': ['smso', 'so'],
  //                              begin standout mode
  'enter_subscript_mode': ['ssubm', 'ZN'],
  //                              Enter subscript mode
  'enter_superscript_mode': ['ssupm', 'ZO'],
  //                              Enter superscript mode
  'enter_underline_mode': ['smul', 'us'],
  //                              begin underline mode
  'enter_upward_mode': ['sum', 'ZP'],
  //                              Start upward car‐ riage motion
  'enter_xon_mode': ['smxon', 'SX'],
  //                              turn on xon/xoff handshaking
  'erase_chars': ['ech', 'ec'],
  //                              erase #1 characters (P)
  'exit_alt_charset_mode': ['rmacs', 'ae'],
  //                              end alternate char‐ acter set (P)
  'exit_am_mode': ['rmam', 'RA'],
  //                              turn off automatic margins
  'exit_attribute_mode': ['sgr0', 'me'],
  //                              turn off all attributes
  'exit_ca_mode': ['rmcup', 'te'],
  //                              strings to end pro‐ grams using cup
  'exit_delete_mode': ['rmdc', 'ed'],
  //                              end delete mode
  'exit_doublewide_mode': ['rwidm', 'ZQ'],
  //                              End double-wide mode
  'exit_insert_mode': ['rmir', 'ei'],
  //                              exit insert mode
  'exit_italics_mode': ['ritm', 'ZR'],
  //                              End italic mode
  'exit_leftward_mode': ['rlm', 'ZS'],
  //                              End left-motion mode
  'exit_micro_mode': ['rmicm', 'ZT'],
  //                              End micro-motion mode
  'exit_shadow_mode': ['rshm', 'ZU'],
  //                              End shadow-print mode
  'exit_standout_mode': ['rmso', 'se'],
  //                              exit standout mode
  'exit_subscript_mode': ['rsubm', 'ZV'],
  //                              End subscript mode
  'exit_superscript_mode': ['rsupm', 'ZW'],
  //                              End superscript mode
  'exit_underline_mode': ['rmul', 'ue'],
  //                              exit underline mode
  'exit_upward_mode': ['rum', 'ZX'],
  //                              End reverse charac‐ ter motion
  'exit_xon_mode': ['rmxon', 'RX'],
  //                              turn off xon/xoff handshaking
  'fixed_pause': ['pause', 'PA'],
  //                              pause for 2-3 sec‐ onds
  'flash_hook': ['hook', 'fh'],
  //                              flash switch hook
  'flash_screen': ['flash', 'vb'],
  //                              visible bell (may not move cursor)
  'form_feed': ['ff', 'ff'],
  //                              hardcopy terminal page eject (P*)
  'from_status_line': ['fsl', 'fs'],
  //                              return from status line
  'goto_window': ['wingo', 'WG'],
  //                              go to window #1
  'hangup': ['hup', 'HU'],
  //                              hang-up phone
  'init_1string': ['is1', 'i1'],
  //                              initialization string
  'init_2string': ['is2', 'is'],
  //                              initialization string
  'init_3string': ['is3', 'i3'],
  //                              initialization string
  'init_file': ['if', 'if'],
  //                              name of initializa‐ tion file
  'init_prog': ['iprog', 'iP'],
  //                              path name of program for initialization
  'initialize_color': ['initc', 'Ic'],
  //                              initialize color #1 to (#2,#3,#4)
  'initialize_pair': ['initp', 'Ip'],
  //                              Initialize color pair #1 to fg=(#2,#3,#4), bg=(#5,#6,#7)
  'insert_character': ['ich1', 'ic'],
  //                              insert character (P)
  'insert_line': ['il1', 'al'],
  //                              insert line (P*)
  'insert_padding': ['ip', 'ip'],
  //                              insert padding after inserted character
  'key_a1': ['ka1', 'K1'],
  //                              upper left of keypad
  'key_a3': ['ka3', 'K3'],
  //                              upper right of key‐ pad
  'key_b2': ['kb2', 'K2'],
  //                              center of keypad
  'key_backspace': ['kbs', 'kb'],
  //                              backspace key
  'key_beg': ['kbeg', '@1'],
  //                              begin key
  'key_btab': ['kcbt', 'kB'],
  //                              back-tab key
  'key_c1': ['kc1', 'K4'],
  //                              lower left of keypad
  'key_c3': ['kc3', 'K5'],
  //                              lower right of key‐ pad
  'key_cancel': ['kcan', '@2'],
  //                              cancel key
  'key_catab': ['ktbc', 'ka'],
  //                              clear-all-tabs key
  'key_clear': ['kclr', 'kC'],
  //                              clear-screen or erase key
  'key_close': ['kclo', '@3'],
  //                              close key
  'key_command': ['kcmd', '@4'],
  //                              command key
  'key_copy': ['kcpy', '@5'],
  //                              copy key
  'key_create': ['kcrt', '@6'],
  //                              create key
  'key_ctab': ['kctab', 'kt'],
  //                              clear-tab key
  'key_dc': ['kdch1', 'kD'],
  //                              delete-character key
  'key_dl': ['kdl1', 'kL'],
  //                              delete-line key
  'key_down': ['kcud1', 'kd'],
  //                              down-arrow key
  'key_eic': ['krmir', 'kM'],
  //                              sent by rmir or smir in insert mode
  'key_end': ['kend', '@7'],
  //                              end key
  'key_enter': ['kent', '@8'],
  //                              enter/send key
  'key_eol': ['kel', 'kE'],
  //                              clear-to-end-of-line key
  'key_eos': ['ked', 'kS'],
  //                              clear-to-end-of- screen key
  'key_exit': ['kext', '@9'],
  //                              exit key
  'key_f0': ['kf0', 'k0'],
  //                              F0 function key
  'key_f1': ['kf1', 'k1'],
  //                              F1 function key
  'key_f10': ['kf10', 'k;'],
  //                              F10 function key
  'key_f11': ['kf11', 'F1'],
  //                              F11 function key
  'key_f12': ['kf12', 'F2'],
  //                              F12 function key
  'key_f13': ['kf13', 'F3'],
  //                              F13 function key
  'key_f14': ['kf14', 'F4'],
  //                              F14 function key
  'key_f15': ['kf15', 'F5'],
  //                              F15 function key
  'key_f16': ['kf16', 'F6'],
  //                              F16 function key
  'key_f17': ['kf17', 'F7'],
  //                              F17 function key
  'key_f18': ['kf18', 'F8'],
  //                              F18 function key
  'key_f19': ['kf19', 'F9'],
  //                              F19 function key
  'key_f2': ['kf2', 'k2'],
  //                              F2 function key
  'key_f20': ['kf20', 'FA'],
  //                              F20 function key
  'key_f21': ['kf21', 'FB'],
  //                              F21 function key
  'key_f22': ['kf22', 'FC'],
  //                              F22 function key
  'key_f23': ['kf23', 'FD'],
  //                              F23 function key
  'key_f24': ['kf24', 'FE'],
  //                              F24 function key
  'key_f25': ['kf25', 'FF'],
  //                              F25 function key
  'key_f26': ['kf26', 'FG'],
  //                              F26 function key
  'key_f27': ['kf27', 'FH'],
  //                              F27 function key
  'key_f28': ['kf28', 'FI'],
  //                              F28 function key
  'key_f29': ['kf29', 'FJ'],
  //                              F29 function key
  'key_f3': ['kf3', 'k3'],
  //                              F3 function key
  'key_f30': ['kf30', 'FK'],
  //                              F30 function key
  'key_f31': ['kf31', 'FL'],
  //                              F31 function key
  'key_f32': ['kf32', 'FM'],
  //                              F32 function key
  'key_f33': ['kf33', 'FN'],
  //                              F33 function key
  'key_f34': ['kf34', 'FO'],
  //                              F34 function key
  'key_f35': ['kf35', 'FP'],
  //                              F35 function key
  'key_f36': ['kf36', 'FQ'],
  //                              F36 function key
  'key_f37': ['kf37', 'FR'],
  //                              F37 function key
  'key_f38': ['kf38', 'FS'],
  //                              F38 function key
  'key_f39': ['kf39', 'FT'],
  //                              F39 function key
  'key_f4': ['kf4', 'k4'],
  //                              F4 function key
  'key_f40': ['kf40', 'FU'],
  //                              F40 function key
  'key_f41': ['kf41', 'FV'],
  //                              F41 function key
  'key_f42': ['kf42', 'FW'],
  //                              F42 function key
  'key_f43': ['kf43', 'FX'],
  //                              F43 function key
  'key_f44': ['kf44', 'FY'],
  //                              F44 function key
  'key_f45': ['kf45', 'FZ'],
  //                              F45 function key
  'key_f46': ['kf46', 'Fa'],
  //                              F46 function key
  'key_f47': ['kf47', 'Fb'],
  //                              F47 function key
  'key_f48': ['kf48', 'Fc'],
  //                              F48 function key
  'key_f49': ['kf49', 'Fd'],
  //                              F49 function key
  'key_f5': ['kf5', 'k5'],
  //                              F5 function key
  'key_f50': ['kf50', 'Fe'],
  //                              F50 function key
  'key_f51': ['kf51', 'Ff'],
  //                              F51 function key
  'key_f52': ['kf52', 'Fg'],
  //                              F52 function key
  'key_f53': ['kf53', 'Fh'],
  //                              F53 function key
  'key_f54': ['kf54', 'Fi'],
  //                              F54 function key
  'key_f55': ['kf55', 'Fj'],
  //                              F55 function key
  'key_f56': ['kf56', 'Fk'],
  //                              F56 function key
  'key_f57': ['kf57', 'Fl'],
  //                              F57 function key
  'key_f58': ['kf58', 'Fm'],
  //                              F58 function key
  'key_f59': ['kf59', 'Fn'],
  //                              F59 function key
  'key_f6': ['kf6', 'k6'],
  //                              F6 function key
  'key_f60': ['kf60', 'Fo'],
  //                              F60 function key
  'key_f61': ['kf61', 'Fp'],
  //                              F61 function key
  'key_f62': ['kf62', 'Fq'],
  //                              F62 function key
  'key_f63': ['kf63', 'Fr'],
  //                              F63 function key
  'key_f7': ['kf7', 'k7'],
  //                              F7 function key
  'key_f8': ['kf8', 'k8'],
  //                              F8 function key
  'key_f9': ['kf9', 'k9'],
  //                              F9 function key
  'key_find': ['kfnd', '@0'],
  //                              find key
  'key_help': ['khlp', '%1'],
  //                              help key
  'key_home': ['khome', 'kh'],
  //                              home key
  'key_ic': ['kich1', 'kI'],
  //                              insert-character key
  'key_il': ['kil1', 'kA'],
  //                              insert-line key
  'key_left': ['kcub1', 'kl'],
  //                              left-arrow key
  'key_ll': ['kll', 'kH'],
  //                              lower-left key (home down)
  'key_mark': ['kmrk', '%2'],
  //                              mark key
  'key_message': ['kmsg', '%3'],
  //                              message key
  'key_move': ['kmov', '%4'],
  //                              move key
  'key_next': ['knxt', '%5'],
  //                              next key
  'key_npage': ['knp', 'kN'],
  //                              next-page key
  'key_open': ['kopn', '%6'],
  //                              open key
  'key_options': ['kopt', '%7'],
  //                              options key
  'key_ppage': ['kpp', 'kP'],
  //                              previous-page key
  'key_previous': ['kprv', '%8'],
  //                              previous key
  'key_print': ['kprt', '%9'],
  //                              print key
  'key_redo': ['krdo', '%0'],
  //                              redo key
  'key_reference': ['kref', '&1'],
  //                              reference key
  'key_refresh': ['krfr', '&2'],
  //                              refresh key
  'key_replace': ['krpl', '&3'],
  //                              replace key
  'key_restart': ['krst', '&4'],
  //                              restart key
  'key_resume': ['kres', '&5'],
  //                              resume key
  'key_right': ['kcuf1', 'kr'],
  //                              right-arrow key
  'key_save': ['ksav', '&6'],
  //                              save key
  'key_sbeg': ['kBEG', '&9'],
  //                              shifted begin key
  'key_scancel': ['kCAN', '&0'],
  //                              shifted cancel key
  'key_scommand': ['kCMD', '*1'],
  //                              shifted command key
  'key_scopy': ['kCPY', '*2'],
  //                              shifted copy key
  'key_screate': ['kCRT', '*3'],
  //                              shifted create key
  'key_sdc': ['kDC', '*4'],
  //                              shifted delete-char‐ acter key
  'key_sdl': ['kDL', '*5'],
  //                              shifted delete-line key
  'key_select': ['kslt', '*6'],
  //                              select key
  'key_send': ['kEND', '*7'],
  //                              shifted end key
  'key_seol': ['kEOL', '*8'],
  //                              shifted clear-to- end-of-line key
  'key_sexit': ['kEXT', '*9'],
  //                              shifted exit key
  'key_sf': ['kind', 'kF'],
  //                              scroll-forward key
  'key_sfind': ['kFND', '*0'],
  //                              shifted find key
  'key_shelp': ['kHLP', '#1'],
  //                              shifted help key
  'key_shome': ['kHOM', '#2'],
  //                              shifted home key
  'key_sic': ['kIC', '#3'],
  //                              shifted insert-char‐ acter key
  'key_sleft': ['kLFT', '#4'],
  //                              shifted left-arrow key
  'key_smessage': ['kMSG', '%a'],
  //                              shifted message key
  'key_smove': ['kMOV', '%b'],
  //                              shifted move key
  'key_snext': ['kNXT', '%c'],
  //                              shifted next key
  'key_soptions': ['kOPT', '%d'],
  //                              shifted options key
  'key_sprevious': ['kPRV', '%e'],
  //                              shifted previous key
  'key_sprint': ['kPRT', '%f'],
  //                              shifted print key
  'key_sr': ['kri', 'kR'],
  //                              scroll-backward key
  'key_sredo': ['kRDO', '%g'],
  //                              shifted redo key
  'key_sreplace': ['kRPL', '%h'],
  //                              shifted replace key
  'key_sright': ['kRIT', '%i'],
  //                              shifted right-arrow key
  'key_srsume': ['kRES', '%j'],
  //                              shifted resume key
  'key_ssave': ['kSAV', '!1'],
  //                              shifted save key
  'key_ssuspend': ['kSPD', '!2'],
  //                              shifted suspend key
  'key_stab': ['khts', 'kT'],
  //                              set-tab key
  'key_sundo': ['kUND', '!3'],
  //                              shifted undo key
  'key_suspend': ['kspd', '&7'],
  //                              suspend key
  'key_undo': ['kund', '&8'],
  //                              undo key
  'key_up': ['kcuu1', 'ku'],
  //                              up-arrow key
  'keypad_local': ['rmkx', 'ke'],
  //                              leave 'key‐ board_transmit' mode
  'keypad_xmit': ['smkx', 'ks'],
  //                              enter 'key‐ board_transmit' mode
  'lab_f0': ['lf0', 'l0'],
  //                              label on function key f0 if not f0
  'lab_f1': ['lf1', 'l1'],
  //                              label on function key f1 if not f1
  'lab_f10': ['lf10', 'la'],
  //                              label on function key f10 if not f10
  'lab_f2': ['lf2', 'l2'],
  //                              label on function key f2 if not f2
  'lab_f3': ['lf3', 'l3'],
  //                              label on function key f3 if not f3
  'lab_f4': ['lf4', 'l4'],
  //                              label on function key f4 if not f4
  'lab_f5': ['lf5', 'l5'],
  //                              label on function key f5 if not f5
  'lab_f6': ['lf6', 'l6'],
  //                              label on function key f6 if not f6
  'lab_f7': ['lf7', 'l7'],
  //                              label on function key f7 if not f7
  'lab_f8': ['lf8', 'l8'],
  //                              label on function key f8 if not f8
  'lab_f9': ['lf9', 'l9'],
  //                              label on function key f9 if not f9
  'label_format': ['fln', 'Lf'],
  //                              label format
  'label_off': ['rmln', 'LF'],
  //                              turn off soft labels
  'label_on': ['smln', 'LO'],
  //                              turn on soft labels
  'meta_off': ['rmm', 'mo'],
  //                              turn off meta mode
  'meta_on': ['smm', 'mm'],
  //                              turn on meta mode (8th-bit on)
  'micro_column_address': ['mhpa', 'ZY'],
  //                              Like column_address in micro mode
  'micro_down': ['mcud1', 'ZZ'],
  //                              Like cursor_down in micro mode
  'micro_left': ['mcub1', 'Za'],
  //                              Like cursor_left in micro mode
  'micro_right': ['mcuf1', 'Zb'],
  //                              Like cursor_right in micro mode
  'micro_row_address': ['mvpa', 'Zc'],
  //                              Like row_address #1 in micro mode
  'micro_up': ['mcuu1', 'Zd'],
  //                              Like cursor_up in micro mode
  'newline': ['nel', 'nw'],
  //                              newline (behave like cr followed by lf)
  'order_of_pins': ['porder', 'Ze'],
  //                              Match software bits to print-head pins
  'orig_colors': ['oc', 'oc'],
  //                              Set all color pairs to the original ones
  'orig_pair': ['op', 'op'],
  //                              Set default pair to its original value
  'pad_char': ['pad', 'pc'],
  //                              padding char (instead of null)
  'parm_dch': ['dch', 'DC'],
  //                              delete #1 characters (P*)
  'parm_delete_line': ['dl', 'DL'],
  //                              delete #1 lines (P*)
  'parm_down_cursor': ['cud', 'DO'],
  //                              down #1 lines (P*)
  'parm_down_micro': ['mcud', 'Zf'],
  //                              Like parm_down_cur‐ sor in micro mode
  'parm_ich': ['ich', 'IC'],
  //                              insert #1 characters (P*)
  'parm_index': ['indn', 'SF'],
  //                              scroll forward #1 lines (P)
  'parm_insert_line': ['il', 'AL'],
  //                              insert #1 lines (P*)
  'parm_left_cursor': ['cub', 'LE'],
  //                              move #1 characters to the left (P)
  'parm_left_micro': ['mcub', 'Zg'],
  //                              Like parm_left_cur‐ sor in micro mode
  'parm_right_cursor': ['cuf', 'RI'],
  //                              move #1 characters to the right (P*)
  'parm_right_micro': ['mcuf', 'Zh'],
  //                              Like parm_right_cur‐ sor in micro mode
  'parm_rindex': ['rin', 'SR'],
  //                              scroll back #1 lines (P)
  'parm_up_cursor': ['cuu', 'UP'],
  //                              up #1 lines (P*)
  'parm_up_micro': ['mcuu', 'Zi'],
  //                              Like parm_up_cursor in micro mode
  'pkey_key': ['pfkey', 'pk'],
  //                              program function key #1 to type string #2
  'pkey_local': ['pfloc', 'pl'],
  //                              program function key #1 to execute string #2
  'pkey_xmit': ['pfx', 'px'],
  //                              program function key #1 to transmit string #2
  'plab_norm': ['pln', 'pn'],
  //                              program label #1 to show string #2
  'print_screen': ['mc0', 'ps'],
  //                              print contents of screen
  'prtr_non': ['mc5p', 'pO'],
  //                              turn on printer for #1 bytes
  'prtr_off': ['mc4', 'pf'],
  //                              turn off printer
  'prtr_on': ['mc5', 'po'],
  //                              turn on printer
  'pulse': ['pulse', 'PU'],
  //                              select pulse dialing
  'quick_dial': ['qdial', 'QD'],
  //                              dial number #1 with‐ out checking
  'remove_clock': ['rmclk', 'RC'],
  //                              remove clock
  'repeat_char': ['rep', 'rp'],
  //                              repeat char #1 #2 times (P*)
  'req_for_input': ['rfi', 'RF'],
  //                              send next input char (for ptys)
  'reset_1string': ['rs1', 'r1'],
  //                              reset string
  'reset_2string': ['rs2', 'r2'],
  //                              reset string
  'reset_3string': ['rs3', 'r3'],
  //                              reset string
  'reset_file': ['rf', 'rf'],
  //                              name of reset file
  'restore_cursor': ['rc', 'rc'],
  //                              restore cursor to position of last save_cursor
  'row_address': ['vpa', 'cv'],
  //                              vertical position #1 absolute (P)
  'save_cursor': ['sc', 'sc'],
  //                              save current cursor position (P)
  'scroll_forward': ['ind', 'sf'],
  //                              scroll text up (P)
  'scroll_reverse': ['ri', 'sr'],
  //                              scroll text down (P)
  'select_char_set': ['scs', 'Zj'],
  //                              Select character set, #1
  'set_attributes': ['sgr', 'sa'],
  //                              define video attributes #1-#9 (PG9)
  'set_background': ['setb', 'Sb'],
  //                              Set background color #1
  'set_bottom_margin': ['smgb', 'Zk'],
  //                              Set bottom margin at current line
  'set_bottom_margin_parm': ['smgbp', 'Zl'],
  //                              Set bottom margin at line #1 or (if smgtp is not given) #2 lines from bottom
  'set_clock': ['sclk', 'SC'],
  //                              set clock, #1 hrs #2 mins #3 secs
  'set_color_pair': ['scp', 'sp'],
  //                              Set current color pair to #1
  'set_foreground': ['setf', 'Sf'],
  //                              Set foreground color #1
  'set_left_margin': ['smgl', 'ML'],
  //                              set left soft margin at current col‐ umn.  See smgl. (ML is not in BSD termcap).
  'set_left_margin_parm': ['smglp', 'Zm'],
  //                              Set left (right) margin at column #1
  'set_right_margin': ['smgr', 'MR'],
  //                              set right soft margin at current column
  'set_right_margin_parm': ['smgrp', 'Zn'],
  //                              Set right margin at column #1
  'set_tab': ['hts', 'st'],
  //                              set a tab in every row, current columns
  'set_top_margin': ['smgt', 'Zo'],
  //                              Set top margin at current line
  'set_top_margin_parm': ['smgtp', 'Zp'],
  //                              Set top (bottom) margin at row #1
  'set_window': ['wind', 'wi'],
  //                              current window is lines #1-#2 cols #3-#4
  'start_bit_image': ['sbim', 'Zq'],
  //                              Start printing bit image graphics
  'start_char_set_def': ['scsd', 'Zr'],
  //                              Start character set defi‐ nition #1, with #2 charac‐ ters in the set
  'stop_bit_image': ['rbim', 'Zs'],
  //                              Stop printing bit image graphics
  'stop_char_set_def': ['rcsd', 'Zt'],
  //                              End definition of charac‐ ter set #1
  'subscript_characters': ['subcs', 'Zu'],
  //                              List of subscriptable characters
  'superscript_characters': ['supcs', 'Zv'],
  //                              List of superscriptable characters
  'tab': ['ht', 'ta'],
  //                              tab to next 8-space hard‐ ware tab stop
  'these_cause_cr': ['docr', 'Zw'],
  //                              Printing any of these characters causes CR
  'to_status_line': ['tsl', 'ts'],
  //                              move to status line, col‐ umn #1
  'tone': ['tone', 'TO'],
  //                              select touch tone dialing
  'underline_char': ['uc', 'uc'],
  //                              underline char and move past it
  'up_half_line': ['hu', 'hu'],
  //                              half a line up
  'user0': ['u0', 'u0'],
  //                              User string #0
  'user1': ['u1', 'u1'],
  //                              User string #1
  'user2': ['u2', 'u2'],
  //                              User string #2
  'user3': ['u3', 'u3'],
  //                              User string #3
  'user4': ['u4', 'u4'],
  //                              User string #4
  'user5': ['u5', 'u5'],
  //                              User string #5
  'user6': ['u6', 'u6'],
  //                              User string #6
  'user7': ['u7', 'u7'],
  //                              User string #7
  'user8': ['u8', 'u8'],
  //                              User string #8
  'user9': ['u9', 'u9'],
  //                              User string #9
  'wait_tone': ['wait', 'WA'],
  //                              wait for dial-tone
  'xoff_character': ['xoffc', 'XF'],
  //                              XOFF character
  'xon_character': ['xonc', 'XN'],
  //                              XON character
  'zero_motion': ['zerom', 'Zx'],
  //                              No motion for subsequent character
  // The following string capabilities are present in the SVr4.0 term structure, but were originally not documented in the man page.
  //         Variable                                      Cap-                                 TCap                                 Description
  //          String                                       name                                 Code
  'alt_scancode_esc': ['scesa', 'S8'],
  //                                Alternate escape for scancode emu‐ lation
  'bit_image_carriage_return': ['bicr', 'Yv'],
  //                                Move to beginning of same row
  'bit_image_newline': ['binel', 'Zz'],
  //                                Move to next row of the bit image
  'bit_image_repeat': ['birep', 'Xy'],
  //                                Repeat bit image cell #1 #2 times
  'char_set_names': ['csnm', 'Zy'],
  //                                Produce #1'th item from list of char‐ acter set names
  'code_set_init': ['csin', 'ci'],
  //                                Init sequence for multiple codesets
  'color_names': ['colornm', 'Yw'],
  //                                Give name for color #1
  'define_bit_image_region': ['defbi', 'Yx'],
  //                                Define rectan‐ gualar bit image region
  'device_type': ['devt', 'dv'],
  //                                Indicate lan‐ guage/codeset sup‐ port
  'display_pc_char': ['dispc', 'S1'],
  //                                Display PC charac‐ ter #1
  'end_bit_image_region': ['endbi', 'Yy'],
  //                                End a bit-image region
  'enter_pc_charset_mode': ['smpch', 'S2'],
  //                                Enter PC character display mode
  'enter_scancode_mode': ['smsc', 'S4'],
  //                                Enter PC scancode mode
  'exit_pc_charset_mode': ['rmpch', 'S3'],
  //                                Exit PC character display mode
  'exit_scancode_mode': ['rmsc', 'S5'],
  //                                Exit PC scancode mode
  'get_mouse': ['getm', 'Gm'],
  //                                Curses should get button events, parameter #1 not documented.
  'key_mouse': ['kmous', 'Km'],
  //                                Mouse event has occurred
  'mouse_info': ['minfo', 'Mi'],
  //                                Mouse status information
  'pc_term_options': ['pctrm', 'S6'],
  //                                PC terminal options
  'pkey_plab': ['pfxl', 'xl'],
  //                                Program function key #1 to type string #2 and show string #3
  'req_mouse_pos': ['reqmp', 'RQ'],
  //                                Request mouse position
  'scancode_escape': ['scesc', 'S7'],
  //                                Escape for scan‐ code emulation
  'set0_des_seq': ['s0ds', 's0'],
  //                                Shift to codeset 0 (EUC set 0, ASCII)
  'set1_des_seq': ['s1ds', 's1'],
  //                                Shift to codeset 1
  'set2_des_seq': ['s2ds', 's2'],
  //                                Shift to codeset 2
  'set3_des_seq': ['s3ds', 's3'],
  //                                Shift to codeset 3
  'set_a_background': ['setab', 'AB'],
  //                                Set background color to #1, using ANSI escape
  'set_a_foreground': ['setaf', 'AF'],
  //                                Set foreground color to #1, using ANSI escape
  'set_color_band': ['setcolor', 'Yz'],
  //                                Change to ribbon color #1
  'set_lr_margin': ['smglr', 'ML'],
  //                                Set both left and right margins to #1, #2.  (ML is not in BSD term‐ cap).
  'set_page_length': ['slines', 'YZ'],
  //                                Set page length to #1 lines
  'set_tb_margin': ['smgtb', 'MT'],
  //                                Sets both top and bottom margins to #1, #2
  // The XSI Curses standard added these.  They are some post-4.1 versions of System V curses, e.g., Solaris 2.5 and IRIX 6.x.  The ncurses termcap
  // names for them are invented; according to the XSI Curses standard, they have no termcap names.  If your compiled terminfo entries  use  these,
  // they may not be binary-compatible with System V terminfo entries after SVr4.1; beware!
  //         Variable                                      Cap-                               TCap                                 Description
  //          String                                       name                               Code
  'enter_horizontal_hl_mode': ['ehhlm', 'Xh'],
  //                               Enter horizontal highlight mode
  'enter_left_hl_mode': ['elhlm', 'Xl'],
  //                               Enter left highlight mode
  'enter_low_hl_mode': ['elohlm', 'Xo'],
  //                               Enter low highlight mode
  'enter_right_hl_mode': ['erhlm', 'Xr'],
  //                               Enter right high‐ light mode
  'enter_top_hl_mode': ['ethlm', 'Xt'],
  //                               Enter top highlight mode
  'enter_vertical_hl_mode': ['evhlm', 'Xv'],
  //                               Enter vertical high‐ light mode
  'set_a_attributes': ['sgr1', 'sA'],
  //                               Define second set of video attributes #1-#6
  'set_pglen_inch': ['slength', 'sL'] //                               YI Set page length to #1 hundredth of an inch

};

},{}],79:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blessed = blessed;
exports.default = void 0;

var _program = _interopRequireDefault(require("./program"));

var _tput = _interopRequireDefault(require("./tput"));

var _widget = _interopRequireDefault(require("./widget"));

var _colors = _interopRequireDefault(require("./colors"));

var _unicode = _interopRequireDefault(require("./unicode"));

var _helpers = _interopRequireDefault(require("./helpers"));

/**
 * blessed - a high-level terminal interface library for node.js
 * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).
 * https://github.com/chjj/blessed
 */

/**
 * Blessed
 */
function blessed() {
  return blessed.program.apply(null, arguments);
}

blessed.program = blessed.Program = _program.default;
blessed.tput = blessed.Tput = _tput.default;
blessed.widget = _widget.default;
blessed.colors = _colors.default;
blessed.unicode = _unicode.default;
blessed.helpers = _helpers.default;
blessed.helpers.sprintf = blessed.tput.sprintf;
blessed.helpers.tryRead = blessed.tput.tryRead;
blessed.helpers.merge(blessed, blessed.helpers);
blessed.helpers.merge(blessed, blessed.widget);
/**
 * Expose
 */

var _default = blessed;
exports.default = _default;

},{"./colors":80,"./helpers":83,"./program":85,"./tput":86,"./unicode":87,"./widget":88,"@babel/runtime/helpers/interopRequireDefault":1}],80:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * colors.js - color-related functions for blessed.
 * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).
 * https://github.com/chjj/blessed
 */
let colors = {};

colors.match = function (r1, g1, b1) {
  if (typeof r1 === 'string') {
    var hex = r1;

    if (hex[0] !== '#') {
      return -1;
    }

    hex = colors.hexToRGB(hex);
    r1 = hex[0], g1 = hex[1], b1 = hex[2];
  } else if (Array.isArray(r1)) {
    b1 = r1[2], g1 = r1[1], r1 = r1[0];
  }

  var hash = r1 << 16 | g1 << 8 | b1;

  if (colors._cache[hash] != null) {
    return colors._cache[hash];
  }

  var ldiff = Infinity,
      li = -1,
      i = 0,
      c,
      r2,
      g2,
      b2,
      diff;

  for (; i < colors.vcolors.length; i++) {
    c = colors.vcolors[i];
    r2 = c[0];
    g2 = c[1];
    b2 = c[2];
    diff = colorDistance(r1, g1, b1, r2, g2, b2);

    if (diff === 0) {
      li = i;
      break;
    }

    if (diff < ldiff) {
      ldiff = diff;
      li = i;
    }
  }

  return colors._cache[hash] = li;
};

colors.RGBToHex = function (r, g, b) {
  if (Array.isArray(r)) {
    b = r[2], g = r[1], r = r[0];
  }

  function hex(n) {
    n = n.toString(16);
    if (n.length < 2) n = '0' + n;
    return n;
  }

  return '#' + hex(r) + hex(g) + hex(b);
};

colors.hexToRGB = function (hex) {
  if (hex.length === 4) {
    hex = hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];
  }

  var col = parseInt(hex.substring(1), 16),
      r = col >> 16 & 0xff,
      g = col >> 8 & 0xff,
      b = col & 0xff;
  return [r, g, b];
}; // As it happens, comparing how similar two colors are is really hard. Here is
// one of the simplest solutions, which doesn't require conversion to another
// color space, posted on stackoverflow[1]. Maybe someone better at math can
// propose a superior solution.
// [1] http://stackoverflow.com/questions/1633828


function colorDistance(r1, g1, b1, r2, g2, b2) {
  return Math.pow(30 * (r1 - r2), 2) + Math.pow(59 * (g1 - g2), 2) + Math.pow(11 * (b1 - b2), 2);
} // This might work well enough for a terminal's colors: treat RGB as XYZ in a
// 3-dimensional space and go midway between the two points.


colors.mixColors = function (c1, c2, alpha) {
  // if (c1 === 0x1ff) return c1;
  // if (c2 === 0x1ff) return c1;
  if (c1 === 0x1ff) c1 = 0;
  if (c2 === 0x1ff) c2 = 0;
  if (alpha == null) alpha = 0.5;
  c1 = colors.vcolors[c1];
  var r1 = c1[0];
  var g1 = c1[1];
  var b1 = c1[2];
  c2 = colors.vcolors[c2];
  var r2 = c2[0];
  var g2 = c2[1];
  var b2 = c2[2];
  r1 += (r2 - r1) * alpha | 0;
  g1 += (g2 - g1) * alpha | 0;
  b1 += (b2 - b1) * alpha | 0;
  return colors.match([r1, g1, b1]);
};

colors.blend = function blend(attr, attr2, alpha) {
  var name, i, c, nc;
  var bg = attr & 0x1ff;

  if (attr2 != null) {
    var bg2 = attr2 & 0x1ff;
    if (bg === 0x1ff) bg = 0;
    if (bg2 === 0x1ff) bg2 = 0;
    bg = colors.mixColors(bg, bg2, alpha);
  } else {
    if (blend._cache[bg] != null) {
      bg = blend._cache[bg]; // } else if (bg < 8) {
      //   bg += 8;
    } else if (bg >= 8 && bg <= 15) {
      bg -= 8;
    } else {
      name = colors.ncolors[bg];

      if (name) {
        for (i = 0; i < colors.ncolors.length; i++) {
          if (name === colors.ncolors[i] && i !== bg) {
            c = colors.vcolors[bg];
            nc = colors.vcolors[i];

            if (nc[0] + nc[1] + nc[2] < c[0] + c[1] + c[2]) {
              blend._cache[bg] = i;
              bg = i;
              break;
            }
          }
        }
      }
    }
  }

  attr &= ~0x1ff;
  attr |= bg;
  var fg = attr >> 9 & 0x1ff;

  if (attr2 != null) {
    var fg2 = attr2 >> 9 & 0x1ff; // 0, 7, 188, 231, 251

    if (fg === 0x1ff) {
      // XXX workaround
      fg = 248;
    } else {
      if (fg === 0x1ff) fg = 7;
      if (fg2 === 0x1ff) fg2 = 7;
      fg = colors.mixColors(fg, fg2, alpha);
    }
  } else {
    if (blend._cache[fg] != null) {
      fg = blend._cache[fg]; // } else if (fg < 8) {
      //   fg += 8;
    } else if (fg >= 8 && fg <= 15) {
      fg -= 8;
    } else {
      name = colors.ncolors[fg];

      if (name) {
        for (i = 0; i < colors.ncolors.length; i++) {
          if (name === colors.ncolors[i] && i !== fg) {
            c = colors.vcolors[fg];
            nc = colors.vcolors[i];

            if (nc[0] + nc[1] + nc[2] < c[0] + c[1] + c[2]) {
              blend._cache[fg] = i;
              fg = i;
              break;
            }
          }
        }
      }
    }
  }

  attr &= ~(0x1ff << 9);
  attr |= fg << 9;
  return attr;
};

colors.blend._cache = {};
colors._cache = {};

colors.reduce = function (color, total) {
  if (color >= 16 && total <= 16) {
    color = colors.ccolors[color];
  } else if (color >= 8 && total <= 8) {
    color -= 8;
  } else if (color >= 2 && total <= 2) {
    color %= 2;
  }

  return color;
}; // XTerm Colors
// These were actually tough to track down. The xterm source only uses color
// keywords. The X11 source needed to be examined to find the actual values.
// They then had to be mapped to rgb values and then converted to hex values.


colors.xterm = ['#000000', // black
'#cd0000', // red3
'#00cd00', // green3
'#cdcd00', // yellow3
'#0000ee', // blue2
'#cd00cd', // magenta3
'#00cdcd', // cyan3
'#e5e5e5', // gray90
'#7f7f7f', // gray50
'#ff0000', // red
'#00ff00', // green
'#ffff00', // yellow
'#5c5cff', // rgb:5c/5c/ff
'#ff00ff', // magenta
'#00ffff', // cyan
'#ffffff' // white
]; // Seed all 256 colors. Assume xterm defaults.
// Ported from the xterm color generation script.

colors.colors = function () {
  var cols = colors.colors = [],
      _cols = colors.vcolors = [],
      r,
      g,
      b,
      i,
      l;

  function hex(n) {
    n = n.toString(16);
    if (n.length < 2) n = '0' + n;
    return n;
  }

  function push(i, r, g, b) {
    cols[i] = '#' + hex(r) + hex(g) + hex(b);
    _cols[i] = [r, g, b];
  } // 0 - 15


  colors.xterm.forEach(function (c, i) {
    c = parseInt(c.substring(1), 16);
    push(i, c >> 16 & 0xff, c >> 8 & 0xff, c & 0xff);
  }); // 16 - 231

  for (r = 0; r < 6; r++) {
    for (g = 0; g < 6; g++) {
      for (b = 0; b < 6; b++) {
        i = 16 + r * 36 + g * 6 + b;
        push(i, r ? r * 40 + 55 : 0, g ? g * 40 + 55 : 0, b ? b * 40 + 55 : 0);
      }
    }
  } // 232 - 255 are grey.


  for (g = 0; g < 24; g++) {
    l = g * 10 + 8;
    i = 232 + g;
    push(i, l, l, l);
  }

  return cols;
}(); // Map higher colors to the first 8 colors.
// This allows translation of high colors to low colors on 8-color terminals.


colors.ccolors = function () {
  var _cols = colors.vcolors.slice(),
      cols = colors.colors.slice(),
      out;

  colors.vcolors = colors.vcolors.slice(0, 8);
  colors.colors = colors.colors.slice(0, 8);
  out = cols.map(colors.match);
  colors.colors = cols;
  colors.vcolors = _cols;
  colors.ccolors = out;
  return out;
}();

var colorNames = colors.colorNames = {
  // special
  default: -1,
  normal: -1,
  bg: -1,
  fg: -1,
  // normal
  black: 0,
  red: 1,
  green: 2,
  yellow: 3,
  blue: 4,
  magenta: 5,
  cyan: 6,
  white: 7,
  // light
  lightblack: 8,
  lightred: 9,
  lightgreen: 10,
  lightyellow: 11,
  lightblue: 12,
  lightmagenta: 13,
  lightcyan: 14,
  lightwhite: 15,
  // bright
  brightblack: 8,
  brightred: 9,
  brightgreen: 10,
  brightyellow: 11,
  brightblue: 12,
  brightmagenta: 13,
  brightcyan: 14,
  brightwhite: 15,
  // alternate spellings
  grey: 8,
  gray: 8,
  lightgrey: 7,
  lightgray: 7,
  brightgrey: 7,
  brightgray: 7
};

colors.convert = function (color) {
  if (typeof color === 'number') {
    ;
  } else if (typeof color === 'string') {
    color = color.replace(/[\- ]/g, '');

    if (colorNames[color] != null) {
      color = colorNames[color];
    } else {
      color = colors.match(color);
    }
  } else if (Array.isArray(color)) {
    color = colors.match(color);
  } else {
    color = -1;
  }

  return color !== -1 ? color : 0x1ff;
}; // Map higher colors to the first 8 colors.
// This allows translation of high colors to low colors on 8-color terminals.
// Why the hell did I do this by hand?


colors.ccolors = {
  blue: [4, 12, [17, 21], [24, 27], [31, 33], [38, 39], 45, [54, 57], [60, 63], [67, 69], [74, 75], 81, [91, 93], [97, 99], [103, 105], [110, 111], 117, [128, 129], [134, 135], [140, 141], [146, 147], 153, 165, 171, 177, 183, 189],
  green: [2, 10, 22, [28, 29], [34, 36], [40, 43], [46, 50], [64, 65], [70, 72], [76, 79], [82, 86], [106, 108], [112, 115], [118, 122], [148, 151], [154, 158], [190, 194]],
  cyan: [6, 14, 23, 30, 37, 44, 51, 66, 73, 80, 87, 109, 116, 123, 152, 159, 195],
  red: [1, 9, 52, [88, 89], [94, 95], [124, 126], [130, 132], [136, 138], [160, 163], [166, 169], [172, 175], [178, 181], [196, 200], [202, 206], [208, 212], [214, 218], [220, 224]],
  magenta: [5, 13, 53, 90, 96, 127, 133, 139, 164, 170, 176, 182, 201, 207, 213, 219, 225],
  yellow: [3, 11, 58, [100, 101], [142, 144], [184, 187], [226, 230]],
  black: [0, 8, 16, 59, 102, [232, 243]],
  white: [7, 15, 145, 188, 231, [244, 255]]
};
colors.ncolors = [];
Object.keys(colors.ccolors).forEach(function (name) {
  colors.ccolors[name].forEach(function (offset) {
    if (typeof offset === 'number') {
      colors.ncolors[offset] = name;
      colors.ccolors[offset] = colors.colorNames[name];
      return;
    }

    for (var i = offset[0], l = offset[1]; i <= l; i++) {
      colors.ncolors[i] = name;
      colors.ccolors[i] = colors.colorNames[name];
    }
  });
  delete colors.ccolors[name];
});
var _default = colors;
exports.default = _default;

},{}],81:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * events.js - event emitter for blessed
 * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).
 * https://github.com/chjj/blessed
 */
var slice = Array.prototype.slice;
/**
 * EventEmitter
 */

class EventEmitter {
  constructor() {
    this._maxListeners = void 0;
    this._events = void 0;
    if (!this._events) this._events = {};
  }

  setMaxListeners(n) {
    this._maxListeners = n;
  }

  addListener(type, listener) {
    if (!this._events[type]) {
      this._events[type] = listener;
    } else if (typeof this._events[type] === 'function') {
      this._events[type] = [this._events[type], listener];
    } else {
      this._events[type].push(listener);
    }

    this._emit('newListener', [type, listener]);
  }

  on(type, listener) {
    return this.addListener(type, listener);
  }

  removeListener(type, listener) {
    var handler = this._events[type];
    if (!handler) return;

    if (typeof handler === 'function' || handler.length === 1) {
      delete this._events[type];

      this._emit('removeListener', [type, listener]);

      return;
    }

    for (var i = 0; i < handler.length; i++) {
      if (handler[i] === listener || handler[i].listener === listener) {
        handler.splice(i, 1);

        this._emit('removeListener', [type, listener]);

        return;
      }
    }
  }

  off(type, listener) {
    return this.removeListener(type, listener);
  }

  removeAllListeners(type) {
    if (type) {
      delete this._events[type];
    } else {
      this._events = {};
    }
  }

  once(type, listener) {
    function on() {
      this.removeListener(type, on);
      return listener.apply(this, arguments);
    }

    on.listener = listener;
    return this.on(type, on);
  }

  listeners(type) {
    return typeof this._events[type] === 'function' ? [this._events[type]] : this._events[type] || [];
  }

  _emit(type, args) {
    var handler = this._events[type],
        ret; // if (type !== 'event') {
    //   this._emit('event', [type.replace(/^element /, '')].concat(args));
    // }

    if (!handler) {
      if (type === 'error') {
        throw new args[0]();
      }

      return;
    }

    if (typeof handler === 'function') {
      return handler.apply(this, args);
    }

    for (var i = 0; i < handler.length; i++) {
      if (handler[i].apply(this, args) === false) {
        ret = false;
      }
    }

    return ret !== false;
  }

  emit(type) {
    var args = slice.call(arguments, 1),
        params = slice.call(arguments),
        el = this;

    this._emit('event', params); // @ts-ignore


    if (this.type === 'screen') {
      return this._emit(type, args);
    }

    if (this._emit(type, args) === false) {
      return false;
    }

    type = 'element ' + type;
    args.unshift(this); // `element` prefix
    // params = [type].concat(args);
    // no `element` prefix
    // params.splice(1, 0, this);

    do {
      // el._emit('event', params);
      if (!el._events[type]) continue;

      if (el._emit(type, args) === false) {
        return false;
      }
    } while (el = el.parent);

    return true;
  }

}
/**
 * Expose
 */


var _default = EventEmitter;
exports.default = _default;

},{}],82:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _net = _interopRequireDefault(require("net"));

var _fs = _interopRequireDefault(require("fs"));

var _events = require("events");

/**
 * gpmclient.js - support the gpm mouse protocol
 * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).
 * https://github.com/chjj/blessed
 */
var GPM_USE_MAGIC = false;
var GPM_MOVE = 1,
    GPM_DRAG = 2,
    GPM_DOWN = 4,
    GPM_UP = 8;
var GPM_DOUBLE = 32,
    GPM_MFLAG = 128;
var GPM_REQ_NOPASTE = 3,
    GPM_HARD = 256;
var GPM_MAGIC = 0x47706D4C;
var GPM_SOCKET = '/dev/gpmctl'; // typedef struct Gpm_Connect {
//   unsigned short eventMask, defaultMask;
//   unsigned short minMod, maxMod;
//   int pid;
//   int vc;
// } Gpm_Connect;

function send_config(socket, Gpm_Connect, callback) {
  var buffer;

  if (GPM_USE_MAGIC) {
    buffer = new Buffer(20);
    buffer.writeUInt32LE(GPM_MAGIC, 0);
    buffer.writeUInt16LE(Gpm_Connect.eventMask, 4);
    buffer.writeUInt16LE(Gpm_Connect.defaultMask, 6);
    buffer.writeUInt16LE(Gpm_Connect.minMod, 8);
    buffer.writeUInt16LE(Gpm_Connect.maxMod, 10);
    buffer.writeInt16LE(process.pid, 12);
    buffer.writeInt16LE(Gpm_Connect.vc, 16);
  } else {
    buffer = new Buffer(16);
    buffer.writeUInt16LE(Gpm_Connect.eventMask, 0);
    buffer.writeUInt16LE(Gpm_Connect.defaultMask, 2);
    buffer.writeUInt16LE(Gpm_Connect.minMod, 4);
    buffer.writeUInt16LE(Gpm_Connect.maxMod, 6);
    buffer.writeInt16LE(Gpm_Connect.pid, 8);
    buffer.writeInt16LE(Gpm_Connect.vc, 12);
  }

  socket.write(buffer, function () {
    if (callback) callback();
  });
} // typedef struct Gpm_Event {
//   unsigned char buttons, modifiers;  // try to be a multiple of 4
//   unsigned short vc;
//   short dx, dy, x, y; // displacement x,y for this event, and absolute x,y
//   enum Gpm_Etype type;
//   // clicks e.g. double click are determined by time-based processing
//   int clicks;
//   enum Gpm_Margin margin;
//   // wdx/y: displacement of wheels in this event. Absolute values are not
//   // required, because wheel movement is typically used for scrolling
//   // or selecting fields, not for cursor positioning. The application
//   // can determine when the end of file or form is reached, and not
//   // go any further.
//   // A single mouse will use wdy, "vertical scroll" wheel.
//   short wdx, wdy;
// } Gpm_Event;


function parseEvent(raw) {
  var evnt = {};
  evnt.buttons = raw[0];
  evnt.modifiers = raw[1];
  evnt.vc = raw.readUInt16LE(2);
  evnt.dx = raw.readInt16LE(4);
  evnt.dy = raw.readInt16LE(6);
  evnt.x = raw.readInt16LE(8);
  evnt.y = raw.readInt16LE(10);
  evnt.type = raw.readInt16LE(12);
  evnt.clicks = raw.readInt32LE(16);
  evnt.margin = raw.readInt32LE(20);
  evnt.wdx = raw.readInt16LE(24);
  evnt.wdy = raw.readInt16LE(26);
  return evnt;
}

function GpmClient(options) {
  if (!(this instanceof GpmClient)) {
    return new GpmClient(options);
  }

  _events.EventEmitter.call(this);

  var pid = process.pid; // check tty for /dev/tty[n]

  var path;

  try {
    path = _fs.default.readlinkSync('/proc/' + pid + '/fd/0');
  } catch (e) {
    ;
  }

  var tty = /tty[0-9]+$/.exec(path);

  if (tty === null) {// TODO: should  also check for /dev/input/..
  }

  var vc;

  if (tty) {
    tty = tty[0];
    vc = +/[0-9]+$/.exec(tty)[0];
  }

  var self = this;

  if (tty) {
    _fs.default.stat(GPM_SOCKET, function (err, stat) {
      if (err || !stat.isSocket()) {
        return;
      }

      var conf = {
        eventMask: 0xffff,
        defaultMask: GPM_MOVE | GPM_HARD,
        minMod: 0,
        maxMod: 0xffff,
        pid: pid,
        vc: vc
      };

      var gpm = _net.default.createConnection(GPM_SOCKET);

      this.gpm = gpm;
      gpm.on('connect', function () {
        send_config(gpm, conf, function () {
          conf.pid = 0;
          conf.vc = GPM_REQ_NOPASTE; //send_config(gpm, conf);
        });
      });
      gpm.on('data', function (packet) {
        var evnt = parseEvent(packet);

        switch (evnt.type & 15) {
          case GPM_MOVE:
            if (evnt.dx || evnt.dy) {
              self.emit('move', evnt.buttons, evnt.modifiers, evnt.x, evnt.y);
            }

            if (evnt.wdx || evnt.wdy) {
              self.emit('mousewheel', evnt.buttons, evnt.modifiers, evnt.x, evnt.y, evnt.wdx, evnt.wdy);
            }

            break;

          case GPM_DRAG:
            if (evnt.dx || evnt.dy) {
              self.emit('drag', evnt.buttons, evnt.modifiers, evnt.x, evnt.y);
            }

            if (evnt.wdx || evnt.wdy) {
              self.emit('mousewheel', evnt.buttons, evnt.modifiers, evnt.x, evnt.y, evnt.wdx, evnt.wdy);
            }

            break;

          case GPM_DOWN:
            self.emit('btndown', evnt.buttons, evnt.modifiers, evnt.x, evnt.y);

            if (evnt.type & GPM_DOUBLE) {
              self.emit('dblclick', evnt.buttons, evnt.modifiers, evnt.x, evnt.y);
            }

            break;

          case GPM_UP:
            self.emit('btnup', evnt.buttons, evnt.modifiers, evnt.x, evnt.y);

            if (!(evnt.type & GPM_MFLAG)) {
              self.emit('click', evnt.buttons, evnt.modifiers, evnt.x, evnt.y);
            }

            break;
        }
      });
      gpm.on('error', function () {
        self.stop();
      });
    });
  }
}

GpmClient.prototype.__proto__ = _events.EventEmitter.prototype;

GpmClient.prototype.stop = function () {
  if (this.gpm) {
    this.gpm.end();
  }

  delete this.gpm;
};

GpmClient.prototype.ButtonName = function (btn) {
  if (btn & 4) return 'left';
  if (btn & 2) return 'middle';
  if (btn & 1) return 'right';
  return '';
};

GpmClient.prototype.hasShiftKey = function (mod) {
  return mod & 1 ? true : false;
};

GpmClient.prototype.hasCtrlKey = function (mod) {
  return mod & 4 ? true : false;
};

GpmClient.prototype.hasMetaKey = function (mod) {
  return mod & 8 ? true : false;
};

var _default = GpmClient;
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":1,"events":9,"fs":"fs","net":5}],83:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _unicode = _interopRequireDefault(require("./unicode"));

/**
 * helpers.js - helpers for blessed
 * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).
 * https://github.com/chjj/blessed
 */

/**
 * Modules
 */

/**
 * Helpers
 */
var helpers = exports;

helpers.merge = function (a, b) {
  Object.keys(b).forEach(function (key) {
    a[key] = b[key];
  });
  return a;
};

helpers.asort = function (obj) {
  return obj.sort(function (a, b) {
    a = a.name.toLowerCase();
    b = b.name.toLowerCase();

    if (a[0] === '.' && b[0] === '.') {
      a = a[1];
      b = b[1];
    } else {
      a = a[0];
      b = b[0];
    }

    return a > b ? 1 : a < b ? -1 : 0;
  });
};

helpers.hsort = function (obj) {
  return obj.sort(function (a, b) {
    return b.index - a.index;
  });
};

helpers.findFile = function (start, target) {
  return function read(dir) {
    var files, file, stat, out;

    if (dir === '/dev' || dir === '/sys' || dir === '/proc' || dir === '/net') {
      return null;
    }

    try {
      files = _fs.default.readdirSync(dir);
    } catch (e) {
      files = [];
    }

    for (var i = 0; i < files.length; i++) {
      file = files[i];

      if (file === target) {
        return (dir === '/' ? '' : dir) + '/' + file;
      }

      try {
        stat = _fs.default.lstatSync((dir === '/' ? '' : dir) + '/' + file);
      } catch (e) {
        stat = null;
      }

      if (stat && stat.isDirectory() && !stat.isSymbolicLink()) {
        out = read((dir === '/' ? '' : dir) + '/' + file);
        if (out) return out;
      }
    }

    return null;
  }(start);
}; // Escape text for tag-enabled elements.


helpers.escape = function (text) {
  return text.replace(/[{}]/g, function (ch) {
    return ch === '{' ? '{open}' : '{close}';
  });
};

helpers.parseTags = function (text, screen) {
  return helpers.Element.prototype._parseTags.call({
    parseTags: true,
    screen: screen || helpers.Screen.global
  }, text);
};

helpers.generateTags = function (style, text) {
  var open = '',
      close = '';
  Object.keys(style || {}).forEach(function (key) {
    var val = style[key];

    if (typeof val === 'string') {
      val = val.replace(/^light(?!-)/, 'light-');
      val = val.replace(/^bright(?!-)/, 'bright-');
      open = '{' + val + '-' + key + '}' + open;
      close += '{/' + val + '-' + key + '}';
    } else {
      if (val === true) {
        open = '{' + key + '}' + open;
        close += '{/' + key + '}';
      }
    }
  });

  if (text != null) {
    return open + text + close;
  }

  return {
    open: open,
    close: close
  };
};

helpers.attrToBinary = function (style, element) {
  return helpers.Element.prototype.sattr.call(element || {}, style);
};

helpers.stripTags = function (text) {
  if (!text) return '';
  return text.replace(/{(\/?)([\w\-,;!#]*)}/g, '').replace(/\x1b\[[\d;]*m/g, '');
};

helpers.cleanTags = function (text) {
  return helpers.stripTags(text).trim();
};

helpers.dropUnicode = function (text) {
  if (!text) return '';
  return text.replace(_unicode.default.chars.all, '??').replace(_unicode.default.chars.combining, '').replace(_unicode.default.chars.surrogate, '?');
};

helpers.__defineGetter__('Screen', function () {
  if (!helpers._screen) {
    helpers._screen = require("./widgets/screen");
  }

  return helpers._screen;
});

helpers.__defineGetter__('Element', function () {
  if (!helpers._element) {
    helpers._element = require("./widgets/element");
  }

  return helpers._element;
});

var _default = helpers;
exports.default = _default;

},{"./unicode":87,"./widgets/element":90,"./widgets/screen":94,"@babel/runtime/helpers/interopRequireDefault":1,"fs":"fs"}],84:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.emitKeypressEvents = emitKeypressEvents;

var _events = require("events");

/**
 * keys.js - emit key presses
 * Copyright (c) 2010-2015, Joyent, Inc. and other contributors (MIT License)
 * https://github.com/chjj/blessed
 */
// Originally taken from the node.js tree:
//
// Copyright Joyent, Inc. and other Node contributors. All rights reserved.
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// NOTE: node <=v0.8.x has no EventEmitter.listenerCount
function listenerCount(stream, event) {
  return _events.EventEmitter.listenerCount ? _events.EventEmitter.listenerCount(stream, event) : stream.listeners(event).length;
}
/**
 * accepts a readable Stream instance and makes it emit "keypress" events
 */


function emitKeypressEvents(stream) {
  if (stream._keypressDecoder) return;

  var StringDecoder = require('string_decoder').StringDecoder; // lazy load


  stream._keypressDecoder = new StringDecoder('utf8');

  function onData(b) {
    if (listenerCount(stream, 'keypress') > 0) {
      var r = stream._keypressDecoder.write(b);

      if (r) emitKeys(stream, r);
    } else {
      // Nobody's watching anyway
      stream.removeListener('data', onData);
      stream.on('newListener', onNewListener);
    }
  }

  function onNewListener(event) {
    if (event === 'keypress') {
      stream.on('data', onData);
      stream.removeListener('newListener', onNewListener);
    }
  }

  if (listenerCount(stream, 'keypress') > 0) {
    stream.on('data', onData);
  } else {
    stream.on('newListener', onNewListener);
  }
}

/*
  Some patterns seen in terminal key escape codes, derived from combos seen
  at http://www.midnight-commander.org/browser/lib/tty/key.c

  ESC letter
  ESC [ letter
  ESC [ modifier letter
  ESC [ 1 ; modifier letter
  ESC [ num char
  ESC [ num ; modifier char
  ESC O letter
  ESC O modifier letter
  ESC O 1 ; modifier letter
  ESC N letter
  ESC [ [ num ; modifier char
  ESC [ [ 1 ; modifier letter
  ESC ESC [ num char
  ESC ESC O letter

  - char is usually ~ but $ and ^ also happen with rxvt
  - modifier is 1 +
                (shift     * 1) +
                (left_alt  * 2) +
                (ctrl      * 4) +
                (right_alt * 8)
  - two leading ESCs apparently mean the same as one leading ESC
*/
// Regexes used for ansi escape code splitting
var metaKeyCodeReAnywhere = /(?:\x1b)([a-zA-Z0-9])/;
var metaKeyCodeRe = new RegExp('^' + metaKeyCodeReAnywhere.source + '$');
var functionKeyCodeReAnywhere = new RegExp('(?:\x1b+)(O|N|\\[|\\[\\[)(?:' + ['(\\d+)(?:;(\\d+))?([~^$])', '(?:M([@ #!a`])(.)(.))', // mouse
'(?:1;)?(\\d+)?([a-zA-Z])'].join('|') + ')');
var functionKeyCodeRe = new RegExp('^' + functionKeyCodeReAnywhere.source);
var escapeCodeReAnywhere = new RegExp([functionKeyCodeReAnywhere.source, metaKeyCodeReAnywhere.source, /\x1b./.source].join('|'));

function emitKeys(stream, s) {
  if (Buffer.isBuffer(s)) {
    if (s[0] > 127 && s[1] === undefined) {
      s[0] -= 128;
      s = '\x1b' + s.toString(stream.encoding || 'utf-8');
    } else {
      s = s.toString(stream.encoding || 'utf-8');
    }
  }

  if (isMouse(s)) return;
  var buffer = [];
  var match;

  while (match = escapeCodeReAnywhere.exec(s)) {
    buffer = buffer.concat(s.slice(0, match.index).split(''));
    buffer.push(match[0]);
    s = s.slice(match.index + match[0].length);
  }

  buffer = buffer.concat(s.split(''));
  buffer.forEach(function (s) {
    var ch,
        key = {
      sequence: s,
      name: undefined,
      ctrl: false,
      meta: false,
      shift: false
    },
        parts;

    if (s === '\r') {
      // carriage return
      key.name = 'return';
    } else if (s === '\n') {
      // enter, should have been called linefeed
      key.name = 'enter'; // linefeed
      // key.name = 'linefeed';
    } else if (s === '\t') {
      // tab
      key.name = 'tab';
    } else if (s === '\b' || s === '\x7f' || s === '\x1b\x7f' || s === '\x1b\b') {
      // backspace or ctrl+h
      key.name = 'backspace';
      key.meta = s.charAt(0) === '\x1b';
    } else if (s === '\x1b' || s === '\x1b\x1b') {
      // escape key
      key.name = 'escape';
      key.meta = s.length === 2;
    } else if (s === ' ' || s === '\x1b ') {
      key.name = 'space';
      key.meta = s.length === 2;
    } else if (s.length === 1 && s <= '\x1a') {
      // ctrl+letter
      key.name = String.fromCharCode(s.charCodeAt(0) + 'a'.charCodeAt(0) - 1);
      key.ctrl = true;
    } else if (s.length === 1 && s >= 'a' && s <= 'z') {
      // lowercase letter
      key.name = s;
    } else if (s.length === 1 && s >= 'A' && s <= 'Z') {
      // shift+letter
      key.name = s.toLowerCase();
      key.shift = true;
    } else if (parts = metaKeyCodeRe.exec(s)) {
      // meta+character key
      key.name = parts[1].toLowerCase();
      key.meta = true;
      key.shift = /^[A-Z]$/.test(parts[1]);

      if (!key.shift) {
        if (parts[1] === 'b') {
          key.name = "left";
        } else if (parts[1] === 'f') {
          key.name = "right";
        }
      }
    } else if (parts = functionKeyCodeRe.exec(s)) {
      // ansi escape sequence
      // reassemble the key code leaving out leading \x1b's,
      // the modifier key bitflag and any meaningless "1;" sequence
      var code = (parts[1] || '') + (parts[2] || '') + (parts[4] || '') + (parts[9] || ''),
          modifier = (parts[3] || parts[8] || 1) - 1; // Parse the key modifier

      key.ctrl = !!(modifier & 4);
      key.meta = !!(modifier & 10);
      key.shift = !!(modifier & 1);
      key.code = code; // Parse the key itself

      switch (code) {
        /* xterm/gnome ESC O letter */
        case 'OP':
          key.name = 'f1';
          break;

        case 'OQ':
          key.name = 'f2';
          break;

        case 'OR':
          key.name = 'f3';
          break;

        case 'OS':
          key.name = 'f4';
          break;

        /* xterm/rxvt ESC [ number ~ */

        case '[11~':
          key.name = 'f1';
          break;

        case '[12~':
          key.name = 'f2';
          break;

        case '[13~':
          key.name = 'f3';
          break;

        case '[14~':
          key.name = 'f4';
          break;

        /* from Cygwin and used in libuv */

        case '[[A':
          key.name = 'f1';
          break;

        case '[[B':
          key.name = 'f2';
          break;

        case '[[C':
          key.name = 'f3';
          break;

        case '[[D':
          key.name = 'f4';
          break;

        case '[[E':
          key.name = 'f5';
          break;

        /* common */

        case '[15~':
          key.name = 'f5';
          break;

        case '[17~':
          key.name = 'f6';
          break;

        case '[18~':
          key.name = 'f7';
          break;

        case '[19~':
          key.name = 'f8';
          break;

        case '[20~':
          key.name = 'f9';
          break;

        case '[21~':
          key.name = 'f10';
          break;

        case '[23~':
          key.name = 'f11';
          break;

        case '[24~':
          key.name = 'f12';
          break;

        /* xterm ESC [ letter */

        case '[A':
          key.name = 'up';
          break;

        case '[B':
          key.name = 'down';
          break;

        case '[C':
          key.name = 'right';
          break;

        case '[D':
          key.name = 'left';
          break;

        case '[E':
          key.name = 'clear';
          break;

        case '[F':
          key.name = 'end';
          break;

        case '[H':
          key.name = 'home';
          break;

        /* xterm/gnome ESC O letter */

        case 'OA':
          key.name = 'up';
          break;

        case 'OB':
          key.name = 'down';
          break;

        case 'OC':
          key.name = 'right';
          break;

        case 'OD':
          key.name = 'left';
          break;

        case 'OE':
          key.name = 'clear';
          break;

        case 'OF':
          key.name = 'end';
          break;

        case 'OH':
          key.name = 'home';
          break;

        /* xterm/rxvt ESC [ number ~ */

        case '[1~':
          key.name = 'home';
          break;

        case '[2~':
          key.name = 'insert';
          break;

        case '[3~':
          key.name = 'delete';
          break;

        case '[4~':
          key.name = 'end';
          break;

        case '[5~':
          key.name = 'pageup';
          break;

        case '[6~':
          key.name = 'pagedown';
          break;

        /* putty */

        case '[[5~':
          key.name = 'pageup';
          break;

        case '[[6~':
          key.name = 'pagedown';
          break;

        /* rxvt */

        case '[7~':
          key.name = 'home';
          break;

        case '[8~':
          key.name = 'end';
          break;

        /* rxvt keys with modifiers */

        case '[a':
          key.name = 'up';
          key.shift = true;
          break;

        case '[b':
          key.name = 'down';
          key.shift = true;
          break;

        case '[c':
          key.name = 'right';
          key.shift = true;
          break;

        case '[d':
          key.name = 'left';
          key.shift = true;
          break;

        case '[e':
          key.name = 'clear';
          key.shift = true;
          break;

        case '[2$':
          key.name = 'insert';
          key.shift = true;
          break;

        case '[3$':
          key.name = 'delete';
          key.shift = true;
          break;

        case '[5$':
          key.name = 'pageup';
          key.shift = true;
          break;

        case '[6$':
          key.name = 'pagedown';
          key.shift = true;
          break;

        case '[7$':
          key.name = 'home';
          key.shift = true;
          break;

        case '[8$':
          key.name = 'end';
          key.shift = true;
          break;

        case 'Oa':
          key.name = 'up';
          key.ctrl = true;
          break;

        case 'Ob':
          key.name = 'down';
          key.ctrl = true;
          break;

        case 'Oc':
          key.name = 'right';
          key.ctrl = true;
          break;

        case 'Od':
          key.name = 'left';
          key.ctrl = true;
          break;

        case 'Oe':
          key.name = 'clear';
          key.ctrl = true;
          break;

        case '[2^':
          key.name = 'insert';
          key.ctrl = true;
          break;

        case '[3^':
          key.name = 'delete';
          key.ctrl = true;
          break;

        case '[5^':
          key.name = 'pageup';
          key.ctrl = true;
          break;

        case '[6^':
          key.name = 'pagedown';
          key.ctrl = true;
          break;

        case '[7^':
          key.name = 'home';
          key.ctrl = true;
          break;

        case '[8^':
          key.name = 'end';
          key.ctrl = true;
          break;

        /* misc. */

        case '[Z':
          key.name = 'tab';
          key.shift = true;
          break;

        default:
          key.name = 'undefined';
          break;
      }
    } // Don't emit a key if no name was found


    if (key.name === undefined) {
      key = undefined;
    }

    if (s.length === 1) {
      ch = s;
    }

    if (key || ch) {
      stream.emit('keypress', ch, key); // if (key && key.name === 'return') {
      //   var nkey = {};
      //   Object.keys(key).forEach(function(k) {
      //     nkey[k] = key[k];
      //   });
      //   nkey.name = 'enter';
      //   stream.emit('keypress', ch, nkey);
      // }
    }
  });
}

function isMouse(s) {
  return /\x1b\[M/.test(s) || /\x1b\[M([\x00\u0020-\uffff]{3})/.test(s) || /\x1b\[(\d+;\d+;\d+)M/.test(s) || /\x1b\[<(\d+;\d+;\d+)([mM])/.test(s) || /\x1b\[<(\d+;\d+;\d+;\d+)&w/.test(s) || /\x1b\[24([0135])~\[(\d+),(\d+)\]\r/.test(s) || /\x1b\[(O|I)/.test(s);
}

},{"events":9,"string_decoder":31}],85:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _events = require("events");

var _string_decoder = require("string_decoder");

var _child_process = _interopRequireDefault(require("child_process"));

var _util = _interopRequireDefault(require("util"));

var _fs = _interopRequireDefault(require("fs"));

var _tput = _interopRequireDefault(require("./tput"));

var _colors = _interopRequireDefault(require("./colors"));

/**
 * program.js - basic curses-like functionality for blessed.
 * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).
 * https://github.com/chjj/blessed
 */

/**
 * Modules
 */
var slice = Array.prototype.slice;
var nextTick = global.setImmediate || process.nextTick.bind(process);
/**
 * Program
 */

function Program(options) {
  var self = this;

  if (!(this instanceof Program)) {
    return new Program(options);
  }

  Program.bind(this);

  _events.EventEmitter.call(this);

  if (!options || options.__proto__ !== Object.prototype) {
    options = {
      input: arguments[0],
      output: arguments[1]
    };
  }

  this.options = options;
  this.input = options.input || process.stdin;
  this.output = options.output || process.stdout;
  options.log = options.log || options.dump;

  if (options.log) {
    this._logger = _fs.default.createWriteStream(options.log);
    if (options.dump) this.setupDump();
  }

  this.zero = options.zero !== false;
  this.useBuffer = options.buffer;
  this.x = 0;
  this.y = 0;
  this.savedX = 0;
  this.savedY = 0;
  this.cols = this.output.columns || 1;
  this.rows = this.output.rows || 1;
  this.scrollTop = 0;
  this.scrollBottom = this.rows - 1;
  this._terminal = options.terminal || options.term || process.env.TERM || (process.platform === 'win32' ? 'windows-ansi' : 'xterm');
  this._terminal = this._terminal.toLowerCase(); // OSX

  this.isOSXTerm = process.env.TERM_PROGRAM === 'Apple_Terminal';
  this.isiTerm2 = process.env.TERM_PROGRAM === 'iTerm.app' || !!process.env.ITERM_SESSION_ID; // VTE
  // NOTE: lxterminal does not provide an env variable to check for.
  // NOTE: gnome-terminal and sakura use a later version of VTE
  // which provides VTE_VERSION as well as supports SGR events.

  this.isXFCE = /xfce/i.test(process.env.COLORTERM);
  this.isTerminator = !!process.env.TERMINATOR_UUID;
  this.isLXDE = false;
  this.isVTE = !!process.env.VTE_VERSION || this.isXFCE || this.isTerminator || this.isLXDE; // xterm and rxvt - not accurate

  this.isRxvt = /rxvt/i.test(process.env.COLORTERM);
  this.isXterm = false;
  this.tmux = !!process.env.TMUX;

  this.tmuxVersion = function () {
    if (!self.tmux) return 2;

    try {
      var version = _child_process.default.execFileSync('tmux', ['-V'], {
        encoding: 'utf8'
      });

      return +/^tmux ([\d.]+)/i.exec(version.trim().split('\n')[0])[1];
    } catch (e) {
      return 2;
    }
  }();

  this._buf = '';
  this._flush = this.flush.bind(this);

  if (options.tput !== false) {
    this.setupTput();
  }

  this.listen();
}

Program.global = null;
Program.total = 0;
Program.instances = [];

Program.bind = function (program) {
  if (!Program.global) {
    Program.global = program;
  }

  if (!~Program.instances.indexOf(program)) {
    Program.instances.push(program);
    program.index = Program.total;
    Program.total++;
  }

  if (Program._bound) return;
  Program._bound = true;
  unshiftEvent(process, 'exit', Program._exitHandler = function () {
    Program.instances.forEach(function (program) {
      // Potentially reset window title on exit:
      // if (program._originalTitle) {
      //   program.setTitle(program._originalTitle);
      // }
      // Ensure the buffer is flushed (it should
      // always be at this point, but who knows).
      program.flush(); // Ensure _exiting is set (could technically
      // use process._exiting).

      program._exiting = true;
    });
  });
};

Program.prototype.__proto__ = _events.EventEmitter.prototype;
Program.prototype.type = 'program';

Program.prototype.log = function () {
  return this._log('LOG', _util.default.format.apply(_util.default, arguments));
};

Program.prototype.debug = function () {
  if (!this.options.debug) return;
  return this._log('DEBUG', _util.default.format.apply(_util.default, arguments));
};

Program.prototype._log = function (pre, msg) {
  if (!this._logger) return;
  return this._logger.write(pre + ': ' + msg + '\n-\n');
};

Program.prototype.setupDump = function () {
  var self = this,
      write = this.output.write,
      decoder = new _string_decoder.StringDecoder('utf8');

  function stringify(data) {
    return caret(data.replace(/\r/g, '\\r').replace(/\n/g, '\\n').replace(/\t/g, '\\t')).replace(/[^ -~]/g, function (ch) {
      if (ch.charCodeAt(0) > 0xff) return ch;
      ch = ch.charCodeAt(0).toString(16);

      if (ch.length > 2) {
        if (ch.length < 4) ch = '0' + ch;
        return '\\u' + ch;
      }

      if (ch.length < 2) ch = '0' + ch;
      return '\\x' + ch;
    });
  }

  function caret(data) {
    return data.replace(/[\0\x80\x1b-\x1f\x7f\x01-\x1a]/g, function (ch) {
      switch (ch) {
        case '\0':
        case '\x80':
          ch = '@';
          break;

        case '\x1b':
          ch = '[';
          break;

        case '\x1c':
          ch = '\\';
          break;

        case '\x1d':
          ch = ']';
          break;

        case '\x1e':
          ch = '^';
          break;

        case '\x1f':
          ch = '_';
          break;

        case '\x7f':
          ch = '?';
          break;

        default:
          ch = ch.charCodeAt(0); // From ('A' - 64) to ('Z' - 64).

          if (ch >= 1 && ch <= 26) {
            ch = String.fromCharCode(ch + 64);
          } else {
            return String.fromCharCode(ch);
          }

          break;
      }

      return '^' + ch;
    });
  }

  this.input.on('data', function (data) {
    self._log('IN', stringify(decoder.write(data)));
  });

  this.output.write = function (data) {
    self._log('OUT', stringify(data));

    return write.apply(this, arguments);
  };
};

Program.prototype.setupTput = function () {
  if (this._tputSetup) return;
  this._tputSetup = true;

  var self = this,
      options = this.options,
      write = this._write.bind(this);

  var tput = this.tput = new _tput.default({
    terminal: this.terminal,
    padding: options.padding,
    extended: options.extended,
    printf: options.printf,
    termcap: options.termcap,
    forceUnicode: options.forceUnicode
  });

  if (tput.error) {
    nextTick(function () {
      self.emit('warning', tput.error.message);
    });
  }

  if (tput.padding) {
    nextTick(function () {
      self.emit('warning', 'Terminfo padding has been enabled.');
    });
  }

  this.put = function () {
    var args = slice.call(arguments),
        cap = args.shift();

    if (tput[cap]) {
      return this._write(tput[cap].apply(tput, args));
    }
  };

  Object.keys(tput).forEach(function (key) {
    if (self[key] == null) {
      self[key] = tput[key];
    }

    if (typeof tput[key] !== 'function') {
      self.put[key] = tput[key];
      return;
    }

    if (tput.padding) {
      self.put[key] = function () {
        return tput._print(tput[key].apply(tput, arguments), write);
      };
    } else {
      self.put[key] = function () {
        return self._write(tput[key].apply(tput, arguments));
      };
    }
  });
};

Program.prototype.__defineGetter__('terminal', function () {
  return this._terminal;
});

Program.prototype.__defineSetter__('terminal', function (terminal) {
  this.setTerminal(terminal);
  return this.terminal;
});

Program.prototype.setTerminal = function (terminal) {
  this._terminal = terminal.toLowerCase();
  delete this._tputSetup;
  this.setupTput();
};

Program.prototype.has = function (name) {
  return this.tput ? this.tput.has(name) : false;
};

Program.prototype.term = function (is) {
  return this.terminal.indexOf(is) === 0;
};

Program.prototype.listen = function () {
  var self = this; // Potentially reset window title on exit:
  // if (!this.isRxvt) {
  //   if (!this.isVTE) this.setTitleModeFeature(3);
  //   this.manipulateWindow(21, function(err, data) {
  //     if (err) return;
  //     self._originalTitle = data.text;
  //   });
  // }
  // Listen for keys/mouse on input

  if (!this.input._blessedInput) {
    this.input._blessedInput = 1;

    this._listenInput();
  } else {
    this.input._blessedInput++;
  }

  this.on('newListener', this._newHandler = function fn(type) {
    if (type === 'keypress' || type === 'mouse') {
      self.removeListener('newListener', fn);

      if (self.input.setRawMode && !self.input.isRaw) {
        self.input.setRawMode(true);
        self.input.resume();
      }
    }
  });
  this.on('newListener', function fn(type) {
    if (type === 'mouse') {
      self.removeListener('newListener', fn);
      self.bindMouse();
    }
  }); // Listen for resize on output

  if (!this.output._blessedOutput) {
    this.output._blessedOutput = 1;

    this._listenOutput();
  } else {
    this.output._blessedOutput++;
  }
};

Program.prototype._listenInput = function () {
  var keys = require("./keys"),
      self = this; // Input


  this.input.on('keypress', this.input._keypressHandler = function (ch, key) {
    key = key || {
      ch: ch
    };

    if (key.name === 'undefined' && (key.code === '[M' || key.code === '[I' || key.code === '[O')) {
      // A mouse sequence. The `keys` module doesn't understand these.
      return;
    }

    if (key.name === 'undefined') {
      // Not sure what this is, but we should probably ignore it.
      return;
    }

    if (key.name === 'enter' && key.sequence === '\n') {
      key.name = 'linefeed';
    }

    if (key.name === 'return' && key.sequence === '\r') {
      self.input.emit('keypress', ch, merge({}, key, {
        name: 'enter'
      }));
    }

    var name = (key.ctrl ? 'C-' : '') + (key.meta ? 'M-' : '') + (key.shift && key.name ? 'S-' : '') + (key.name || ch);
    key.full = name;
    Program.instances.forEach(function (program) {
      if (program.input !== self.input) return;
      program.emit('keypress', ch, key);
      program.emit('key ' + name, ch, key);
    });
  });
  this.input.on('data', this.input._dataHandler = function (data) {
    Program.instances.forEach(function (program) {
      if (program.input !== self.input) return;
      program.emit('data', data);
    });
  });
  keys.emitKeypressEvents(this.input);
};

Program.prototype._listenOutput = function () {
  var self = this;

  if (!this.output.isTTY) {
    nextTick(function () {
      self.emit('warning', 'Output is not a TTY');
    });
  } // Output


  function resize() {
    Program.instances.forEach(function (program) {
      if (program.output !== self.output) return;
      program.cols = program.output.columns;
      program.rows = program.output.rows;
      program.emit('resize');
    });
  }

  this.output.on('resize', this.output._resizeHandler = function () {
    Program.instances.forEach(function (program) {
      if (program.output !== self.output) return;

      if (!program.options.resizeTimeout) {
        return resize();
      }

      if (program._resizeTimer) {
        clearTimeout(program._resizeTimer);
        delete program._resizeTimer;
      }

      var time = typeof program.options.resizeTimeout === 'number' ? program.options.resizeTimeout : 300;
      program._resizeTimer = setTimeout(resize, time);
    });
  });
};

Program.prototype.destroy = function () {
  var index = Program.instances.indexOf(this);

  if (~index) {
    Program.instances.splice(index, 1);
    Program.total--;
    this.flush();
    this._exiting = true;
    Program.global = Program.instances[0];

    if (Program.total === 0) {
      Program.global = null;
      process.removeListener('exit', Program._exitHandler);
      delete Program._exitHandler;
      delete Program._bound;
    }

    this.input._blessedInput--;
    this.output._blessedOutput--;

    if (this.input._blessedInput === 0) {
      this.input.removeListener('keypress', this.input._keypressHandler);
      this.input.removeListener('data', this.input._dataHandler);
      delete this.input._keypressHandler;
      delete this.input._dataHandler;

      if (this.input.setRawMode) {
        if (this.input.isRaw) {
          this.input.setRawMode(false);
        }

        if (!this.input.destroyed) {
          this.input.pause();
        }
      }
    }

    if (this.output._blessedOutput === 0) {
      this.output.removeListener('resize', this.output._resizeHandler);
      delete this.output._resizeHandler;
    }

    this.removeListener('newListener', this._newHandler);
    delete this._newHandler;
    this.destroyed = true;
    this.emit('destroy');
  }
};

Program.prototype.key = function (key, listener) {
  if (typeof key === 'string') key = key.split(/\s*,\s*/);
  key.forEach(function (key) {
    return this.on('key ' + key, listener);
  }, this);
};

Program.prototype.onceKey = function (key, listener) {
  if (typeof key === 'string') key = key.split(/\s*,\s*/);
  key.forEach(function (key) {
    return this.once('key ' + key, listener);
  }, this);
};

Program.prototype.unkey = Program.prototype.removeKey = function (key, listener) {
  if (typeof key === 'string') key = key.split(/\s*,\s*/);
  key.forEach(function (key) {
    return this.removeListener('key ' + key, listener);
  }, this);
}; // XTerm mouse events
// http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#Mouse%20Tracking
// To better understand these
// the xterm code is very helpful:
// Relevant files:
//   button.c, charproc.c, misc.c
// Relevant functions in xterm/button.c:
//   BtnCode, EmitButtonCode, EditorButton, SendMousePosition
// send a mouse event:
// regular/utf8: ^[[M Cb Cx Cy
// urxvt: ^[[ Cb ; Cx ; Cy M
// sgr: ^[[ Cb ; Cx ; Cy M/m
// vt300: ^[[ 24(1/3/5)~ [ Cx , Cy ] \r
// locator: CSI P e ; P b ; P r ; P c ; P p & w
// motion example of a left click:
// ^[[M 3<^[[M@4<^[[M@5<^[[M@6<^[[M@7<^[[M#7<
// mouseup, mousedown, mousewheel
// left click: ^[[M 3<^[[M#3<
// mousewheel up: ^[[M`3>


Program.prototype.bindMouse = function () {
  if (this._boundMouse) return;
  this._boundMouse = true;
  var decoder = new _string_decoder.StringDecoder('utf8'),
      self = this;
  this.on('data', function (data) {
    var text = decoder.write(data);
    if (!text) return;

    self._bindMouse(text, data);
  });
};

Program.prototype._bindMouse = function (s, buf) {
  var self = this,
      key,
      parts,
      b,
      x,
      y,
      mod,
      params,
      down,
      page,
      button;
  key = {
    name: undefined,
    ctrl: false,
    meta: false,
    shift: false
  };

  if (Buffer.isBuffer(s)) {
    if (s[0] > 127 && s[1] === undefined) {
      s[0] -= 128;
      s = '\x1b' + s.toString('utf-8');
    } else {
      s = s.toString('utf-8');
    }
  } // if (this.8bit) {
  //   s = s.replace(/\233/g, '\x1b[');
  //   buf = new Buffer(s, 'utf8');
  // }
  // XTerm / X10 for buggy VTE
  // VTE can only send unsigned chars and no unicode for coords. This limits
  // them to 0xff. However, normally the x10 protocol does not allow a byte
  // under 0x20, but since VTE can have the bytes overflow, we can consider
  // bytes below 0x20 to be up to 0xff + 0x20. This gives a limit of 287. Since
  // characters ranging from 223 to 248 confuse javascript's utf parser, we
  // need to parse the raw binary. We can detect whether the terminal is using
  // a bugged VTE version by examining the coordinates and seeing whether they
  // are a value they would never otherwise be with a properly implemented x10
  // protocol. This method of detecting VTE is only 99% reliable because we
  // can't check if the coords are 0x00 (255) since that is a valid x10 coord
  // technically.


  var bx = s.charCodeAt(4);
  var by = s.charCodeAt(5);

  if (buf[0] === 0x1b && buf[1] === 0x5b && buf[2] === 0x4d && (this.isVTE || bx >= 65533 || by >= 65533 || bx > 0x00 && bx < 0x20 || by > 0x00 && by < 0x20 || buf[4] > 223 && buf[4] < 248 && buf.length === 6 || buf[5] > 223 && buf[5] < 248 && buf.length === 6)) {
    b = buf[3];
    x = buf[4];
    y = buf[5]; // unsigned char overflow.

    if (x < 0x20) x += 0xff;
    if (y < 0x20) y += 0xff; // Convert the coordinates into a
    // properly formatted x10 utf8 sequence.

    s = '\x1b[M' + String.fromCharCode(b) + String.fromCharCode(x) + String.fromCharCode(y);
  } // XTerm / X10


  if (parts = /^\x1b\[M([\x00\u0020-\uffff]{3})/.exec(s)) {
    b = parts[1].charCodeAt(0);
    x = parts[1].charCodeAt(1);
    y = parts[1].charCodeAt(2);
    key.name = 'mouse';
    key.type = 'X10';
    key.raw = [b, x, y, parts[0]];
    key.buf = buf;
    key.x = x - 32;
    key.y = y - 32;
    if (this.zero) key.x--, key.y--;
    if (x === 0) key.x = 255;
    if (y === 0) key.y = 255;
    mod = b >> 2;
    key.shift = !!(mod & 1);
    key.meta = !!(mod >> 1 & 1);
    key.ctrl = !!(mod >> 2 & 1);
    b -= 32;

    if (b >> 6 & 1) {
      key.action = b & 1 ? 'wheeldown' : 'wheelup';
      key.button = 'middle';
    } else if (b === 3) {
      // NOTE: x10 and urxvt have no way
      // of telling which button mouseup used.
      key.action = 'mouseup';
      key.button = this._lastButton || 'unknown';
      delete this._lastButton;
    } else {
      key.action = 'mousedown';
      button = b & 3;
      key.button = button === 0 ? 'left' : button === 1 ? 'middle' : button === 2 ? 'right' : 'unknown';
      this._lastButton = key.button;
    } // Probably a movement.
    // The *newer* VTE gets mouse movements comepletely wrong.
    // This presents a problem: older versions of VTE that get it right might
    // be confused by the second conditional in the if statement.
    // NOTE: Possibly just switch back to the if statement below.
    // none, shift, ctrl, alt
    // gnome: 32, 36, 48, 40
    // xterm: 35, _, 51, _
    // urxvt: 35, _, _, _
    // if (key.action === 'mousedown' && key.button === 'unknown') {


    if (b === 35 || b === 39 || b === 51 || b === 43 || this.isVTE && (b === 32 || b === 36 || b === 48 || b === 40)) {
      delete key.button;
      key.action = 'mousemove';
    }

    self.emit('mouse', key);
    return;
  } // URxvt


  if (parts = /^\x1b\[(\d+;\d+;\d+)M/.exec(s)) {
    params = parts[1].split(';');
    b = +params[0];
    x = +params[1];
    y = +params[2];
    key.name = 'mouse';
    key.type = 'urxvt';
    key.raw = [b, x, y, parts[0]];
    key.buf = buf;
    key.x = x;
    key.y = y;
    if (this.zero) key.x--, key.y--;
    mod = b >> 2;
    key.shift = !!(mod & 1);
    key.meta = !!(mod >> 1 & 1);
    key.ctrl = !!(mod >> 2 & 1); // XXX Bug in urxvt after wheelup/down on mousemove
    // NOTE: This may be different than 128/129 depending
    // on mod keys.

    if (b === 128 || b === 129) {
      b = 67;
    }

    b -= 32;

    if (b >> 6 & 1) {
      key.action = b & 1 ? 'wheeldown' : 'wheelup';
      key.button = 'middle';
    } else if (b === 3) {
      // NOTE: x10 and urxvt have no way
      // of telling which button mouseup used.
      key.action = 'mouseup';
      key.button = this._lastButton || 'unknown';
      delete this._lastButton;
    } else {
      key.action = 'mousedown';
      button = b & 3;
      key.button = button === 0 ? 'left' : button === 1 ? 'middle' : button === 2 ? 'right' : 'unknown'; // NOTE: 0/32 = mousemove, 32/64 = mousemove with left down
      // if ((b >> 1) === 32)

      this._lastButton = key.button;
    } // Probably a movement.
    // The *newer* VTE gets mouse movements comepletely wrong.
    // This presents a problem: older versions of VTE that get it right might
    // be confused by the second conditional in the if statement.
    // NOTE: Possibly just switch back to the if statement below.
    // none, shift, ctrl, alt
    // urxvt: 35, _, _, _
    // gnome: 32, 36, 48, 40
    // if (key.action === 'mousedown' && key.button === 'unknown') {


    if (b === 35 || b === 39 || b === 51 || b === 43 || this.isVTE && (b === 32 || b === 36 || b === 48 || b === 40)) {
      delete key.button;
      key.action = 'mousemove';
    }

    self.emit('mouse', key);
    return;
  } // SGR


  if (parts = /^\x1b\[<(\d+;\d+;\d+)([mM])/.exec(s)) {
    down = parts[2] === 'M';
    params = parts[1].split(';');
    b = +params[0];
    x = +params[1];
    y = +params[2];
    key.name = 'mouse';
    key.type = 'sgr';
    key.raw = [b, x, y, parts[0]];
    key.buf = buf;
    key.x = x;
    key.y = y;
    if (this.zero) key.x--, key.y--;
    mod = b >> 2;
    key.shift = !!(mod & 1);
    key.meta = !!(mod >> 1 & 1);
    key.ctrl = !!(mod >> 2 & 1);

    if (b >> 6 & 1) {
      key.action = b & 1 ? 'wheeldown' : 'wheelup';
      key.button = 'middle';
    } else {
      key.action = down ? 'mousedown' : 'mouseup';
      button = b & 3;
      key.button = button === 0 ? 'left' : button === 1 ? 'middle' : button === 2 ? 'right' : 'unknown';
    } // Probably a movement.
    // The *newer* VTE gets mouse movements comepletely wrong.
    // This presents a problem: older versions of VTE that get it right might
    // be confused by the second conditional in the if statement.
    // NOTE: Possibly just switch back to the if statement below.
    // none, shift, ctrl, alt
    // xterm: 35, _, 51, _
    // gnome: 32, 36, 48, 40
    // if (key.action === 'mousedown' && key.button === 'unknown') {


    if (b === 35 || b === 39 || b === 51 || b === 43 || this.isVTE && (b === 32 || b === 36 || b === 48 || b === 40)) {
      delete key.button;
      key.action = 'mousemove';
    }

    self.emit('mouse', key);
    return;
  } // DEC
  // The xterm mouse documentation says there is a
  // `<` prefix, the DECRQLP says there is no prefix.


  if (parts = /^\x1b\[<(\d+;\d+;\d+;\d+)&w/.exec(s)) {
    params = parts[1].split(';');
    b = +params[0];
    x = +params[1];
    y = +params[2];
    page = +params[3];
    key.name = 'mouse';
    key.type = 'dec';
    key.raw = [b, x, y, parts[0]];
    key.buf = buf;
    key.x = x;
    key.y = y;
    key.page = page;
    if (this.zero) key.x--, key.y--;
    key.action = b === 3 ? 'mouseup' : 'mousedown';
    key.button = b === 2 ? 'left' : b === 4 ? 'middle' : b === 6 ? 'right' : 'unknown';
    self.emit('mouse', key);
    return;
  } // vt300


  if (parts = /^\x1b\[24([0135])~\[(\d+),(\d+)\]\r/.exec(s)) {
    b = +parts[1];
    x = +parts[2];
    y = +parts[3];
    key.name = 'mouse';
    key.type = 'vt300';
    key.raw = [b, x, y, parts[0]];
    key.buf = buf;
    key.x = x;
    key.y = y;
    if (this.zero) key.x--, key.y--;
    key.action = 'mousedown';
    key.button = b === 1 ? 'left' : b === 2 ? 'middle' : b === 5 ? 'right' : 'unknown';
    self.emit('mouse', key);
    return;
  }

  if (parts = /^\x1b\[(O|I)/.exec(s)) {
    key.action = parts[1] === 'I' ? 'focus' : 'blur';
    self.emit('mouse', key);
    self.emit(key.action);
    return;
  }
}; // gpm support for linux vc


Program.prototype.enableGpm = function () {
  var self = this;

  var gpmclient = require("./gpmclient");

  if (this.gpm) return;
  this.gpm = gpmclient();
  this.gpm.on('btndown', function (btn, modifier, x, y) {
    x--, y--;
    var key = {
      name: 'mouse',
      type: 'GPM',
      action: 'mousedown',
      button: self.gpm.ButtonName(btn),
      raw: [btn, modifier, x, y],
      x: x,
      y: y,
      shift: self.gpm.hasShiftKey(modifier),
      meta: self.gpm.hasMetaKey(modifier),
      ctrl: self.gpm.hasCtrlKey(modifier)
    };
    self.emit('mouse', key);
  });
  this.gpm.on('btnup', function (btn, modifier, x, y) {
    x--, y--;
    var key = {
      name: 'mouse',
      type: 'GPM',
      action: 'mouseup',
      button: self.gpm.ButtonName(btn),
      raw: [btn, modifier, x, y],
      x: x,
      y: y,
      shift: self.gpm.hasShiftKey(modifier),
      meta: self.gpm.hasMetaKey(modifier),
      ctrl: self.gpm.hasCtrlKey(modifier)
    };
    self.emit('mouse', key);
  });
  this.gpm.on('move', function (btn, modifier, x, y) {
    x--, y--;
    var key = {
      name: 'mouse',
      type: 'GPM',
      action: 'mousemove',
      button: self.gpm.ButtonName(btn),
      raw: [btn, modifier, x, y],
      x: x,
      y: y,
      shift: self.gpm.hasShiftKey(modifier),
      meta: self.gpm.hasMetaKey(modifier),
      ctrl: self.gpm.hasCtrlKey(modifier)
    };
    self.emit('mouse', key);
  });
  this.gpm.on('drag', function (btn, modifier, x, y) {
    x--, y--;
    var key = {
      name: 'mouse',
      type: 'GPM',
      action: 'mousemove',
      button: self.gpm.ButtonName(btn),
      raw: [btn, modifier, x, y],
      x: x,
      y: y,
      shift: self.gpm.hasShiftKey(modifier),
      meta: self.gpm.hasMetaKey(modifier),
      ctrl: self.gpm.hasCtrlKey(modifier)
    };
    self.emit('mouse', key);
  });
  this.gpm.on('mousewheel', function (btn, modifier, x, y, dx, dy) {
    var key = {
      name: 'mouse',
      type: 'GPM',
      action: dy > 0 ? 'wheelup' : 'wheeldown',
      button: self.gpm.ButtonName(btn),
      raw: [btn, modifier, x, y, dx, dy],
      x: x,
      y: y,
      shift: self.gpm.hasShiftKey(modifier),
      meta: self.gpm.hasMetaKey(modifier),
      ctrl: self.gpm.hasCtrlKey(modifier)
    };
    self.emit('mouse', key);
  });
};

Program.prototype.disableGpm = function () {
  if (this.gpm) {
    this.gpm.stop();
    delete this.gpm;
  }
}; // All possible responses from the terminal


Program.prototype.bindResponse = function () {
  if (this._boundResponse) return;
  this._boundResponse = true;
  var decoder = new _string_decoder.StringDecoder('utf8'),
      self = this;
  this.on('data', function (data) {
    data = decoder.write(data);
    if (!data) return;

    self._bindResponse(data);
  });
};

Program.prototype._bindResponse = function (s) {
  var out = {},
      parts;

  if (Buffer.isBuffer(s)) {
    if (s[0] > 127 && s[1] === undefined) {
      s[0] -= 128;
      s = '\x1b' + s.toString('utf-8');
    } else {
      s = s.toString('utf-8');
    }
  } // CSI P s c
  // Send Device Attributes (Primary DA).
  // CSI > P s c
  // Send Device Attributes (Secondary DA).


  if (parts = /^\x1b\[(\?|>)(\d*(?:;\d*)*)c/.exec(s)) {
    parts = parts[2].split(';').map(function (ch) {
      return +ch || 0;
    });
    out.event = 'device-attributes';
    out.code = 'DA';

    if (parts[1] === '?') {
      out.type = 'primary-attribute'; // VT100-style params:

      if (parts[0] === 1 && parts[2] === 2) {
        out.term = 'vt100';
        out.advancedVideo = true;
      } else if (parts[0] === 1 && parts[2] === 0) {
        out.term = 'vt101';
      } else if (parts[0] === 6) {
        out.term = 'vt102';
      } else if (parts[0] === 60 && parts[1] === 1 && parts[2] === 2 && parts[3] === 6 && parts[4] === 8 && parts[5] === 9 && parts[6] === 15) {
        out.term = 'vt220';
      } else {
        // VT200-style params:
        parts.forEach(function (attr) {
          switch (attr) {
            case 1:
              out.cols132 = true;
              break;

            case 2:
              out.printer = true;
              break;

            case 6:
              out.selectiveErase = true;
              break;

            case 8:
              out.userDefinedKeys = true;
              break;

            case 9:
              out.nationalReplacementCharsets = true;
              break;

            case 15:
              out.technicalCharacters = true;
              break;

            case 18:
              out.userWindows = true;
              break;

            case 21:
              out.horizontalScrolling = true;
              break;

            case 22:
              out.ansiColor = true;
              break;

            case 29:
              out.ansiTextLocator = true;
              break;
          }
        });
      }
    } else {
      out.type = 'secondary-attribute';

      switch (parts[0]) {
        case 0:
          out.term = 'vt100';
          break;

        case 1:
          out.term = 'vt220';
          break;

        case 2:
          out.term = 'vt240';
          break;

        case 18:
          out.term = 'vt330';
          break;

        case 19:
          out.term = 'vt340';
          break;

        case 24:
          out.term = 'vt320';
          break;

        case 41:
          out.term = 'vt420';
          break;

        case 61:
          out.term = 'vt510';
          break;

        case 64:
          out.term = 'vt520';
          break;

        case 65:
          out.term = 'vt525';
          break;
      }

      out.firmwareVersion = parts[1];
      out.romCartridgeRegistrationNumber = parts[2];
    } // LEGACY


    out.deviceAttributes = out;
    this.emit('response', out);
    this.emit('response ' + out.event, out);
    return;
  } // CSI Ps n  Device Status Report (DSR).
  //     Ps = 5  -> Status Report.  Result (``OK'') is
  //   CSI 0 n
  // CSI ? Ps n
  //   Device Status Report (DSR, DEC-specific).
  //     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).
  //     or CSI ? 1 1  n  (not ready).
  //     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)
  //     or CSI ? 2 1  n  (locked).
  //     Ps = 2 6  -> Report Keyboard status as
  //   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).
  //   The last two parameters apply to VT400 & up, and denote key-
  //   board ready and LK01 respectively.
  //     Ps = 5 3  -> Report Locator status as
  //   CSI ? 5 3  n  Locator available, if compiled-in, or
  //   CSI ? 5 0  n  No Locator, if not.


  if (parts = /^\x1b\[(\?)?(\d+)(?:;(\d+);(\d+);(\d+))?n/.exec(s)) {
    out.event = 'device-status';
    out.code = 'DSR';

    if (!parts[1] && parts[2] === '0' && !parts[3]) {
      out.type = 'device-status';
      out.status = 'OK'; // LEGACY

      out.deviceStatus = out.status;
      this.emit('response', out);
      this.emit('response ' + out.event, out);
      return;
    }

    if (parts[1] && (parts[2] === '10' || parts[2] === '11') && !parts[3]) {
      out.type = 'printer-status';
      out.status = parts[2] === '10' ? 'ready' : 'not ready'; // LEGACY

      out.printerStatus = out.status;
      this.emit('response', out);
      this.emit('response ' + out.event, out);
      return;
    }

    if (parts[1] && (parts[2] === '20' || parts[2] === '21') && !parts[3]) {
      out.type = 'udk-status';
      out.status = parts[2] === '20' ? 'unlocked' : 'locked'; // LEGACY

      out.UDKStatus = out.status;
      this.emit('response', out);
      this.emit('response ' + out.event, out);
      return;
    }

    if (parts[1] && parts[2] === '27' && parts[3] === '1' && parts[4] === '0' && parts[5] === '0') {
      out.type = 'keyboard-status';
      out.status = 'OK'; // LEGACY

      out.keyboardStatus = out.status;
      this.emit('response', out);
      this.emit('response ' + out.event, out);
      return;
    }

    if (parts[1] && (parts[2] === '53' || parts[2] === '50') && !parts[3]) {
      out.type = 'locator-status';
      out.status = parts[2] === '53' ? 'available' : 'unavailable'; // LEGACY

      out.locator = out.status;
      this.emit('response', out);
      this.emit('response ' + out.event, out);
      return;
    }

    out.type = 'error';
    out.text = 'Unhandled: ' + JSON.stringify(parts); // LEGACY

    out.error = out.text;
    this.emit('response', out);
    this.emit('response ' + out.event, out);
    return;
  } // CSI Ps n  Device Status Report (DSR).
  //     Ps = 6  -> Report Cursor Position (CPR) [row;column].
  //   Result is
  //   CSI r ; c R
  // CSI ? Ps n
  //   Device Status Report (DSR, DEC-specific).
  //     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI
  //     ? r ; c R (assumes page is zero).


  if (parts = /^\x1b\[(\?)?(\d+);(\d+)R/.exec(s)) {
    out.event = 'device-status';
    out.code = 'DSR';
    out.type = 'cursor-status';
    out.status = {
      x: +parts[3],
      y: +parts[2],
      page: !parts[1] ? undefined : 0
    };
    out.x = out.status.x;
    out.y = out.status.y;
    out.page = out.status.page; // LEGACY

    out.cursor = out.status;
    this.emit('response', out);
    this.emit('response ' + out.event, out);
    return;
  } // CSI Ps ; Ps ; Ps t
  //   Window manipulation (from dtterm, as well as extensions).
  //   These controls may be disabled using the allowWindowOps
  //   resource.  Valid values for the first (and any additional
  //   parameters) are:
  //     Ps = 1 1  -> Report xterm window state.  If the xterm window
  //     is open (non-iconified), it returns CSI 1 t .  If the xterm
  //     window is iconified, it returns CSI 2 t .
  //     Ps = 1 3  -> Report xterm window position.  Result is CSI 3
  //     ; x ; y t
  //     Ps = 1 4  -> Report xterm window in pixels.  Result is CSI
  //     4  ;  height ;  width t
  //     Ps = 1 8  -> Report the size of the text area in characters.
  //     Result is CSI  8  ;  height ;  width t
  //     Ps = 1 9  -> Report the size of the screen in characters.
  //     Result is CSI  9  ;  height ;  width t


  if (parts = /^\x1b\[(\d+)(?:;(\d+);(\d+))?t/.exec(s)) {
    out.event = 'window-manipulation';
    out.code = '';

    if ((parts[1] === '1' || parts[1] === '2') && !parts[2]) {
      out.type = 'window-state';
      out.state = parts[1] === '1' ? 'non-iconified' : 'iconified'; // LEGACY

      out.windowState = out.state;
      this.emit('response', out);
      this.emit('response ' + out.event, out);
      return;
    }

    if (parts[1] === '3' && parts[2]) {
      out.type = 'window-position';
      out.position = {
        x: +parts[2],
        y: +parts[3]
      };
      out.x = out.position.x;
      out.y = out.position.y; // LEGACY

      out.windowPosition = out.position;
      this.emit('response', out);
      this.emit('response ' + out.event, out);
      return;
    }

    if (parts[1] === '4' && parts[2]) {
      out.type = 'window-size-pixels';
      out.size = {
        height: +parts[2],
        width: +parts[3]
      };
      out.height = out.size.height;
      out.width = out.size.width; // LEGACY

      out.windowSizePixels = out.size;
      this.emit('response', out);
      this.emit('response ' + out.event, out);
      return;
    }

    if (parts[1] === '8' && parts[2]) {
      out.type = 'textarea-size';
      out.size = {
        height: +parts[2],
        width: +parts[3]
      };
      out.height = out.size.height;
      out.width = out.size.width; // LEGACY

      out.textAreaSizeCharacters = out.size;
      this.emit('response', out);
      this.emit('response ' + out.event, out);
      return;
    }

    if (parts[1] === '9' && parts[2]) {
      out.type = 'screen-size';
      out.size = {
        height: +parts[2],
        width: +parts[3]
      };
      out.height = out.size.height;
      out.width = out.size.width; // LEGACY

      out.screenSizeCharacters = out.size;
      this.emit('response', out);
      this.emit('response ' + out.event, out);
      return;
    }

    out.type = 'error';
    out.text = 'Unhandled: ' + JSON.stringify(parts); // LEGACY

    out.error = out.text;
    this.emit('response', out);
    this.emit('response ' + out.event, out);
    return;
  } // rxvt-unicode does not support window manipulation
  //   Result Normal: OSC l/L 0xEF 0xBF 0xBD
  //   Result ASCII: OSC l/L 0x1c (file separator)
  //   Result UTF8->ASCII: OSC l/L 0xFD
  // Test with:
  //   echo -ne '\ePtmux;\e\e[>3t\e\\'
  //   sleep 2 && echo -ne '\ePtmux;\e\e[21t\e\\' & cat -v
  //   -
  //   echo -ne '\e[>3t'
  //   sleep 2 && echo -ne '\e[21t' & cat -v


  if (parts = /^\x1b\](l|L)([^\x07\x1b]*)$/.exec(s)) {
    parts[2] = 'rxvt';
    s = '\x1b]' + parts[1] + parts[2] + '\x1b\\';
  } // CSI Ps ; Ps ; Ps t
  //   Window manipulation (from dtterm, as well as extensions).
  //   These controls may be disabled using the allowWindowOps
  //   resource.  Valid values for the first (and any additional
  //   parameters) are:
  //     Ps = 2 0  -> Report xterm window's icon label.  Result is
  //     OSC  L  label ST
  //     Ps = 2 1  -> Report xterm window's title.  Result is OSC  l
  //     label ST


  if (parts = /^\x1b\](l|L)([^\x07\x1b]*)(?:\x07|\x1b\\)/.exec(s)) {
    out.event = 'window-manipulation';
    out.code = '';

    if (parts[1] === 'L') {
      out.type = 'window-icon-label';
      out.text = parts[2]; // LEGACY

      out.windowIconLabel = out.text;
      this.emit('response', out);
      this.emit('response ' + out.event, out);
      return;
    }

    if (parts[1] === 'l') {
      out.type = 'window-title';
      out.text = parts[2]; // LEGACY

      out.windowTitle = out.text;
      this.emit('response', out);
      this.emit('response ' + out.event, out);
      return;
    }

    out.type = 'error';
    out.text = 'Unhandled: ' + JSON.stringify(parts); // LEGACY

    out.error = out.text;
    this.emit('response', out);
    this.emit('response ' + out.event, out);
    return;
  } // CSI Ps ' |
  //   Request Locator Position (DECRQLP).
  //     -> CSI Pe ; Pb ; Pr ; Pc ; Pp &  w
  //   Parameters are [event;button;row;column;page].
  //   Valid values for the event:
  //     Pe = 0  -> locator unavailable - no other parameters sent.
  //     Pe = 1  -> request - xterm received a DECRQLP.
  //     Pe = 2  -> left button down.
  //     Pe = 3  -> left button up.
  //     Pe = 4  -> middle button down.
  //     Pe = 5  -> middle button up.
  //     Pe = 6  -> right button down.
  //     Pe = 7  -> right button up.
  //     Pe = 8  -> M4 button down.
  //     Pe = 9  -> M4 button up.
  //     Pe = 1 0  -> locator outside filter rectangle.
  //   ``button'' parameter is a bitmask indicating which buttons are
  //     pressed:
  //     Pb = 0  <- no buttons down.
  //     Pb & 1  <- right button down.
  //     Pb & 2  <- middle button down.
  //     Pb & 4  <- left button down.
  //     Pb & 8  <- M4 button down.
  //   ``row'' and ``column'' parameters are the coordinates of the
  //     locator position in the xterm window, encoded as ASCII deci-
  //     mal.
  //   The ``page'' parameter is not used by xterm, and will be omit-
  //   ted.
  // NOTE:
  // This is already implemented in the _bindMouse
  // method, but it might make more sense here.
  // The xterm mouse documentation says there is a
  // `<` prefix, the DECRQLP says there is no prefix.


  if (parts = /^\x1b\[(\d+(?:;\d+){4})&w/.exec(s)) {
    parts = parts[1].split(';').map(function (ch) {
      return +ch;
    });
    out.event = 'locator-position';
    out.code = 'DECRQLP';

    switch (parts[0]) {
      case 0:
        out.status = 'locator-unavailable';
        break;

      case 1:
        out.status = 'request';
        break;

      case 2:
        out.status = 'left-button-down';
        break;

      case 3:
        out.status = 'left-button-up';
        break;

      case 4:
        out.status = 'middle-button-down';
        break;

      case 5:
        out.status = 'middle-button-up';
        break;

      case 6:
        out.status = 'right-button-down';
        break;

      case 7:
        out.status = 'right-button-up';
        break;

      case 8:
        out.status = 'm4-button-down';
        break;

      case 9:
        out.status = 'm4-button-up';
        break;

      case 10:
        out.status = 'locator-outside';
        break;
    }

    out.mask = parts[1];
    out.row = parts[2];
    out.col = parts[3];
    out.page = parts[4]; // LEGACY

    out.locatorPosition = out;
    this.emit('response', out);
    this.emit('response ' + out.event, out);
    return;
  } // OSC Ps ; Pt BEL
  // OSC Ps ; Pt ST
  // Set Text Parameters


  if (parts = /^\x1b\](\d+);([^\x07\x1b]+)(?:\x07|\x1b\\)/.exec(s)) {
    out.event = 'text-params';
    out.code = 'Set Text Parameters';
    out.ps = +s[1];
    out.pt = s[2];
    this.emit('response', out);
    this.emit('response ' + out.event, out);
  }
};

Program.prototype.response = function (name, text, callback, noBypass) {
  var self = this;

  if (arguments.length === 2) {
    callback = text;
    text = name;
    name = null;
  }

  if (!callback) {
    callback = function () {};
  }

  this.bindResponse();
  name = name ? 'response ' + name : 'response';
  var onresponse;
  this.once(name, onresponse = function (event) {
    if (timeout) clearTimeout(timeout);

    if (event.type === 'error') {
      return callback(new Error(event.event + ': ' + event.text));
    }

    return callback(null, event);
  });
  var timeout = setTimeout(function () {
    self.removeListener(name, onresponse);
    return callback(new Error('Timeout.'));
  }, 2000);
  return noBypass ? this._write(text) : this._twrite(text);
};

Program.prototype._owrite = Program.prototype.write = function (text) {
  if (!this.output.writable) return;
  return this.output.write(text);
};

Program.prototype._buffer = function (text) {
  if (this._exiting) {
    this.flush();

    this._owrite(text);

    return;
  }

  if (this._buf) {
    this._buf += text;
    return;
  }

  this._buf = text;
  nextTick(this._flush);
  return true;
};

Program.prototype.flush = function () {
  if (!this._buf) return;

  this._owrite(this._buf);

  this._buf = '';
};

Program.prototype._write = function (text) {
  if (this.ret) return text;

  if (this.useBuffer) {
    return this._buffer(text);
  }

  return this._owrite(text);
}; // Example: `DCS tmux; ESC Pt ST`
// Real: `DCS tmux; ESC Pt ESC \`


Program.prototype._twrite = function (data) {
  var self = this,
      iterations = 0,
      timer;

  if (this.tmux) {
    // Replace all STs with BELs so they can be nested within the DCS code.
    data = data.replace(/\x1b\\/g, '\x07'); // Wrap in tmux forward DCS:

    data = '\x1bPtmux;\x1b' + data + '\x1b\\'; // If we've never even flushed yet, it means we're still in
    // the normal buffer. Wait for alt screen buffer.

    if (this.output.bytesWritten === 0) {
      timer = setInterval(function () {
        if (self.output.bytesWritten > 0 || ++iterations === 50) {
          clearInterval(timer);
          self.flush();

          self._owrite(data);
        }
      }, 100);
      return true;
    } // NOTE: Flushing the buffer is required in some cases.
    // The DCS code must be at the start of the output.


    this.flush(); // Write out raw now that the buffer is flushed.

    return this._owrite(data);
  }

  return this._write(data);
};

Program.prototype.echo = Program.prototype.print = function (text, attr) {
  return attr ? this._write(this.text(text, attr)) : this._write(text);
};

Program.prototype._ncoords = function () {
  if (this.x < 0) this.x = 0;else if (this.x >= this.cols) this.x = this.cols - 1;
  if (this.y < 0) this.y = 0;else if (this.y >= this.rows) this.y = this.rows - 1;
};

Program.prototype.setx = function (x) {
  return this.cursorCharAbsolute(x); // return this.charPosAbsolute(x);
};

Program.prototype.sety = function (y) {
  return this.linePosAbsolute(y);
};

Program.prototype.move = function (x, y) {
  return this.cursorPos(y, x);
}; // TODO: Fix cud and cuu calls.


Program.prototype.omove = function (x, y) {
  if (!this.zero) {
    x = (x || 1) - 1;
    y = (y || 1) - 1;
  } else {
    x = x || 0;
    y = y || 0;
  }

  if (y === this.y && x === this.x) {
    return;
  }

  if (y === this.y) {
    if (x > this.x) {
      this.cuf(x - this.x);
    } else if (x < this.x) {
      this.cub(this.x - x);
    }
  } else if (x === this.x) {
    if (y > this.y) {
      this.cud(y - this.y);
    } else if (y < this.y) {
      this.cuu(this.y - y);
    }
  } else {
    if (!this.zero) x++, y++;
    this.cup(y, x);
  }
};

Program.prototype.rsetx = function (x) {
  // return this.HPositionRelative(x);
  if (!x) return;
  return x > 0 ? this.forward(x) : this.back(-x);
};

Program.prototype.rsety = function (y) {
  // return this.VPositionRelative(y);
  if (!y) return;
  return y > 0 ? this.up(y) : this.down(-y);
};

Program.prototype.rmove = function (x, y) {
  this.rsetx(x);
  this.rsety(y);
};

Program.prototype.simpleInsert = function (ch, i, attr) {
  return this._write(this.repeat(ch, i), attr);
};

Program.prototype.repeat = function (ch, i) {
  if (!i || i < 0) i = 0;
  return Array(i + 1).join(ch);
};

Program.prototype.__defineGetter__('title', function () {
  return this._title;
});

Program.prototype.__defineSetter__('title', function (title) {
  this.setTitle(title);
  return this._title;
}); // Specific to iTerm2, but I think it's really cool.
// Example:
//  if (!screen.copyToClipboard(text)) {
//    execClipboardProgram(text);
//  }


Program.prototype.copyToClipboard = function (text) {
  if (this.isiTerm2) {
    this._twrite('\x1b]50;CopyToCliboard=' + text + '\x07');

    return true;
  }

  return false;
}; // Only XTerm and iTerm2. If you know of any others, post them.


Program.prototype.cursorShape = function (shape, blink) {
  if (this.isiTerm2) {
    switch (shape) {
      case 'block':
        if (!blink) {
          this._twrite('\x1b]50;CursorShape=0;BlinkingCursorEnabled=0\x07');
        } else {
          this._twrite('\x1b]50;CursorShape=0;BlinkingCursorEnabled=1\x07');
        }

        break;

      case 'underline':
        if (!blink) {// this._twrite('\x1b]50;CursorShape=n;BlinkingCursorEnabled=0\x07');
        } else {// this._twrite('\x1b]50;CursorShape=n;BlinkingCursorEnabled=1\x07');
          }

        break;

      case 'line':
        if (!blink) {
          this._twrite('\x1b]50;CursorShape=1;BlinkingCursorEnabled=0\x07');
        } else {
          this._twrite('\x1b]50;CursorShape=1;BlinkingCursorEnabled=1\x07');
        }

        break;
    }

    return true;
  } else if (this.term('xterm') || this.term('screen')) {
    switch (shape) {
      case 'block':
        if (!blink) {
          this._twrite('\x1b[0 q');
        } else {
          this._twrite('\x1b[1 q');
        }

        break;

      case 'underline':
        if (!blink) {
          this._twrite('\x1b[2 q');
        } else {
          this._twrite('\x1b[3 q');
        }

        break;

      case 'line':
        if (!blink) {
          this._twrite('\x1b[4 q');
        } else {
          this._twrite('\x1b[5 q');
        }

        break;
    }

    return true;
  }

  return false;
};

Program.prototype.cursorColor = function (color) {
  if (this.term('xterm') || this.term('rxvt') || this.term('screen')) {
    this._twrite('\x1b]12;' + color + '\x07');

    return true;
  }

  return false;
};

Program.prototype.cursorReset = Program.prototype.resetCursor = function () {
  if (this.term('xterm') || this.term('rxvt') || this.term('screen')) {
    // XXX
    // return this.resetColors();
    this._twrite('\x1b[0 q');

    this._twrite('\x1b]112\x07'); // urxvt doesnt support OSC 112


    this._twrite('\x1b]12;white\x07');

    return true;
  }

  return false;
};

Program.prototype.getTextParams = function (param, callback) {
  return this.response('text-params', '\x1b]' + param + ';?\x07', function (err, data) {
    if (err) return callback(err);
    return callback(null, data.pt);
  });
};

Program.prototype.getCursorColor = function (callback) {
  return this.getTextParams(12, callback);
};
/**
 * Normal
 */
//Program.prototype.pad =


Program.prototype.nul = function () {
  //if (this.has('pad')) return this.put.pad();
  return this._write('\x80');
};

Program.prototype.bel = Program.prototype.bell = function () {
  if (this.has('bel')) return this.put.bel();
  return this._write('\x07');
};

Program.prototype.vtab = function () {
  this.y++;

  this._ncoords();

  return this._write('\x0b');
};

Program.prototype.ff = Program.prototype.form = function () {
  if (this.has('ff')) return this.put.ff();
  return this._write('\x0c');
};

Program.prototype.kbs = Program.prototype.backspace = function () {
  this.x--;

  this._ncoords();

  if (this.has('kbs')) return this.put.kbs();
  return this._write('\x08');
};

Program.prototype.ht = Program.prototype.tab = function () {
  this.x += 8;

  this._ncoords();

  if (this.has('ht')) return this.put.ht();
  return this._write('\t');
};

Program.prototype.shiftOut = function () {
  // if (this.has('S2')) return this.put.S2();
  return this._write('\x0e');
};

Program.prototype.shiftIn = function () {
  // if (this.has('S3')) return this.put.S3();
  return this._write('\x0f');
};

Program.prototype.cr = Program.prototype.return = function () {
  this.x = 0;
  if (this.has('cr')) return this.put.cr();
  return this._write('\r');
};

Program.prototype.nel = Program.prototype.newline = Program.prototype.feed = function () {
  if (this.tput && this.tput.bools.eat_newline_glitch && this.x >= this.cols) {
    return;
  }

  this.x = 0;
  this.y++;

  this._ncoords();

  if (this.has('nel')) return this.put.nel();
  return this._write('\n');
};
/**
 * Esc
 */
// ESC D Index (IND is 0x84).


Program.prototype.ind = Program.prototype.index = function () {
  this.y++;

  this._ncoords();

  if (this.tput) return this.put.ind();
  return this._write('\x1bD');
}; // ESC M Reverse Index (RI is 0x8d).


Program.prototype.ri = Program.prototype.reverse = Program.prototype.reverseIndex = function () {
  this.y--;

  this._ncoords();

  if (this.tput) return this.put.ri();
  return this._write('\x1bM');
}; // ESC E Next Line (NEL is 0x85).


Program.prototype.nextLine = function () {
  this.y++;
  this.x = 0;

  this._ncoords();

  if (this.has('nel')) return this.put.nel();
  return this._write('\x1bE');
}; // ESC c Full Reset (RIS).


Program.prototype.reset = function () {
  this.x = this.y = 0;

  if (this.has('rs1') || this.has('ris')) {
    return this.has('rs1') ? this.put.rs1() : this.put.ris();
  }

  return this._write('\x1bc');
}; // ESC H Tab Set (HTS is 0x88).


Program.prototype.tabSet = function () {
  if (this.tput) return this.put.hts();
  return this._write('\x1bH');
}; // ESC 7 Save Cursor (DECSC).


Program.prototype.sc = Program.prototype.saveCursor = function (key) {
  if (key) return this.lsaveCursor(key);
  this.savedX = this.x || 0;
  this.savedY = this.y || 0;
  if (this.tput) return this.put.sc();
  return this._write('\x1b7');
}; // ESC 8 Restore Cursor (DECRC).


Program.prototype.rc = Program.prototype.restoreCursor = function (key, hide) {
  if (key) return this.lrestoreCursor(key, hide);
  this.x = this.savedX || 0;
  this.y = this.savedY || 0;
  if (this.tput) return this.put.rc();
  return this._write('\x1b8');
}; // Save Cursor Locally


Program.prototype.lsaveCursor = function (key) {
  key = key || 'local';
  this._saved = this._saved || {};
  this._saved[key] = this._saved[key] || {};
  this._saved[key].x = this.x;
  this._saved[key].y = this.y;
  this._saved[key].hidden = this.cursorHidden;
}; // Restore Cursor Locally


Program.prototype.lrestoreCursor = function (key, hide) {
  var pos;
  key = key || 'local';
  if (!this._saved || !this._saved[key]) return;
  pos = this._saved[key]; //delete this._saved[key];

  this.cup(pos.y, pos.x);

  if (hide && pos.hidden !== this.cursorHidden) {
    if (pos.hidden) {
      this.hideCursor();
    } else {
      this.showCursor();
    }
  }
}; // ESC # 3 DEC line height/width


Program.prototype.lineHeight = function () {
  return this._write('\x1b#');
}; // ESC (,),*,+,-,. Designate G0-G2 Character Set.


Program.prototype.charset = function (val, level) {
  level = level || 0; // See also:
  // acs_chars / acsc / ac
  // enter_alt_charset_mode / smacs / as
  // exit_alt_charset_mode / rmacs / ae
  // enter_pc_charset_mode / smpch / S2
  // exit_pc_charset_mode / rmpch / S3

  switch (level) {
    case 0:
      level = '(';
      break;

    case 1:
      level = ')';
      break;

    case 2:
      level = '*';
      break;

    case 3:
      level = '+';
      break;
  }

  var name = typeof val === 'string' ? val.toLowerCase() : val;

  switch (name) {
    case 'acs':
    case 'scld':
      // DEC Special Character and Line Drawing Set.
      if (this.tput) return this.put.smacs();
      val = '0';
      break;

    case 'uk':
      // UK
      val = 'A';
      break;

    case 'us': // United States (USASCII).

    case 'usascii':
    case 'ascii':
      if (this.tput) return this.put.rmacs();
      val = 'B';
      break;

    case 'dutch':
      // Dutch
      val = '4';
      break;

    case 'finnish':
      // Finnish
      val = 'C';
      val = '5';
      break;

    case 'french':
      // French
      val = 'R';
      break;

    case 'frenchcanadian':
      // FrenchCanadian
      val = 'Q';
      break;

    case 'german':
      // German
      val = 'K';
      break;

    case 'italian':
      // Italian
      val = 'Y';
      break;

    case 'norwegiandanish':
      // NorwegianDanish
      val = 'E';
      val = '6';
      break;

    case 'spanish':
      // Spanish
      val = 'Z';
      break;

    case 'swedish':
      // Swedish
      val = 'H';
      val = '7';
      break;

    case 'swiss':
      // Swiss
      val = '=';
      break;

    case 'isolatin':
      // ISOLatin (actually /A)
      val = '/A';
      break;

    default:
      // Default
      if (this.tput) return this.put.rmacs();
      val = 'B';
      break;
  }

  return this._write('\x1b(' + val);
};

Program.prototype.enter_alt_charset_mode = Program.prototype.as = Program.prototype.smacs = function () {
  return this.charset('acs');
};

Program.prototype.exit_alt_charset_mode = Program.prototype.ae = Program.prototype.rmacs = function () {
  return this.charset('ascii');
}; // ESC N
// Single Shift Select of G2 Character Set
// ( SS2 is 0x8e). This affects next character only.
// ESC O
// Single Shift Select of G3 Character Set
// ( SS3 is 0x8f). This affects next character only.
// ESC n
// Invoke the G2 Character Set as GL (LS2).
// ESC o
// Invoke the G3 Character Set as GL (LS3).
// ESC |
// Invoke the G3 Character Set as GR (LS3R).
// ESC }
// Invoke the G2 Character Set as GR (LS2R).
// ESC ~
// Invoke the G1 Character Set as GR (LS1R).


Program.prototype.setG = function (val) {
  // if (this.tput) return this.put.S2();
  // if (this.tput) return this.put.S3();
  switch (val) {
    case 1:
      val = '~'; // GR

      break;

    case 2:
      val = 'n'; // GL

      val = '}'; // GR

      val = 'N'; // Next Char Only

      break;

    case 3:
      val = 'o'; // GL

      val = '|'; // GR

      val = 'O'; // Next Char Only

      break;
  }

  return this._write('\x1b' + val);
};
/**
 * OSC
 */
// OSC Ps ; Pt ST
// OSC Ps ; Pt BEL
//   Set Text Parameters.


Program.prototype.setTitle = function (title) {
  this._title = title; // if (this.term('screen')) {
  //   // Tmux pane
  //   // if (this.tmux) {
  //   //   return this._write('\x1b]2;' + title + '\x1b\\');
  //   // }
  //   return this._write('\x1bk' + title + '\x1b\\');
  // }

  return this._twrite('\x1b]0;' + title + '\x07');
}; // OSC Ps ; Pt ST
// OSC Ps ; Pt BEL
//   Reset colors


Program.prototype.resetColors = function (param) {
  if (this.has('Cr')) {
    return this.put.Cr(param);
  }

  return this._twrite('\x1b]112\x07'); //return this._twrite('\x1b]112;' + param + '\x07');
}; // OSC Ps ; Pt ST
// OSC Ps ; Pt BEL
//   Change dynamic colors


Program.prototype.dynamicColors = function (param) {
  if (this.has('Cs')) {
    return this.put.Cs(param);
  }

  return this._twrite('\x1b]12;' + param + '\x07');
}; // OSC Ps ; Pt ST
// OSC Ps ; Pt BEL
//   Sel data


Program.prototype.selData = function (a, b) {
  if (this.has('Ms')) {
    return this.put.Ms(a, b);
  }

  return this._twrite('\x1b]52;' + a + ';' + b + '\x07');
};
/**
 * CSI
 */
// CSI Ps A
// Cursor Up Ps Times (default = 1) (CUU).


Program.prototype.cuu = Program.prototype.up = Program.prototype.cursorUp = function (param) {
  this.y -= param || 1;

  this._ncoords();

  if (this.tput) {
    if (!this.tput.strings.parm_up_cursor) {
      return this._write(this.repeat(this.tput.cuu1(), param));
    }

    return this.put.cuu(param);
  }

  return this._write('\x1b[' + (param || '') + 'A');
}; // CSI Ps B
// Cursor Down Ps Times (default = 1) (CUD).


Program.prototype.cud = Program.prototype.down = Program.prototype.cursorDown = function (param) {
  this.y += param || 1;

  this._ncoords();

  if (this.tput) {
    if (!this.tput.strings.parm_down_cursor) {
      return this._write(this.repeat(this.tput.cud1(), param));
    }

    return this.put.cud(param);
  }

  return this._write('\x1b[' + (param || '') + 'B');
}; // CSI Ps C
// Cursor Forward Ps Times (default = 1) (CUF).


Program.prototype.cuf = Program.prototype.right = Program.prototype.forward = Program.prototype.cursorForward = function (param) {
  this.x += param || 1;

  this._ncoords();

  if (this.tput) {
    if (!this.tput.strings.parm_right_cursor) {
      return this._write(this.repeat(this.tput.cuf1(), param));
    }

    return this.put.cuf(param);
  }

  return this._write('\x1b[' + (param || '') + 'C');
}; // CSI Ps D
// Cursor Backward Ps Times (default = 1) (CUB).


Program.prototype.cub = Program.prototype.left = Program.prototype.back = Program.prototype.cursorBackward = function (param) {
  this.x -= param || 1;

  this._ncoords();

  if (this.tput) {
    if (!this.tput.strings.parm_left_cursor) {
      return this._write(this.repeat(this.tput.cub1(), param));
    }

    return this.put.cub(param);
  }

  return this._write('\x1b[' + (param || '') + 'D');
}; // CSI Ps ; Ps H
// Cursor Position [row;column] (default = [1,1]) (CUP).


Program.prototype.cup = Program.prototype.pos = Program.prototype.cursorPos = function (row, col) {
  if (!this.zero) {
    row = (row || 1) - 1;
    col = (col || 1) - 1;
  } else {
    row = row || 0;
    col = col || 0;
  }

  this.x = col;
  this.y = row;

  this._ncoords();

  if (this.tput) return this.put.cup(row, col);
  return this._write('\x1b[' + (row + 1) + ';' + (col + 1) + 'H');
}; // CSI Ps J  Erase in Display (ED).
//     Ps = 0  -> Erase Below (default).
//     Ps = 1  -> Erase Above.
//     Ps = 2  -> Erase All.
//     Ps = 3  -> Erase Saved Lines (xterm).
// CSI ? Ps J
//   Erase in Display (DECSED).
//     Ps = 0  -> Selective Erase Below (default).
//     Ps = 1  -> Selective Erase Above.
//     Ps = 2  -> Selective Erase All.


Program.prototype.ed = Program.prototype.eraseInDisplay = function (param) {
  if (this.tput) {
    switch (param) {
      case 'above':
        param = 1;
        break;

      case 'all':
        param = 2;
        break;

      case 'saved':
        param = 3;
        break;

      case 'below':
      default:
        param = 0;
        break;
    } // extended tput.E3 = ^[[3;J


    return this.put.ed(param);
  }

  switch (param) {
    case 'above':
      return this._write('\X1b[1J');

    case 'all':
      return this._write('\x1b[2J');

    case 'saved':
      return this._write('\x1b[3J');

    case 'below':
    default:
      return this._write('\x1b[J');
  }
};

Program.prototype.clear = function () {
  this.x = 0;
  this.y = 0;
  if (this.tput) return this.put.clear();
  return this._write('\x1b[H\x1b[J');
}; // CSI Ps K  Erase in Line (EL).
//     Ps = 0  -> Erase to Right (default).
//     Ps = 1  -> Erase to Left.
//     Ps = 2  -> Erase All.
// CSI ? Ps K
//   Erase in Line (DECSEL).
//     Ps = 0  -> Selective Erase to Right (default).
//     Ps = 1  -> Selective Erase to Left.
//     Ps = 2  -> Selective Erase All.


Program.prototype.el = Program.prototype.eraseInLine = function (param) {
  if (this.tput) {
    //if (this.tput.back_color_erase) ...
    switch (param) {
      case 'left':
        param = 1;
        break;

      case 'all':
        param = 2;
        break;

      case 'right':
      default:
        param = 0;
        break;
    }

    return this.put.el(param);
  }

  switch (param) {
    case 'left':
      return this._write('\x1b[1K');

    case 'all':
      return this._write('\x1b[2K');

    case 'right':
    default:
      return this._write('\x1b[K');
  }
}; // CSI Pm m  Character Attributes (SGR).
//     Ps = 0  -> Normal (default).
//     Ps = 1  -> Bold.
//     Ps = 4  -> Underlined.
//     Ps = 5  -> Blink (appears as Bold).
//     Ps = 7  -> Inverse.
//     Ps = 8  -> Invisible, i.e., hidden (VT300).
//     Ps = 2 2  -> Normal (neither bold nor faint).
//     Ps = 2 4  -> Not underlined.
//     Ps = 2 5  -> Steady (not blinking).
//     Ps = 2 7  -> Positive (not inverse).
//     Ps = 2 8  -> Visible, i.e., not hidden (VT300).
//     Ps = 3 0  -> Set foreground color to Black.
//     Ps = 3 1  -> Set foreground color to Red.
//     Ps = 3 2  -> Set foreground color to Green.
//     Ps = 3 3  -> Set foreground color to Yellow.
//     Ps = 3 4  -> Set foreground color to Blue.
//     Ps = 3 5  -> Set foreground color to Magenta.
//     Ps = 3 6  -> Set foreground color to Cyan.
//     Ps = 3 7  -> Set foreground color to White.
//     Ps = 3 9  -> Set foreground color to default (original).
//     Ps = 4 0  -> Set background color to Black.
//     Ps = 4 1  -> Set background color to Red.
//     Ps = 4 2  -> Set background color to Green.
//     Ps = 4 3  -> Set background color to Yellow.
//     Ps = 4 4  -> Set background color to Blue.
//     Ps = 4 5  -> Set background color to Magenta.
//     Ps = 4 6  -> Set background color to Cyan.
//     Ps = 4 7  -> Set background color to White.
//     Ps = 4 9  -> Set background color to default (original).
//   If 16-color support is compiled, the following apply.  Assume
//   that xterm's resources are set so that the ISO color codes are
//   the first 8 of a set of 16.  Then the aixterm colors are the
//   bright versions of the ISO colors:
//     Ps = 9 0  -> Set foreground color to Black.
//     Ps = 9 1  -> Set foreground color to Red.
//     Ps = 9 2  -> Set foreground color to Green.
//     Ps = 9 3  -> Set foreground color to Yellow.
//     Ps = 9 4  -> Set foreground color to Blue.
//     Ps = 9 5  -> Set foreground color to Magenta.
//     Ps = 9 6  -> Set foreground color to Cyan.
//     Ps = 9 7  -> Set foreground color to White.
//     Ps = 1 0 0  -> Set background color to Black.
//     Ps = 1 0 1  -> Set background color to Red.
//     Ps = 1 0 2  -> Set background color to Green.
//     Ps = 1 0 3  -> Set background color to Yellow.
//     Ps = 1 0 4  -> Set background color to Blue.
//     Ps = 1 0 5  -> Set background color to Magenta.
//     Ps = 1 0 6  -> Set background color to Cyan.
//     Ps = 1 0 7  -> Set background color to White.
//   If xterm is compiled with the 16-color support disabled, it
//   supports the following, from rxvt:
//     Ps = 1 0 0  -> Set foreground and background color to
//     default.
//   If 88- or 256-color support is compiled, the following apply.
//     Ps = 3 8  ; 5  ; Ps -> Set foreground color to the second
//     Ps.
//     Ps = 4 8  ; 5  ; Ps -> Set background color to the second
//     Ps.


Program.prototype.sgr = Program.prototype.attr = Program.prototype.charAttributes = function (param, val) {
  return this._write(this._attr(param, val));
};

Program.prototype.text = function (text, attr) {
  return this._attr(attr, true) + text + this._attr(attr, false);
}; // NOTE: sun-color may not allow multiple params for SGR.


Program.prototype._attr = function (param, val) {
  var self = this,
      parts,
      color,
      m;

  if (Array.isArray(param)) {
    parts = param;
    param = parts[0] || 'normal';
  } else {
    param = param || 'normal';
    parts = param.split(/\s*[,;]\s*/);
  }

  if (parts.length > 1) {
    var used = {},
        out = [];
    parts.forEach(function (part) {
      part = self._attr(part, val).slice(2, -1);
      if (part === '') return;
      if (used[part]) return;
      used[part] = true;
      out.push(part);
    });
    return '\x1b[' + out.join(';') + 'm';
  }

  if (param.indexOf('no ') === 0) {
    param = param.substring(3);
    val = false;
  } else if (param.indexOf('!') === 0) {
    param = param.substring(1);
    val = false;
  }

  switch (param) {
    // attributes
    case 'normal':
    case 'default':
      if (val === false) return '';
      return '\x1b[m';

    case 'bold':
      return val === false ? '\x1b[22m' : '\x1b[1m';

    case 'ul':
    case 'underline':
    case 'underlined':
      return val === false ? '\x1b[24m' : '\x1b[4m';

    case 'blink':
      return val === false ? '\x1b[25m' : '\x1b[5m';

    case 'inverse':
      return val === false ? '\x1b[27m' : '\x1b[7m';

    case 'invisible':
      return val === false ? '\x1b[28m' : '\x1b[8m';
    // 8-color foreground

    case 'black fg':
      return val === false ? '\x1b[39m' : '\x1b[30m';

    case 'red fg':
      return val === false ? '\x1b[39m' : '\x1b[31m';

    case 'green fg':
      return val === false ? '\x1b[39m' : '\x1b[32m';

    case 'yellow fg':
      return val === false ? '\x1b[39m' : '\x1b[33m';

    case 'blue fg':
      return val === false ? '\x1b[39m' : '\x1b[34m';

    case 'magenta fg':
      return val === false ? '\x1b[39m' : '\x1b[35m';

    case 'cyan fg':
      return val === false ? '\x1b[39m' : '\x1b[36m';

    case 'white fg':
    case 'light grey fg':
    case 'light gray fg':
    case 'bright grey fg':
    case 'bright gray fg':
      return val === false ? '\x1b[39m' : '\x1b[37m';

    case 'default fg':
      if (val === false) return '';
      return '\x1b[39m';
    // 8-color background

    case 'black bg':
      return val === false ? '\x1b[49m' : '\x1b[40m';

    case 'red bg':
      return val === false ? '\x1b[49m' : '\x1b[41m';

    case 'green bg':
      return val === false ? '\x1b[49m' : '\x1b[42m';

    case 'yellow bg':
      return val === false ? '\x1b[49m' : '\x1b[43m';

    case 'blue bg':
      return val === false ? '\x1b[49m' : '\x1b[44m';

    case 'magenta bg':
      return val === false ? '\x1b[49m' : '\x1b[45m';

    case 'cyan bg':
      return val === false ? '\x1b[49m' : '\x1b[46m';

    case 'white bg':
    case 'light grey bg':
    case 'light gray bg':
    case 'bright grey bg':
    case 'bright gray bg':
      return val === false ? '\x1b[49m' : '\x1b[47m';

    case 'default bg':
      if (val === false) return '';
      return '\x1b[49m';
    // 16-color foreground

    case 'light black fg':
    case 'bright black fg':
    case 'grey fg':
    case 'gray fg':
      return val === false ? '\x1b[39m' : '\x1b[90m';

    case 'light red fg':
    case 'bright red fg':
      return val === false ? '\x1b[39m' : '\x1b[91m';

    case 'light green fg':
    case 'bright green fg':
      return val === false ? '\x1b[39m' : '\x1b[92m';

    case 'light yellow fg':
    case 'bright yellow fg':
      return val === false ? '\x1b[39m' : '\x1b[93m';

    case 'light blue fg':
    case 'bright blue fg':
      return val === false ? '\x1b[39m' : '\x1b[94m';

    case 'light magenta fg':
    case 'bright magenta fg':
      return val === false ? '\x1b[39m' : '\x1b[95m';

    case 'light cyan fg':
    case 'bright cyan fg':
      return val === false ? '\x1b[39m' : '\x1b[96m';

    case 'light white fg':
    case 'bright white fg':
      return val === false ? '\x1b[39m' : '\x1b[97m';
    // 16-color background

    case 'light black bg':
    case 'bright black bg':
    case 'grey bg':
    case 'gray bg':
      return val === false ? '\x1b[49m' : '\x1b[100m';

    case 'light red bg':
    case 'bright red bg':
      return val === false ? '\x1b[49m' : '\x1b[101m';

    case 'light green bg':
    case 'bright green bg':
      return val === false ? '\x1b[49m' : '\x1b[102m';

    case 'light yellow bg':
    case 'bright yellow bg':
      return val === false ? '\x1b[49m' : '\x1b[103m';

    case 'light blue bg':
    case 'bright blue bg':
      return val === false ? '\x1b[49m' : '\x1b[104m';

    case 'light magenta bg':
    case 'bright magenta bg':
      return val === false ? '\x1b[49m' : '\x1b[105m';

    case 'light cyan bg':
    case 'bright cyan bg':
      return val === false ? '\x1b[49m' : '\x1b[106m';

    case 'light white bg':
    case 'bright white bg':
      return val === false ? '\x1b[49m' : '\x1b[107m';
    // non-16-color rxvt default fg and bg

    case 'default fg bg':
      if (val === false) return '';
      return this.term('rxvt') ? '\x1b[100m' : '\x1b[39;49m';

    default:
      // 256-color fg and bg
      if (param[0] === '#') {
        param = param.replace(/#(?:[0-9a-f]{3}){1,2}/i, _colors.default.match);
      }

      m = /^(-?\d+) (fg|bg)$/.exec(param);

      if (m) {
        color = +m[1];

        if (val === false || color === -1) {
          return this._attr('default ' + m[2]);
        }

        color = _colors.default.reduce(color, this.tput.colors);

        if (color < 16 || this.tput && this.tput.colors <= 16) {
          if (m[2] === 'fg') {
            if (color < 8) {
              color += 30;
            } else if (color < 16) {
              color -= 8;
              color += 90;
            }
          } else if (m[2] === 'bg') {
            if (color < 8) {
              color += 40;
            } else if (color < 16) {
              color -= 8;
              color += 100;
            }
          }

          return '\x1b[' + color + 'm';
        }

        if (m[2] === 'fg') {
          return '\x1b[38;5;' + color + 'm';
        }

        if (m[2] === 'bg') {
          return '\x1b[48;5;' + color + 'm';
        }
      }

      if (/^[\d;]*$/.test(param)) {
        return '\x1b[' + param + 'm';
      }

      return null;
  }
};

Program.prototype.fg = Program.prototype.setForeground = function (color, val) {
  color = color.split(/\s*[,;]\s*/).join(' fg, ') + ' fg';
  return this.attr(color, val);
};

Program.prototype.bg = Program.prototype.setBackground = function (color, val) {
  color = color.split(/\s*[,;]\s*/).join(' bg, ') + ' bg';
  return this.attr(color, val);
}; // CSI Ps n  Device Status Report (DSR).
//     Ps = 5  -> Status Report.  Result (``OK'') is
//   CSI 0 n
//     Ps = 6  -> Report Cursor Position (CPR) [row;column].
//   Result is
//   CSI r ; c R
// CSI ? Ps n
//   Device Status Report (DSR, DEC-specific).
//     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI
//     ? r ; c R (assumes page is zero).
//     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).
//     or CSI ? 1 1  n  (not ready).
//     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)
//     or CSI ? 2 1  n  (locked).
//     Ps = 2 6  -> Report Keyboard status as
//   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).
//   The last two parameters apply to VT400 & up, and denote key-
//   board ready and LK01 respectively.
//     Ps = 5 3  -> Report Locator status as
//   CSI ? 5 3  n  Locator available, if compiled-in, or
//   CSI ? 5 0  n  No Locator, if not.


Program.prototype.dsr = Program.prototype.deviceStatus = function (param, callback, dec, noBypass) {
  if (dec) {
    return this.response('device-status', '\x1b[?' + (param || '0') + 'n', callback, noBypass);
  }

  return this.response('device-status', '\x1b[' + (param || '0') + 'n', callback, noBypass);
};

Program.prototype.getCursor = function (callback) {
  return this.deviceStatus(6, callback, false, true);
};

Program.prototype.saveReportedCursor = function (callback) {
  var self = this;

  if (this.tput.strings.user7 === '\x1b[6n' || this.term('screen')) {
    return this.getCursor(function (err, data) {
      if (data) {
        self._rx = data.status.x;
        self._ry = data.status.y;
      }

      if (!callback) return;
      return callback(err);
    });
  }

  if (!callback) return;
  return callback();
};

Program.prototype.restoreReportedCursor = function () {
  if (this._rx == null) return;
  return this.cup(this._ry, this._rx); // return this.nel();
};
/**
 * Additions
 */
// CSI Ps @
// Insert Ps (Blank) Character(s) (default = 1) (ICH).


Program.prototype.ich = Program.prototype.insertChars = function (param) {
  this.x += param || 1;

  this._ncoords();

  if (this.tput) return this.put.ich(param);
  return this._write('\x1b[' + (param || 1) + '@');
}; // CSI Ps E
// Cursor Next Line Ps Times (default = 1) (CNL).
// same as CSI Ps B ?


Program.prototype.cnl = Program.prototype.cursorNextLine = function (param) {
  this.y += param || 1;

  this._ncoords();

  return this._write('\x1b[' + (param || '') + 'E');
}; // CSI Ps F
// Cursor Preceding Line Ps Times (default = 1) (CNL).
// reuse CSI Ps A ?


Program.prototype.cpl = Program.prototype.cursorPrecedingLine = function (param) {
  this.y -= param || 1;

  this._ncoords();

  return this._write('\x1b[' + (param || '') + 'F');
}; // CSI Ps G
// Cursor Character Absolute  [column] (default = [row,1]) (CHA).


Program.prototype.cha = Program.prototype.cursorCharAbsolute = function (param) {
  if (!this.zero) {
    param = (param || 1) - 1;
  } else {
    param = param || 0;
  }

  this.x = param;
  this.y = 0;

  this._ncoords();

  if (this.tput) return this.put.hpa(param);
  return this._write('\x1b[' + (param + 1) + 'G');
}; // CSI Ps L
// Insert Ps Line(s) (default = 1) (IL).


Program.prototype.il = Program.prototype.insertLines = function (param) {
  if (this.tput) return this.put.il(param);
  return this._write('\x1b[' + (param || '') + 'L');
}; // CSI Ps M
// Delete Ps Line(s) (default = 1) (DL).


Program.prototype.dl = Program.prototype.deleteLines = function (param) {
  if (this.tput) return this.put.dl(param);
  return this._write('\x1b[' + (param || '') + 'M');
}; // CSI Ps P
// Delete Ps Character(s) (default = 1) (DCH).


Program.prototype.dch = Program.prototype.deleteChars = function (param) {
  if (this.tput) return this.put.dch(param);
  return this._write('\x1b[' + (param || '') + 'P');
}; // CSI Ps X
// Erase Ps Character(s) (default = 1) (ECH).


Program.prototype.ech = Program.prototype.eraseChars = function (param) {
  if (this.tput) return this.put.ech(param);
  return this._write('\x1b[' + (param || '') + 'X');
}; // CSI Pm `  Character Position Absolute
//   [column] (default = [row,1]) (HPA).


Program.prototype.hpa = Program.prototype.charPosAbsolute = function (param) {
  this.x = param || 0;

  this._ncoords();

  if (this.tput) {
    return this.put.hpa.apply(this.put, arguments);
  }

  param = slice.call(arguments).join(';');
  return this._write('\x1b[' + (param || '') + '`');
}; // 141 61 a * HPR -
// Horizontal Position Relative
// reuse CSI Ps C ?


Program.prototype.hpr = Program.prototype.HPositionRelative = function (param) {
  if (this.tput) return this.cuf(param);
  this.x += param || 1;

  this._ncoords(); // Does not exist:
  // if (this.tput) return this.put.hpr(param);


  return this._write('\x1b[' + (param || '') + 'a');
}; // CSI Ps c  Send Device Attributes (Primary DA).
//     Ps = 0  or omitted -> request attributes from terminal.  The
//     response depends on the decTerminalID resource setting.
//     -> CSI ? 1 ; 2 c  (``VT100 with Advanced Video Option'')
//     -> CSI ? 1 ; 0 c  (``VT101 with No Options'')
//     -> CSI ? 6 c  (``VT102'')
//     -> CSI ? 6 0 ; 1 ; 2 ; 6 ; 8 ; 9 ; 1 5 ; c  (``VT220'')
//   The VT100-style response parameters do not mean anything by
//   themselves.  VT220 parameters do, telling the host what fea-
//   tures the terminal supports:
//     Ps = 1  -> 132-columns.
//     Ps = 2  -> Printer.
//     Ps = 6  -> Selective erase.
//     Ps = 8  -> User-defined keys.
//     Ps = 9  -> National replacement character sets.
//     Ps = 1 5  -> Technical characters.
//     Ps = 2 2  -> ANSI color, e.g., VT525.
//     Ps = 2 9  -> ANSI text locator (i.e., DEC Locator mode).
// CSI > Ps c
//   Send Device Attributes (Secondary DA).
//     Ps = 0  or omitted -> request the terminal's identification
//     code.  The response depends on the decTerminalID resource set-
//     ting.  It should apply only to VT220 and up, but xterm extends
//     this to VT100.
//     -> CSI  > Pp ; Pv ; Pc c
//   where Pp denotes the terminal type
//     Pp = 0  -> ``VT100''.
//     Pp = 1  -> ``VT220''.
//   and Pv is the firmware version (for xterm, this was originally
//   the XFree86 patch number, starting with 95).  In a DEC termi-
//   nal, Pc indicates the ROM cartridge registration number and is
//   always zero.
// More information:
//   xterm/charproc.c - line 2012, for more information.
//   vim responds with ^[[?0c or ^[[?1c after the terminal's response (?)


Program.prototype.da = Program.prototype.sendDeviceAttributes = function (param, callback) {
  return this.response('device-attributes', '\x1b[' + (param || '') + 'c', callback);
}; // CSI Pm d
// Line Position Absolute  [row] (default = [1,column]) (VPA).
// NOTE: Can't find in terminfo, no idea why it has multiple params.


Program.prototype.vpa = Program.prototype.linePosAbsolute = function (param) {
  this.y = param || 1;

  this._ncoords();

  if (this.tput) {
    return this.put.vpa.apply(this.put, arguments);
  }

  param = slice.call(arguments).join(';');
  return this._write('\x1b[' + (param || '') + 'd');
}; // 145 65 e * VPR - Vertical Position Relative
// reuse CSI Ps B ?


Program.prototype.vpr = Program.prototype.VPositionRelative = function (param) {
  if (this.tput) return this.cud(param);
  this.y += param || 1;

  this._ncoords(); // Does not exist:
  // if (this.tput) return this.put.vpr(param);


  return this._write('\x1b[' + (param || '') + 'e');
}; // CSI Ps ; Ps f
//   Horizontal and Vertical Position [row;column] (default =
//   [1,1]) (HVP).


Program.prototype.hvp = Program.prototype.HVPosition = function (row, col) {
  if (!this.zero) {
    row = (row || 1) - 1;
    col = (col || 1) - 1;
  } else {
    row = row || 0;
    col = col || 0;
  }

  this.y = row;
  this.x = col;

  this._ncoords(); // Does not exist (?):
  // if (this.tput) return this.put.hvp(row, col);


  if (this.tput) return this.put.cup(row, col);
  return this._write('\x1b[' + (row + 1) + ';' + (col + 1) + 'f');
}; // CSI Pm h  Set Mode (SM).
//     Ps = 2  -> Keyboard Action Mode (AM).
//     Ps = 4  -> Insert Mode (IRM).
//     Ps = 1 2  -> Send/receive (SRM).
//     Ps = 2 0  -> Automatic Newline (LNM).
// CSI ? Pm h
//   DEC Private Mode Set (DECSET).
//     Ps = 1  -> Application Cursor Keys (DECCKM).
//     Ps = 2  -> Designate USASCII for character sets G0-G3
//     (DECANM), and set VT100 mode.
//     Ps = 3  -> 132 Column Mode (DECCOLM).
//     Ps = 4  -> Smooth (Slow) Scroll (DECSCLM).
//     Ps = 5  -> Reverse Video (DECSCNM).
//     Ps = 6  -> Origin Mode (DECOM).
//     Ps = 7  -> Wraparound Mode (DECAWM).
//     Ps = 8  -> Auto-repeat Keys (DECARM).
//     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-
//     tion Mouse Tracking.
//     Ps = 1 0  -> Show toolbar (rxvt).
//     Ps = 1 2  -> Start Blinking Cursor (att610).
//     Ps = 1 8  -> Print form feed (DECPFF).
//     Ps = 1 9  -> Set print extent to full screen (DECPEX).
//     Ps = 2 5  -> Show Cursor (DECTCEM).
//     Ps = 3 0  -> Show scrollbar (rxvt).
//     Ps = 3 5  -> Enable font-shifting functions (rxvt).
//     Ps = 3 8  -> Enter Tektronix Mode (DECTEK).
//     Ps = 4 0  -> Allow 80 -> 132 Mode.
//     Ps = 4 1  -> more(1) fix (see curses resource).
//     Ps = 4 2  -> Enable Nation Replacement Character sets (DECN-
//     RCM).
//     Ps = 4 4  -> Turn On Margin Bell.
//     Ps = 4 5  -> Reverse-wraparound Mode.
//     Ps = 4 6  -> Start Logging.  This is normally disabled by a
//     compile-time option.
//     Ps = 4 7  -> Use Alternate Screen Buffer.  (This may be dis-
//     abled by the titeInhibit resource).
//     Ps = 6 6  -> Application keypad (DECNKM).
//     Ps = 6 7  -> Backarrow key sends backspace (DECBKM).
//     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and
//     release.  See the section Mouse Tracking.
//     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.
//     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.
//     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.
//     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.
//     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.
//     Ps = 1 0 1 0  -> Scroll to bottom on tty output (rxvt).
//     Ps = 1 0 1 1  -> Scroll to bottom on key press (rxvt).
//     Ps = 1 0 3 4  -> Interpret "meta" key, sets eighth bit.
//     (enables the eightBitInput resource).
//     Ps = 1 0 3 5  -> Enable special modifiers for Alt and Num-
//     Lock keys.  (This enables the numLock resource).
//     Ps = 1 0 3 6  -> Send ESC   when Meta modifies a key.  (This
//     enables the metaSendsEscape resource).
//     Ps = 1 0 3 7  -> Send DEL from the editing-keypad Delete
//     key.
//     Ps = 1 0 3 9  -> Send ESC  when Alt modifies a key.  (This
//     enables the altSendsEscape resource).
//     Ps = 1 0 4 0  -> Keep selection even if not highlighted.
//     (This enables the keepSelection resource).
//     Ps = 1 0 4 1  -> Use the CLIPBOARD selection.  (This enables
//     the selectToClipboard resource).
//     Ps = 1 0 4 2  -> Enable Urgency window manager hint when
//     Control-G is received.  (This enables the bellIsUrgent
//     resource).
//     Ps = 1 0 4 3  -> Enable raising of the window when Control-G
//     is received.  (enables the popOnBell resource).
//     Ps = 1 0 4 7  -> Use Alternate Screen Buffer.  (This may be
//     disabled by the titeInhibit resource).
//     Ps = 1 0 4 8  -> Save cursor as in DECSC.  (This may be dis-
//     abled by the titeInhibit resource).
//     Ps = 1 0 4 9  -> Save cursor as in DECSC and use Alternate
//     Screen Buffer, clearing it first.  (This may be disabled by
//     the titeInhibit resource).  This combines the effects of the 1
//     0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based
//     applications rather than the 4 7  mode.
//     Ps = 1 0 5 0  -> Set terminfo/termcap function-key mode.
//     Ps = 1 0 5 1  -> Set Sun function-key mode.
//     Ps = 1 0 5 2  -> Set HP function-key mode.
//     Ps = 1 0 5 3  -> Set SCO function-key mode.
//     Ps = 1 0 6 0  -> Set legacy keyboard emulation (X11R6).
//     Ps = 1 0 6 1  -> Set VT220 keyboard emulation.
//     Ps = 2 0 0 4  -> Set bracketed paste mode.
// Modes:
//   http://vt100.net/docs/vt220-rm/chapter4.html


Program.prototype.sm = Program.prototype.setMode = function () {
  var param = slice.call(arguments).join(';');
  return this._write('\x1b[' + (param || '') + 'h');
};

Program.prototype.decset = function () {
  var param = slice.call(arguments).join(';');
  return this.setMode('?' + param);
};

Program.prototype.dectcem = Program.prototype.cnorm = Program.prototype.cvvis = Program.prototype.showCursor = function () {
  this.cursorHidden = false; // NOTE: In xterm terminfo:
  // cnorm stops blinking cursor
  // cvvis starts blinking cursor

  if (this.tput) return this.put.cnorm(); //if (this.tput) return this.put.cvvis();
  // return this._write('\x1b[?12l\x1b[?25h'); // cursor_normal
  // return this._write('\x1b[?12;25h'); // cursor_visible

  return this.setMode('?25');
};

Program.prototype.alternate = Program.prototype.smcup = Program.prototype.alternateBuffer = function () {
  this.isAlt = true;
  if (this.tput) return this.put.smcup();
  if (this.term('vt') || this.term('linux')) return;
  this.setMode('?47');
  return this.setMode('?1049');
}; // CSI Pm l  Reset Mode (RM).
//     Ps = 2  -> Keyboard Action Mode (AM).
//     Ps = 4  -> Replace Mode (IRM).
//     Ps = 1 2  -> Send/receive (SRM).
//     Ps = 2 0  -> Normal Linefeed (LNM).
// CSI ? Pm l
//   DEC Private Mode Reset (DECRST).
//     Ps = 1  -> Normal Cursor Keys (DECCKM).
//     Ps = 2  -> Designate VT52 mode (DECANM).
//     Ps = 3  -> 80 Column Mode (DECCOLM).
//     Ps = 4  -> Jump (Fast) Scroll (DECSCLM).
//     Ps = 5  -> Normal Video (DECSCNM).
//     Ps = 6  -> Normal Cursor Mode (DECOM).
//     Ps = 7  -> No Wraparound Mode (DECAWM).
//     Ps = 8  -> No Auto-repeat Keys (DECARM).
//     Ps = 9  -> Don't send Mouse X & Y on button press.
//     Ps = 1 0  -> Hide toolbar (rxvt).
//     Ps = 1 2  -> Stop Blinking Cursor (att610).
//     Ps = 1 8  -> Don't print form feed (DECPFF).
//     Ps = 1 9  -> Limit print to scrolling region (DECPEX).
//     Ps = 2 5  -> Hide Cursor (DECTCEM).
//     Ps = 3 0  -> Don't show scrollbar (rxvt).
//     Ps = 3 5  -> Disable font-shifting functions (rxvt).
//     Ps = 4 0  -> Disallow 80 -> 132 Mode.
//     Ps = 4 1  -> No more(1) fix (see curses resource).
//     Ps = 4 2  -> Disable Nation Replacement Character sets (DEC-
//     NRCM).
//     Ps = 4 4  -> Turn Off Margin Bell.
//     Ps = 4 5  -> No Reverse-wraparound Mode.
//     Ps = 4 6  -> Stop Logging.  (This is normally disabled by a
//     compile-time option).
//     Ps = 4 7  -> Use Normal Screen Buffer.
//     Ps = 6 6  -> Numeric keypad (DECNKM).
//     Ps = 6 7  -> Backarrow key sends delete (DECBKM).
//     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and
//     release.  See the section Mouse Tracking.
//     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.
//     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.
//     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.
//     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.
//     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.
//     Ps = 1 0 1 0  -> Don't scroll to bottom on tty output
//     (rxvt).
//     Ps = 1 0 1 1  -> Don't scroll to bottom on key press (rxvt).
//     Ps = 1 0 3 4  -> Don't interpret "meta" key.  (This disables
//     the eightBitInput resource).
//     Ps = 1 0 3 5  -> Disable special modifiers for Alt and Num-
//     Lock keys.  (This disables the numLock resource).
//     Ps = 1 0 3 6  -> Don't send ESC  when Meta modifies a key.
//     (This disables the metaSendsEscape resource).
//     Ps = 1 0 3 7  -> Send VT220 Remove from the editing-keypad
//     Delete key.
//     Ps = 1 0 3 9  -> Don't send ESC  when Alt modifies a key.
//     (This disables the altSendsEscape resource).
//     Ps = 1 0 4 0  -> Do not keep selection when not highlighted.
//     (This disables the keepSelection resource).
//     Ps = 1 0 4 1  -> Use the PRIMARY selection.  (This disables
//     the selectToClipboard resource).
//     Ps = 1 0 4 2  -> Disable Urgency window manager hint when
//     Control-G is received.  (This disables the bellIsUrgent
//     resource).
//     Ps = 1 0 4 3  -> Disable raising of the window when Control-
//     G is received.  (This disables the popOnBell resource).
//     Ps = 1 0 4 7  -> Use Normal Screen Buffer, clearing screen
//     first if in the Alternate Screen.  (This may be disabled by
//     the titeInhibit resource).
//     Ps = 1 0 4 8  -> Restore cursor as in DECRC.  (This may be
//     disabled by the titeInhibit resource).
//     Ps = 1 0 4 9  -> Use Normal Screen Buffer and restore cursor
//     as in DECRC.  (This may be disabled by the titeInhibit
//     resource).  This combines the effects of the 1 0 4 7  and 1 0
//     4 8  modes.  Use this with terminfo-based applications rather
//     than the 4 7  mode.
//     Ps = 1 0 5 0  -> Reset terminfo/termcap function-key mode.
//     Ps = 1 0 5 1  -> Reset Sun function-key mode.
//     Ps = 1 0 5 2  -> Reset HP function-key mode.
//     Ps = 1 0 5 3  -> Reset SCO function-key mode.
//     Ps = 1 0 6 0  -> Reset legacy keyboard emulation (X11R6).
//     Ps = 1 0 6 1  -> Reset keyboard emulation to Sun/PC style.
//     Ps = 2 0 0 4  -> Reset bracketed paste mode.


Program.prototype.rm = Program.prototype.resetMode = function () {
  var param = slice.call(arguments).join(';');
  return this._write('\x1b[' + (param || '') + 'l');
};

Program.prototype.decrst = function () {
  var param = slice.call(arguments).join(';');
  return this.resetMode('?' + param);
};

Program.prototype.dectcemh = Program.prototype.cursor_invisible = Program.prototype.vi = Program.prototype.civis = Program.prototype.hideCursor = function () {
  this.cursorHidden = true;
  if (this.tput) return this.put.civis();
  return this.resetMode('?25');
};

Program.prototype.rmcup = Program.prototype.normalBuffer = function () {
  this.isAlt = false;
  if (this.tput) return this.put.rmcup();
  this.resetMode('?47');
  return this.resetMode('?1049');
};

Program.prototype.enableMouse = function () {
  if (process.env.BLESSED_FORCE_MODES) {
    var modes = process.env.BLESSED_FORCE_MODES.split(',');
    var options = {};

    for (var n = 0; n < modes.length; ++n) {
      var pair = modes[n].split('=');
      var v = pair[1] !== '0';

      switch (pair[0].toUpperCase()) {
        case 'SGRMOUSE':
          options.sgrMouse = v;
          break;

        case 'UTFMOUSE':
          options.utfMouse = v;
          break;

        case 'VT200MOUSE':
          options.vt200Mouse = v;
          break;

        case 'URXVTMOUSE':
          options.urxvtMouse = v;
          break;

        case 'X10MOUSE':
          options.x10Mouse = v;
          break;

        case 'DECMOUSE':
          options.decMouse = v;
          break;

        case 'PTERMMOUSE':
          options.ptermMouse = v;
          break;

        case 'JSBTERMMOUSE':
          options.jsbtermMouse = v;
          break;

        case 'VT200HILITE':
          options.vt200Hilite = v;
          break;

        case 'GPMMOUSE':
          options.gpmMouse = v;
          break;

        case 'CELLMOTION':
          options.cellMotion = v;
          break;

        case 'ALLMOTION':
          options.allMotion = v;
          break;

        case 'SENDFOCUS':
          options.sendFocus = v;
          break;
      }
    }

    return this.setMouse(options, true);
  } // NOTE:
  // Cell Motion isn't normally need for anything below here, but we'll
  // activate it for tmux (whether using it or not) in case our all-motion
  // passthrough does not work. It can't hurt.


  if (this.term('rxvt-unicode')) {
    return this.setMouse({
      urxvtMouse: true,
      cellMotion: true,
      allMotion: true
    }, true);
  } // rxvt does not support the X10 UTF extensions


  if (this.term('rxvt')) {
    return this.setMouse({
      vt200Mouse: true,
      x10Mouse: true,
      cellMotion: true,
      allMotion: true
    }, true);
  } // libvte is broken. Older versions do not support the
  // X10 UTF extension. However, later versions do support
  // SGR/URXVT.


  if (this.isVTE) {
    return this.setMouse({
      // NOTE: Could also use urxvtMouse here.
      sgrMouse: true,
      cellMotion: true,
      allMotion: true
    }, true);
  }

  if (this.term('linux')) {
    return this.setMouse({
      vt200Mouse: true,
      gpmMouse: true
    }, true);
  }

  if (this.term('xterm') || this.term('screen') || this.tput && this.tput.strings.key_mouse) {
    return this.setMouse({
      vt200Mouse: true,
      utfMouse: true,
      cellMotion: true,
      allMotion: true
    }, true);
  }
};

Program.prototype.disableMouse = function () {
  if (!this._currentMouse) return;
  var obj = {};
  Object.keys(this._currentMouse).forEach(function (key) {
    obj[key] = false;
  });
  return this.setMouse(obj, false);
}; // Set Mouse


Program.prototype.setMouse = function (opt, enable) {
  if (opt.normalMouse != null) {
    opt.vt200Mouse = opt.normalMouse;
    opt.allMotion = opt.normalMouse;
  }

  if (opt.hiliteTracking != null) {
    opt.vt200Hilite = opt.hiliteTracking;
  }

  if (enable === true) {
    if (this._currentMouse) {
      this.setMouse(opt);
      Object.keys(opt).forEach(function (key) {
        this._currentMouse[key] = opt[key];
      }, this);
      return;
    }

    this._currentMouse = opt;
    this.mouseEnabled = true;
  } else if (enable === false) {
    delete this._currentMouse;
    this.mouseEnabled = false;
  } //     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-
  //     tion Mouse Tracking.
  //     Ps = 9  -> Don't send Mouse X & Y on button press.
  // x10 mouse


  if (opt.x10Mouse != null) {
    if (opt.x10Mouse) this.setMode('?9');else this.resetMode('?9');
  } //     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and
  //     release.  See the section Mouse Tracking.
  //     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and
  //     release.  See the section Mouse Tracking.
  // vt200 mouse


  if (opt.vt200Mouse != null) {
    if (opt.vt200Mouse) this.setMode('?1000');else this.resetMode('?1000');
  } //     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.
  //     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.


  if (opt.vt200Hilite != null) {
    if (opt.vt200Hilite) this.setMode('?1001');else this.resetMode('?1001');
  } //     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.
  //     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.
  // button event mouse


  if (opt.cellMotion != null) {
    if (opt.cellMotion) this.setMode('?1002');else this.resetMode('?1002');
  } //     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.
  //     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.
  // any event mouse


  if (opt.allMotion != null) {
    // NOTE: Latest versions of tmux seem to only support cellMotion (not
    // allMotion). We pass all motion through to the terminal.
    if (this.tmux && this.tmuxVersion >= 2) {
      if (opt.allMotion) this._twrite('\x1b[?1003h');else this._twrite('\x1b[?1003l');
    } else {
      if (opt.allMotion) this.setMode('?1003');else this.resetMode('?1003');
    }
  } //     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.
  //     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.


  if (opt.sendFocus != null) {
    if (opt.sendFocus) this.setMode('?1004');else this.resetMode('?1004');
  } //     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.
  //     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.


  if (opt.utfMouse != null) {
    if (opt.utfMouse) this.setMode('?1005');else this.resetMode('?1005');
  } // sgr mouse


  if (opt.sgrMouse != null) {
    if (opt.sgrMouse) this.setMode('?1006');else this.resetMode('?1006');
  } // urxvt mouse


  if (opt.urxvtMouse != null) {
    if (opt.urxvtMouse) this.setMode('?1015');else this.resetMode('?1015');
  } // dec mouse


  if (opt.decMouse != null) {
    if (opt.decMouse) this._write('\x1b[1;2\'z\x1b[1;3\'{');else this._write('\x1b[\'z');
  } // pterm mouse


  if (opt.ptermMouse != null) {
    if (opt.ptermMouse) this._write('\x1b[>1h\x1b[>6h\x1b[>7h\x1b[>1h\x1b[>9l');else this._write('\x1b[>1l\x1b[>6l\x1b[>7l\x1b[>1l\x1b[>9h');
  } // jsbterm mouse


  if (opt.jsbtermMouse != null) {
    // + = advanced mode
    if (opt.jsbtermMouse) this._write('\x1b[0~ZwLMRK+1Q\x1b\\');else this._write('\x1b[0~ZwQ\x1b\\');
  } // gpm mouse


  if (opt.gpmMouse != null) {
    if (opt.gpmMouse) this.enableGpm();else this.disableGpm();
  }
}; // CSI Ps ; Ps r
//   Set Scrolling Region [top;bottom] (default = full size of win-
//   dow) (DECSTBM).
// CSI ? Pm r


Program.prototype.decstbm = Program.prototype.csr = Program.prototype.setScrollRegion = function (top, bottom) {
  if (!this.zero) {
    top = (top || 1) - 1;
    bottom = (bottom || this.rows) - 1;
  } else {
    top = top || 0;
    bottom = bottom || this.rows - 1;
  }

  this.scrollTop = top;
  this.scrollBottom = bottom;
  this.x = 0;
  this.y = 0;

  this._ncoords();

  if (this.tput) return this.put.csr(top, bottom);
  return this._write('\x1b[' + (top + 1) + ';' + (bottom + 1) + 'r');
}; // CSI s
//   Save cursor (ANSI.SYS).


Program.prototype.scA = Program.prototype.saveCursorA = function () {
  this.savedX = this.x;
  this.savedY = this.y;
  if (this.tput) return this.put.sc();
  return this._write('\x1b[s');
}; // CSI u
//   Restore cursor (ANSI.SYS).


Program.prototype.rcA = Program.prototype.restoreCursorA = function () {
  this.x = this.savedX || 0;
  this.y = this.savedY || 0;
  if (this.tput) return this.put.rc();
  return this._write('\x1b[u');
};
/**
 * Lesser Used
 */
// CSI Ps I
//   Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).


Program.prototype.cht = Program.prototype.cursorForwardTab = function (param) {
  this.x += 8;

  this._ncoords();

  if (this.tput) return this.put.tab(param);
  return this._write('\x1b[' + (param || 1) + 'I');
}; // CSI Ps S  Scroll up Ps lines (default = 1) (SU).


Program.prototype.su = Program.prototype.scrollUp = function (param) {
  this.y -= param || 1;

  this._ncoords();

  if (this.tput) return this.put.parm_index(param);
  return this._write('\x1b[' + (param || 1) + 'S');
}; // CSI Ps T  Scroll down Ps lines (default = 1) (SD).


Program.prototype.sd = Program.prototype.scrollDown = function (param) {
  this.y += param || 1;

  this._ncoords();

  if (this.tput) return this.put.parm_rindex(param);
  return this._write('\x1b[' + (param || 1) + 'T');
}; // CSI Ps ; Ps ; Ps ; Ps ; Ps T
//   Initiate highlight mouse tracking.  Parameters are
//   [func;startx;starty;firstrow;lastrow].  See the section Mouse
//   Tracking.


Program.prototype.initMouseTracking = function () {
  return this._write('\x1b[' + slice.call(arguments).join(';') + 'T');
}; // CSI > Ps; Ps T
//   Reset one or more features of the title modes to the default
//   value.  Normally, "reset" disables the feature.  It is possi-
//   ble to disable the ability to reset features by compiling a
//   different default for the title modes into xterm.
//     Ps = 0  -> Do not set window/icon labels using hexadecimal.
//     Ps = 1  -> Do not query window/icon labels using hexadeci-
//     mal.
//     Ps = 2  -> Do not set window/icon labels using UTF-8.
//     Ps = 3  -> Do not query window/icon labels using UTF-8.
//   (See discussion of "Title Modes").


Program.prototype.resetTitleModes = function () {
  return this._write('\x1b[>' + slice.call(arguments).join(';') + 'T');
}; // CSI Ps Z  Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).


Program.prototype.cbt = Program.prototype.cursorBackwardTab = function (param) {
  this.x -= 8;

  this._ncoords();

  if (this.tput) return this.put.cbt(param);
  return this._write('\x1b[' + (param || 1) + 'Z');
}; // CSI Ps b  Repeat the preceding graphic character Ps times (REP).


Program.prototype.rep = Program.prototype.repeatPrecedingCharacter = function (param) {
  this.x += param || 1;

  this._ncoords();

  if (this.tput) return this.put.rep(param);
  return this._write('\x1b[' + (param || 1) + 'b');
}; // CSI Ps g  Tab Clear (TBC).
//     Ps = 0  -> Clear Current Column (default).
//     Ps = 3  -> Clear All.
// Potentially:
//   Ps = 2  -> Clear Stops on Line.
//   http://vt100.net/annarbor/aaa-ug/section6.html


Program.prototype.tbc = Program.prototype.tabClear = function (param) {
  if (this.tput) return this.put.tbc(param);
  return this._write('\x1b[' + (param || 0) + 'g');
}; // CSI Pm i  Media Copy (MC).
//     Ps = 0  -> Print screen (default).
//     Ps = 4  -> Turn off printer controller mode.
//     Ps = 5  -> Turn on printer controller mode.
// CSI ? Pm i
//   Media Copy (MC, DEC-specific).
//     Ps = 1  -> Print line containing cursor.
//     Ps = 4  -> Turn off autoprint mode.
//     Ps = 5  -> Turn on autoprint mode.
//     Ps = 1  0  -> Print composed display, ignores DECPEX.
//     Ps = 1  1  -> Print all pages.


Program.prototype.mc = Program.prototype.mediaCopy = function () {
  return this._write('\x1b[' + slice.call(arguments).join(';') + 'i');
};

Program.prototype.print_screen = Program.prototype.ps = Program.prototype.mc0 = function () {
  if (this.tput) return this.put.mc0();
  return this.mc('0');
};

Program.prototype.prtr_on = Program.prototype.po = Program.prototype.mc5 = function () {
  if (this.tput) return this.put.mc5();
  return this.mc('5');
};

Program.prototype.prtr_off = Program.prototype.pf = Program.prototype.mc4 = function () {
  if (this.tput) return this.put.mc4();
  return this.mc('4');
};

Program.prototype.prtr_non = Program.prototype.pO = Program.prototype.mc5p = function () {
  if (this.tput) return this.put.mc5p();
  return this.mc('?5');
}; // CSI > Ps; Ps m
//   Set or reset resource-values used by xterm to decide whether
//   to construct escape sequences holding information about the
//   modifiers pressed with a given key.  The first parameter iden-
//   tifies the resource to set/reset.  The second parameter is the
//   value to assign to the resource.  If the second parameter is
//   omitted, the resource is reset to its initial value.
//     Ps = 1  -> modifyCursorKeys.
//     Ps = 2  -> modifyFunctionKeys.
//     Ps = 4  -> modifyOtherKeys.
//   If no parameters are given, all resources are reset to their
//   initial values.


Program.prototype.setResources = function () {
  return this._write('\x1b[>' + slice.call(arguments).join(';') + 'm');
}; // CSI > Ps n
//   Disable modifiers which may be enabled via the CSI > Ps; Ps m
//   sequence.  This corresponds to a resource value of "-1", which
//   cannot be set with the other sequence.  The parameter identi-
//   fies the resource to be disabled:
//     Ps = 1  -> modifyCursorKeys.
//     Ps = 2  -> modifyFunctionKeys.
//     Ps = 4  -> modifyOtherKeys.
//   If the parameter is omitted, modifyFunctionKeys is disabled.
//   When modifyFunctionKeys is disabled, xterm uses the modifier
//   keys to make an extended sequence of functions rather than
//   adding a parameter to each function key to denote the modi-
//   fiers.


Program.prototype.disableModifiers = function (param) {
  return this._write('\x1b[>' + (param || '') + 'n');
}; // CSI > Ps p
//   Set resource value pointerMode.  This is used by xterm to
//   decide whether to hide the pointer cursor as the user types.
//   Valid values for the parameter:
//     Ps = 0  -> never hide the pointer.
//     Ps = 1  -> hide if the mouse tracking mode is not enabled.
//     Ps = 2  -> always hide the pointer.  If no parameter is
//     given, xterm uses the default, which is 1 .


Program.prototype.setPointerMode = function (param) {
  return this._write('\x1b[>' + (param || '') + 'p');
}; // CSI ! p   Soft terminal reset (DECSTR).
// http://vt100.net/docs/vt220-rm/table4-10.html


Program.prototype.decstr = Program.prototype.rs2 = Program.prototype.softReset = function () {
  //if (this.tput) return this.put.init_2string();
  //if (this.tput) return this.put.reset_2string();
  if (this.tput) return this.put.rs2(); //return this._write('\x1b[!p');
  //return this._write('\x1b[!p\x1b[?3;4l\x1b[4l\x1b>'); // init

  return this._write('\x1b[!p\x1b[?3;4l\x1b[4l\x1b>'); // reset
}; // CSI Ps$ p
//   Request ANSI mode (DECRQM).  For VT300 and up, reply is
//     CSI Ps; Pm$ y
//   where Ps is the mode number as in RM, and Pm is the mode
//   value:
//     0 - not recognized
//     1 - set
//     2 - reset
//     3 - permanently set
//     4 - permanently reset


Program.prototype.decrqm = Program.prototype.requestAnsiMode = function (param) {
  return this._write('\x1b[' + (param || '') + '$p');
}; // CSI ? Ps$ p
//   Request DEC private mode (DECRQM).  For VT300 and up, reply is
//     CSI ? Ps; Pm$ p
//   where Ps is the mode number as in DECSET, Pm is the mode value
//   as in the ANSI DECRQM.


Program.prototype.decrqmp = Program.prototype.requestPrivateMode = function (param) {
  return this._write('\x1b[?' + (param || '') + '$p');
}; // CSI Ps ; Ps " p
//   Set conformance level (DECSCL).  Valid values for the first
//   parameter:
//     Ps = 6 1  -> VT100.
//     Ps = 6 2  -> VT200.
//     Ps = 6 3  -> VT300.
//   Valid values for the second parameter:
//     Ps = 0  -> 8-bit controls.
//     Ps = 1  -> 7-bit controls (always set for VT100).
//     Ps = 2  -> 8-bit controls.


Program.prototype.decscl = Program.prototype.setConformanceLevel = function () {
  return this._write('\x1b[' + slice.call(arguments).join(';') + '"p');
}; // CSI Ps q  Load LEDs (DECLL).
//     Ps = 0  -> Clear all LEDS (default).
//     Ps = 1  -> Light Num Lock.
//     Ps = 2  -> Light Caps Lock.
//     Ps = 3  -> Light Scroll Lock.
//     Ps = 2  1  -> Extinguish Num Lock.
//     Ps = 2  2  -> Extinguish Caps Lock.
//     Ps = 2  3  -> Extinguish Scroll Lock.


Program.prototype.decll = Program.prototype.loadLEDs = function (param) {
  return this._write('\x1b[' + (param || '') + 'q');
}; // CSI Ps SP q
//   Set cursor style (DECSCUSR, VT520).
//     Ps = 0  -> blinking block.
//     Ps = 1  -> blinking block (default).
//     Ps = 2  -> steady block.
//     Ps = 3  -> blinking underline.
//     Ps = 4  -> steady underline.


Program.prototype.decscusr = Program.prototype.setCursorStyle = function (param) {
  switch (param) {
    case 'blinking block':
      param = 1;
      break;

    case 'block':
    case 'steady block':
      param = 2;
      break;

    case 'blinking underline':
      param = 3;
      break;

    case 'underline':
    case 'steady underline':
      param = 4;
      break;

    case 'blinking bar':
      param = 5;
      break;

    case 'bar':
    case 'steady bar':
      param = 6;
      break;
  }

  if (param === 2 && this.has('Se')) {
    return this.put.Se();
  }

  if (this.has('Ss')) {
    return this.put.Ss(param);
  }

  return this._write('\x1b[' + (param || 1) + ' q');
}; // CSI Ps " q
//   Select character protection attribute (DECSCA).  Valid values
//   for the parameter:
//     Ps = 0  -> DECSED and DECSEL can erase (default).
//     Ps = 1  -> DECSED and DECSEL cannot erase.
//     Ps = 2  -> DECSED and DECSEL can erase.


Program.prototype.decsca = Program.prototype.setCharProtectionAttr = function (param) {
  return this._write('\x1b[' + (param || 0) + '"q');
}; // CSI ? Pm r
//   Restore DEC Private Mode Values.  The value of Ps previously
//   saved is restored.  Ps values are the same as for DECSET.


Program.prototype.restorePrivateValues = function () {
  return this._write('\x1b[?' + slice.call(arguments).join(';') + 'r');
}; // CSI Pt; Pl; Pb; Pr; Ps$ r
//   Change Attributes in Rectangular Area (DECCARA), VT400 and up.
//     Pt; Pl; Pb; Pr denotes the rectangle.
//     Ps denotes the SGR attributes to change: 0, 1, 4, 5, 7.
// NOTE: xterm doesn't enable this code by default.


Program.prototype.deccara = Program.prototype.setAttrInRectangle = function () {
  return this._write('\x1b[' + slice.call(arguments).join(';') + '$r');
}; // CSI ? Pm s
//   Save DEC Private Mode Values.  Ps values are the same as for
//   DECSET.


Program.prototype.savePrivateValues = function () {
  return this._write('\x1b[?' + slice.call(arguments).join(';') + 's');
}; // CSI Ps ; Ps ; Ps t
//   Window manipulation (from dtterm, as well as extensions).
//   These controls may be disabled using the allowWindowOps
//   resource.  Valid values for the first (and any additional
//   parameters) are:
//     Ps = 1  -> De-iconify window.
//     Ps = 2  -> Iconify window.
//     Ps = 3  ;  x ;  y -> Move window to [x, y].
//     Ps = 4  ;  height ;  width -> Resize the xterm window to
//     height and width in pixels.
//     Ps = 5  -> Raise the xterm window to the front of the stack-
//     ing order.
//     Ps = 6  -> Lower the xterm window to the bottom of the
//     stacking order.
//     Ps = 7  -> Refresh the xterm window.
//     Ps = 8  ;  height ;  width -> Resize the text area to
//     [height;width] in characters.
//     Ps = 9  ;  0  -> Restore maximized window.
//     Ps = 9  ;  1  -> Maximize window (i.e., resize to screen
//     size).
//     Ps = 1 0  ;  0  -> Undo full-screen mode.
//     Ps = 1 0  ;  1  -> Change to full-screen.
//     Ps = 1 1  -> Report xterm window state.  If the xterm window
//     is open (non-iconified), it returns CSI 1 t .  If the xterm
//     window is iconified, it returns CSI 2 t .
//     Ps = 1 3  -> Report xterm window position.  Result is CSI 3
//     ; x ; y t
//     Ps = 1 4  -> Report xterm window in pixels.  Result is CSI
//     4  ;  height ;  width t
//     Ps = 1 8  -> Report the size of the text area in characters.
//     Result is CSI  8  ;  height ;  width t
//     Ps = 1 9  -> Report the size of the screen in characters.
//     Result is CSI  9  ;  height ;  width t
//     Ps = 2 0  -> Report xterm window's icon label.  Result is
//     OSC  L  label ST
//     Ps = 2 1  -> Report xterm window's title.  Result is OSC  l
//     label ST
//     Ps = 2 2  ;  0  -> Save xterm icon and window title on
//     stack.
//     Ps = 2 2  ;  1  -> Save xterm icon title on stack.
//     Ps = 2 2  ;  2  -> Save xterm window title on stack.
//     Ps = 2 3  ;  0  -> Restore xterm icon and window title from
//     stack.
//     Ps = 2 3  ;  1  -> Restore xterm icon title from stack.
//     Ps = 2 3  ;  2  -> Restore xterm window title from stack.
//     Ps >= 2 4  -> Resize to Ps lines (DECSLPP).


Program.prototype.manipulateWindow = function () {
  var args = slice.call(arguments);
  var callback = typeof args[args.length - 1] === 'function' ? args.pop() : function () {};
  return this.response('window-manipulation', '\x1b[' + args.join(';') + 't', callback);
};

Program.prototype.getWindowSize = function (callback) {
  return this.manipulateWindow(18, callback);
}; // CSI Pt; Pl; Pb; Pr; Ps$ t
//   Reverse Attributes in Rectangular Area (DECRARA), VT400 and
//   up.
//     Pt; Pl; Pb; Pr denotes the rectangle.
//     Ps denotes the attributes to reverse, i.e.,  1, 4, 5, 7.
// NOTE: xterm doesn't enable this code by default.


Program.prototype.decrara = Program.prototype.reverseAttrInRectangle = function () {
  return this._write('\x1b[' + slice.call(arguments).join(';') + '$t');
}; // CSI > Ps; Ps t
//   Set one or more features of the title modes.  Each parameter
//   enables a single feature.
//     Ps = 0  -> Set window/icon labels using hexadecimal.
//     Ps = 1  -> Query window/icon labels using hexadecimal.
//     Ps = 2  -> Set window/icon labels using UTF-8.
//     Ps = 3  -> Query window/icon labels using UTF-8.  (See dis-
//     cussion of "Title Modes")
// XXX VTE bizarelly echos this:


Program.prototype.setTitleModeFeature = function () {
  return this._twrite('\x1b[>' + slice.call(arguments).join(';') + 't');
}; // CSI Ps SP t
//   Set warning-bell volume (DECSWBV, VT520).
//     Ps = 0  or 1  -> off.
//     Ps = 2 , 3  or 4  -> low.
//     Ps = 5 , 6 , 7 , or 8  -> high.


Program.prototype.decswbv = Program.prototype.setWarningBellVolume = function (param) {
  return this._write('\x1b[' + (param || '') + ' t');
}; // CSI Ps SP u
//   Set margin-bell volume (DECSMBV, VT520).
//     Ps = 1  -> off.
//     Ps = 2 , 3  or 4  -> low.
//     Ps = 0 , 5 , 6 , 7 , or 8  -> high.


Program.prototype.decsmbv = Program.prototype.setMarginBellVolume = function (param) {
  return this._write('\x1b[' + (param || '') + ' u');
}; // CSI Pt; Pl; Pb; Pr; Pp; Pt; Pl; Pp$ v
//   Copy Rectangular Area (DECCRA, VT400 and up).
//     Pt; Pl; Pb; Pr denotes the rectangle.
//     Pp denotes the source page.
//     Pt; Pl denotes the target location.
//     Pp denotes the target page.
// NOTE: xterm doesn't enable this code by default.


Program.prototype.deccra = Program.prototype.copyRectangle = function () {
  return this._write('\x1b[' + slice.call(arguments).join(';') + '$v');
}; // CSI Pt ; Pl ; Pb ; Pr ' w
//   Enable Filter Rectangle (DECEFR), VT420 and up.
//   Parameters are [top;left;bottom;right].
//   Defines the coordinates of a filter rectangle and activates
//   it.  Anytime the locator is detected outside of the filter
//   rectangle, an outside rectangle event is generated and the
//   rectangle is disabled.  Filter rectangles are always treated
//   as "one-shot" events.  Any parameters that are omitted default
//   to the current locator position.  If all parameters are omit-
//   ted, any locator motion will be reported.  DECELR always can-
//   cels any prevous rectangle definition.


Program.prototype.decefr = Program.prototype.enableFilterRectangle = function () {
  return this._write('\x1b[' + slice.call(arguments).join(';') + '\'w');
}; // CSI Ps x  Request Terminal Parameters (DECREQTPARM).
//   if Ps is a "0" (default) or "1", and xterm is emulating VT100,
//   the control sequence elicits a response of the same form whose
//   parameters describe the terminal:
//     Ps -> the given Ps incremented by 2.
//     Pn = 1  <- no parity.
//     Pn = 1  <- eight bits.
//     Pn = 1  <- 2  8  transmit 38.4k baud.
//     Pn = 1  <- 2  8  receive 38.4k baud.
//     Pn = 1  <- clock multiplier.
//     Pn = 0  <- STP flags.


Program.prototype.decreqtparm = Program.prototype.requestParameters = function (param) {
  return this._write('\x1b[' + (param || 0) + 'x');
}; // CSI Ps x  Select Attribute Change Extent (DECSACE).
//     Ps = 0  -> from start to end position, wrapped.
//     Ps = 1  -> from start to end position, wrapped.
//     Ps = 2  -> rectangle (exact).


Program.prototype.decsace = Program.prototype.selectChangeExtent = function (param) {
  return this._write('\x1b[' + (param || 0) + 'x');
}; // CSI Pc; Pt; Pl; Pb; Pr$ x
//   Fill Rectangular Area (DECFRA), VT420 and up.
//     Pc is the character to use.
//     Pt; Pl; Pb; Pr denotes the rectangle.
// NOTE: xterm doesn't enable this code by default.


Program.prototype.decfra = Program.prototype.fillRectangle = function () {
  return this._write('\x1b[' + slice.call(arguments).join(';') + '$x');
}; // CSI Ps ; Pu ' z
//   Enable Locator Reporting (DECELR).
//   Valid values for the first parameter:
//     Ps = 0  -> Locator disabled (default).
//     Ps = 1  -> Locator enabled.
//     Ps = 2  -> Locator enabled for one report, then disabled.
//   The second parameter specifies the coordinate unit for locator
//   reports.
//   Valid values for the second parameter:
//     Pu = 0  <- or omitted -> default to character cells.
//     Pu = 1  <- device physical pixels.
//     Pu = 2  <- character cells.


Program.prototype.decelr = Program.prototype.enableLocatorReporting = function () {
  return this._write('\x1b[' + slice.call(arguments).join(';') + '\'z');
}; // CSI Pt; Pl; Pb; Pr$ z
//   Erase Rectangular Area (DECERA), VT400 and up.
//     Pt; Pl; Pb; Pr denotes the rectangle.
// NOTE: xterm doesn't enable this code by default.


Program.prototype.decera = Program.prototype.eraseRectangle = function () {
  return this._write('\x1b[' + slice.call(arguments).join(';') + '$z');
}; // CSI Pm ' {
//   Select Locator Events (DECSLE).
//   Valid values for the first (and any additional parameters)
//   are:
//     Ps = 0  -> only respond to explicit host requests (DECRQLP).
//                (This is default).  It also cancels any filter
//   rectangle.
//     Ps = 1  -> report button down transitions.
//     Ps = 2  -> do not report button down transitions.
//     Ps = 3  -> report button up transitions.
//     Ps = 4  -> do not report button up transitions.


Program.prototype.decsle = Program.prototype.setLocatorEvents = function () {
  return this._write('\x1b[' + slice.call(arguments).join(';') + '\'{');
}; // CSI Pt; Pl; Pb; Pr$ {
//   Selective Erase Rectangular Area (DECSERA), VT400 and up.
//     Pt; Pl; Pb; Pr denotes the rectangle.


Program.prototype.decsera = Program.prototype.selectiveEraseRectangle = function () {
  return this._write('\x1b[' + slice.call(arguments).join(';') + '${');
}; // CSI Ps ' |
//   Request Locator Position (DECRQLP).
//   Valid values for the parameter are:
//     Ps = 0 , 1 or omitted -> transmit a single DECLRP locator
//     report.
//   If Locator Reporting has been enabled by a DECELR, xterm will
//   respond with a DECLRP Locator Report.  This report is also
//   generated on button up and down events if they have been
//   enabled with a DECSLE, or when the locator is detected outside
//   of a filter rectangle, if filter rectangles have been enabled
//   with a DECEFR.
//     -> CSI Pe ; Pb ; Pr ; Pc ; Pp &  w
//   Parameters are [event;button;row;column;page].
//   Valid values for the event:
//     Pe = 0  -> locator unavailable - no other parameters sent.
//     Pe = 1  -> request - xterm received a DECRQLP.
//     Pe = 2  -> left button down.
//     Pe = 3  -> left button up.
//     Pe = 4  -> middle button down.
//     Pe = 5  -> middle button up.
//     Pe = 6  -> right button down.
//     Pe = 7  -> right button up.
//     Pe = 8  -> M4 button down.
//     Pe = 9  -> M4 button up.
//     Pe = 1 0  -> locator outside filter rectangle.
//   ``button'' parameter is a bitmask indicating which buttons are
//     pressed:
//     Pb = 0  <- no buttons down.
//     Pb & 1  <- right button down.
//     Pb & 2  <- middle button down.
//     Pb & 4  <- left button down.
//     Pb & 8  <- M4 button down.
//   ``row'' and ``column'' parameters are the coordinates of the
//     locator position in the xterm window, encoded as ASCII deci-
//     mal.
//   The ``page'' parameter is not used by xterm, and will be omit-
//   ted.


Program.prototype.decrqlp = Program.prototype.req_mouse_pos = Program.prototype.reqmp = Program.prototype.requestLocatorPosition = function (param, callback) {
  // See also:
  // get_mouse / getm / Gm
  // mouse_info / minfo / Mi
  // Correct for tput?
  if (this.has('req_mouse_pos')) {
    var code = this.tput.req_mouse_pos(param);
    return this.response('locator-position', code, callback);
  }

  return this.response('locator-position', '\x1b[' + (param || '') + '\'|', callback);
}; // CSI P m SP }
// Insert P s Column(s) (default = 1) (DECIC), VT420 and up.
// NOTE: xterm doesn't enable this code by default.


Program.prototype.decic = Program.prototype.insertColumns = function () {
  return this._write('\x1b[' + slice.call(arguments).join(';') + ' }');
}; // CSI P m SP ~
// Delete P s Column(s) (default = 1) (DECDC), VT420 and up
// NOTE: xterm doesn't enable this code by default.


Program.prototype.decdc = Program.prototype.deleteColumns = function () {
  return this._write('\x1b[' + slice.call(arguments).join(';') + ' ~');
};

Program.prototype.out = function (name) {
  var args = Array.prototype.slice.call(arguments, 1);
  this.ret = true;
  var out = this[name].apply(this, args);
  this.ret = false;
  return out;
};

Program.prototype.sigtstp = function (callback) {
  var resume = this.pause();
  process.once('SIGCONT', function () {
    resume();
    if (callback) callback();
  });
  process.kill(process.pid, 'SIGTSTP');
};

Program.prototype.pause = function (callback) {
  var self = this,
      isAlt = this.isAlt,
      mouseEnabled = this.mouseEnabled;
  this.lsaveCursor('pause'); //this.csr(0, screen.height - 1);

  if (isAlt) this.normalBuffer();
  this.showCursor();
  if (mouseEnabled) this.disableMouse();
  var write = this.output.write;

  this.output.write = function () {};

  if (this.input.setRawMode) {
    this.input.setRawMode(false);
  }

  this.input.pause();
  return this._resume = function () {
    delete self._resume;

    if (self.input.setRawMode) {
      self.input.setRawMode(true);
    }

    self.input.resume();
    self.output.write = write;
    if (isAlt) self.alternateBuffer(); //self.csr(0, screen.height - 1);

    if (mouseEnabled) self.enableMouse();
    self.lrestoreCursor('pause', true);
    if (callback) callback();
  };
};

Program.prototype.resume = function () {
  if (this._resume) return this._resume();
};
/**
 * Helpers
 */
// We could do this easier by just manipulating the _events object, or for
// older versions of node, manipulating the array returned by listeners(), but
// neither of these methods are guaranteed to work in future versions of node.


function unshiftEvent(obj, event, listener) {
  var listeners = obj.listeners(event);
  obj.removeAllListeners(event);
  obj.on(event, listener);
  listeners.forEach(function (listener) {
    obj.on(event, listener);
  });
}

function merge(out) {
  slice.call(arguments, 1).forEach(function (obj) {
    Object.keys(obj).forEach(function (key) {
      out[key] = obj[key];
    });
  });
  return out;
}
/**
 * Expose
 */


var _default = Program;
exports.default = _default;

},{"./colors":80,"./gpmclient":82,"./keys":84,"./tput":86,"@babel/runtime/helpers/interopRequireDefault":1,"child_process":5,"events":9,"fs":"fs","string_decoder":31,"util":7}],86:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sprintf = sprintf;
exports.tryRead = tryRead;
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _child_process = _interopRequireDefault(require("child_process"));

__dirname = "/Users/Temich/PycharmProjects/tanks/src/server/console/blessed-fork/lib";

/**
 * Tput
 */
function Tput(options) {
  if (!(this instanceof Tput)) {
    return new Tput(options);
  }

  options = options || {};

  if (typeof options === 'string') {
    options = {
      terminal: options
    };
  }

  this.options = options;
  this.terminal = options.terminal || options.term || process.env.TERM || (process.platform === 'win32' ? 'windows-ansi' : 'xterm');
  this.terminal = this.terminal.toLowerCase();
  this.debug = options.debug;
  this.padding = options.padding;
  this.extended = options.extended;
  this.printf = options.printf;
  this.termcap = options.termcap;
  this.error = null;
  this.terminfoPrefix = options.terminfoPrefix;
  this.terminfoFile = options.terminfoFile;
  this.termcapFile = options.termcapFile;

  if (options.terminal || options.term) {
    this.setup();
  }
}

Tput.prototype.setup = function () {
  this.error = null;

  try {
    if (this.termcap) {
      try {
        this.injectTermcap();
      } catch (e) {
        if (this.debug) throw e;
        this.error = new Error('Termcap parse error.');

        this._useInternalCap(this.terminal);
      }
    } else {
      try {
        this.injectTerminfo();
      } catch (e) {
        if (this.debug) throw e;
        this.error = new Error('Terminfo parse error.');

        this._useInternalInfo(this.terminal);
      }
    }
  } catch (e) {
    // If there was an error, fallback
    // to an internally stored terminfo/cap.
    if (this.debug) throw e;
    this.error = new Error('Terminfo not found.');

    this._useXtermInfo();
  }
};

Tput.prototype.term = function (is) {
  return this.terminal.indexOf(is) === 0;
};

Tput.prototype._debug = function () {
  if (!this.debug) return;
  return console.log.apply(console, arguments);
};
/**
 * Fallback
 */


Tput.prototype._useVt102Cap = function () {
  return this.injectTermcap('vt102');
};

Tput.prototype._useXtermCap = function () {
  return this.injectTermcap(__dirname + '/../usr/xterm.termcap');
};

Tput.prototype._useXtermInfo = function () {
  return this.injectTerminfo(__dirname + '/../usr/xterm');
};

Tput.prototype._useInternalInfo = function (name) {
  name = _path.default.basename(name);
  return this.injectTerminfo(__dirname + '/../usr/' + name);
};

Tput.prototype._useInternalCap = function (name) {
  name = _path.default.basename(name);
  return this.injectTermcap(__dirname + '/../usr/' + name + '.termcap');
};
/**
 * Terminfo
 */


Tput.ipaths = [process.env.TERMINFO || '', (process.env.TERMINFO_DIRS || '').split(':'), (process.env.HOME || '') + '/.terminfo', '/usr/share/terminfo', '/usr/share/lib/terminfo', '/usr/lib/terminfo', '/usr/local/share/terminfo', '/usr/local/share/lib/terminfo', '/usr/local/lib/terminfo', '/usr/local/ncurses/lib/terminfo', '/lib/terminfo'];

Tput.prototype.readTerminfo = function (term) {
  var data, file, info;
  term = term || this.terminal;
  file = _path.default.normalize(this._prefix(term));
  data = _fs.default.readFileSync(file);
  info = this.parseTerminfo(data, file);

  if (this.debug) {
    this._terminfo = info;
  }

  return info;
};

Tput._prefix = Tput.prototype._prefix = function (term) {
  // If we have a terminfoFile, or our
  // term looks like a filename, use it.
  if (term) {
    if (~term.indexOf(_path.default.sep)) {
      return term;
    }

    if (this.terminfoFile) {
      return this.terminfoFile;
    }
  }

  var paths = Tput.ipaths.slice(),
      file;

  if (this.terminfoPrefix) {
    paths.unshift(this.terminfoPrefix);
  } // Try exact matches.


  file = this._tprefix(paths, term);
  if (file) return file; // Try similar matches.

  file = this._tprefix(paths, term, true);
  if (file) return file; // Not found.

  throw new Error('Terminfo directory not found.');
};

Tput._tprefix = Tput.prototype._tprefix = function (prefix, term, soft) {
  if (!prefix) return;
  var file, dir, i, sdiff, sfile, list;

  if (Array.isArray(prefix)) {
    for (i = 0; i < prefix.length; i++) {
      file = this._tprefix(prefix[i], term, soft);
      if (file) return file;
    }

    return;
  }

  var find = function (word) {
    var file, ch;
    file = _path.default.resolve(prefix, word[0]);

    try {
      _fs.default.statSync(file);

      return file;
    } catch (e) {
      ;
    }

    ch = word[0].charCodeAt(0).toString(16);
    if (ch.length < 2) ch = '0' + ch;
    file = _path.default.resolve(prefix, ch);

    try {
      _fs.default.statSync(file);

      return file;
    } catch (e) {
      ;
    }
  };

  if (!term) {
    // Make sure the directory's sub-directories
    // are all one-letter, or hex digits.
    // return find('x') ? prefix : null;
    try {
      dir = _fs.default.readdirSync(prefix).filter(function (file) {
        return file.length !== 1 && !/^[0-9a-fA-F]{2}$/.test(file);
      });

      if (!dir.length) {
        return prefix;
      }
    } catch (e) {
      ;
    }

    return;
  }

  term = _path.default.basename(term);
  dir = find(term);
  if (!dir) return;

  if (soft) {
    try {
      list = _fs.default.readdirSync(dir);
    } catch (e) {
      return;
    }

    list.forEach(function (file) {
      if (file.indexOf(term) === 0) {
        var diff = file.length - term.length;

        if (!sfile || diff < sdiff) {
          sdiff = diff;
          sfile = file;
        }
      }
    });
    return sfile && (soft || sdiff === 0) ? _path.default.resolve(dir, sfile) : null;
  }

  file = _path.default.resolve(dir, term);

  try {
    _fs.default.statSync(file);

    return file;
  } catch (e) {
    ;
  }
};
/**
 * Terminfo Parser
 * All shorts are little-endian
 */


Tput.prototype.parseTerminfo = function (data, file) {
  var info = {},
      extended,
      l = data.length,
      i = 0,
      v,
      o;
  var h = info.header = {
    dataSize: data.length,
    headerSize: 12,
    magicNumber: data[1] << 8 | data[0],
    namesSize: data[3] << 8 | data[2],
    boolCount: data[5] << 8 | data[4],
    numCount: data[7] << 8 | data[6],
    strCount: data[9] << 8 | data[8],
    strTableSize: data[11] << 8 | data[10]
  };
  h.total = h.headerSize + h.namesSize + h.boolCount + h.numCount * 2 + h.strCount * 2 + h.strTableSize;
  i += h.headerSize; // Names Section

  var names = data.toString('ascii', i, i + h.namesSize - 1),
      parts = names.split('|'),
      name = parts[0],
      desc = parts.pop();
  info.name = name;
  info.names = parts;
  info.desc = desc;
  info.dir = _path.default.resolve(file, '..', '..');
  info.file = file;
  i += h.namesSize - 1; // Names is nul-terminated.

  _assert.default.equal(data[i], 0);

  i++; // Booleans Section
  // One byte for each flag
  // Same order as <term.h>

  info.bools = {};
  l = i + h.boolCount;
  o = 0;

  for (; i < l; i++) {
    v = Tput.bools[o++];
    info.bools[v] = data[i] === 1;
  } // Null byte in between to make sure numbers begin on an even byte.


  if (i % 2) {
    _assert.default.equal(data[i], 0);

    i++;
  } // Numbers Section


  info.numbers = {};
  l = i + h.numCount * 2;
  o = 0;

  for (; i < l; i += 2) {
    v = Tput.numbers[o++];

    if (data[i + 1] === 0xff && data[i] === 0xff) {
      info.numbers[v] = -1;
    } else {
      info.numbers[v] = data[i + 1] << 8 | data[i];
    }
  } // Strings Section


  info.strings = {};
  l = i + h.strCount * 2;
  o = 0;

  for (; i < l; i += 2) {
    v = Tput.strings[o++];

    if (data[i + 1] === 0xff && data[i] === 0xff) {
      info.strings[v] = -1;
    } else {
      info.strings[v] = data[i + 1] << 8 | data[i];
    }
  } // String Table


  Object.keys(info.strings).forEach(function (key) {
    if (info.strings[key] === -1) {
      delete info.strings[key];
      return;
    } // Workaround: fix an odd bug in the screen-256color terminfo where it tries
    // to set -1, but it appears to have {0xfe, 0xff} instead of {0xff, 0xff}.
    // TODO: Possibly handle errors gracefully below, as well as in the
    // extended info. Also possibly do: `if (info.strings[key] >= data.length)`.


    if (info.strings[key] === 65534) {
      delete info.strings[key];
      return;
    }

    var s = i + info.strings[key],
        j = s;

    while (data[j]) j++;

    (0, _assert.default)(j < data.length);
    info.strings[key] = data.toString('ascii', s, j);
  }); // Extended Header

  if (this.extended !== false) {
    i--;
    i += h.strTableSize;

    if (i % 2) {
      _assert.default.equal(data[i], 0);

      i++;
    }

    l = data.length;

    if (i < l - 1) {
      try {
        extended = this.parseExtended(data.slice(i));
      } catch (e) {
        if (this.debug) {
          throw e;
        }

        return info;
      }

      info.header.extended = extended.header;
      ['bools', 'numbers', 'strings'].forEach(function (key) {
        merge(info[key], extended[key]);
      });
    }
  }

  return info;
};
/**
 * Extended Parsing
 */
// Some data to help understand:
// For xterm, non-extended header:
// { dataSize: 3270,
//   headerSize: 12,
//   magicNumber: 282,
//   namesSize: 48,
//   boolCount: 38,
//   numCount: 15,
//   strCount: 413,
//   strTableSize: 1388,
//   total: 2342 }
// For xterm, header:
// Offset: 2342
// { header:
//    { dataSize: 928,
//      headerSize: 10,
//      boolCount: 2,
//      numCount: 1,
//      strCount: 57,
//      strTableSize: 117,
//      lastStrTableOffset: 680,
//      total: 245 },
// For xterm, layout:
// { header: '0 - 10', // length: 10
//   bools: '10 - 12', // length: 2
//   numbers: '12 - 14', // length: 2
//   strings: '14 - 128', // length: 114 (57 short)
//   symoffsets: '128 - 248', // length: 120 (60 short)
//   stringtable: '248 - 612', // length: 364
//   sym: '612 - 928' } // length: 316
//
// How lastStrTableOffset works:
//   data.length - h.lastStrTableOffset === 248
//     (sym-offset end, string-table start)
//   364 + 316 === 680 (lastStrTableOffset)
// How strTableSize works:
//   h.strCount + [symOffsetCount] === h.strTableSize
//   57 + 60 === 117 (strTableSize)
//   symOffsetCount doesn't actually exist in the header. it's just implied.
// Getting the number of sym offsets:
//   h.symOffsetCount = h.strTableSize - h.strCount;
//   h.symOffsetSize = (h.strTableSize - h.strCount) * 2;


Tput.prototype.parseExtended = function (data) {
  var info = {},
      l = data.length,
      i = 0;
  var h = info.header = {
    dataSize: data.length,
    headerSize: 10,
    boolCount: data[i + 1] << 8 | data[i + 0],
    numCount: data[i + 3] << 8 | data[i + 2],
    strCount: data[i + 5] << 8 | data[i + 4],
    strTableSize: data[i + 7] << 8 | data[i + 6],
    lastStrTableOffset: data[i + 9] << 8 | data[i + 8]
  }; // h.symOffsetCount = h.strTableSize - h.strCount;

  h.total = h.headerSize + h.boolCount + h.numCount * 2 + h.strCount * 2 + h.strTableSize;
  i += h.headerSize; // Booleans Section
  // One byte for each flag

  var _bools = [];
  l = i + h.boolCount;

  for (; i < l; i++) {
    _bools.push(data[i] === 1);
  } // Null byte in between to make sure numbers begin on an even byte.


  if (i % 2) {
    _assert.default.equal(data[i], 0);

    i++;
  } // Numbers Section


  var _numbers = [];
  l = i + h.numCount * 2;

  for (; i < l; i += 2) {
    if (data[i + 1] === 0xff && data[i] === 0xff) {
      _numbers.push(-1);
    } else {
      _numbers.push(data[i + 1] << 8 | data[i]);
    }
  } // Strings Section


  var _strings = [];
  l = i + h.strCount * 2;

  for (; i < l; i += 2) {
    if (data[i + 1] === 0xff && data[i] === 0xff) {
      _strings.push(-1);
    } else {
      _strings.push(data[i + 1] << 8 | data[i]);
    }
  } // Pass over the sym offsets and get to the string table.


  i = data.length - h.lastStrTableOffset; // Might be better to do this instead if the file has trailing bytes:
  // i += h.symOffsetCount * 2;
  // String Table

  var high = 0;

  _strings.forEach(function (offset, k) {
    if (offset === -1) {
      _strings[k] = '';
      return;
    }

    var s = i + offset,
        j = s;

    while (data[j]) j++;

    (0, _assert.default)(j < data.length); // Find out where the string table ends by
    // getting the highest string length.

    if (high < j - i) {
      high = j - i;
    }

    _strings[k] = data.toString('ascii', s, j);
  }); // Symbol Table
  // Add one to the highest string length because we didn't count \0.


  i += high + 1;
  l = data.length;
  var sym = [],
      j;

  for (; i < l; i++) {
    j = i;

    while (data[j]) j++;

    sym.push(data.toString('ascii', i, j));
    i = j;
  } // Identify by name


  j = 0;
  info.bools = {};

  _bools.forEach(function (bool) {
    info.bools[sym[j++]] = bool;
  });

  info.numbers = {};

  _numbers.forEach(function (number) {
    info.numbers[sym[j++]] = number;
  });

  info.strings = {};

  _strings.forEach(function (string) {
    info.strings[sym[j++]] = string;
  }); // Should be the very last bit of data.


  _assert.default.equal(i, data.length);

  return info;
};

Tput.prototype.compileTerminfo = function (term) {
  return this.compile(this.readTerminfo(term));
};

Tput.prototype.injectTerminfo = function (term) {
  return this.inject(this.compileTerminfo(term));
};
/**
 * Compiler - terminfo cap->javascript
 */


Tput.prototype.compile = function (info) {
  var self = this;

  if (!info) {
    throw new Error('Terminal not found.');
  }

  this.detectFeatures(info);

  this._debug(info);

  info.all = {};
  info.methods = {};
  ['bools', 'numbers', 'strings'].forEach(function (type) {
    Object.keys(info[type]).forEach(function (key) {
      info.all[key] = info[type][key];
      info.methods[key] = self._compile(info, key, info.all[key]);
    });
  });
  Tput.bools.forEach(function (key) {
    if (info.methods[key] == null) info.methods[key] = false;
  });
  Tput.numbers.forEach(function (key) {
    if (info.methods[key] == null) info.methods[key] = -1;
  });
  Tput.strings.forEach(function (key) {
    if (!info.methods[key]) info.methods[key] = noop;
  });
  Object.keys(info.methods).forEach(function (key) {
    if (!Tput.alias[key]) return;
    Tput.alias[key].forEach(function (alias) {
      info.methods[alias] = info.methods[key];
    }); // Could just use:
    // Object.keys(Tput.aliasMap).forEach(function(key) {
    //   info.methods[key] = info.methods[Tput.aliasMap[key]];
    // });
  });
  return info;
};

Tput.prototype.inject = function (info) {
  var self = this,
      methods = info.methods || info;
  Object.keys(methods).forEach(function (key) {
    if (typeof methods[key] !== 'function') {
      self[key] = methods[key];
      return;
    }

    self[key] = function () {
      var args = Array.prototype.slice.call(arguments);
      return methods[key].call(self, args);
    };
  });
  this.info = info;
  this.all = info.all;
  this.methods = info.methods;
  this.bools = info.bools;
  this.numbers = info.numbers;
  this.strings = info.strings;

  if (!~info.names.indexOf(this.terminal)) {
    this.terminal = info.name;
  }

  this.features = info.features;
  Object.keys(info.features).forEach(function (key) {
    if (key === 'padding') {
      if (!info.features.padding && self.options.padding !== true) {
        self.padding = false;
      }

      return;
    }

    self[key] = info.features[key];
  });
}; // See:
// ~/ncurses/ncurses/tinfo/lib_tparm.c
// ~/ncurses/ncurses/tinfo/comp_scan.c


Tput.prototype._compile = function (info, key, str) {
  var v;

  this._debug('Compiling %s: %s', key, JSON.stringify(str));

  switch (typeof str) {
    case 'boolean':
      return str;

    case 'number':
      return str;

    case 'string':
      break;

    default:
      return noop;
  }

  if (!str) {
    return noop;
  } // See:
  // ~/ncurses/progs/tput.c - tput() - L149
  // ~/ncurses/progs/tset.c - set_init() - L992


  if (key === 'init_file' || key === 'reset_file') {
    try {
      str = _fs.default.readFileSync(str, 'utf8');

      if (this.debug) {
        v = ('return ' + JSON.stringify(str) + ';').replace(/\x1b/g, '\\x1b').replace(/\r/g, '\\r').replace(/\n/g, '\\n');
        process.stdout.write(v + '\n');
      }

      return function () {
        return str;
      };
    } catch (e) {
      return noop;
    }
  }

  var tkey = info.name + '.' + key,
      header = 'var v, dyn = {}, stat = {}, stack = [], out = [];',
      footer = ';return out.join("");',
      code = header,
      val = str,
      buff = '',
      cap,
      ch,
      fi,
      then,
      els,
      end;

  function read(regex, no) {
    cap = regex.exec(val);
    if (!cap) return;
    val = val.substring(cap[0].length);
    ch = cap[1];
    if (!no) clear();
    return cap;
  }

  function stmt(c) {
    if (code[code.length - 1] === ',') {
      code = code.slice(0, -1);
    }

    code += c;
  }

  function expr(c) {
    code += c + ',';
  }

  function echo(c) {
    if (c === '""') return;
    expr('out.push(' + c + ')');
  }

  function print(c) {
    buff += c;
  }

  function clear() {
    if (buff) {
      echo(JSON.stringify(buff).replace(/\\u00([0-9a-fA-F]{2})/g, '\\x$1'));
      buff = '';
    }
  }

  while (val) {
    // Ignore newlines
    if (read(/^\n /, true)) {
      continue;
    } // '^A' -> ^A


    if (read(/^\^(.)/i, true)) {
      if (!(ch >= ' ' && ch <= '~')) {
        this._debug('%s: bad caret char.', tkey); // NOTE: ncurses appears to simply
        // continue in this situation, but
        // I could be wrong.


        print(cap[0]);
        continue;
      }

      if (ch === '?') {
        ch = '\x7f';
      } else {
        ch = ch.charCodeAt(0) & 31;
        if (ch === 0) ch = 128;
        ch = String.fromCharCode(ch);
      }

      print(ch);
      continue;
    } // 3 octal digits -> character


    if (read(/^\\([0-7]{3})/, true)) {
      print(String.fromCharCode(parseInt(ch, 8)));
      continue;
    } // '\e' -> ^[
    // '\n' -> \n
    // '\r' -> \r
    // '\0' -> \200 (special case)


    if (read(/^\\([eEnlrtbfs\^\\,:0]|.)/, true)) {
      switch (ch) {
        case 'e':
        case 'E':
          ch = '\x1b';
          break;

        case 'n':
          ch = '\n';
          break;

        case 'l':
          ch = '\x85';
          break;

        case 'r':
          ch = '\r';
          break;

        case 't':
          ch = '\t';
          break;

        case 'b':
          ch = '\x08';
          break;

        case 'f':
          ch = '\x0c';
          break;

        case 's':
          ch = ' ';
          break;

        case '^':
          ch = '^';
          break;

        case '\\':
          ch = '\\';
          break;

        case ',':
          ch = ',';
          break;

        case ':':
          ch = ':';
          break;

        case '0':
          ch = '\x80';
          break;

        case 'a':
          ch = '\x07';
          break;

        default:
          this._debug('%s: bad backslash char.', tkey);

          ch = cap[0];
          break;
      }

      print(ch);
      continue;
    } // $<5> -> padding
    // e.g. flash_screen: '\u001b[?5h$<100/>\u001b[?5l',


    if (read(/^\$<(\d+)([*\/]{0,2})>/, true)) {
      if (this.padding) print(cap[0]);
      continue;
    } // %%   outputs `%'


    if (read(/^%%/, true)) {
      print('%');
      continue;
    } // %[[:]flags][width[.precision]][doxXs]
    //   as in printf, flags are [-+#] and space.  Use a `:' to allow the
    //   next character to be a `-' flag, avoiding interpreting "%-" as an
    //   operator.
    // %c   print pop() like %c in printf
    // Example from screen terminfo:
    //   S0: "\u001b(%p1%c"
    // %d   print pop()
    // "Print (e.g., "%d") is a special case."
    // %s   print pop() like %s in printf


    if (read(/^%((?::-|[+# ]){1,4})?(\d+(?:\.\d+)?)?([doxXsc])/)) {
      if (this.printf || cap[1] || cap[2] || ~'oxX'.indexOf(cap[3])) {
        echo('sprintf("' + cap[0].replace(':-', '-') + '", stack.pop())');
      } else if (cap[3] === 'c') {
        echo('(v = stack.pop(), isFinite(v) ' + '? String.fromCharCode(v || 0200) : "")');
      } else {
        echo('stack.pop()');
      }

      continue;
    } // %p[1-9]
    //   push i'th parameter


    if (read(/^%p([1-9])/)) {
      expr('(stack.push(v = params[' + (ch - 1) + ']), v)');
      continue;
    } // %P[a-z]
    //   set dynamic variable [a-z] to pop()


    if (read(/^%P([a-z])/)) {
      expr('dyn.' + ch + ' = stack.pop()');
      continue;
    } // %g[a-z]
    //   get dynamic variable [a-z] and push it


    if (read(/^%g([a-z])/)) {
      expr('(stack.push(dyn.' + ch + '), dyn.' + ch + ')');
      continue;
    } // %P[A-Z]
    //   set static variable [a-z] to pop()


    if (read(/^%P([A-Z])/)) {
      expr('stat.' + ch + ' = stack.pop()');
      continue;
    } // %g[A-Z]
    //   get static variable [a-z] and push it
    //   The  terms  "static"  and  "dynamic" are misleading.  Historically,
    //   these are simply two different sets of variables, whose values are
    //   not reset between calls to tparm.  However, that fact is not
    //   documented in other implementations.  Relying on it will adversely
    //   impact portability to other implementations.


    if (read(/^%g([A-Z])/)) {
      expr('(stack.push(v = stat.' + ch + '), v)');
      continue;
    } // %'c' char constant c
    // NOTE: These are stored as c chars, exemplified by:
    // cursor_address: "\u001b=%p1%' '%+%c%p2%' '%+%c"


    if (read(/^%'(.)'/)) {
      expr('(stack.push(v = ' + ch.charCodeAt(0) + '), v)');
      continue;
    } // %{nn}
    //   integer constant nn


    if (read(/^%\{(\d+)\}/)) {
      expr('(stack.push(v = ' + ch + '), v)');
      continue;
    } // %l   push strlen(pop)


    if (read(/^%l/)) {
      expr('(stack.push(v = (stack.pop() || "").length || 0), v)');
      continue;
    } // %+ %- %* %/ %m
    //   arithmetic (%m is mod): push(pop() op pop())
    // %& %| %^
    //   bit operations (AND, OR and exclusive-OR): push(pop() op pop())
    // %= %> %<
    //   logical operations: push(pop() op pop())


    if (read(/^%([+\-*\/m&|\^=><])/)) {
      if (ch === '=') ch = '===';else if (ch === 'm') ch = '%';
      expr('(v = stack.pop(),' + ' stack.push(v = (stack.pop() ' + ch + ' v) || 0),' + ' v)');
      continue;
    } // %A, %O
    //   logical AND and OR operations (for conditionals)


    if (read(/^%([AO])/)) {
      // Are we supposed to store the result on the stack?
      expr('(stack.push(v = (stack.pop() ' + (ch === 'A' ? '&&' : '||') + ' stack.pop())), v)');
      continue;
    } // %! %~
    //   unary operations (logical and bit complement): push(op pop())


    if (read(/^%([!~])/)) {
      expr('(stack.push(v = ' + ch + 'stack.pop()), v)');
      continue;
    } // %i   add 1 to first two parameters (for ANSI terminals)


    if (read(/^%i/)) {
      // Are these supposed to go on the stack in certain situations?
      // ncurses doesn't seem to put them on the stack, but xterm.user6
      // seems to assume they're on the stack for some reason. Could
      // just be a bad terminfo string.
      // user6: "\u001b[%i%d;%dR" - possibly a termcap-style string.
      // expr('(params[0] |= 0, params[1] |= 0, params[0]++, params[1]++)');
      expr('(params[0]++, params[1]++)');
      continue;
    } // %? expr %t thenpart %e elsepart %;
    //   This forms an if-then-else.  The %e elsepart is optional.  Usually
    //   the %? expr part pushes a value onto the stack, and %t pops it from
    //   the stack, testing if it is nonzero (true).  If it is zero (false),
    //   control passes to the %e (else) part.
    //   It is possible to form else-if's a la Algol 68:
    //     %? c1 %t b1 %e c2 %t b2 %e c3 %t b3 %e c4 %t b4 %e %;
    //   where ci are conditions, bi are bodies.


    if (read(/^%\?/)) {
      end = -1;
      stmt(';if (');
      continue;
    }

    if (read(/^%t/)) {
      end = -1; // Technically this is supposed to pop everything off the stack that was
      // pushed onto the stack after the if statement, see man terminfo.
      // Right now, we don't pop anything off. This could cause compat issues.
      // Perhaps implement a "pushed" counter from the time the if statement
      // is added, to the time the then statement is added, and pop off
      // the appropriate number of elements.
      // while (pushed--) expr('stack.pop()');

      stmt(') {');
      continue;
    } // Terminfo does elseif's like
    // this: %?[expr]%t...%e[expr]%t...%;


    if (read(/^%e/)) {
      fi = val.indexOf('%?');
      then = val.indexOf('%t');
      els = val.indexOf('%e');
      end = val.indexOf('%;');
      if (end === -1) end = Infinity;

      if (then !== -1 && then < end && (fi === -1 || then < fi) && (els === -1 || then < els)) {
        stmt('} else if (');
      } else {
        stmt('} else {');
      }

      continue;
    }

    if (read(/^%;/)) {
      end = null;
      stmt('}');
      continue;
    }

    buff += val[0];
    val = val.substring(1);
  } // Clear the buffer of any remaining text.


  clear(); // Some terminfos (I'm looking at you, atari-color), don't end an if
  // statement. It's assumed terminfo will automatically end it for
  // them, because they are a bunch of lazy bastards.

  if (end != null) {
    stmt('}');
  } // Add the footer.


  stmt(footer); // Optimize and cleanup generated code.

  v = code.slice(header.length, -footer.length);

  if (!v.length) {
    code = 'return "";';
  } else if (v = /^out\.push\(("(?:[^"]|\\")+")\)$/.exec(v)) {
    code = 'return ' + v[1] + ';';
  } else {
    // Turn `(stack.push(v = params[0]), v),out.push(stack.pop())`
    // into `out.push(params[0])`.
    code = code.replace(/\(stack\.push\(v = params\[(\d+)\]\), v\),out\.push\(stack\.pop\(\)\)/g, 'out.push(params[$1])'); // Remove unnecessary variable initializations.

    v = code.slice(header.length, -footer.length);
    if (!~v.indexOf('v = ')) code = code.replace('v, ', '');
    if (!~v.indexOf('dyn')) code = code.replace('dyn = {}, ', '');
    if (!~v.indexOf('stat')) code = code.replace('stat = {}, ', '');
    if (!~v.indexOf('stack')) code = code.replace('stack = [], ', ''); // Turn `var out = [];out.push("foo"),` into `var out = ["foo"];`.

    code = code.replace(/out = \[\];out\.push\(("(?:[^"]|\\")+")\),/, 'out = [$1];');
  } // Terminfos `wyse350-vb`, and `wy350-w`
  // seem to have a few broken strings.


  if (str === '\u001b%?') {
    code = 'return "\\x1b";';
  }

  if (this.debug) {
    v = code.replace(/\x1b/g, '\\x1b').replace(/\r/g, '\\r').replace(/\n/g, '\\n');
    process.stdout.write(v + '\n');
  }

  try {
    if (this.options.stringify && code.indexOf('return ') === 0) {
      return new Function('', code)();
    }

    return this.printf || ~code.indexOf('sprintf(') ? new Function('sprintf, params', code).bind(null, sprintf) : new Function('params', code);
  } catch (e) {
    console.log('');
    console.log('Error on %s:', tkey);
    console.log(JSON.stringify(str));
    console.log('');
    console.log(code.replace(/(,|;)/g, '$1\n'));
    e.stack = e.stack.replace(/\x1b/g, '\\x1b');
    throw e;
  }
}; // See: ~/ncurses/ncurses/tinfo/lib_tputs.c


Tput.prototype._print = function (code, print, done) {
  var xon = !this.bools.needs_xon_xoff || this.bools.xon_xoff;
  print = print || write;
  done = done || noop;

  if (!this.padding) {
    print(code);
    return done();
  }

  var parts = code.split(/(?=\$<[\d.]+[*\/]{0,2}>)/),
      i = 0;

  (function next() {
    if (i === parts.length) {
      return done();
    }

    var part = parts[i++],
        padding = /^\$<([\d.]+)([*\/]{0,2})>/.exec(part),
        amount,
        suffix; // , affect;

    if (!padding) {
      print(part);
      return next();
    }

    part = part.substring(padding[0].length);
    amount = +padding[1];
    suffix = padding[2]; // A `/'  suffix indicates  that  the  padding  is  mandatory and forces a
    // delay of the given number of milliseconds even on devices for which xon
    // is present to indicate flow control.

    if (xon && !~suffix.indexOf('/')) {
      print(part);
      return next();
    } // A `*' indicates that the padding required is proportional to the number
    // of lines affected by the operation, and  the amount  given  is the
    // per-affected-unit padding required.  (In the case of insert character,
    // the factor is still the number of lines affected.) Normally, padding is
    // advisory if the device has the xon capability; it is used for cost
    // computation but does not trigger delays.


    if (~suffix.indexOf('*')) {
      // XXX Disable this for now.
      amount = amount; // if (affect = /\x1b\[(\d+)[LM]/.exec(part)) {
      //   amount *= +affect[1];
      // }
      // The above is a huge workaround. In reality, we need to compile
      // `_print` into the string functions and check the cap name and
      // params.
      // if (cap === 'insert_line' || cap === 'delete_line') {
      //   amount *= params[0];
      // }
      // if (cap === 'clear_screen') {
      //   amount *= process.stdout.rows;
      // }
    }

    return setTimeout(function () {
      print(part);
      return next();
    }, amount);
  })();
}; // A small helper function if we want
// to easily output text with setTimeouts.


Tput.print = function () {
  var fake = {
    padding: true,
    bools: {
      needs_xon_xoff: true,
      xon_xoff: false
    }
  };
  return Tput.prototype._print.apply(fake, arguments);
};
/**
 * Termcap
 */


Tput.cpaths = [process.env.TERMCAP || '', (process.env.TERMPATH || '').split(/[: ]/), (process.env.HOME || '') + '/.termcap', '/usr/share/misc/termcap', '/etc/termcap'];

Tput.prototype.readTermcap = function (term) {
  var self = this,
      terms,
      term_,
      root,
      paths;
  term = term || this.terminal; // Termcap has a bunch of terminals usually stored in one file/string,
  // so we need to find the one containing our desired terminal.

  if (~term.indexOf(_path.default.sep) && (terms = this._tryCap(_path.default.resolve(term)))) {
    term_ = _path.default.basename(term).split('.')[0];

    if (terms[process.env.TERM]) {
      term = process.env.TERM;
    } else if (terms[term_]) {
      term = term_;
    } else {
      term = Object.keys(terms)[0];
    }
  } else {
    paths = Tput.cpaths.slice();

    if (this.termcapFile) {
      paths.unshift(this.termcapFile);
    }

    paths.push(Tput.termcap);
    terms = this._tryCap(paths, term);
  }

  if (!terms) {
    throw new Error('Cannot find termcap for: ' + term);
  }

  root = terms[term];

  if (this.debug) {
    this._termcap = terms;
  }

  (function tc(term) {
    if (term && term.strings.tc) {
      root.inherits = root.inherits || [];
      root.inherits.push(term.strings.tc);
      var names = terms[term.strings.tc] ? terms[term.strings.tc].names : [term.strings.tc];

      self._debug('%s inherits from %s.', term.names.join('/'), names.join('/'));

      var inherit = tc(terms[term.strings.tc]);

      if (inherit) {
        ['bools', 'numbers', 'strings'].forEach(function (type) {
          merge(term[type], inherit[type]);
        });
      }
    }

    return term;
  })(root); // Translate termcap names to terminfo-style names.


  root = this.translateTermcap(root);
  return root;
};

Tput.prototype._tryCap = function (file, term) {
  if (!file) return;
  var terms, data, i;

  if (Array.isArray(file)) {
    for (i = 0; i < file.length; i++) {
      data = this._tryCap(file[i], term);
      if (data) return data;
    }

    return;
  } // If the termcap string starts with `/`,
  // ncurses considers it a filename.


  data = file[0] === '/' ? tryRead(file) : file;
  if (!data) return;
  terms = this.parseTermcap(data, file);

  if (term && !terms[term]) {
    return;
  }

  return terms;
};
/**
 * Termcap Parser
 *  http://en.wikipedia.org/wiki/Termcap
 *  http://www.gnu.org/software
 *    /termutils/manual/termcap-1.3/html_mono/termcap.html
 *  http://www.gnu.org/software
 *    /termutils/manual/termcap-1.3/html_mono/termcap.html#SEC17
 *  http://tldp.org/HOWTO/Text-Terminal-HOWTO.html#toc16
 *  man termcap
 */
// Example:
// vt102|dec vt102:\
//  :do=^J:co#80:li#24:cl=50\E[;H\E[2J:\
//  :le=^H:bs:cm=5\E[%i%d;%dH:nd=2\E[C:up=2\E[A:\
//  :ce=3\E[K:cd=50\E[J:so=2\E[7m:se=2\E[m:us=2\E[4m:ue=2\E[m:\
//  :md=2\E[1m:mr=2\E[7m:mb=2\E[5m:me=2\E[m:is=\E[1;24r\E[24;1H:\
//  :rs=\E>\E[?3l\E[?4l\E[?5l\E[?7h\E[?8h:ks=\E[?1h\E=:ke=\E[?1l\E>:\
//  :ku=\EOA:kd=\EOB:kr=\EOC:kl=\EOD:kb=^H:\
//  :ho=\E[H:k1=\EOP:k2=\EOQ:k3=\EOR:k4=\EOS:pt:sr=5\EM:vt#3:\
//  :sc=\E7:rc=\E8:cs=\E[%i%d;%dr:vs=\E[?7l:ve=\E[?7h:\
//  :mi:al=\E[L:dc=\E[P:dl=\E[M:ei=\E[4l:im=\E[4h:


Tput.prototype.parseTermcap = function (data, file) {
  var terms = {},
      parts,
      term,
      entries,
      fields,
      field,
      names,
      i,
      j,
      k; // remove escaped newlines

  data = data.replace(/\\\n[ \t]*/g, ''); // remove comments

  data = data.replace(/^#[^\n]+/gm, ''); // split entries

  entries = data.trim().split(/\n+/);

  for (i = 0; i < entries.length; i++) {
    fields = entries[i].split(/:+/);

    for (j = 0; j < fields.length; j++) {
      field = fields[j].trim();
      if (!field) continue;

      if (j === 0) {
        names = field.split('|');
        term = {
          name: names[0],
          names: names,
          desc: names.pop(),
          file: ~file.indexOf(_path.default.sep) ? _path.default.resolve(file) : file,
          termcap: true
        };

        for (k = 0; k < names.length; k++) {
          terms[names[k]] = term;
        }

        term.bools = {};
        term.numbers = {};
        term.strings = {};
        continue;
      }

      if (~field.indexOf('=')) {
        parts = field.split('=');
        term.strings[parts[0]] = parts.slice(1).join('=');
      } else if (~field.indexOf('#')) {
        parts = field.split('#');
        term.numbers[parts[0]] = +parts.slice(1).join('#');
      } else {
        term.bools[field] = true;
      }
    }
  }

  return terms;
};
/**
 * Termcap Compiler
 *  man termcap
 */


Tput.prototype.translateTermcap = function (info) {
  var self = this,
      out = {};
  if (!info) return;

  this._debug(info);

  ['name', 'names', 'desc', 'file', 'termcap'].forEach(function (key) {
    out[key] = info[key];
  }); // Separate aliases for termcap

  var map = function () {
    var out = {};
    Object.keys(Tput.alias).forEach(function (key) {
      var aliases = Tput.alias[key];
      out[aliases.termcap] = key;
    });
    return out;
  }(); // Translate termcap cap names to terminfo cap names.
  // e.g. `up` -> `cursor_up`


  ['bools', 'numbers', 'strings'].forEach(function (key) {
    out[key] = {};
    Object.keys(info[key]).forEach(function (cap) {
      if (key === 'strings') {
        info.strings[cap] = self._captoinfo(cap, info.strings[cap], 1);
      }

      if (map[cap]) {
        out[key][map[cap]] = info[key][cap];
      } else {
        // NOTE: Possibly include all termcap names
        // in a separate alias.js file. Some are
        // missing from the terminfo alias.js file
        // which is why we have to do this:
        // See: $ man termcap
        out[key][cap] = info[key][cap];
      }
    });
  });
  return out;
};

Tput.prototype.compileTermcap = function (term) {
  return this.compile(this.readTermcap(term));
};

Tput.prototype.injectTermcap = function (term) {
  return this.inject(this.compileTermcap(term));
};
/**
 * _nc_captoinfo - ported to javascript directly from ncurses.
 * Copyright (c) 1998-2009,2010 Free Software Foundation, Inc.
 * See: ~/ncurses/ncurses/tinfo/captoinfo.c
 *
 * Convert a termcap string to terminfo format.
 * 'cap' is the relevant terminfo capability index.
 * 's' is the string value of the capability.
 * 'parameterized' tells what type of translations to do:
 *    % translations if 1
 *    pad translations if >=0
 */


Tput.prototype._captoinfo = function (cap, s, parameterized) {
  var self = this;
  var capstart;

  if (parameterized == null) {
    parameterized = 0;
  }

  var MAX_PUSHED = 16,
      stack = [];
  var stackptr = 0,
      onstack = 0,
      seenm = 0,
      seenn = 0,
      seenr = 0,
      param = 1,
      i = 0,
      out = '';

  function warn() {
    var args = Array.prototype.slice.call(arguments);
    args[0] = 'captoinfo: ' + (args[0] || '');
    return self._debug.apply(self, args);
  }

  function isdigit(ch) {
    return ch >= '0' && ch <= '9';
  }

  function isgraph(ch) {
    return ch > ' ' && ch <= '~';
  } // convert a character to a terminfo push


  function cvtchar(sp) {
    var c = '\0',
        len;
    var j = i;

    switch (sp[j]) {
      case '\\':
        switch (sp[++j]) {
          case '\'':
          case '$':
          case '\\':
          case '%':
            c = sp[j];
            len = 2;
            break;

          case '\0':
            c = '\\';
            len = 1;
            break;

          case '0':
          case '1':
          case '2':
          case '3':
            len = 1;

            while (isdigit(sp[j])) {
              c = String.fromCharCode(8 * c.charCodeAt(0) + (sp[j++].charCodeAt(0) - '0'.charCodeAt(0)));
              len++;
            }

            break;

          default:
            c = sp[j];
            len = 2;
            break;
        }

        break;

      case '^':
        c = String.fromCharCode(sp[++j].charCodeAt(0) & 0x1f);
        len = 2;
        break;

      default:
        c = sp[j];
        len = 1;
    }

    if (isgraph(c) && c !== ',' && c !== '\'' && c !== '\\' && c !== ':') {
      out += '%\'';
      out += c;
      out += '\'';
    } else {
      out += '%{';

      if (c.charCodeAt(0) > 99) {
        out += String.fromCharCode((c.charCodeAt(0) / 100 | 0) + '0'.charCodeAt(0));
      }

      if (c.charCodeAt(0) > 9) {
        out += String.fromCharCode((c.charCodeAt(0) / 10 | 0) % 10 + '0'.charCodeAt(0));
      }

      out += String.fromCharCode(c.charCodeAt(0) % 10 + '0'.charCodeAt(0));
      out += '}';
    }

    return len;
  } // push n copies of param on the terminfo stack if not already there


  function getparm(parm, n) {
    if (seenr) {
      if (parm === 1) {
        parm = 2;
      } else if (parm === 2) {
        parm = 1;
      }
    }

    if (onstack === parm) {
      if (n > 1) {
        warn('string may not be optimal');
        out += '%Pa';

        while (n--) {
          out += '%ga';
        }
      }

      return;
    }

    if (onstack !== 0) {
      push();
    }

    onstack = parm;

    while (n--) {
      out += '%p';
      out += String.fromCharCode('0'.charCodeAt(0) + parm);
    }

    if (seenn && parm < 3) {
      out += '%{96}%^';
    }

    if (seenm && parm < 3) {
      out += '%{127}%^';
    }
  } // push onstack on to the stack


  function push() {
    if (stackptr >= MAX_PUSHED) {
      warn('string too complex to convert');
    } else {
      stack[stackptr++] = onstack;
    }
  } // pop the top of the stack into onstack


  function pop() {
    if (stackptr === 0) {
      if (onstack === 0) {
        warn('I\'m confused');
      } else {
        onstack = 0;
      }
    } else {
      onstack = stack[--stackptr];
    }

    param++;
  }

  function see03() {
    getparm(param, 1);
    out += '%3d';
    pop();
  }

  function invalid() {
    out += '%';
    i--;
    warn('unknown %% code %s (%#x) in %s', JSON.stringify(s[i]), s[i].charCodeAt(0), cap);
  } // skip the initial padding (if we haven't been told not to)


  capstart = null;
  if (s == null) s = '';

  if (parameterized >= 0 && isdigit(s[i])) {
    for (capstart = i;; i++) {
      if (!(isdigit(s[i]) || s[i] === '*' || s[i] === '.')) {
        break;
      }
    }
  }

  while (s[i]) {
    switch (s[i]) {
      case '%':
        i++;

        if (parameterized < 1) {
          out += '%';
          break;
        }

        switch (s[i++]) {
          case '%':
            out += '%';
            break;

          case 'r':
            if (seenr++ === 1) {
              warn('saw %%r twice in %s', cap);
            }

            break;

          case 'm':
            if (seenm++ === 1) {
              warn('saw %%m twice in %s', cap);
            }

            break;

          case 'n':
            if (seenn++ === 1) {
              warn('saw %%n twice in %s', cap);
            }

            break;

          case 'i':
            out += '%i';
            break;

          case '6':
          case 'B':
            getparm(param, 1);
            out += '%{10}%/%{16}%*';
            getparm(param, 1);
            out += '%{10}%m%+';
            break;

          case '8':
          case 'D':
            getparm(param, 2);
            out += '%{2}%*%-';
            break;

          case '>':
            getparm(param, 2); // %?%{x}%>%t%{y}%+%;

            out += '%?';
            i += cvtchar(s);
            out += '%>%t';
            i += cvtchar(s);
            out += '%+%;';
            break;

          case 'a':
            if ((s[i] === '=' || s[i] === '+' || s[i] === '-' || s[i] === '*' || s[i] === '/') && (s[i + 1] === 'p' || s[i + 1] === 'c') && s[i + 2] !== '\0' && s[i + 2]) {
              var l;
              l = 2;

              if (s[i] !== '=') {
                getparm(param, 1);
              }

              if (s[i + 1] === 'p') {
                getparm(param + s[i + 2].charCodeAt(0) - '@'.charCodeAt(0), 1);

                if (param !== onstack) {
                  pop();
                  param--;
                }

                l++;
              } else {
                i += 2, l += cvtchar(s), i -= 2;
              }

              switch (s[i]) {
                case '+':
                  out += '%+';
                  break;

                case '-':
                  out += '%-';
                  break;

                case '*':
                  out += '%*';
                  break;

                case '/':
                  out += '%/';
                  break;

                case '=':
                  if (seenr) {
                    if (param === 1) {
                      onstack = 2;
                    } else if (param === 2) {
                      onstack = 1;
                    } else {
                      onstack = param;
                    }
                  } else {
                    onstack = param;
                  }

                  break;
              }

              i += l;
              break;
            }

            getparm(param, 1);
            i += cvtchar(s);
            out += '%+';
            break;

          case '+':
            getparm(param, 1);
            i += cvtchar(s);
            out += '%+%c';
            pop();
            break;

          case 's':
            // #ifdef WATERLOO
            //          i += cvtchar(s);
            //          getparm(param, 1);
            //          out += '%-';
            // #else
            getparm(param, 1);
            out += '%s';
            pop(); // #endif /* WATERLOO */

            break;

          case '-':
            i += cvtchar(s);
            getparm(param, 1);
            out += '%-%c';
            pop();
            break;

          case '.':
            getparm(param, 1);
            out += '%c';
            pop();
            break;

          case '0':
            // not clear any of the historical termcaps did this
            if (s[i] === '3') {
              see03(); // goto

              break;
            } else if (s[i] !== '2') {
              invalid(); // goto

              break;
            }

          // FALLTHRU

          case '2':
            getparm(param, 1);
            out += '%2d';
            pop();
            break;

          case '3':
            see03();
            break;

          case 'd':
            getparm(param, 1);
            out += '%d';
            pop();
            break;

          case 'f':
            param++;
            break;

          case 'b':
            param--;
            break;

          case '\\':
            out += '%\\';
            break;

          default:
            invalid();
            break;
        }

        break;
      // #ifdef REVISIBILIZE
      //    case '\\':
      //      out += s[i++];
      //      out += s[i++];
      //      break;
      //    case '\n':
      //      out += '\\n';
      //      i++;
      //      break;
      //    case '\t':
      //      out += '\\t';
      //      i++;
      //      break;
      //    case '\r':
      //      out += '\\r';
      //      i++;
      //      break;
      //    case '\200':
      //      out += '\\0';
      //      i++;
      //      break;
      //    case '\f':
      //      out += '\\f';
      //      i++;
      //      break;
      //    case '\b':
      //      out += '\\b';
      //      i++;
      //      break;
      //    case ' ':
      //      out += '\\s';
      //      i++;
      //      break;
      //    case '^':
      //      out += '\\^';
      //      i++;
      //      break;
      //    case ':':
      //      out += '\\:';
      //      i++;
      //      break;
      //    case ',':
      //      out += '\\,';
      //      i++;
      //      break;
      //    default:
      //      if (s[i] === '\033') {
      //        out += '\\E';
      //        i++;
      //      } else if (s[i].charCodeAt(0) > 0 && s[i].charCodeAt(0) < 32) {
      //        out += '^';
      //        out += String.fromCharCode(s[i].charCodeAt(0) + '@'.charCodeAt(0));
      //        i++;
      //      } else if (s[i].charCodeAt(0) <= 0 || s[i].charCodeAt(0) >= 127) {
      //        out += '\\';
      //        out += String.fromCharCode(
      //          ((s[i].charCodeAt(0) & 0300) >> 6) + '0'.charCodeAt(0));
      //        out += String.fromCharCode(
      //          ((s[i].charCodeAt(0) & 0070) >> 3) + '0'.charCodeAt(0));
      //        out += String.fromCharCode(
      //          (s[i].charCodeAt(0) & 0007) + '0'.charCodeAt(0));
      //        i++;
      //      } else {
      //        out += s[i++];
      //      }
      //      break;
      // #else

      default:
        out += s[i++];
        break;
      // #endif
    }
  } // Now, if we stripped off some leading padding, add it at the end
  // of the string as mandatory padding.


  if (capstart != null) {
    out += '$<';

    for (i = capstart;; i++) {
      if (isdigit(s[i]) || s[i] === '*' || s[i] === '.') {
        out += s[i];
      } else {
        break;
      }
    }

    out += '/>';
  }

  if (s !== out) {
    warn('Translating %s from %s to %s.', cap, JSON.stringify(s), JSON.stringify(out));
  }

  return out;
};
/**
 * Compile All Terminfo
 */


Tput.prototype.getAll = function () {
  var dir = this._prefix(),
      list = asort(_fs.default.readdirSync(dir)),
      infos = [];

  list.forEach(function (letter) {
    var terms = asort(_fs.default.readdirSync(_path.default.resolve(dir, letter)));
    infos.push.apply(infos, terms);
  });

  function asort(obj) {
    return obj.sort(function (a, b) {
      a = a.toLowerCase().charCodeAt(0);
      b = b.toLowerCase().charCodeAt(0);
      return a - b;
    });
  }

  return infos;
};

Tput.prototype.compileAll = function (start) {
  var self = this,
      all = {};
  this.getAll().forEach(function (name) {
    if (start && name !== start) {
      return;
    } else {
      start = null;
    }

    all[name] = self.compileTerminfo(name);
  });
  return all;
};
/**
 * Detect Features / Quirks
 */


Tput.prototype.detectFeatures = function (info) {
  var data = this.parseACS(info);
  info.features = {
    unicode: this.detectUnicode(info),
    brokenACS: this.detectBrokenACS(info),
    PCRomSet: this.detectPCRomSet(info),
    magicCookie: this.detectMagicCookie(info),
    padding: this.detectPadding(info),
    setbuf: this.detectSetbuf(info),
    acsc: data.acsc,
    acscr: data.acscr
  };
  return info.features;
};

Tput.prototype.detectUnicode = function () {
  if (process.env.NCURSES_FORCE_UNICODE != null) {
    return !!+process.env.NCURSES_FORCE_UNICODE;
  }

  if (this.options.forceUnicode != null) {
    return this.options.forceUnicode;
  }

  var LANG = process.env.LANG + ':' + process.env.LANGUAGE + ':' + process.env.LC_ALL + ':' + process.env.LC_CTYPE;
  return /utf-?8/i.test(LANG) || this.GetConsoleCP() === 65001;
}; // For some reason TERM=linux has smacs/rmacs, but it maps to `^[[11m`
// and it does not switch to the DEC SCLD character set. What the hell?
// xterm: \x1b(0, screen: \x0e, linux: \x1b[11m (doesn't work)
// `man console_codes` says:
// 11  select null mapping, set display control flag, reset tog‐
//     gle meta flag (ECMA-48 says "first alternate font").
// See ncurses:
// ~/ncurses/ncurses/base/lib_set_term.c
// ~/ncurses/ncurses/tinfo/lib_acs.c
// ~/ncurses/ncurses/tinfo/tinfo_driver.c
// ~/ncurses/ncurses/tinfo/lib_setup.c


Tput.prototype.detectBrokenACS = function (info) {
  // ncurses-compatible env variable.
  if (process.env.NCURSES_NO_UTF8_ACS != null) {
    return !!+process.env.NCURSES_NO_UTF8_ACS;
  } // If the terminal supports unicode, we don't need ACS.


  if (info.numbers.U8 >= 0) {
    return !!info.numbers.U8;
  } // The linux console is just broken for some reason.
  // Apparently the Linux console does not support ACS,
  // but it does support the PC ROM character set.


  if (info.name === 'linux') {
    return true;
  } // PC alternate charset
  // if (acsc.indexOf('+\x10,\x11-\x18.\x190') === 0) {


  if (this.detectPCRomSet(info)) {
    return true;
  } // screen termcap is bugged?


  if (this.termcap && info.name.indexOf('screen') === 0 && process.env.TERMCAP && ~process.env.TERMCAP.indexOf('screen') && ~process.env.TERMCAP.indexOf('hhII00')) {
    if (~info.strings.enter_alt_charset_mode.indexOf('\x0e') || ~info.strings.enter_alt_charset_mode.indexOf('\x0f') || ~info.strings.set_attributes.indexOf('\x0e') || ~info.strings.set_attributes.indexOf('\x0f')) {
      return true;
    }
  }

  return false;
}; // If enter_pc_charset is the same as enter_alt_charset,
// the terminal does not support SCLD as ACS.
// See: ~/ncurses/ncurses/tinfo/lib_acs.c


Tput.prototype.detectPCRomSet = function (info) {
  var s = info.strings;

  if (s.enter_pc_charset_mode && s.enter_alt_charset_mode && s.enter_pc_charset_mode === s.enter_alt_charset_mode && s.exit_pc_charset_mode === s.exit_alt_charset_mode) {
    return true;
  }

  return false;
};

Tput.prototype.detectMagicCookie = function () {
  return process.env.NCURSES_NO_MAGIC_COOKIE == null;
};

Tput.prototype.detectPadding = function () {
  return process.env.NCURSES_NO_PADDING == null;
};

Tput.prototype.detectSetbuf = function () {
  return process.env.NCURSES_NO_SETBUF == null;
};

Tput.prototype.parseACS = function (info) {
  var data = {};
  data.acsc = {};
  data.acscr = {}; // Possibly just return an empty object, as done here, instead of
  // specifically saying ACS is "broken" above. This would be more
  // accurate to ncurses logic. But it doesn't really matter.

  if (this.detectPCRomSet(info)) {
    return data;
  } // See: ~/ncurses/ncurses/tinfo/lib_acs.c: L208


  Object.keys(Tput.acsc).forEach(function (ch) {
    var acs_chars = info.strings.acs_chars || '',
        i = acs_chars.indexOf(ch),
        next = acs_chars[i + 1];

    if (!next || i === -1 || !Tput.acsc[next]) {
      return;
    }

    data.acsc[ch] = Tput.acsc[next];
    data.acscr[Tput.acsc[next]] = ch;
  });
  return data;
};

Tput.prototype.GetConsoleCP = function () {
  var ccp;

  if (process.platform !== 'win32') {
    return -1;
  } // Allow unicode on all windows consoles for now:


  if (+process.env.NCURSES_NO_WINDOWS_UNICODE !== 1) {
    return 65001;
  } // cp.execSync('chcp 65001', { stdio: 'ignore', timeout: 1500 });


  try {
    // Produces something like: 'Active code page: 437\n\n'
    ccp = _child_process.default.execFileSync(process.env.WINDIR + '\\system32\\chcp.com', [], {
      stdio: ['ignore', 'pipe', 'ignore'],
      encoding: 'ascii',
      timeout: 1500
    }); // ccp = cp.execSync('chcp', {
    //   stdio: ['ignore', 'pipe', 'ignore'],
    //   encoding: 'ascii',
    //   timeout: 1500
    // });
  } catch (e) {
    ;
  }

  ccp = /\d+/.exec(ccp);

  if (!ccp) {
    return -1;
  }

  ccp = +ccp[0];
  return ccp;
};
/**
 * Helpers
 */


function noop() {
  return '';
}

noop.unsupported = true;

function merge(a, b) {
  Object.keys(b).forEach(function (key) {
    a[key] = b[key];
  });
  return a;
}

function write(data) {
  return process.stdout.write(data);
}

function tryRead(file) {
  if (Array.isArray(file)) {
    for (var i = 0; i < file.length; i++) {
      var data = tryRead(file[i]);
      if (data) return data;
    }

    return '';
  }

  if (!file) return '';
  file = _path.default.resolve.apply(_path.default, arguments);

  try {
    return _fs.default.readFileSync(file, 'utf8');
  } catch (e) {
    return '';
  }
}
/**
 * sprintf
 *  http://www.cplusplus.com/reference/cstdio/printf/
 */


function sprintf(src) {
  var params = Array.prototype.slice.call(arguments, 1),
      rule = /%([\-+# ]{1,4})?(\d+(?:\.\d+)?)?([doxXsc])/g,
      i = 0;
  return src.replace(rule, function (_, flag, width, type) {
    var flags = (flag || '').split(''),
        param = params[i] != null ? params[i] : '',
        initial = param // , width = +width
    ,
        opt = {},
        pre = '';
    i++;

    switch (type) {
      case 'd':
        // signed int
        param = (+param).toString(10);
        break;

      case 'o':
        // unsigned octal
        param = (+param).toString(8);
        break;

      case 'x':
        // unsigned hex int
        param = (+param).toString(16);
        break;

      case 'X':
        // unsigned hex int uppercase
        param = (+param).toString(16).toUppercase();
        break;

      case 's':
        // string
        break;

      case 'c':
        // char
        param = isFinite(param) ? String.fromCharCode(param || 0x80) : '';
        break;
    }

    flags.forEach(function (flag) {
      switch (flag) {
        // left-justify by width
        case '-':
          opt.left = true;
          break;
        // always precede numbers with their signs

        case '+':
          opt.signs = true;
          break;
        // used with o, x, X - value is preceded with 0, 0x, or 0X respectively.
        // used with a, A, e, E, f, F, g, G - forces written output to contain
        // a decimal point even if no more digits follow

        case '#':
          opt.hexpoint = true;
          break;
        // if no sign is going to be written, black space in front of the value

        case ' ':
          opt.space = true;
          break;
      }
    });
    width = +width.split('.')[0]; // Should this be for opt.left too?
    // Example: %2.2X - turns 0 into 00

    if (width && !opt.left) {
      param = param + '';

      while (param.length < width) {
        param = '0' + param;
      }
    }

    if (opt.signs) {
      if (+initial >= 0) {
        pre += '+';
      }
    }

    if (opt.space) {
      if (!opt.signs && +initial >= 0) {
        pre += ' ';
      }
    }

    if (opt.hexpoint) {
      switch (type) {
        case 'o':
          // unsigned octal
          pre += '0';
          break;

        case 'x':
          // unsigned hex int
          pre += '0x';
          break;

        case 'X':
          // unsigned hex int uppercase
          pre += '0X';
          break;
      }
    }

    if (opt.left) {
      if (width > pre.length + param.length) {
        width -= pre.length + param.length;
        pre = Array(width + 1).join(' ') + pre;
      }
    }

    return pre + param;
  });
}
/**
 * Aliases
 */


Tput._alias = require("./alias");
Tput.alias = {};
['bools', 'numbers', 'strings'].forEach(function (type) {
  Object.keys(Tput._alias[type]).forEach(function (key) {
    var aliases = Tput._alias[type][key];
    Tput.alias[key] = [aliases[0]];
    Tput.alias[key].terminfo = aliases[0];
    Tput.alias[key].termcap = aliases[1];
  });
}); // Bools

Tput.alias.no_esc_ctlc.push('beehive_glitch');
Tput.alias.dest_tabs_magic_smso.push('teleray_glitch'); // Numbers

Tput.alias.micro_col_size.push('micro_char_size');
/**
 * Feature Checking
 */

Tput.aliasMap = {};
Object.keys(Tput.alias).forEach(function (key) {
  Tput.aliasMap[key] = key;
  Tput.alias[key].forEach(function (k) {
    Tput.aliasMap[k] = key;
  });
});

Tput.prototype.has = function (name) {
  name = Tput.aliasMap[name];
  var val = this.all[name];
  if (!name) return false;

  if (typeof val === 'number') {
    return val !== -1;
  }

  return !!val;
};
/**
 * Fallback Termcap Entry
 */


Tput.termcap = '' + 'vt102|dec vt102:' + ':do=^J:co#80:li#24:cl=50\\E[;H\\E[2J:' + ':le=^H:bs:cm=5\\E[%i%d;%dH:nd=2\\E[C:up=2\\E[A:' + ':ce=3\\E[K:cd=50\\E[J:so=2\\E[7m:se=2\\E[m:us=2\\E[4m:ue=2\\E[m:' + ':md=2\\E[1m:mr=2\\E[7m:mb=2\\E[5m:me=2\\E[m:is=\\E[1;24r\\E[24;1H:' + ':rs=\\E>\\E[?3l\\E[?4l\\E[?5l\\E[?7h\\E[?8h:ks=\\E[?1h\\E=:ke=\\E[?1l\\E>:' + ':ku=\\EOA:kd=\\EOB:kr=\\EOC:kl=\\EOD:kb=^H:\\\n' + ':ho=\\E[H:k1=\\EOP:k2=\\EOQ:k3=\\EOR:k4=\\EOS:pt:sr=5\\EM:vt#3:' + ':sc=\\E7:rc=\\E8:cs=\\E[%i%d;%dr:vs=\\E[?7l:ve=\\E[?7h:' + ':mi:al=\\E[L:dc=\\E[P:dl=\\E[M:ei=\\E[4l:im=\\E[4h:';
/**
 * Terminfo Data
 */

Tput.bools = ['auto_left_margin', 'auto_right_margin', 'no_esc_ctlc', 'ceol_standout_glitch', 'eat_newline_glitch', 'erase_overstrike', 'generic_type', 'hard_copy', 'has_meta_key', 'has_status_line', 'insert_null_glitch', 'memory_above', 'memory_below', 'move_insert_mode', 'move_standout_mode', 'over_strike', 'status_line_esc_ok', 'dest_tabs_magic_smso', 'tilde_glitch', 'transparent_underline', 'xon_xoff', 'needs_xon_xoff', 'prtr_silent', 'hard_cursor', 'non_rev_rmcup', 'no_pad_char', 'non_dest_scroll_region', 'can_change', 'back_color_erase', 'hue_lightness_saturation', 'col_addr_glitch', 'cr_cancels_micro_mode', 'has_print_wheel', 'row_addr_glitch', 'semi_auto_right_margin', 'cpi_changes_res', 'lpi_changes_res', // #ifdef __INTERNAL_CAPS_VISIBLE
'backspaces_with_bs', 'crt_no_scrolling', 'no_correctly_working_cr', 'gnu_has_meta_key', 'linefeed_is_newline', 'has_hardware_tabs', 'return_does_clr_eol'];
Tput.numbers = ['columns', 'init_tabs', 'lines', 'lines_of_memory', 'magic_cookie_glitch', 'padding_baud_rate', 'virtual_terminal', 'width_status_line', 'num_labels', 'label_height', 'label_width', 'max_attributes', 'maximum_windows', 'max_colors', 'max_pairs', 'no_color_video', 'buffer_capacity', 'dot_vert_spacing', 'dot_horz_spacing', 'max_micro_address', 'max_micro_jump', 'micro_col_size', 'micro_line_size', 'number_of_pins', 'output_res_char', 'output_res_line', 'output_res_horz_inch', 'output_res_vert_inch', 'print_rate', 'wide_char_size', 'buttons', 'bit_image_entwining', 'bit_image_type', // #ifdef __INTERNAL_CAPS_VISIBLE
'magic_cookie_glitch_ul', 'carriage_return_delay', 'new_line_delay', 'backspace_delay', 'horizontal_tab_delay', 'number_of_function_keys'];
Tput.strings = ['back_tab', 'bell', 'carriage_return', 'change_scroll_region', 'clear_all_tabs', 'clear_screen', 'clr_eol', 'clr_eos', 'column_address', 'command_character', 'cursor_address', 'cursor_down', 'cursor_home', 'cursor_invisible', 'cursor_left', 'cursor_mem_address', 'cursor_normal', 'cursor_right', 'cursor_to_ll', 'cursor_up', 'cursor_visible', 'delete_character', 'delete_line', 'dis_status_line', 'down_half_line', 'enter_alt_charset_mode', 'enter_blink_mode', 'enter_bold_mode', 'enter_ca_mode', 'enter_delete_mode', 'enter_dim_mode', 'enter_insert_mode', 'enter_secure_mode', 'enter_protected_mode', 'enter_reverse_mode', 'enter_standout_mode', 'enter_underline_mode', 'erase_chars', 'exit_alt_charset_mode', 'exit_attribute_mode', 'exit_ca_mode', 'exit_delete_mode', 'exit_insert_mode', 'exit_standout_mode', 'exit_underline_mode', 'flash_screen', 'form_feed', 'from_status_line', 'init_1string', 'init_2string', 'init_3string', 'init_file', 'insert_character', 'insert_line', 'insert_padding', 'key_backspace', 'key_catab', 'key_clear', 'key_ctab', 'key_dc', 'key_dl', 'key_down', 'key_eic', 'key_eol', 'key_eos', 'key_f0', 'key_f1', 'key_f10', 'key_f2', 'key_f3', 'key_f4', 'key_f5', 'key_f6', 'key_f7', 'key_f8', 'key_f9', 'key_home', 'key_ic', 'key_il', 'key_left', 'key_ll', 'key_npage', 'key_ppage', 'key_right', 'key_sf', 'key_sr', 'key_stab', 'key_up', 'keypad_local', 'keypad_xmit', 'lab_f0', 'lab_f1', 'lab_f10', 'lab_f2', 'lab_f3', 'lab_f4', 'lab_f5', 'lab_f6', 'lab_f7', 'lab_f8', 'lab_f9', 'meta_off', 'meta_on', 'newline', 'pad_char', 'parm_dch', 'parm_delete_line', 'parm_down_cursor', 'parm_ich', 'parm_index', 'parm_insert_line', 'parm_left_cursor', 'parm_right_cursor', 'parm_rindex', 'parm_up_cursor', 'pkey_key', 'pkey_local', 'pkey_xmit', 'print_screen', 'prtr_off', 'prtr_on', 'repeat_char', 'reset_1string', 'reset_2string', 'reset_3string', 'reset_file', 'restore_cursor', 'row_address', 'save_cursor', 'scroll_forward', 'scroll_reverse', 'set_attributes', 'set_tab', 'set_window', 'tab', 'to_status_line', 'underline_char', 'up_half_line', 'init_prog', 'key_a1', 'key_a3', 'key_b2', 'key_c1', 'key_c3', 'prtr_non', 'char_padding', 'acs_chars', 'plab_norm', 'key_btab', 'enter_xon_mode', 'exit_xon_mode', 'enter_am_mode', 'exit_am_mode', 'xon_character', 'xoff_character', 'ena_acs', 'label_on', 'label_off', 'key_beg', 'key_cancel', 'key_close', 'key_command', 'key_copy', 'key_create', 'key_end', 'key_enter', 'key_exit', 'key_find', 'key_help', 'key_mark', 'key_message', 'key_move', 'key_next', 'key_open', 'key_options', 'key_previous', 'key_print', 'key_redo', 'key_reference', 'key_refresh', 'key_replace', 'key_restart', 'key_resume', 'key_save', 'key_suspend', 'key_undo', 'key_sbeg', 'key_scancel', 'key_scommand', 'key_scopy', 'key_screate', 'key_sdc', 'key_sdl', 'key_select', 'key_send', 'key_seol', 'key_sexit', 'key_sfind', 'key_shelp', 'key_shome', 'key_sic', 'key_sleft', 'key_smessage', 'key_smove', 'key_snext', 'key_soptions', 'key_sprevious', 'key_sprint', 'key_sredo', 'key_sreplace', 'key_sright', 'key_srsume', 'key_ssave', 'key_ssuspend', 'key_sundo', 'req_for_input', 'key_f11', 'key_f12', 'key_f13', 'key_f14', 'key_f15', 'key_f16', 'key_f17', 'key_f18', 'key_f19', 'key_f20', 'key_f21', 'key_f22', 'key_f23', 'key_f24', 'key_f25', 'key_f26', 'key_f27', 'key_f28', 'key_f29', 'key_f30', 'key_f31', 'key_f32', 'key_f33', 'key_f34', 'key_f35', 'key_f36', 'key_f37', 'key_f38', 'key_f39', 'key_f40', 'key_f41', 'key_f42', 'key_f43', 'key_f44', 'key_f45', 'key_f46', 'key_f47', 'key_f48', 'key_f49', 'key_f50', 'key_f51', 'key_f52', 'key_f53', 'key_f54', 'key_f55', 'key_f56', 'key_f57', 'key_f58', 'key_f59', 'key_f60', 'key_f61', 'key_f62', 'key_f63', 'clr_bol', 'clear_margins', 'set_left_margin', 'set_right_margin', 'label_format', 'set_clock', 'display_clock', 'remove_clock', 'create_window', 'goto_window', 'hangup', 'dial_phone', 'quick_dial', 'tone', 'pulse', 'flash_hook', 'fixed_pause', 'wait_tone', 'user0', 'user1', 'user2', 'user3', 'user4', 'user5', 'user6', 'user7', 'user8', 'user9', 'orig_pair', 'orig_colors', 'initialize_color', 'initialize_pair', 'set_color_pair', 'set_foreground', 'set_background', 'change_char_pitch', 'change_line_pitch', 'change_res_horz', 'change_res_vert', 'define_char', 'enter_doublewide_mode', 'enter_draft_quality', 'enter_italics_mode', 'enter_leftward_mode', 'enter_micro_mode', 'enter_near_letter_quality', 'enter_normal_quality', 'enter_shadow_mode', 'enter_subscript_mode', 'enter_superscript_mode', 'enter_upward_mode', 'exit_doublewide_mode', 'exit_italics_mode', 'exit_leftward_mode', 'exit_micro_mode', 'exit_shadow_mode', 'exit_subscript_mode', 'exit_superscript_mode', 'exit_upward_mode', 'micro_column_address', 'micro_down', 'micro_left', 'micro_right', 'micro_row_address', 'micro_up', 'order_of_pins', 'parm_down_micro', 'parm_left_micro', 'parm_right_micro', 'parm_up_micro', 'select_char_set', 'set_bottom_margin', 'set_bottom_margin_parm', 'set_left_margin_parm', 'set_right_margin_parm', 'set_top_margin', 'set_top_margin_parm', 'start_bit_image', 'start_char_set_def', 'stop_bit_image', 'stop_char_set_def', 'subscript_characters', 'superscript_characters', 'these_cause_cr', 'zero_motion', 'char_set_names', 'key_mouse', 'mouse_info', 'req_mouse_pos', 'get_mouse', 'set_a_foreground', 'set_a_background', 'pkey_plab', 'device_type', 'code_set_init', 'set0_des_seq', 'set1_des_seq', 'set2_des_seq', 'set3_des_seq', 'set_lr_margin', 'set_tb_margin', 'bit_image_repeat', 'bit_image_newline', 'bit_image_carriage_return', 'color_names', 'define_bit_image_region', 'end_bit_image_region', 'set_color_band', 'set_page_length', 'display_pc_char', 'enter_pc_charset_mode', 'exit_pc_charset_mode', 'enter_scancode_mode', 'exit_scancode_mode', 'pc_term_options', 'scancode_escape', 'alt_scancode_esc', 'enter_horizontal_hl_mode', 'enter_left_hl_mode', 'enter_low_hl_mode', 'enter_right_hl_mode', 'enter_top_hl_mode', 'enter_vertical_hl_mode', 'set_a_attributes', 'set_pglen_inch', // #ifdef __INTERNAL_CAPS_VISIBLE
'termcap_init2', 'termcap_reset', 'linefeed_if_not_lf', 'backspace_if_not_bs', 'other_non_function_keys', 'arrow_key_map', 'acs_ulcorner', 'acs_llcorner', 'acs_urcorner', 'acs_lrcorner', 'acs_ltee', 'acs_rtee', 'acs_btee', 'acs_ttee', 'acs_hline', 'acs_vline', 'acs_plus', 'memory_lock', 'memory_unlock', 'box_chars_1']; // DEC Special Character and Line Drawing Set.
// Taken from tty.js.

Tput.acsc = {
  // (0
  '`': '\u25c6',
  // '◆'
  'a': '\u2592',
  // '▒'
  'b': '\u0009',
  // '\t'
  'c': '\u000c',
  // '\f'
  'd': '\u000d',
  // '\r'
  'e': '\u000a',
  // '\n'
  'f': '\u00b0',
  // '°'
  'g': '\u00b1',
  // '±'
  'h': '\u2424',
  // '\u2424' (NL)
  'i': '\u000b',
  // '\v'
  'j': '\u2518',
  // '┘'
  'k': '\u2510',
  // '┐'
  'l': '\u250c',
  // '┌'
  'm': '\u2514',
  // '└'
  'n': '\u253c',
  // '┼'
  'o': '\u23ba',
  // '⎺'
  'p': '\u23bb',
  // '⎻'
  'q': '\u2500',
  // '─'
  'r': '\u23bc',
  // '⎼'
  's': '\u23bd',
  // '⎽'
  't': '\u251c',
  // '├'
  'u': '\u2524',
  // '┤'
  'v': '\u2534',
  // '┴'
  'w': '\u252c',
  // '┬'
  'x': '\u2502',
  // '│'
  'y': '\u2264',
  // '≤'
  'z': '\u2265',
  // '≥'
  '{': '\u03c0',
  // 'π'
  '|': '\u2260',
  // '≠'
  '}': '\u00a3',
  // '£'
  '~': '\u00b7' // '·'

}; // Convert ACS unicode characters to the
// most similar-looking ascii characters.

Tput.utoa = Tput.prototype.utoa = {
  '\u25c6': '*',
  // '◆'
  '\u2592': ' ',
  // '▒'
  // '\u0009': '\t', // '\t'
  // '\u000c': '\f', // '\f'
  // '\u000d': '\r', // '\r'
  // '\u000a': '\n', // '\n'
  '\u00b0': '*',
  // '°'
  '\u00b1': '+',
  // '±'
  '\u2424': '\n',
  // '\u2424' (NL)
  // '\u000b': '\v', // '\v'
  '\u2518': '+',
  // '┘'
  '\u2510': '+',
  // '┐'
  '\u250c': '+',
  // '┌'
  '\u2514': '+',
  // '└'
  '\u253c': '+',
  // '┼'
  '\u23ba': '-',
  // '⎺'
  '\u23bb': '-',
  // '⎻'
  '\u2500': '-',
  // '─'
  '\u23bc': '-',
  // '⎼'
  '\u23bd': '_',
  // '⎽'
  '\u251c': '+',
  // '├'
  '\u2524': '+',
  // '┤'
  '\u2534': '+',
  // '┴'
  '\u252c': '+',
  // '┬'
  '\u2502': '|',
  // '│'
  '\u2264': '<',
  // '≤'
  '\u2265': '>',
  // '≥'
  '\u03c0': '?',
  // 'π'
  '\u2260': '=',
  // '≠'
  '\u00a3': '?',
  // '£'
  '\u00b7': '*' // '·'

};
/**
 * Expose
 */

var _default = Tput;
exports.default = _default;

},{"./alias":78,"@babel/runtime/helpers/interopRequireDefault":1,"assert":"assert","child_process":5,"fs":"fs","path":29}],87:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.combiningTable = void 0;

var _blessed = _interopRequireDefault(require("./blessed"));

/**
 * unicode.js - east asian width and surrogate pairs
 * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).
 * https://github.com/chjj/blessed
 * Borrowed from vangie/east-asian-width, komagata/eastasianwidth,
 * and mathiasbynens/String.prototype.codePointAt. Licenses below.
 */
// east-asian-width
//
// Copyright (c) 2015 Vangie Du
// https://github.com/vangie/east-asian-width
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
// eastasianwidth
//
// Copyright (c) 2013, Masaki Komagata
// https://github.com/komagata/eastasianwidth
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// String.prototype.codePointAt
//
// Copyright Mathias Bynens <https://mathiasbynens.be/>
// https://github.com/mathiasbynens/String.prototype.codePointAt
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// String.fromCodePoint
//
// Copyright Mathias Bynens <https://mathiasbynens.be/>
// https://github.com/mathiasbynens/String.fromCodePoint
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
let stringFromCharCode = String.fromCharCode;
let floor = Math.floor;
let _exports = {};
/**
 * Wide, Surrogates, and Combining
 */

_exports.charWidth = function (str, i) {
  let point = typeof str === 'number' ? str : codePointAt(str, i || 0); // nul

  if (point === 0) return 0; // tab

  if (point === 0x09) {
    return _blessed.default.screen.global ? _blessed.default.screen.global.tabc.length : 8;
  } // 8-bit control characters (2-width according to unicode??)


  if (point < 32 || point >= 0x7f && point < 0xa0) {
    return 0;
  } // search table of non-spacing characters
  // is ucs combining or C0/C1 control character


  if (_exports.combining[point]) {
    return 0;
  } // check for double-wide
  // if (point >= 0x1100
  //     && (point <= 0x115f // Hangul Jamo init. consonants
  //     || point === 0x2329 || point === 0x232a
  //     || (point >= 0x2e80 && point <= 0xa4cf
  //     && point !== 0x303f) // CJK ... Yi
  //     || (point >= 0xac00 && point <= 0xd7a3) // Hangul Syllables
  //     || (point >= 0xf900 && point <= 0xfaff) // CJK Compatibility Ideographs
  //     || (point >= 0xfe10 && point <= 0xfe19) // Vertical forms
  //     || (point >= 0xfe30 && point <= 0xfe6f) // CJK Compatibility Forms
  //     || (point >= 0xff00 && point <= 0xff60) // Fullwidth Forms
  //     || (point >= 0xffe0 && point <= 0xffe6)
  //     || (point >= 0x20000 && point <= 0x2fffd)
  //     || (point >= 0x30000 && point <= 0x3fffd))) {
  //   return 2;
  // }
  // check for double-wide


  if (0x3000 === point || 0xFF01 <= point && point <= 0xFF60 || 0xFFE0 <= point && point <= 0xFFE6) {
    return 2;
  }

  if (0x1100 <= point && point <= 0x115F || 0x11A3 <= point && point <= 0x11A7 || 0x11FA <= point && point <= 0x11FF || 0x2329 <= point && point <= 0x232A || 0x2E80 <= point && point <= 0x2E99 || 0x2E9B <= point && point <= 0x2EF3 || 0x2F00 <= point && point <= 0x2FD5 || 0x2FF0 <= point && point <= 0x2FFB || 0x3001 <= point && point <= 0x303E || 0x3041 <= point && point <= 0x3096 || 0x3099 <= point && point <= 0x30FF || 0x3105 <= point && point <= 0x312D || 0x3131 <= point && point <= 0x318E || 0x3190 <= point && point <= 0x31BA || 0x31C0 <= point && point <= 0x31E3 || 0x31F0 <= point && point <= 0x321E || 0x3220 <= point && point <= 0x3247 || 0x3250 <= point && point <= 0x32FE || 0x3300 <= point && point <= 0x4DBF || 0x4E00 <= point && point <= 0xA48C || 0xA490 <= point && point <= 0xA4C6 || 0xA960 <= point && point <= 0xA97C || 0xAC00 <= point && point <= 0xD7A3 || 0xD7B0 <= point && point <= 0xD7C6 || 0xD7CB <= point && point <= 0xD7FB || 0xF900 <= point && point <= 0xFAFF || 0xFE10 <= point && point <= 0xFE19 || 0xFE30 <= point && point <= 0xFE52 || 0xFE54 <= point && point <= 0xFE66 || 0xFE68 <= point && point <= 0xFE6B || 0x1B000 <= point && point <= 0x1B001 || 0x1F200 <= point && point <= 0x1F202 || 0x1F210 <= point && point <= 0x1F23A || 0x1F240 <= point && point <= 0x1F248 || 0x1F250 <= point && point <= 0x1F251 || 0x20000 <= point && point <= 0x2F73F || 0x2B740 <= point && point <= 0x2FFFD || 0x30000 <= point && point <= 0x3FFFD) {
    return 2;
  } // CJK Ambiguous
  // http://www.unicode.org/reports/tr11/
  // http://www.unicode.org/reports/tr11/#Ambiguous


  if (process.env.NCURSES_CJK_WIDTH) {
    if (0x00A1 === point || 0x00A4 === point || 0x00A7 <= point && point <= 0x00A8 || 0x00AA === point || 0x00AD <= point && point <= 0x00AE || 0x00B0 <= point && point <= 0x00B4 || 0x00B6 <= point && point <= 0x00BA || 0x00BC <= point && point <= 0x00BF || 0x00C6 === point || 0x00D0 === point || 0x00D7 <= point && point <= 0x00D8 || 0x00DE <= point && point <= 0x00E1 || 0x00E6 === point || 0x00E8 <= point && point <= 0x00EA || 0x00EC <= point && point <= 0x00ED || 0x00F0 === point || 0x00F2 <= point && point <= 0x00F3 || 0x00F7 <= point && point <= 0x00FA || 0x00FC === point || 0x00FE === point || 0x0101 === point || 0x0111 === point || 0x0113 === point || 0x011B === point || 0x0126 <= point && point <= 0x0127 || 0x012B === point || 0x0131 <= point && point <= 0x0133 || 0x0138 === point || 0x013F <= point && point <= 0x0142 || 0x0144 === point || 0x0148 <= point && point <= 0x014B || 0x014D === point || 0x0152 <= point && point <= 0x0153 || 0x0166 <= point && point <= 0x0167 || 0x016B === point || 0x01CE === point || 0x01D0 === point || 0x01D2 === point || 0x01D4 === point || 0x01D6 === point || 0x01D8 === point || 0x01DA === point || 0x01DC === point || 0x0251 === point || 0x0261 === point || 0x02C4 === point || 0x02C7 === point || 0x02C9 <= point && point <= 0x02CB || 0x02CD === point || 0x02D0 === point || 0x02D8 <= point && point <= 0x02DB || 0x02DD === point || 0x02DF === point || 0x0300 <= point && point <= 0x036F || 0x0391 <= point && point <= 0x03A1 || 0x03A3 <= point && point <= 0x03A9 || 0x03B1 <= point && point <= 0x03C1 || 0x03C3 <= point && point <= 0x03C9 || 0x0401 === point || 0x0410 <= point && point <= 0x044F || 0x0451 === point || 0x2010 === point || 0x2013 <= point && point <= 0x2016 || 0x2018 <= point && point <= 0x2019 || 0x201C <= point && point <= 0x201D || 0x2020 <= point && point <= 0x2022 || 0x2024 <= point && point <= 0x2027 || 0x2030 === point || 0x2032 <= point && point <= 0x2033 || 0x2035 === point || 0x203B === point || 0x203E === point || 0x2074 === point || 0x207F === point || 0x2081 <= point && point <= 0x2084 || 0x20AC === point || 0x2103 === point || 0x2105 === point || 0x2109 === point || 0x2113 === point || 0x2116 === point || 0x2121 <= point && point <= 0x2122 || 0x2126 === point || 0x212B === point || 0x2153 <= point && point <= 0x2154 || 0x215B <= point && point <= 0x215E || 0x2160 <= point && point <= 0x216B || 0x2170 <= point && point <= 0x2179 || 0x2189 === point || 0x2190 <= point && point <= 0x2199 || 0x21B8 <= point && point <= 0x21B9 || 0x21D2 === point || 0x21D4 === point || 0x21E7 === point || 0x2200 === point || 0x2202 <= point && point <= 0x2203 || 0x2207 <= point && point <= 0x2208 || 0x220B === point || 0x220F === point || 0x2211 === point || 0x2215 === point || 0x221A === point || 0x221D <= point && point <= 0x2220 || 0x2223 === point || 0x2225 === point || 0x2227 <= point && point <= 0x222C || 0x222E === point || 0x2234 <= point && point <= 0x2237 || 0x223C <= point && point <= 0x223D || 0x2248 === point || 0x224C === point || 0x2252 === point || 0x2260 <= point && point <= 0x2261 || 0x2264 <= point && point <= 0x2267 || 0x226A <= point && point <= 0x226B || 0x226E <= point && point <= 0x226F || 0x2282 <= point && point <= 0x2283 || 0x2286 <= point && point <= 0x2287 || 0x2295 === point || 0x2299 === point || 0x22A5 === point || 0x22BF === point || 0x2312 === point || 0x2460 <= point && point <= 0x24E9 || 0x24EB <= point && point <= 0x254B || 0x2550 <= point && point <= 0x2573 || 0x2580 <= point && point <= 0x258F || 0x2592 <= point && point <= 0x2595 || 0x25A0 <= point && point <= 0x25A1 || 0x25A3 <= point && point <= 0x25A9 || 0x25B2 <= point && point <= 0x25B3 || 0x25B6 <= point && point <= 0x25B7 || 0x25BC <= point && point <= 0x25BD || 0x25C0 <= point && point <= 0x25C1 || 0x25C6 <= point && point <= 0x25C8 || 0x25CB === point || 0x25CE <= point && point <= 0x25D1 || 0x25E2 <= point && point <= 0x25E5 || 0x25EF === point || 0x2605 <= point && point <= 0x2606 || 0x2609 === point || 0x260E <= point && point <= 0x260F || 0x2614 <= point && point <= 0x2615 || 0x261C === point || 0x261E === point || 0x2640 === point || 0x2642 === point || 0x2660 <= point && point <= 0x2661 || 0x2663 <= point && point <= 0x2665 || 0x2667 <= point && point <= 0x266A || 0x266C <= point && point <= 0x266D || 0x266F === point || 0x269E <= point && point <= 0x269F || 0x26BE <= point && point <= 0x26BF || 0x26C4 <= point && point <= 0x26CD || 0x26CF <= point && point <= 0x26E1 || 0x26E3 === point || 0x26E8 <= point && point <= 0x26FF || 0x273D === point || 0x2757 === point || 0x2776 <= point && point <= 0x277F || 0x2B55 <= point && point <= 0x2B59 || 0x3248 <= point && point <= 0x324F || 0xE000 <= point && point <= 0xF8FF || 0xFE00 <= point && point <= 0xFE0F || 0xFFFD === point || 0x1F100 <= point && point <= 0x1F10A || 0x1F110 <= point && point <= 0x1F12D || 0x1F130 <= point && point <= 0x1F169 || 0x1F170 <= point && point <= 0x1F19A || 0xE0100 <= point && point <= 0xE01EF || 0xF0000 <= point && point <= 0xFFFFD || 0x100000 <= point && point <= 0x10FFFD) {
      return +process.env.NCURSES_CJK_WIDTH || 1;
    }
  }

  return 1;
};

_exports.strWidth = function (str) {
  let width = 0;

  for (let i = 0; i < str.length; i++) {
    width += charWidth(str, i);
    if (isSurrogate(str, i)) i++;
  }

  return width;
};

_exports.isSurrogate = function (str, i) {
  let point = typeof str === 'number' ? str : codePointAt(str, i || 0);
  return point > 0x00ffff;
};

const combiningTable = [[0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489], [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2], [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603], [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670], [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED], [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A], [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902], [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D], [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981], [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD], [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C], [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D], [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC], [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD], [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C], [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D], [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0], [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48], [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC], [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD], [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D], [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6], [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E], [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC], [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35], [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E], [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97], [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030], [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039], [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F], [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753], [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD], [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD], [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922], [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B], [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34], [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42], [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF], [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063], [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F], [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B], [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F], [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB], [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F], [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169], [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD], [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F], [0xE0100, 0xE01EF]];
exports.combiningTable = combiningTable;

_exports.isCombining = function (str, i) {
  let point = typeof str === 'number' ? str : codePointAt(str, i || 0);
  return combiningTable[point] === true;
};

_exports.combining = combiningTable.reduce(function (out, row) {
  for (let i = row[0]; i <= row[1]; i++) {
    out[i] = true;
  }

  return out;
}, {});
/**
 * Code Point Helpers
 */

_exports.codePointAt = function (str, position) {
  if (str == null) {
    throw TypeError();
  }

  let string = String(str);

  if (string.codePointAt) {
    return string.codePointAt(position);
  }

  let size = string.length; // `ToInteger`

  let index = position ? Number(position) : 0;

  if (index !== index) {
    // better `isNaN`
    index = 0;
  } // Account for out-of-bounds indices:


  if (index < 0 || index >= size) {
    return undefined;
  } // Get the first code unit


  let first = string.charCodeAt(index);
  let second;

  if ( // check if it’s the start of a surrogate pair
  first >= 0xD800 && first <= 0xDBFF && // high surrogate
  size > index + 1 // there is a next code unit
  ) {
      second = string.charCodeAt(index + 1);

      if (second >= 0xDC00 && second <= 0xDFFF) {
        // low surrogate
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
      }
    }

  return first;
}; // exports.codePointAt = function(str, position) {
//   position = +position || 0;
//   var x = str.charCodeAt(position);
//   var y = str.length > 1 ? str.charCodeAt(position + 1) : 0;
//   var point = x;
//   if ((0xD800 <= x && x <= 0xDBFF) && (0xDC00 <= y && y <= 0xDFFF)) {
//     x &= 0x3FF;
//     y &= 0x3FF;
//     point = (x << 10) | y;
//     point += 0x10000;
//   }
//   return point;
// };


_exports.fromCodePoint = function () {
  if (String.fromCodePoint) {
    return String.fromCodePoint.apply(String, arguments);
  }

  let MAX_SIZE = 0x4000;
  let codeUnits = [];
  let highSurrogate;
  let lowSurrogate;
  let index = -1;
  let length = arguments.length;

  if (!length) {
    return '';
  }

  let result = '';

  while (++index < length) {
    let codePoint = Number(arguments[index]);

    if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
    codePoint < 0 || // not a valid Unicode code point
    codePoint > 0x10FFFF || // not a valid Unicode code point
    floor(codePoint) !== codePoint // not an integer
    ) {
        throw RangeError('Invalid code point: ' + codePoint);
      }

    if (codePoint <= 0xFFFF) {
      // BMP code point
      codeUnits.push(codePoint);
    } else {
      // Astral code point; split in surrogate halves
      // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
      codePoint -= 0x10000;
      highSurrogate = (codePoint >> 10) + 0xD800;
      lowSurrogate = codePoint % 0x400 + 0xDC00;
      codeUnits.push(highSurrogate, lowSurrogate);
    }

    if (index + 1 === length || codeUnits.length > MAX_SIZE) {
      result += stringFromCharCode.apply(null, codeUnits);
      codeUnits.length = 0;
    }
  }

  return result;
};
/**
 * Regexes
 */


const swideCharacters = new RegExp('(' // 0x20000 - 0x2fffd:
+ '[\\ud840-\\ud87f][\\udc00-\\udffd]' + '|' // 0x30000 - 0x3fffd:
+ '[\\ud880-\\ud8bf][\\udc00-\\udffd]' + ')', 'g');
const wideCharacters = new RegExp('([' + '\\u1100-\\u115f' // Hangul Jamo init. consonants
+ '\\u2329\\u232a' + '\\u2e80-\\u303e\\u3040-\\ua4cf' // CJK ... Yi
+ '\\uac00-\\ud7a3' // Hangul Syllables
+ '\\uf900-\\ufaff' // CJK Compatibility Ideographs
+ '\\ufe10-\\ufe19' // Vertical forms
+ '\\ufe30-\\ufe6f' // CJK Compatibility Forms
+ '\\uff00-\\uff60' // Fullwidth Forms
+ '\\uffe0-\\uffe6' + '])', 'g');
_exports.chars = {
  // Double width characters that are _not_ surrogate pairs.
  // NOTE: 0x20000 - 0x2fffd and 0x30000 - 0x3fffd are not necessary for this
  // regex anyway. This regex is used to put a blank char after wide chars to
  // be eaten, however, if this is a surrogate pair, parseContent already adds
  // the extra one char because its length equals 2 instead of 1.
  wide: wideCharacters,
  // All surrogate pair wide chars.
  swide: swideCharacters,
  // All wide chars including surrogate pairs.
  all: new RegExp('(' + swideCharacters.source.slice(1, -1) + '|' + wideCharacters.source.slice(1, -1) + ')', 'g'),
  // Regex to detect a surrogate pair.
  surrogate: /[\ud800-\udbff][\udc00-\udfff]/g,
  combining: new RegExp(combiningTable.reduce(function (out, row) {
    let low, high, range;

    if (row[0] > 0x00ffff) {
      low = _exports.fromCodePoint(row[0]);
      low = [hexify(low.charCodeAt(0)), hexify(low.charCodeAt(1))];
      high = _exports.fromCodePoint(row[1]);
      high = [hexify(high.charCodeAt(0)), hexify(high.charCodeAt(1))];
      range = '[\\u' + low[0] + '-' + '\\u' + high[0] + ']' + '[\\u' + low[1] + '-' + '\\u' + high[1] + ']';
      if (!~out.indexOf('|')) out += ']';
      out += '|' + range;
    } else {
      low = hexify(row[0]);
      high = hexify(row[1]);
      low = '\\u' + low;
      high = '\\u' + high;
      out += low + '-' + high;
    }

    return out;
  }, '['), 'g')
};

function hexify(n) {
  let s = n.toString(16);

  while (s.length < 4) s = '0' + s;

  return s;
}
/*
exports.chars.combining = new RegExp(
  '['
  + '\\u0300-\\u036f'
  + '\\u0483-\\u0486'
  + '\\u0488-\\u0489'
  + '\\u0591-\\u05bd'
  + '\\u05bf-\\u05bf'
  + '\\u05c1-\\u05c2'
  + '\\u05c4-\\u05c5'
  + '\\u05c7-\\u05c7'
  + '\\u0600-\\u0603'
  + '\\u0610-\\u0615'
  + '\\u064b-\\u065e'
  + '\\u0670-\\u0670'
  + '\\u06d6-\\u06e4'
  + '\\u06e7-\\u06e8'
  + '\\u06ea-\\u06ed'
  + '\\u070f-\\u070f'
  + '\\u0711-\\u0711'
  + '\\u0730-\\u074a'
  + '\\u07a6-\\u07b0'
  + '\\u07eb-\\u07f3'
  + '\\u0901-\\u0902'
  + '\\u093c-\\u093c'
  + '\\u0941-\\u0948'
  + '\\u094d-\\u094d'
  + '\\u0951-\\u0954'
  + '\\u0962-\\u0963'
  + '\\u0981-\\u0981'
  + '\\u09bc-\\u09bc'
  + '\\u09c1-\\u09c4'
  + '\\u09cd-\\u09cd'
  + '\\u09e2-\\u09e3'
  + '\\u0a01-\\u0a02'
  + '\\u0a3c-\\u0a3c'
  + '\\u0a41-\\u0a42'
  + '\\u0a47-\\u0a48'
  + '\\u0a4b-\\u0a4d'
  + '\\u0a70-\\u0a71'
  + '\\u0a81-\\u0a82'
  + '\\u0abc-\\u0abc'
  + '\\u0ac1-\\u0ac5'
  + '\\u0ac7-\\u0ac8'
  + '\\u0acd-\\u0acd'
  + '\\u0ae2-\\u0ae3'
  + '\\u0b01-\\u0b01'
  + '\\u0b3c-\\u0b3c'
  + '\\u0b3f-\\u0b3f'
  + '\\u0b41-\\u0b43'
  + '\\u0b4d-\\u0b4d'
  + '\\u0b56-\\u0b56'
  + '\\u0b82-\\u0b82'
  + '\\u0bc0-\\u0bc0'
  + '\\u0bcd-\\u0bcd'
  + '\\u0c3e-\\u0c40'
  + '\\u0c46-\\u0c48'
  + '\\u0c4a-\\u0c4d'
  + '\\u0c55-\\u0c56'
  + '\\u0cbc-\\u0cbc'
  + '\\u0cbf-\\u0cbf'
  + '\\u0cc6-\\u0cc6'
  + '\\u0ccc-\\u0ccd'
  + '\\u0ce2-\\u0ce3'
  + '\\u0d41-\\u0d43'
  + '\\u0d4d-\\u0d4d'
  + '\\u0dca-\\u0dca'
  + '\\u0dd2-\\u0dd4'
  + '\\u0dd6-\\u0dd6'
  + '\\u0e31-\\u0e31'
  + '\\u0e34-\\u0e3a'
  + '\\u0e47-\\u0e4e'
  + '\\u0eb1-\\u0eb1'
  + '\\u0eb4-\\u0eb9'
  + '\\u0ebb-\\u0ebc'
  + '\\u0ec8-\\u0ecd'
  + '\\u0f18-\\u0f19'
  + '\\u0f35-\\u0f35'
  + '\\u0f37-\\u0f37'
  + '\\u0f39-\\u0f39'
  + '\\u0f71-\\u0f7e'
  + '\\u0f80-\\u0f84'
  + '\\u0f86-\\u0f87'
  + '\\u0f90-\\u0f97'
  + '\\u0f99-\\u0fbc'
  + '\\u0fc6-\\u0fc6'
  + '\\u102d-\\u1030'
  + '\\u1032-\\u1032'
  + '\\u1036-\\u1037'
  + '\\u1039-\\u1039'
  + '\\u1058-\\u1059'
  + '\\u1160-\\u11ff'
  + '\\u135f-\\u135f'
  + '\\u1712-\\u1714'
  + '\\u1732-\\u1734'
  + '\\u1752-\\u1753'
  + '\\u1772-\\u1773'
  + '\\u17b4-\\u17b5'
  + '\\u17b7-\\u17bd'
  + '\\u17c6-\\u17c6'
  + '\\u17c9-\\u17d3'
  + '\\u17dd-\\u17dd'
  + '\\u180b-\\u180d'
  + '\\u18a9-\\u18a9'
  + '\\u1920-\\u1922'
  + '\\u1927-\\u1928'
  + '\\u1932-\\u1932'
  + '\\u1939-\\u193b'
  + '\\u1a17-\\u1a18'
  + '\\u1b00-\\u1b03'
  + '\\u1b34-\\u1b34'
  + '\\u1b36-\\u1b3a'
  + '\\u1b3c-\\u1b3c'
  + '\\u1b42-\\u1b42'
  + '\\u1b6b-\\u1b73'
  + '\\u1dc0-\\u1dca'
  + '\\u1dfe-\\u1dff'
  + '\\u200b-\\u200f'
  + '\\u202a-\\u202e'
  + '\\u2060-\\u2063'
  + '\\u206a-\\u206f'
  + '\\u20d0-\\u20ef'
  + '\\u302a-\\u302f'
  + '\\u3099-\\u309a'
  + '\\ua806-\\ua806'
  + '\\ua80b-\\ua80b'
  + '\\ua825-\\ua826'
  + '\\ufb1e-\\ufb1e'
  + '\\ufe00-\\ufe0f'
  + '\\ufe20-\\ufe23'
  + '\\ufeff-\\ufeff'
  + '\\ufff9-\\ufffb'
  + ']'
  + '|[\\ud802-\\ud802][\\ude01-\\ude03]'
  + '|[\\ud802-\\ud802][\\ude05-\\ude06]'
  + '|[\\ud802-\\ud802][\\ude0c-\\ude0f]'
  + '|[\\ud802-\\ud802][\\ude38-\\ude3a]'
  + '|[\\ud802-\\ud802][\\ude3f-\\ude3f]'
  + '|[\\ud834-\\ud834][\\udd67-\\udd69]'
  + '|[\\ud834-\\ud834][\\udd73-\\udd82]'
  + '|[\\ud834-\\ud834][\\udd85-\\udd8b]'
  + '|[\\ud834-\\ud834][\\uddaa-\\uddad]'
  + '|[\\ud834-\\ud834][\\ude42-\\ude44]'
  + '|[\\udb40-\\udb40][\\udc01-\\udc01]'
  + '|[\\udb40-\\udb40][\\udc20-\\udc7f]'
  + '|[\\udb40-\\udb40][\\udd00-\\uddef]'
, 'g');
*/


var _default = _exports;
exports.default = _default;

},{"./blessed":79,"@babel/runtime/helpers/interopRequireDefault":1}],88:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _node = _interopRequireDefault(require("./widgets/node"));

var _screen = _interopRequireDefault(require("./widgets/screen"));

var _element = _interopRequireDefault(require("./widgets/element"));

var _box = _interopRequireDefault(require("./widgets/box"));

var _text = _interopRequireDefault(require("./widgets/text"));

var _scrollablebox = _interopRequireDefault(require("./widgets/scrollablebox"));

var _scrollabletext = _interopRequireDefault(require("./widgets/scrollabletext"));

var _input = _interopRequireDefault(require("./widgets/input"));

var _prompt = _interopRequireDefault(require("./widgets/prompt"));

/**
 * widget.js - high-level interface for blessed
 * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).
 * https://github.com/chjj/blessed
 */
var widget = {
  'Node': _node.default,
  'Screen': _screen.default,
  'Element': _element.default,
  'Box': _box.default,
  'Text': _text.default,
  'ScrollableBox': _scrollablebox.default,
  'ScrollableText': _scrollabletext.default,
  'Input': _input.default,
  'Prompt': _prompt.default
};
widget.classes = ['Node', 'Screen', 'Element', 'Box', 'Text', 'ScrollableBox', 'ScrollableText', 'Input', 'Prompt'];
widget.aliases = {
  'ListBar': 'Listbar',
  'PNG': 'ANSIImage'
};
Object.keys(widget.aliases).forEach(function (key) {
  var name = widget.aliases[key];
  widget[key] = widget[name];
  widget[key.toLowerCase()] = widget[name];
});
var _default = widget;
exports.default = _default;

},{"./widgets/box":89,"./widgets/element":90,"./widgets/input":91,"./widgets/node":92,"./widgets/prompt":93,"./widgets/screen":94,"./widgets/scrollablebox":95,"./widgets/scrollabletext":96,"./widgets/text":97,"@babel/runtime/helpers/interopRequireDefault":1}],89:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = _interopRequireDefault(require("./element"));

/**
 * box.js - box element for blessed
 * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).
 * https://github.com/chjj/blessed
 */
class Box extends _element.default {
  /**
   * Box
   */
  constructor(options) {
    options = options || {};
    super(options);
    this.type = 'box';
  }

}

var _default = Box;
exports.default = _default;

},{"./element":90,"@babel/runtime/helpers/interopRequireDefault":1}],90:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _colors = _interopRequireDefault(require("../colors"));

var _unicode = _interopRequireDefault(require("../unicode"));

var _helpers = _interopRequireDefault(require("../helpers"));

var _node = _interopRequireDefault(require("./node"));

/**
 * element.js - base element for blessed
 * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).
 * https://github.com/chjj/blessed
 */

/**
 * Modules
 */
var nextTick = global.setImmediate || process.nextTick.bind(process);

class Element extends _node.default {
  /**
   * Element
   */
  constructor(options) {
    super(options);
    var self = this;
    options = options || {};
    this.name = options.name;
    options.position = options.position || {
      left: options.left,
      right: options.right,
      top: options.top,
      bottom: options.bottom,
      width: options.width,
      height: options.height
    };

    if (options.position.width === 'shrink' || options.position.height === 'shrink') {
      if (options.position.width === 'shrink') {
        delete options.position.width;
      }

      if (options.position.height === 'shrink') {
        delete options.position.height;
      }

      options.shrink = true;
    }

    this.position = options.position;
    this.noOverflow = options.noOverflow;
    this.dockBorders = options.dockBorders;
    this.shadow = options.shadow;
    this.style = options.style;

    if (!this.style) {
      this.style = {};
      this.style.fg = options.fg;
      this.style.bg = options.bg;
      this.style.bold = options.bold;
      this.style.underline = options.underline;
      this.style.blink = options.blink;
      this.style.inverse = options.inverse;
      this.style.invisible = options.invisible;
      this.style.transparent = options.transparent;
    }

    this.hidden = options.hidden || false;
    this.fixed = options.fixed || false;
    this.align = options.align || 'left';
    this.valign = options.valign || 'top';
    this.wrap = options.wrap !== false;
    this.shrink = options.shrink;
    this.fixed = options.fixed;
    this.ch = options.ch || ' ';

    if (typeof options.padding === 'number' || !options.padding) {
      options.padding = {
        left: options.padding,
        top: options.padding,
        right: options.padding,
        bottom: options.padding
      };
    }

    this.padding = {
      left: options.padding.left || 0,
      top: options.padding.top || 0,
      right: options.padding.right || 0,
      bottom: options.padding.bottom || 0
    };
    this.border = options.border;

    if (this.border) {
      if (typeof this.border === 'string') {
        this.border = {
          type: this.border
        };
      }

      this.border.type = this.border.type || 'bg';
      if (this.border.type === 'ascii') this.border.type = 'line';
      this.border.ch = this.border.ch || ' ';
      this.style.border = this.style.border || this.border.style;

      if (!this.style.border) {
        this.style.border = {};
        this.style.border.fg = this.border.fg;
        this.style.border.bg = this.border.bg;
      } //this.border.style = this.style.border;


      if (this.border.left == null) this.border.left = true;
      if (this.border.top == null) this.border.top = true;
      if (this.border.right == null) this.border.right = true;
      if (this.border.bottom == null) this.border.bottom = true;
    } // if (options.mouse || options.clickable) {


    if (options.clickable) {
      this.screen._listenMouse(this);
    }

    if (options.input || options.keyable) {
      this.screen._listenKeys(this);
    }

    this.parseTags = options.parseTags || options.tags;
    this.setContent(options.content || '', true);

    if (options.label) {
      this.setLabel(options.label);
    }

    if (options.hoverText) {
      this.setHover(options.hoverText);
    } // TODO: Possibly move this to Node for onScreenEvent('mouse', ...).


    this.on('newListener', function fn(type) {
      // type = type.split(' ').slice(1).join(' ');
      if (type === 'mouse' || type === 'click' || type === 'mouseover' || type === 'mouseout' || type === 'mousedown' || type === 'mouseup' || type === 'mousewheel' || type === 'wheeldown' || type === 'wheelup' || type === 'mousemove') {
        self.screen._listenMouse(self);
      } else if (type === 'keypress' || type.indexOf('key ') === 0) {
        self.screen._listenKeys(self);
      }
    });
    this.on('resize', function () {
      self.parseContent();
    });
    this.on('attach', function () {
      self.parseContent();
    });
    this.on('detach', function () {
      delete self.lpos;
    });

    if (options.hoverBg != null) {
      options.hoverEffects = options.hoverEffects || {};
      options.hoverEffects.bg = options.hoverBg;
    }

    if (this.style.hover) {
      options.hoverEffects = this.style.hover;
    }

    if (this.style.focus) {
      options.focusEffects = this.style.focus;
    }

    if (options.effects) {
      if (options.effects.hover) options.hoverEffects = options.effects.hover;
      if (options.effects.focus) options.focusEffects = options.effects.focus;
    }

    [['hoverEffects', 'mouseover', 'mouseout', '_htemp'], ['focusEffects', 'focus', 'blur', '_ftemp']].forEach(function (props) {
      var pname = props[0],
          over = props[1],
          out = props[2],
          temp = props[3];
      self.screen.setEffects(self, self, over, out, self.options[pname], temp);
    });

    if (this.options.draggable) {
      this.draggable = true;
    }

    if (options.focused) {
      this.focus();
    }

    this.type = 'element';
    this._render = Element.prototype.render;
  }

  sattr(style, fg, bg) {
    var bold = style.bold,
        underline = style.underline,
        blink = style.blink,
        inverse = style.inverse,
        invisible = style.invisible; // if (arguments.length === 1) {

    if (fg == null && bg == null) {
      fg = style.fg;
      bg = style.bg;
    } // This used to be a loop, but I decided
    // to unroll it for performance's sake.


    if (typeof bold === 'function') bold = bold(this);
    if (typeof underline === 'function') underline = underline(this);
    if (typeof blink === 'function') blink = blink(this);
    if (typeof inverse === 'function') inverse = inverse(this);
    if (typeof invisible === 'function') invisible = invisible(this);
    if (typeof fg === 'function') fg = fg(this);
    if (typeof bg === 'function') bg = bg(this); // return (this.uid << 24)
    //   | ((this.dockBorders ? 32 : 0) << 18)

    return (invisible ? 16 : 0) << 18 | (inverse ? 8 : 0) << 18 | (blink ? 4 : 0) << 18 | (underline ? 2 : 0) << 18 | (bold ? 1 : 0) << 18 | _colors.default.convert(fg) << 9 | _colors.default.convert(bg);
  }

  onScreenEvent(type, handler) {
    var listeners = this._slisteners = this._slisteners || [];
    listeners.push({
      type: type,
      handler: handler
    });
    this.screen.on(type, handler);
  }

  onceScreenEvent(type, handler) {
    var listeners = this._slisteners = this._slisteners || [];
    var entry = {
      type: type,
      handler: handler
    };
    listeners.push(entry);
    this.screen.once(type, function () {
      var i = listeners.indexOf(entry);
      if (~i) listeners.splice(i, 1);
      return handler.apply(this, arguments);
    });
  }

  removeScreenEvent(type, handler) {
    var listeners = this._slisteners = this._slisteners || [];

    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];

      if (listener.type === type && listener.handler === handler) {
        listeners.splice(i, 1);

        if (this._slisteners.length === 0) {
          delete this._slisteners;
        }

        break;
      }
    }

    this.screen.removeListener(type, handler);
  }

  free() {
    var listeners = this._slisteners = this._slisteners || [];

    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      this.screen.removeListener(listener.type, listener.handler);
    }

    delete this._slisteners;
  }

  hide() {
    if (this.hidden) return;
    this.clearPos();
    this.hidden = true;
    this.emit('hide');

    if (this.screen.focused === this) {
      this.screen.rewindFocus();
    }
  }

  show() {
    if (!this.hidden) return;
    this.hidden = false;
    this.emit('show');
  }

  toggle() {
    return this.hidden ? this.show() : this.hide();
  }

  focus() {
    return this.screen.focused = this;
  }

  setContent(content, noClear, noTags) {
    if (!noClear) this.clearPos();
    this.content = content || '';
    this.parseContent(noTags);
    this.emit('set content');
  }

  getContent() {
    if (!this._clines) return '';
    return this._clines.fake.join('\n');
  }

  setText(content, noClear) {
    content = content || '';
    content = content.replace(/\x1b\[[\d;]*m/g, '');
    return this.setContent(content, noClear, true);
  }

  getText() {
    return this.getContent().replace(/\x1b\[[\d;]*m/g, '');
  }

  parseContent(noTags) {
    if (this.detached) return false;
    var width = this.width - this.iwidth;

    if (this._clines == null || this._clines.width !== width || this._clines.content !== this.content) {
      var content = this.content;
      content = content.replace(/[\x00-\x08\x0b-\x0c\x0e-\x1a\x1c-\x1f\x7f]/g, '').replace(/\x1b(?!\[[\d;]*m)/g, '').replace(/\r\n|\r/g, '\n').replace(/\t/g, this.screen.tabc);

      if (this.screen.fullUnicode) {
        // double-width chars will eat the next char after render. create a
        // blank character after it so it doesn't eat the real next char.
        content = content.replace(_unicode.default.chars.all, '$1\x03'); // iTerm2 cannot render combining characters properly.

        if (this.screen.program.isiTerm2) {
          content = content.replace(_unicode.default.chars.combining, '');
        }
      } else {
        // no double-width: replace them with question-marks.
        content = content.replace(_unicode.default.chars.all, '??'); // delete combining characters since they're 0-width anyway.
        // NOTE: We could drop this, the non-surrogates would get changed to ? by
        // the unicode filter, and surrogates changed to ? by the surrogate
        // regex. however, the user might expect them to be 0-width.
        // NOTE: Might be better for performance to drop!

        content = content.replace(_unicode.default.chars.combining, ''); // no surrogate pairs: replace them with question-marks.

        content = content.replace(_unicode.default.chars.surrogate, '?'); // XXX Deduplicate code here:
        // content = helpers.dropUnicode(content);
      }

      if (!noTags) {
        content = this._parseTags(content);
      }

      this._clines = this._wrapContent(content, width);
      this._clines.width = width;
      this._clines.content = this.content;
      this._clines.attr = this._parseAttr(this._clines);
      this._clines.ci = [];

      this._clines.reduce(function (total, line) {
        this._clines.ci.push(total);

        return total + line.length + 1;
      }.bind(this), 0);

      this._pcontent = this._clines.join('\n');
      this.emit('parsed content');
      return true;
    } // Need to calculate this every time because the default fg/bg may change.


    this._clines.attr = this._parseAttr(this._clines) || this._clines.attr;
    return false;
  } // Convert `{red-fg}foo{/red-fg}` to `\x1b[31mfoo\x1b[39m`.


  _parseTags(text) {
    if (!this.parseTags) return text;
    if (!/{\/?[\w\-,;!#]*}/.test(text)) return text;
    var program = this.screen.program,
        out = '',
        state,
        bg = [],
        fg = [],
        flag = [],
        cap,
        slash,
        param,
        attr,
        esc;

    for (;;) {
      if (!esc && (cap = /^{escape}/.exec(text))) {
        text = text.substring(cap[0].length);
        esc = true;
        continue;
      }

      if (esc && (cap = /^([\s\S]+?){\/escape}/.exec(text))) {
        text = text.substring(cap[0].length);
        out += cap[1];
        esc = false;
        continue;
      }

      if (esc) {
        // throw new Error('Unterminated escape tag.');
        out += text;
        break;
      }

      if (cap = /^{(\/?)([\w\-,;!#]*)}/.exec(text)) {
        text = text.substring(cap[0].length);
        slash = cap[1] === '/';
        param = cap[2].replace(/-/g, ' ');

        if (param === 'open') {
          out += '{';
          continue;
        } else if (param === 'close') {
          out += '}';
          continue;
        }

        if (param.slice(-3) === ' bg') state = bg;else if (param.slice(-3) === ' fg') state = fg;else state = flag;

        if (slash) {
          if (!param) {
            out += program._attr('normal');
            bg.length = 0;
            fg.length = 0;
            flag.length = 0;
          } else {
            attr = program._attr(param, false);

            if (attr == null) {
              out += cap[0];
            } else {
              // if (param !== state[state.length - 1]) {
              //   throw new Error('Misnested tags.');
              // }
              state.pop();

              if (state.length) {
                out += program._attr(state[state.length - 1]);
              } else {
                out += attr;
              }
            }
          }
        } else {
          if (!param) {
            out += cap[0];
          } else {
            attr = program._attr(param);

            if (attr == null) {
              out += cap[0];
            } else {
              state.push(param);
              out += attr;
            }
          }
        }

        continue;
      }

      if (cap = /^[\s\S]+?(?={\/?[\w\-,;!#]*})/.exec(text)) {
        text = text.substring(cap[0].length);
        out += cap[0];
        continue;
      }

      out += text;
      break;
    }

    return out;
  }

  _parseAttr(lines) {
    var dattr = this.sattr(this.style),
        attr = dattr,
        attrs = [],
        line,
        i,
        j,
        c;

    if (lines[0].attr === attr) {
      return;
    }

    for (j = 0; j < lines.length; j++) {
      line = lines[j];
      attrs[j] = attr;

      for (i = 0; i < line.length; i++) {
        if (line[i] === '\x1b') {
          if (c = /^\x1b\[[\d;]*m/.exec(line.substring(i))) {
            attr = this.screen.attrCode(c[0], attr, dattr);
            i += c[0].length - 1;
          }
        }
      }
    }

    return attrs;
  }

  _align(line, width, align) {
    if (!align) return line; //if (!align && !~line.indexOf('{|}')) return line;

    var cline = line.replace(/\x1b\[[\d;]*m/g, ''),
        len = cline.length,
        s = width - len;

    if (this.shrink) {
      s = 0;
    }

    if (len === 0) return line;
    if (s < 0) return line;

    if (align === 'center') {
      s = Array((s / 2 | 0) + 1).join(' ');
      return s + line + s;
    } else if (align === 'right') {
      s = Array(s + 1).join(' ');
      return s + line;
    } else if (this.parseTags && ~line.indexOf('{|}')) {
      var parts = line.split('{|}');
      var cparts = cline.split('{|}');
      s = Math.max(width - cparts[0].length - cparts[1].length, 0);
      s = Array(s + 1).join(' ');
      return parts[0] + s + parts[1];
    }

    return line;
  }

  _wrapContent(content, width) {
    var tags = this.parseTags,
        state = this.align,
        wrap = this.wrap,
        margin = 0,
        rtof = [],
        ftor = [],
        out = [],
        no = 0,
        line,
        align,
        cap,
        total,
        i,
        part,
        j,
        lines,
        rest;
    lines = content.split('\n');

    if (!content) {
      out.push(content);
      out.rtof = [0];
      out.ftor = [[0]];
      out.fake = lines;
      out.real = out;
      out.mwidth = 0;
      return out;
    }

    if (this.scrollbar) margin++;
    if (width > margin) width -= margin;

    main: for (; no < lines.length; no++) {
      line = lines[no];
      align = state;
      ftor.push([]); // Handle alignment tags.

      if (tags) {
        if (cap = /^{(left|center|right)}/.exec(line)) {
          line = line.substring(cap[0].length);
          align = state = cap[1] !== 'left' ? cap[1] : null;
        }

        if (cap = /{\/(left|center|right)}$/.exec(line)) {
          line = line.slice(0, -cap[0].length); //state = null;

          state = this.align;
        }
      } // If the string is apparently too long, wrap it.


      while (line.length > width) {
        // Measure the real width of the string.
        for (i = 0, total = 0; i < line.length; i++) {
          while (line[i] === '\x1b') {
            while (line[i] && line[i++] !== 'm');
          }

          if (!line[i]) break;

          if (++total === width) {
            // If we're not wrapping the text, we have to finish up the rest of
            // the control sequences before cutting off the line.
            i++;

            if (!wrap) {
              rest = line.substring(i).match(/\x1b\[[^m]*m/g);
              rest = rest ? rest.join('') : '';
              out.push(this._align(line.substring(0, i) + rest, width, align));
              ftor[no].push(out.length - 1);
              rtof.push(no);
              continue main;
            }

            if (!this.screen.fullUnicode) {
              // Try to find a space to break on.
              if (i !== line.length) {
                j = i;

                while (j > i - 10 && j > 0 && line[--j] !== ' ');

                if (line[j] === ' ') i = j + 1;
              }
            } else {
              // Try to find a character to break on.
              if (i !== line.length) {
                // <XXX>
                // Compensate for surrogate length
                // counts on wrapping (experimental):
                // NOTE: Could optimize this by putting
                // it in the parent for loop.
                if (_unicode.default.isSurrogate(line, i)) i--;

                for (var s = 0, n = 0; n < i; n++) {
                  if (_unicode.default.isSurrogate(line, n)) s++, n++;
                }

                i += s; // </XXX>

                j = i; // Break _past_ space.
                // Break _past_ double-width chars.
                // Break _past_ surrogate pairs.
                // Break _past_ combining chars.

                while (j > i - 10 && j > 0) {
                  j--;

                  if (line[j] === ' ' || line[j] === '\x03' || _unicode.default.isSurrogate(line, j - 1) && line[j + 1] !== '\x03' || _unicode.default.isCombining(line, j)) {
                    break;
                  }
                }

                if (line[j] === ' ' || line[j] === '\x03' || _unicode.default.isSurrogate(line, j - 1) && line[j + 1] !== '\x03' || _unicode.default.isCombining(line, j)) {
                  i = j + 1;
                }
              }
            }

            break;
          }
        }

        part = line.substring(0, i);
        line = line.substring(i);
        out.push(this._align(part, width, align));
        ftor[no].push(out.length - 1);
        rtof.push(no); // Make sure we didn't wrap the line to the very end, otherwise
        // we get a pointless empty line after a newline.

        if (line === '') continue main; // If only an escape code got cut off, at it to `part`.

        if (/^(?:\x1b[\[\d;]*m)+$/.test(line)) {
          out[out.length - 1] += line;
          continue main;
        }
      }

      out.push(this._align(line, width, align));
      ftor[no].push(out.length - 1);
      rtof.push(no);
    }

    out.rtof = rtof;
    out.ftor = ftor;
    out.fake = lines;
    out.real = out;
    out.mwidth = out.reduce(function (current, line) {
      line = line.replace(/\x1b\[[\d;]*m/g, '');
      return line.length > current ? line.length : current;
    }, 0);
    return out;
  }

  enableMouse() {
    this.screen._listenMouse(this);
  }

  enableKeys() {
    this.screen._listenKeys(this);
  }

  enableInput() {
    this.screen._listenMouse(this);

    this.screen._listenKeys(this);
  }

  enableDrag(verify) {
    var self = this;
    if (this._draggable) return true;

    if (typeof verify !== 'function') {
      verify = function () {
        return true;
      };
    }

    this.enableMouse();
    this.on('mousedown', this._dragMD = function (data) {
      if (self.screen._dragging) return;
      if (!verify(data)) return;
      self.screen._dragging = self;
      self._drag = {
        x: data.x - self.aleft,
        y: data.y - self.atop
      };
      self.setFront();
    });
    this.onScreenEvent('mouse', this._dragM = function (data) {
      if (self.screen._dragging !== self) return;

      if (data.action !== 'mousedown' && data.action !== 'mousemove') {
        delete self.screen._dragging;
        delete self._drag;
        return;
      } // This can happen in edge cases where the user is
      // already dragging and element when it is detached.


      if (!self.parent) return;
      var ox = self._drag.x,
          oy = self._drag.y,
          px = self.parent.aleft,
          py = self.parent.atop,
          x = data.x - px - ox,
          y = data.y - py - oy;

      if (self.position.right != null) {
        if (self.position.left != null) {
          self.width = '100%-' + (self.parent.width - self.width);
        }

        self.position.right = null;
      }

      if (self.position.bottom != null) {
        if (self.position.top != null) {
          self.height = '100%-' + (self.parent.height - self.height);
        }

        self.position.bottom = null;
      }

      self.rleft = x;
      self.rtop = y;
      self.screen.render();
    });
    return this._draggable = true;
  }

  disableDrag() {
    if (!this._draggable) return false;
    delete this.screen._dragging;
    delete this._drag;
    this.removeListener('mousedown', this._dragMD);
    this.removeScreenEvent('mouse', this._dragM);
    return this._draggable = false;
  }

  key() {
    return this.screen.program.key.apply(this, arguments);
  }

  onceKey() {
    return this.screen.program.onceKey.apply(this, arguments);
  }

  unkey() {
    return this.screen.program.unkey.apply(this, arguments);
  }

  removeKey() {
    return this.screen.program.unkey.apply(this, arguments);
  }

  setIndex(index) {
    if (!this.parent) return;

    if (index < 0) {
      index = this.parent.children.length + index;
    }

    index = Math.max(index, 0);
    index = Math.min(index, this.parent.children.length - 1);
    var i = this.parent.children.indexOf(this);
    if (!~i) return;
    var item = this.parent.children.splice(i, 1)[0];
    this.parent.children.splice(index, 0, item);
  }

  setFront() {
    return this.setIndex(-1);
  }

  setBack() {
    return this.setIndex(0);
  }

  clearPos(get, override) {
    if (this.detached) return;

    var lpos = this._getCoords(get);

    if (!lpos) return;
    this.screen.clearRegion(lpos.xi, lpos.xl, lpos.yi, lpos.yl, override);
  }

  setLabel(options) {
    var self = this;

    var Box = require("./box");

    if (typeof options === 'string') {
      options = {
        text: options
      };
    }

    if (this._label) {
      this._label.setContent(options.text);

      if (options.side !== 'right') {
        this._label.rleft = 2 + (this.border ? -1 : 0);
        this._label.position.right = undefined;

        if (!this.screen.autoPadding) {
          this._label.rleft = 2;
        }
      } else {
        this._label.rright = 2 + (this.border ? -1 : 0);
        this._label.position.left = undefined;

        if (!this.screen.autoPadding) {
          this._label.rright = 2;
        }
      }

      return;
    }

    this._label = new Box({
      screen: this.screen,
      parent: this,
      content: options.text,
      top: -this.itop,
      tags: this.parseTags,
      shrink: true,
      style: this.style.label
    });

    if (options.side !== 'right') {
      this._label.rleft = 2 - this.ileft;
    } else {
      this._label.rright = 2 - this.iright;
    }

    this._label._isLabel = true;

    if (!this.screen.autoPadding) {
      if (options.side !== 'right') {
        this._label.rleft = 2;
      } else {
        this._label.rright = 2;
      }

      this._label.rtop = 0;
    }

    var reposition = function () {
      self._label.rtop = (self.childBase || 0) - self.itop;

      if (!self.screen.autoPadding) {
        self._label.rtop = self.childBase || 0;
      }

      self.screen.render();
    };

    this.on('scroll', this._labelScroll = function () {
      reposition();
    });
    this.on('resize', this._labelResize = function () {
      nextTick(function () {
        reposition();
      });
    });
  }

  removeLabel() {
    if (!this._label) return;
    this.removeListener('scroll', this._labelScroll);
    this.removeListener('resize', this._labelResize);

    this._label.detach();

    delete this._labelScroll;
    delete this._labelResize;
    delete this._label;
  }

  setHover(options) {
    if (typeof options === 'string') {
      options = {
        text: options
      };
    }

    this._hoverOptions = options;
    this.enableMouse();

    this.screen._initHover();
  }

  removeHover() {
    delete this._hoverOptions;
    if (!this.screen._hoverText || this.screen._hoverText.detached) return;

    this.screen._hoverText.detach();

    this.screen.render();
  } // The below methods are a bit confusing: basically
  // whenever Box.render is called `lpos` gets set on
  // the element, an object containing the rendered
  // coordinates. Since these don't update if the
  // element is moved somehow, they're unreliable in
  // that situation. However, if we can guarantee that
  // lpos is good and up to date, it can be more
  // accurate than the calculated positions below.
  // In this case, if the element is being rendered,
  // it's guaranteed that the parent will have been
  // rendered first, in which case we can use the
  // parant's lpos instead of recalculating it's
  // position (since that might be wrong because
  // it doesn't handle content shrinkage).


  _getPos() {
    var pos = this.lpos;

    _assert.default.ok(pos);

    if (pos.aleft != null) return pos;
    pos.aleft = pos.xi;
    pos.atop = pos.yi;
    pos.aright = this.screen.cols - pos.xl;
    pos.abottom = this.screen.rows - pos.yl;
    pos.width = pos.xl - pos.xi;
    pos.height = pos.yl - pos.yi;
    return pos;
  }
  /**
   * Position Getters
   */


  _getWidth(get) {
    var parent = get ? this.parent._getPos() : this.parent,
        width = this.position.width,
        left,
        expr;

    if (typeof width === 'string') {
      if (width === 'half') width = '50%';
      expr = width.split(/(?=\+|-)/);
      width = expr[0];
      width = +width.slice(0, -1) / 100;
      width = parent.width * width | 0;
      width += +(expr[1] || 0);
      return width;
    } // This is for if the element is being streched or shrunken.
    // Although the width for shrunken elements is calculated
    // in the render function, it may be calculated based on
    // the content width, and the content width is initially
    // decided by the width the element, so it needs to be
    // calculated here.


    if (width == null) {
      left = this.position.left || 0;

      if (typeof left === 'string') {
        if (left === 'center') left = '50%';
        expr = left.split(/(?=\+|-)/);
        left = expr[0];
        left = +left.slice(0, -1) / 100;
        left = parent.width * left | 0;
        left += +(expr[1] || 0);
      }

      width = parent.width - (this.position.right || 0) - left;

      if (this.screen.autoPadding) {
        if ((this.position.left != null || this.position.right == null) && this.position.left !== 'center') {
          width -= this.parent.ileft;
        }

        width -= this.parent.iright;
      }
    }

    return width;
  }

  _getHeight(get) {
    var parent = get ? this.parent._getPos() : this.parent,
        height = this.position.height,
        top,
        expr;

    if (typeof height === 'string') {
      if (height === 'half') height = '50%';
      expr = height.split(/(?=\+|-)/);
      height = expr[0];
      height = +height.slice(0, -1) / 100;
      height = parent.height * height | 0;
      height += +(expr[1] || 0);
      return height;
    } // This is for if the element is being streched or shrunken.
    // Although the width for shrunken elements is calculated
    // in the render function, it may be calculated based on
    // the content width, and the content width is initially
    // decided by the width the element, so it needs to be
    // calculated here.


    if (height == null) {
      top = this.position.top || 0;

      if (typeof top === 'string') {
        if (top === 'center') top = '50%';
        expr = top.split(/(?=\+|-)/);
        top = expr[0];
        top = +top.slice(0, -1) / 100;
        top = parent.height * top | 0;
        top += +(expr[1] || 0);
      }

      height = parent.height - (this.position.bottom || 0) - top;

      if (this.screen.autoPadding) {
        if ((this.position.top != null || this.position.bottom == null) && this.position.top !== 'center') {
          height -= this.parent.itop;
        }

        height -= this.parent.ibottom;
      }
    }

    return height;
  }

  _getLeft(get) {
    var parent = get ? this.parent._getPos() : this.parent,
        left = this.position.left || 0,
        expr;

    if (typeof left === 'string') {
      if (left === 'center') left = '50%';
      expr = left.split(/(?=\+|-)/);
      left = expr[0];
      left = +left.slice(0, -1) / 100;
      left = parent.width * left | 0;
      left += +(expr[1] || 0);

      if (this.position.left === 'center') {
        left -= this._getWidth(get) / 2 | 0;
      }
    }

    if (this.position.left == null && this.position.right != null) {
      return this.screen.cols - this._getWidth(get) - this._getRight(get);
    }

    if (this.screen.autoPadding) {
      if ((this.position.left != null || this.position.right == null) && this.position.left !== 'center') {
        left += this.parent.ileft;
      }
    }

    return (parent.aleft || 0) + left;
  }

  _getRight(get) {
    var parent = get ? this.parent._getPos() : this.parent,
        right;

    if (this.position.right == null && this.position.left != null) {
      right = this.screen.cols - (this._getLeft(get) + this._getWidth(get));

      if (this.screen.autoPadding) {
        right += this.parent.iright;
      }

      return right;
    }

    right = (parent.aright || 0) + (this.position.right || 0);

    if (this.screen.autoPadding) {
      right += this.parent.iright;
    }

    return right;
  }

  _getTop(get) {
    var parent = get ? this.parent._getPos() : this.parent,
        top = this.position.top || 0,
        expr;

    if (typeof top === 'string') {
      if (top === 'center') top = '50%';
      expr = top.split(/(?=\+|-)/);
      top = expr[0];
      top = +top.slice(0, -1) / 100;
      top = parent.height * top | 0;
      top += +(expr[1] || 0);

      if (this.position.top === 'center') {
        top -= this._getHeight(get) / 2 | 0;
      }
    }

    if (this.position.top == null && this.position.bottom != null) {
      return this.screen.rows - this._getHeight(get) - this._getBottom(get);
    }

    if (this.screen.autoPadding) {
      if ((this.position.top != null || this.position.bottom == null) && this.position.top !== 'center') {
        top += this.parent.itop;
      }
    }

    return (parent.atop || 0) + top;
  }

  _getBottom(get) {
    var parent = get ? this.parent._getPos() : this.parent,
        bottom;

    if (this.position.bottom == null && this.position.top != null) {
      bottom = this.screen.rows - (this._getTop(get) + this._getHeight(get));

      if (this.screen.autoPadding) {
        bottom += this.parent.ibottom;
      }

      return bottom;
    }

    bottom = (parent.abottom || 0) + (this.position.bottom || 0);

    if (this.screen.autoPadding) {
      bottom += this.parent.ibottom;
    }

    return bottom;
  }
  /**
   * Rendering - here be dragons
   */


  _getShrinkBox(xi, xl, yi, yl, get) {
    if (!this.children.length) {
      return {
        xi: xi,
        xl: xi + 1,
        yi: yi,
        yl: yi + 1
      };
    }

    var i,
        el,
        ret,
        mxi = xi,
        mxl = xi + 1,
        myi = yi,
        myl = yi + 1; // This is a chicken and egg problem. We need to determine how the children
    // will render in order to determine how this element renders, but it in
    // order to figure out how the children will render, they need to know
    // exactly how their parent renders, so, we can give them what we have so
    // far.

    var _lpos;

    if (get) {
      _lpos = this.lpos;
      this.lpos = {
        xi: xi,
        xl: xl,
        yi: yi,
        yl: yl
      }; //this.shrink = false;
    }

    for (i = 0; i < this.children.length; i++) {
      el = this.children[i];
      ret = el._getCoords(get); // Or just (seemed to work, but probably not good):
      // ret = el.lpos || this.lpos;

      if (!ret) continue; // Since the parent element is shrunk, and the child elements think it's
      // going to take up as much space as possible, an element anchored to the
      // right or bottom will inadvertantly make the parent's shrunken size as
      // large as possible. So, we can just use the height and/or width the of
      // element.
      // if (get) {

      if (el.position.left == null && el.position.right != null) {
        ret.xl = xi + (ret.xl - ret.xi);
        ret.xi = xi;

        if (this.screen.autoPadding) {
          // Maybe just do this no matter what.
          ret.xl += this.ileft;
          ret.xi += this.ileft;
        }
      }

      if (el.position.top == null && el.position.bottom != null) {
        ret.yl = yi + (ret.yl - ret.yi);
        ret.yi = yi;

        if (this.screen.autoPadding) {
          // Maybe just do this no matter what.
          ret.yl += this.itop;
          ret.yi += this.itop;
        }
      }

      if (ret.xi < mxi) mxi = ret.xi;
      if (ret.xl > mxl) mxl = ret.xl;
      if (ret.yi < myi) myi = ret.yi;
      if (ret.yl > myl) myl = ret.yl;
    }

    if (get) {
      this.lpos = _lpos; //this.shrink = true;
    }

    if (this.position.width == null && (this.position.left == null || this.position.right == null)) {
      if (this.position.left == null && this.position.right != null) {
        xi = xl - (mxl - mxi);

        if (!this.screen.autoPadding) {
          xi -= this.padding.left + this.padding.right;
        } else {
          xi -= this.ileft;
        }
      } else {
        xl = mxl;

        if (!this.screen.autoPadding) {
          xl += this.padding.left + this.padding.right; // XXX Temporary workaround until we decide to make autoPadding default.
          // See widget-listtable.js for an example of why this is necessary.
          // XXX Maybe just to this for all this being that this would affect
          // width shrunken normal shrunken lists as well.
          // if (this._isList) {

          if (this.type === 'list-table') {
            xl -= this.padding.left + this.padding.right;
            xl += this.iright;
          }
        } else {
          //xl += this.padding.right;
          xl += this.iright;
        }
      }
    }

    if (this.position.height == null && (this.position.top == null || this.position.bottom == null) && (!this.scrollable || this._isList)) {
      // NOTE: Lists get special treatment if they are shrunken - assume they
      // want all list items showing. This is one case we can calculate the
      // height based on items/boxes.
      if (this._isList) {
        myi = 0 - this.itop;
        myl = this.items.length + this.ibottom;
      }

      if (this.position.top == null && this.position.bottom != null) {
        yi = yl - (myl - myi);

        if (!this.screen.autoPadding) {
          yi -= this.padding.top + this.padding.bottom;
        } else {
          yi -= this.itop;
        }
      } else {
        yl = myl;

        if (!this.screen.autoPadding) {
          yl += this.padding.top + this.padding.bottom;
        } else {
          yl += this.ibottom;
        }
      }
    }

    return {
      xi: xi,
      xl: xl,
      yi: yi,
      yl: yl
    };
  }

  _getShrinkContent(xi, xl, yi, yl) {
    var h = this._clines.length,
        w = this._clines.mwidth || 1;

    if (this.position.width == null && (this.position.left == null || this.position.right == null)) {
      if (this.position.left == null && this.position.right != null) {
        xi = xl - w - this.iwidth;
      } else {
        xl = xi + w + this.iwidth;
      }
    }

    if (this.position.height == null && (this.position.top == null || this.position.bottom == null) && (!this.scrollable || this._isList)) {
      if (this.position.top == null && this.position.bottom != null) {
        yi = yl - h - this.iheight;
      } else {
        yl = yi + h + this.iheight;
      }
    }

    return {
      xi: xi,
      xl: xl,
      yi: yi,
      yl: yl
    };
  }

  _getShrink(xi, xl, yi, yl, get) {
    var shrinkBox = this._getShrinkBox(xi, xl, yi, yl, get),
        shrinkContent = this._getShrinkContent(xi, xl, yi, yl, get),
        xll = xl,
        yll = yl; // Figure out which one is bigger and use it.


    if (shrinkBox.xl - shrinkBox.xi > shrinkContent.xl - shrinkContent.xi) {
      xi = shrinkBox.xi;
      xl = shrinkBox.xl;
    } else {
      xi = shrinkContent.xi;
      xl = shrinkContent.xl;
    }

    if (shrinkBox.yl - shrinkBox.yi > shrinkContent.yl - shrinkContent.yi) {
      yi = shrinkBox.yi;
      yl = shrinkBox.yl;
    } else {
      yi = shrinkContent.yi;
      yl = shrinkContent.yl;
    } // Recenter shrunken elements.


    if (xl < xll && this.position.left === 'center') {
      xll = (xll - xl) / 2 | 0;
      xi += xll;
      xl += xll;
    }

    if (yl < yll && this.position.top === 'center') {
      yll = (yll - yl) / 2 | 0;
      yi += yll;
      yl += yll;
    }

    return {
      xi: xi,
      xl: xl,
      yi: yi,
      yl: yl
    };
  }

  _getCoords(get, noscroll) {
    if (this.hidden) return; // if (this.parent._rendering) {
    //   get = true;
    // }

    var xi = this._getLeft(get),
        xl = xi + this._getWidth(get),
        yi = this._getTop(get),
        yl = yi + this._getHeight(get),
        base = this.childBase || 0,
        el = this,
        fixed = this.fixed,
        coords,
        v,
        noleft,
        noright,
        notop,
        nobot,
        ppos,
        b; // Attempt to shrink the element base on the
    // size of the content and child elements.


    if (this.shrink) {
      coords = this._getShrink(xi, xl, yi, yl, get);
      xi = coords.xi, xl = coords.xl;
      yi = coords.yi, yl = coords.yl;
    } // Find a scrollable ancestor if we have one.


    while (el = el.parent) {
      if (el.scrollable) {
        if (fixed) {
          fixed = false;
          continue;
        }

        break;
      }
    } // Check to make sure we're visible and
    // inside of the visible scroll area.
    // NOTE: Lists have a property where only
    // the list items are obfuscated.
    // Old way of doing things, this would not render right if a shrunken element
    // with lots of boxes in it was within a scrollable element.
    // See: $ node test/widget-shrink-fail.js
    // var thisparent = this.parent;


    var thisparent = el;

    if (el && !noscroll) {
      ppos = thisparent.lpos; // The shrink option can cause a stack overflow
      // by calling _getCoords on the child again.
      // if (!get && !thisparent.shrink) {
      //   ppos = thisparent._getCoords();
      // }

      if (!ppos) return; // TODO: Figure out how to fix base (and cbase to only
      // take into account the *parent's* padding.

      yi -= ppos.base;
      yl -= ppos.base;
      b = thisparent.border ? 1 : 0; // XXX
      // Fixes non-`fixed` labels to work with scrolling (they're ON the border):
      // if (this.position.left < 0
      //     || this.position.right < 0
      //     || this.position.top < 0
      //     || this.position.bottom < 0) {

      if (this._isLabel) {
        b = 0;
      }

      if (yi < ppos.yi + b) {
        if (yl - 1 < ppos.yi + b) {
          // Is above.
          return;
        } else {
          // Is partially covered above.
          notop = true;
          v = ppos.yi - yi;
          if (this.border) v--;
          if (thisparent.border) v++;
          base += v;
          yi += v;
        }
      } else if (yl > ppos.yl - b) {
        if (yi > ppos.yl - 1 - b) {
          // Is below.
          return;
        } else {
          // Is partially covered below.
          nobot = true;
          v = yl - ppos.yl;
          if (this.border) v--;
          if (thisparent.border) v++;
          yl -= v;
        }
      } // Shouldn't be necessary.
      // assert.ok(yi < yl);


      if (yi >= yl) return; // Could allow overlapping stuff in scrolling elements
      // if we cleared the pending buffer before every draw.

      if (xi < el.lpos.xi) {
        xi = el.lpos.xi;
        noleft = true;
        if (this.border) xi--;
        if (thisparent.border) xi++;
      }

      if (xl > el.lpos.xl) {
        xl = el.lpos.xl;
        noright = true;
        if (this.border) xl++;
        if (thisparent.border) xl--;
      } //if (xi > xl) return;


      if (xi >= xl) return;
    }

    if (this.noOverflow && this.parent.lpos) {
      if (xi < this.parent.lpos.xi + this.parent.ileft) {
        xi = this.parent.lpos.xi + this.parent.ileft;
      }

      if (xl > this.parent.lpos.xl - this.parent.iright) {
        xl = this.parent.lpos.xl - this.parent.iright;
      }

      if (yi < this.parent.lpos.yi + this.parent.itop) {
        yi = this.parent.lpos.yi + this.parent.itop;
      }

      if (yl > this.parent.lpos.yl - this.parent.ibottom) {
        yl = this.parent.lpos.yl - this.parent.ibottom;
      }
    } // if (this.parent.lpos) {
    //   this.parent.lpos._scrollBottom = Math.max(
    //     this.parent.lpos._scrollBottom, yl);
    // }


    return {
      xi: xi,
      xl: xl,
      yi: yi,
      yl: yl,
      base: base,
      noleft: noleft,
      noright: noright,
      notop: notop,
      nobot: nobot,
      renders: this.screen.renders
    };
  }

  render() {
    this._emit('prerender');

    this.parseContent();

    var coords = this._getCoords(true);

    if (!coords) {
      delete this.lpos;
      return;
    }

    if (coords.xl - coords.xi <= 0) {
      coords.xl = Math.max(coords.xl, coords.xi);
      return;
    }

    if (coords.yl - coords.yi <= 0) {
      coords.yl = Math.max(coords.yl, coords.yi);
      return;
    }

    var lines = this.screen.lines,
        xi = coords.xi,
        xl = coords.xl,
        yi = coords.yi,
        yl = coords.yl,
        x,
        y,
        cell,
        attr,
        ch,
        content = this._pcontent,
        ci = this._clines.ci[coords.base],
        battr,
        dattr,
        c,
        visible,
        i,
        bch = this.ch; // Clip content if it's off the edge of the screen
    // if (xi + this.ileft < 0 || yi + this.itop < 0) {
    //   var clines = this._clines.slice();
    //   if (xi + this.ileft < 0) {
    //     for (var i = 0; i < clines.length; i++) {
    //       var t = 0;
    //       var csi = '';
    //       var csis = '';
    //       for (var j = 0; j < clines[i].length; j++) {
    //         while (clines[i][j] === '\x1b') {
    //           csi = '\x1b';
    //           while (clines[i][j++] !== 'm') csi += clines[i][j];
    //           csis += csi;
    //         }
    //         if (++t === -(xi + this.ileft) + 1) break;
    //       }
    //       clines[i] = csis + clines[i].substring(j);
    //     }
    //   }
    //   if (yi + this.itop < 0) {
    //     clines = clines.slice(-(yi + this.itop));
    //   }
    //   content = clines.join('\n');
    // }

    if (coords.base >= this._clines.ci.length) {
      ci = this._pcontent.length;
    }

    this.lpos = coords;

    if (this.border && this.border.type === 'line') {
      this.screen._borderStops[coords.yi] = true;
      this.screen._borderStops[coords.yl - 1] = true; // if (!this.screen._borderStops[coords.yi]) {
      //   this.screen._borderStops[coords.yi] = { xi: coords.xi, xl: coords.xl };
      // } else {
      //   if (this.screen._borderStops[coords.yi].xi > coords.xi) {
      //     this.screen._borderStops[coords.yi].xi = coords.xi;
      //   }
      //   if (this.screen._borderStops[coords.yi].xl < coords.xl) {
      //     this.screen._borderStops[coords.yi].xl = coords.xl;
      //   }
      // }
      // this.screen._borderStops[coords.yl - 1] = this.screen._borderStops[coords.yi];
    }

    dattr = this.sattr(this.style);
    attr = dattr; // If we're in a scrollable text box, check to
    // see which attributes this line starts with.

    if (ci > 0) {
      attr = this._clines.attr[Math.min(coords.base, this._clines.length - 1)];
    }

    if (this.border) xi++, xl--, yi++, yl--; // If we have padding/valign, that means the
    // content-drawing loop will skip a few cells/lines.
    // To deal with this, we can just fill the whole thing
    // ahead of time. This could be optimized.

    if (this.tpadding || this.valign && this.valign !== 'top') {
      if (this.style.transparent) {
        for (y = Math.max(yi, 0); y < yl; y++) {
          if (!lines[y]) break;

          for (x = Math.max(xi, 0); x < xl; x++) {
            if (!lines[y][x]) break;
            lines[y][x][0] = _colors.default.blend(attr, lines[y][x][0]); // lines[y][x][1] = bch;

            lines[y].dirty = true;
          }
        }
      } else {
        this.screen.fillRegion(dattr, bch, xi, xl, yi, yl);
      }
    }

    if (this.tpadding) {
      xi += this.padding.left, xl -= this.padding.right;
      yi += this.padding.top, yl -= this.padding.bottom;
    } // Determine where to place the text if it's vertically aligned.


    if (this.valign === 'middle' || this.valign === 'bottom') {
      visible = yl - yi;

      if (this._clines.length < visible) {
        if (this.valign === 'middle') {
          visible = visible / 2 | 0;
          visible -= this._clines.length / 2 | 0;
        } else if (this.valign === 'bottom') {
          visible -= this._clines.length;
        }

        ci -= visible * (xl - xi);
      }
    } // Draw the content and background.


    for (y = yi; y < yl; y++) {
      if (!lines[y]) {
        if (y >= this.screen.height || yl < this.ibottom) {
          break;
        } else {
          continue;
        }
      }

      for (x = xi; x < xl; x++) {
        cell = lines[y][x];

        if (!cell) {
          if (x >= this.screen.width || xl < this.iright) {
            break;
          } else {
            continue;
          }
        }

        ch = content[ci++] || bch; // if (!content[ci] && !coords._contentEnd) {
        //   coords._contentEnd = { x: x - xi, y: y - yi };
        // }
        // Handle escape codes.

        while (ch === '\x1b') {
          if (c = /^\x1b\[[\d;]*m/.exec(content.substring(ci - 1))) {
            ci += c[0].length - 1;
            attr = this.screen.attrCode(c[0], attr, dattr); // Ignore foreground changes for selected items.

            if (this.parent._isList && this.parent.interactive && this.parent.items[this.parent.selected] === this && this.parent.options.invertSelected !== false) {
              attr = attr & ~(0x1ff << 9) | dattr & 0x1ff << 9;
            }

            ch = content[ci] || bch;
            ci++;
          } else {
            break;
          }
        } // Handle newlines.


        if (ch === '\t') ch = bch;

        if (ch === '\n') {
          // If we're on the first cell and we find a newline and the last cell
          // of the last line was not a newline, let's just treat this like the
          // newline was already "counted".
          if (x === xi && y !== yi && content[ci - 2] !== '\n') {
            x--;
            continue;
          } // We could use fillRegion here, name the
          // outer loop, and continue to it instead.


          ch = bch;

          for (; x < xl; x++) {
            cell = lines[y][x];
            if (!cell) break;

            if (this.style.transparent) {
              lines[y][x][0] = _colors.default.blend(attr, lines[y][x][0]);
              if (content[ci]) lines[y][x][1] = ch;
              lines[y].dirty = true;
            } else {
              if (attr !== cell[0] || ch !== cell[1]) {
                lines[y][x][0] = attr;
                lines[y][x][1] = ch;
                lines[y].dirty = true;
              }
            }
          }

          continue;
        }

        if (this.screen.fullUnicode && content[ci - 1]) {
          var point = _unicode.default.codePointAt(content, ci - 1); // Handle combining chars:
          // Make sure they get in the same cell and are counted as 0.


          if (_unicode.default.combining[point]) {
            if (point > 0x00ffff) {
              ch = content[ci - 1] + content[ci];
              ci++;
            }

            if (x - 1 >= xi) {
              lines[y][x - 1][1] += ch;
            } else if (y - 1 >= yi) {
              lines[y - 1][xl - 1][1] += ch;
            }

            x--;
            continue;
          } // Handle surrogate pairs:
          // Make sure we put surrogate pair chars in one cell.


          if (point > 0x00ffff) {
            ch = content[ci - 1] + content[ci];
            ci++;
          }
        }

        if (this._noFill) continue;

        if (this.style.transparent) {
          lines[y][x][0] = _colors.default.blend(attr, lines[y][x][0]);
          if (content[ci]) lines[y][x][1] = ch;
          lines[y].dirty = true;
        } else {
          if (attr !== cell[0] || ch !== cell[1]) {
            lines[y][x][0] = attr;
            lines[y][x][1] = ch;
            lines[y].dirty = true;
          }
        }
      }
    } // Draw the scrollbar.
    // Could possibly draw this after all child elements.


    if (this.scrollbar) {
      // XXX
      // i = this.getScrollHeight();
      i = Math.max(this._clines.length, this._scrollBottom());
    }

    if (coords.notop || coords.nobot) i = -Infinity;

    if (this.scrollbar && yl - yi < i) {
      x = xl - 1;
      if (this.scrollbar.ignoreBorder && this.border) x++;

      if (this.alwaysScroll) {
        y = this.childBase / (i - (yl - yi));
      } else {
        y = (this.childBase + this.childOffset) / (i - 1);
      }

      y = yi + ((yl - yi) * y | 0);
      if (y >= yl) y = yl - 1;
      cell = lines[y] && lines[y][x];

      if (cell) {
        if (this.track) {
          ch = this.track.ch || ' ';
          attr = this.sattr(this.style.track, this.style.track.fg || this.style.fg, this.style.track.bg || this.style.bg);
          this.screen.fillRegion(attr, ch, x, x + 1, yi, yl);
        }

        ch = this.scrollbar.ch || ' ';
        attr = this.sattr(this.style.scrollbar, this.style.scrollbar.fg || this.style.fg, this.style.scrollbar.bg || this.style.bg);

        if (attr !== cell[0] || ch !== cell[1]) {
          lines[y][x][0] = attr;
          lines[y][x][1] = ch;
          lines[y].dirty = true;
        }
      }
    }

    if (this.border) xi--, xl++, yi--, yl++;

    if (this.tpadding) {
      xi -= this.padding.left, xl += this.padding.right;
      yi -= this.padding.top, yl += this.padding.bottom;
    } // Draw the border.


    if (this.border) {
      battr = this.sattr(this.style.border);
      y = yi;
      if (coords.notop) y = -1;

      for (x = xi; x < xl; x++) {
        if (!lines[y]) break;
        if (coords.noleft && x === xi) continue;
        if (coords.noright && x === xl - 1) continue;
        cell = lines[y][x];
        if (!cell) continue;

        if (this.border.type === 'line') {
          if (x === xi) {
            ch = '\u250c'; // '┌'

            if (!this.border.left) {
              if (this.border.top) {
                ch = '\u2500'; // '─'
              } else {
                continue;
              }
            } else {
              if (!this.border.top) {
                ch = '\u2502'; // '│'
              }
            }
          } else if (x === xl - 1) {
            ch = '\u2510'; // '┐'

            if (!this.border.right) {
              if (this.border.top) {
                ch = '\u2500'; // '─'
              } else {
                continue;
              }
            } else {
              if (!this.border.top) {
                ch = '\u2502'; // '│'
              }
            }
          } else {
            ch = '\u2500'; // '─'
          }
        } else if (this.border.type === 'bg') {
          ch = this.border.ch;
        }

        if (!this.border.top && x !== xi && x !== xl - 1) {
          ch = ' ';

          if (dattr !== cell[0] || ch !== cell[1]) {
            lines[y][x][0] = dattr;
            lines[y][x][1] = ch;
            lines[y].dirty = true;
            continue;
          }
        }

        if (battr !== cell[0] || ch !== cell[1]) {
          lines[y][x][0] = battr;
          lines[y][x][1] = ch;
          lines[y].dirty = true;
        }
      }

      y = yi + 1;

      for (; y < yl - 1; y++) {
        if (!lines[y]) continue;
        cell = lines[y][xi];

        if (cell) {
          if (this.border.left) {
            if (this.border.type === 'line') {
              ch = '\u2502'; // '│'
            } else if (this.border.type === 'bg') {
              ch = this.border.ch;
            }

            if (!coords.noleft) if (battr !== cell[0] || ch !== cell[1]) {
              lines[y][xi][0] = battr;
              lines[y][xi][1] = ch;
              lines[y].dirty = true;
            }
          } else {
            ch = ' ';

            if (dattr !== cell[0] || ch !== cell[1]) {
              lines[y][xi][0] = dattr;
              lines[y][xi][1] = ch;
              lines[y].dirty = true;
            }
          }
        }

        cell = lines[y][xl - 1];

        if (cell) {
          if (this.border.right) {
            if (this.border.type === 'line') {
              ch = '\u2502'; // '│'
            } else if (this.border.type === 'bg') {
              ch = this.border.ch;
            }

            if (!coords.noright) if (battr !== cell[0] || ch !== cell[1]) {
              lines[y][xl - 1][0] = battr;
              lines[y][xl - 1][1] = ch;
              lines[y].dirty = true;
            }
          } else {
            ch = ' ';

            if (dattr !== cell[0] || ch !== cell[1]) {
              lines[y][xl - 1][0] = dattr;
              lines[y][xl - 1][1] = ch;
              lines[y].dirty = true;
            }
          }
        }
      }

      y = yl - 1;
      if (coords.nobot) y = -1;

      for (x = xi; x < xl; x++) {
        if (!lines[y]) break;
        if (coords.noleft && x === xi) continue;
        if (coords.noright && x === xl - 1) continue;
        cell = lines[y][x];
        if (!cell) continue;

        if (this.border.type === 'line') {
          if (x === xi) {
            ch = '\u2514'; // '└'

            if (!this.border.left) {
              if (this.border.bottom) {
                ch = '\u2500'; // '─'
              } else {
                continue;
              }
            } else {
              if (!this.border.bottom) {
                ch = '\u2502'; // '│'
              }
            }
          } else if (x === xl - 1) {
            ch = '\u2518'; // '┘'

            if (!this.border.right) {
              if (this.border.bottom) {
                ch = '\u2500'; // '─'
              } else {
                continue;
              }
            } else {
              if (!this.border.bottom) {
                ch = '\u2502'; // '│'
              }
            }
          } else {
            ch = '\u2500'; // '─'
          }
        } else if (this.border.type === 'bg') {
          ch = this.border.ch;
        }

        if (!this.border.bottom && x !== xi && x !== xl - 1) {
          ch = ' ';

          if (dattr !== cell[0] || ch !== cell[1]) {
            lines[y][x][0] = dattr;
            lines[y][x][1] = ch;
            lines[y].dirty = true;
          }

          continue;
        }

        if (battr !== cell[0] || ch !== cell[1]) {
          lines[y][x][0] = battr;
          lines[y][x][1] = ch;
          lines[y].dirty = true;
        }
      }
    }

    if (this.shadow) {
      // right
      y = Math.max(yi + 1, 0);

      for (; y < yl + 1; y++) {
        if (!lines[y]) break;
        x = xl;

        for (; x < xl + 2; x++) {
          if (!lines[y][x]) break; // lines[y][x][0] = colors.blend(this.dattr, lines[y][x][0]);

          lines[y][x][0] = _colors.default.blend(lines[y][x][0]);
          lines[y].dirty = true;
        }
      } // bottom


      y = yl;

      for (; y < yl + 1; y++) {
        if (!lines[y]) break;

        for (x = Math.max(xi + 1, 0); x < xl; x++) {
          if (!lines[y][x]) break; // lines[y][x][0] = colors.blend(this.dattr, lines[y][x][0]);

          lines[y][x][0] = _colors.default.blend(lines[y][x][0]);
          lines[y].dirty = true;
        }
      }
    }

    this.children.forEach(function (el) {
      if (el.screen._ci !== -1) {
        el.index = el.screen._ci++;
      } // if (el.screen._rendering) {
      //   el._rendering = true;
      // }


      el.render(); // if (el.screen._rendering) {
      //   el._rendering = false;
      // }
    });

    this._emit('render', [coords]);

    return coords;
  }
  /**
   * Content Methods
   */


  insertLine(i, line) {
    if (typeof line === 'string') line = line.split('\n');

    if (i !== i || i == null) {
      i = this._clines.ftor.length;
    }

    i = Math.max(i, 0);

    while (this._clines.fake.length < i) {
      this._clines.fake.push('');

      this._clines.ftor.push([this._clines.push('') - 1]);

      this._clines.rtof(this._clines.fake.length - 1);
    } // NOTE: Could possibly compare the first and last ftor line numbers to see
    // if they're the same, or if they fit in the visible region entirely.


    var start = this._clines.length,
        diff,
        real;

    if (i >= this._clines.ftor.length) {
      real = this._clines.ftor[this._clines.ftor.length - 1];
      real = real[real.length - 1] + 1;
    } else {
      real = this._clines.ftor[i][0];
    }

    for (var j = 0; j < line.length; j++) {
      this._clines.fake.splice(i + j, 0, line[j]);
    }

    this.setContent(this._clines.fake.join('\n'), true);
    diff = this._clines.length - start;

    if (diff > 0) {
      var pos = this._getCoords();

      if (!pos) return;
      var height = pos.yl - pos.yi - this.iheight,
          base = this.childBase || 0,
          visible = real >= base && real - base < height;

      if (pos && visible && this.screen.cleanSides(this)) {
        this.screen.insertLine(diff, pos.yi + this.itop + real - base, pos.yi, pos.yl - this.ibottom - 1);
      }
    }
  }

  deleteLine(i, n) {
    n = n || 1;

    if (i !== i || i == null) {
      i = this._clines.ftor.length - 1;
    }

    i = Math.max(i, 0);
    i = Math.min(i, this._clines.ftor.length - 1); // NOTE: Could possibly compare the first and last ftor line numbers to see
    // if they're the same, or if they fit in the visible region entirely.

    var start = this._clines.length,
        diff,
        real = this._clines.ftor[i][0];

    while (n--) {
      this._clines.fake.splice(i, 1);
    }

    this.setContent(this._clines.fake.join('\n'), true);
    diff = start - this._clines.length; // XXX clearPos() without diff statement?

    var height = 0;

    if (diff > 0) {
      var pos = this._getCoords();

      if (!pos) return;
      height = pos.yl - pos.yi - this.iheight;
      var base = this.childBase || 0,
          visible = real >= base && real - base < height;

      if (pos && visible && this.screen.cleanSides(this)) {
        this.screen.deleteLine(diff, pos.yi + this.itop + real - base, pos.yi, pos.yl - this.ibottom - 1);
      }
    }

    if (this._clines.length < height) {
      this.clearPos();
    }
  }

  insertTop(line) {
    var fake = this._clines.rtof[this.childBase || 0];
    return this.insertLine(fake, line);
  }

  insertBottom(line) {
    var h = (this.childBase || 0) + this.height - this.iheight,
        i = Math.min(h, this._clines.length),
        fake = this._clines.rtof[i - 1] + 1;
    return this.insertLine(fake, line);
  }

  deleteTop(n) {
    var fake = this._clines.rtof[this.childBase || 0];
    return this.deleteLine(fake, n);
  }

  deleteBottom(n) {
    var h = (this.childBase || 0) + this.height - 1 - this.iheight,
        i = Math.min(h, this._clines.length - 1),
        fake = this._clines.rtof[i];
    n = n || 1;
    return this.deleteLine(fake - (n - 1), n);
  }

  setLine(i, line) {
    i = Math.max(i, 0);

    while (this._clines.fake.length < i) {
      this._clines.fake.push('');
    }

    this._clines.fake[i] = line;
    return this.setContent(this._clines.fake.join('\n'), true);
  }

  setBaseLine(i, line) {
    var fake = this._clines.rtof[this.childBase || 0];
    return this.setLine(fake + i, line);
  }

  getLine(i) {
    i = Math.max(i, 0);
    i = Math.min(i, this._clines.fake.length - 1);
    return this._clines.fake[i];
  }

  getBaseLine(i) {
    var fake = this._clines.rtof[this.childBase || 0];
    return this.getLine(fake + i);
  }

  clearLine(i) {
    i = Math.min(i, this._clines.fake.length - 1);
    return this.setLine(i, '');
  }

  clearBaseLine(i) {
    var fake = this._clines.rtof[this.childBase || 0];
    return this.clearLine(fake + i);
  }

  unshiftLine(line) {
    return this.insertLine(0, line);
  }

  shiftLine(n) {
    return this.deleteLine(0, n);
  }

  pushLine(line) {
    if (!this.content) return this.setLine(0, line);
    return this.insertLine(this._clines.fake.length, line);
  }

  popLine(n) {
    return this.deleteLine(this._clines.fake.length - 1, n);
  }

  getLines() {
    return this._clines.fake.slice();
  }

  getScreenLines() {
    return this._clines.slice();
  }

  strWidth(text) {
    text = this.parseTags ? _helpers.default.stripTags(text) : text;
    return this.screen.fullUnicode ? _unicode.default.strWidth(text) : _helpers.default.dropUnicode(text).length;
  }

  screenshot(xi, xl, yi, yl) {
    xi = this.lpos.xi + this.ileft + (xi || 0);

    if (xl != null) {
      xl = this.lpos.xi + this.ileft + (xl || 0);
    } else {
      xl = this.lpos.xl - this.iright;
    }

    yi = this.lpos.yi + this.itop + (yi || 0);

    if (yl != null) {
      yl = this.lpos.yi + this.itop + (yl || 0);
    } else {
      yl = this.lpos.yl - this.ibottom;
    }

    return this.screen.screenshot(xi, xl, yi, yl);
  }

}

Element.prototype.__defineGetter__('focused', function () {
  return this.screen.focused === this;
});

Element.prototype.__defineGetter__('visible', function () {
  var el = this;

  do {
    if (el.detached) return false;
    if (el.hidden) return false; // if (!el.lpos) return false;
    // if (el.position.width === 0 || el.position.height === 0) return false;
  } while (el = el.parent);

  return true;
});

Element.prototype.__defineGetter__('_detached', function () {
  var el = this;

  do {
    if (el.type === 'screen') return false;
    if (!el.parent) return true;
  } while (el = el.parent);

  return false;
});

Element.prototype.__defineGetter__('draggable', function () {
  return this._draggable === true;
});

Element.prototype.__defineSetter__('draggable', function (draggable) {
  return draggable ? this.enableDrag(draggable) : this.disableDrag();
});
/**
 * Positioning
 */


Element.prototype.__defineGetter__('width', function () {
  return this._getWidth(false);
});

Element.prototype.__defineGetter__('height', function () {
  return this._getHeight(false);
});

Element.prototype.__defineGetter__('aleft', function () {
  return this._getLeft(false);
});

Element.prototype.__defineGetter__('aright', function () {
  return this._getRight(false);
});

Element.prototype.__defineGetter__('atop', function () {
  return this._getTop(false);
});

Element.prototype.__defineGetter__('abottom', function () {
  return this._getBottom(false);
});

Element.prototype.__defineGetter__('rleft', function () {
  return this.aleft - this.parent.aleft;
});

Element.prototype.__defineGetter__('rright', function () {
  return this.aright - this.parent.aright;
});

Element.prototype.__defineGetter__('rtop', function () {
  return this.atop - this.parent.atop;
});

Element.prototype.__defineGetter__('rbottom', function () {
  return this.abottom - this.parent.abottom;
});
/**
 * Position Setters
 */
// NOTE:
// For aright, abottom, right, and bottom:
// If position.bottom is null, we could simply set top instead.
// But it wouldn't replicate bottom behavior appropriately if
// the parent was resized, etc.


Element.prototype.__defineSetter__('width', function (val) {
  if (this.position.width === val) return;
  if (/^\d+$/.test(val)) val = +val;
  this.emit('resize');
  this.clearPos();
  return this.position.width = val;
});

Element.prototype.__defineSetter__('height', function (val) {
  if (this.position.height === val) return;
  if (/^\d+$/.test(val)) val = +val;
  this.emit('resize');
  this.clearPos();
  return this.position.height = val;
});

Element.prototype.__defineSetter__('aleft', function (val) {
  var expr;

  if (typeof val === 'string') {
    if (val === 'center') {
      val = this.screen.width / 2 | 0;
      val -= this.width / 2 | 0;
    } else {
      expr = val.split(/(?=\+|-)/);
      val = expr[0];
      val = +val.slice(0, -1) / 100;
      val = this.screen.width * val | 0;
      val += +(expr[1] || 0);
    }
  }

  val -= this.parent.aleft;
  if (this.position.left === val) return;
  this.emit('move');
  this.clearPos();
  return this.position.left = val;
});

Element.prototype.__defineSetter__('aright', function (val) {
  val -= this.parent.aright;
  if (this.position.right === val) return;
  this.emit('move');
  this.clearPos();
  return this.position.right = val;
});

Element.prototype.__defineSetter__('atop', function (val) {
  var expr;

  if (typeof val === 'string') {
    if (val === 'center') {
      val = this.screen.height / 2 | 0;
      val -= this.height / 2 | 0;
    } else {
      expr = val.split(/(?=\+|-)/);
      val = expr[0];
      val = +val.slice(0, -1) / 100;
      val = this.screen.height * val | 0;
      val += +(expr[1] || 0);
    }
  }

  val -= this.parent.atop;
  if (this.position.top === val) return;
  this.emit('move');
  this.clearPos();
  return this.position.top = val;
});

Element.prototype.__defineSetter__('abottom', function (val) {
  val -= this.parent.abottom;
  if (this.position.bottom === val) return;
  this.emit('move');
  this.clearPos();
  return this.position.bottom = val;
});

Element.prototype.__defineSetter__('rleft', function (val) {
  if (this.position.left === val) return;
  if (/^\d+$/.test(val)) val = +val;
  this.emit('move');
  this.clearPos();
  return this.position.left = val;
});

Element.prototype.__defineSetter__('rright', function (val) {
  if (this.position.right === val) return;
  this.emit('move');
  this.clearPos();
  return this.position.right = val;
});

Element.prototype.__defineSetter__('rtop', function (val) {
  if (this.position.top === val) return;
  if (/^\d+$/.test(val)) val = +val;
  this.emit('move');
  this.clearPos();
  return this.position.top = val;
});

Element.prototype.__defineSetter__('rbottom', function (val) {
  if (this.position.bottom === val) return;
  this.emit('move');
  this.clearPos();
  return this.position.bottom = val;
});

Element.prototype.__defineGetter__('ileft', function () {
  return (this.border ? 1 : 0) + this.padding.left; // return (this.border && this.border.left ? 1 : 0) + this.padding.left;
});

Element.prototype.__defineGetter__('itop', function () {
  return (this.border ? 1 : 0) + this.padding.top; // return (this.border && this.border.top ? 1 : 0) + this.padding.top;
});

Element.prototype.__defineGetter__('iright', function () {
  return (this.border ? 1 : 0) + this.padding.right; // return (this.border && this.border.right ? 1 : 0) + this.padding.right;
});

Element.prototype.__defineGetter__('ibottom', function () {
  return (this.border ? 1 : 0) + this.padding.bottom; // return (this.border && this.border.bottom ? 1 : 0) + this.padding.bottom;
});

Element.prototype.__defineGetter__('iwidth', function () {
  // return (this.border
  //   ? ((this.border.left ? 1 : 0) + (this.border.right ? 1 : 0)) : 0)
  //   + this.padding.left + this.padding.right;
  return (this.border ? 2 : 0) + this.padding.left + this.padding.right;
});

Element.prototype.__defineGetter__('iheight', function () {
  // return (this.border
  //   ? ((this.border.top ? 1 : 0) + (this.border.bottom ? 1 : 0)) : 0)
  //   + this.padding.top + this.padding.bottom;
  return (this.border ? 2 : 0) + this.padding.top + this.padding.bottom;
});

Element.prototype.__defineGetter__('tpadding', function () {
  return this.padding.left + this.padding.top + this.padding.right + this.padding.bottom;
});
/**
 * Relative coordinates as default properties
 */


Element.prototype.__defineGetter__('left', function () {
  return this.rleft;
});

Element.prototype.__defineGetter__('right', function () {
  return this.rright;
});

Element.prototype.__defineGetter__('top', function () {
  return this.rtop;
});

Element.prototype.__defineGetter__('bottom', function () {
  return this.rbottom;
});

Element.prototype.__defineSetter__('left', function (val) {
  return this.rleft = val;
});

Element.prototype.__defineSetter__('right', function (val) {
  return this.rright = val;
});

Element.prototype.__defineSetter__('top', function (val) {
  return this.rtop = val;
});

Element.prototype.__defineSetter__('bottom', function (val) {
  return this.rbottom = val;
});
/**
 * Expose
 */


var _default = Element;
exports.default = _default;

},{"../colors":80,"../helpers":83,"../unicode":87,"./box":89,"./node":92,"@babel/runtime/helpers/interopRequireDefault":1,"assert":"assert"}],91:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _scrollablebox = _interopRequireDefault(require("./scrollablebox"));

/**
 * input.js - abstract input element for blessed
 * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).
 * https://github.com/chjj/blessed
 */

/**
 * Modules
 */
class Input extends _scrollablebox.default {
  /**
   * Input
   */
  constructor(options) {
    options = options || {};
    super(options);
    this.type = 'input';
  }

}
/**
 * Expose
 */


var _default = Input;
exports.default = _default;

},{"./scrollablebox":95,"@babel/runtime/helpers/interopRequireDefault":1}],92:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime/helpers/interopRequireWildcard"));

var _events = _interopRequireDefault(require("../events"));

/**
 * node.js - base abstract node for blessed
 * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).
 * https://github.com/chjj/blessed
 */

/**
 * Modules
 */
let Screen;
Promise.resolve().then(() => (0, _interopRequireWildcard2.default)(require("./screen"))).then(module => Screen = module.default);

class Node extends _events.default {
  /**
   * Node
   */
  constructor(options) {
    super();
    this.options = void 0;
    this.screen = void 0;
    this.parent = void 0;
    this.children = void 0;
    this.data = void 0;
    this.uid = void 0;
    this.index = void 0;
    this.detached = void 0;
    this.type = void 0;
    var self = this;
    options = options || {};
    this.options = options;
    this.screen = this.screen || options.screen;

    if (!this.screen) {
      if (this instanceof Screen) {
        this.screen = this;
      } else if (Screen.total === 1) {
        this.screen = Screen.global;
      } else if (options.parent) {
        this.screen = options.parent;

        while (this.screen && this.screen.type !== 'screen') {
          this.screen = this.screen.parent;
        }
      } else if (Screen.total) {
        // This _should_ work in most cases as long as the element is appended
        // synchronously after the screen's creation. Throw error if not.
        this.screen = Screen.instances[Screen.instances.length - 1];
        process.nextTick(function () {
          if (!self.parent) {
            throw new Error('Element (' + self.type + ')' + ' was not appended synchronously after the' + ' screen\'s creation. Please set a `parent`' + ' or `screen` option in the element\'s constructor' + ' if you are going to use multiple screens and' + ' append the element later.');
          }
        });
      } else {
        throw new Error('No active screen.');
      }
    }

    this.parent = options.parent || null;
    this.children = [];
    this.$ = this._ = this.data = {};
    this.uid = Node.uid++;
    this.index = this.index != null ? this.index : -1;

    if (!(this instanceof Screen)) {
      this.detached = true;
    }

    if (this.parent) {
      this.parent.append(this);
    }

    (options.children || []).forEach(this.append.bind(this));
    this.type = 'node';
  }

  insert(element, i) {
    var self = this;

    if (element.screen && element.screen !== this.screen) {
      throw new Error('Cannot switch a node\'s screen.');
    }

    element.detach();
    element.parent = this;
    element.screen = this.screen;

    if (i === 0) {
      this.children.unshift(element);
    } else if (i === this.children.length) {
      this.children.push(element);
    } else {
      this.children.splice(i, 0, element);
    }

    element.emit('reparent', this);
    this.emit('adopt', element);

    (function emit(el) {
      var n = el.detached !== self.detached;
      el.detached = self.detached;
      if (n) el.emit('attach');
      el.children.forEach(emit);
    })(element);

    if (!this.screen.focused) {
      this.screen.focused = element;
    }
  }

  prepend(element) {
    this.insert(element, 0);
  }

  append(element) {
    this.insert(element, this.children.length);
  }

  insertBefore(element, other) {
    var i = this.children.indexOf(other);
    if (~i) this.insert(element, i);
  }

  insertAfter(element, other) {
    var i = this.children.indexOf(other);
    if (~i) this.insert(element, i + 1);
  }

  remove(element) {
    if (element.parent !== this) return;
    var i = this.children.indexOf(element);
    if (!~i) return;
    element.clearPos();
    element.parent = null;
    this.children.splice(i, 1);
    i = this.screen.clickable.indexOf(element);
    if (~i) this.screen.clickable.splice(i, 1);
    i = this.screen.keyable.indexOf(element);
    if (~i) this.screen.keyable.splice(i, 1);
    element.emit('reparent', null);
    this.emit('remove', element);

    (function emit(el) {
      var n = el.detached !== true;
      el.detached = true;
      if (n) el.emit('detach');
      el.children.forEach(emit);
    })(element);

    if (this.screen.focused === element) {
      this.screen.rewindFocus();
    }
  }

  detach() {
    if (this.parent) this.parent.remove(this);
  }

  free() {}

  destroy() {
    this.detach();
    this.forDescendants(function (el) {
      el.free();
      el.destroyed = true;
      el.emit('destroy');
    }, this);
  }

  forDescendants(iter, s) {
    if (s) iter(this);
    this.children.forEach(function emit(el) {
      iter(el);
      el.children.forEach(emit);
    });
  }

  forAncestors(iter, s) {
    var el = this;
    if (s) iter(this);

    while (el = el.parent) {
      iter(el);
    }
  }

  collectDescendants(s) {
    var out = [];
    this.forDescendants(function (el) {
      out.push(el);
    }, s);
    return out;
  }

  collectAncestors(s) {
    var out = [];
    this.forAncestors(function (el) {
      out.push(el);
    }, s);
    return out;
  }

  emitDescendants() {
    var args = Array.prototype.slice(arguments),
        iter;

    if (typeof args[args.length - 1] === 'function') {
      iter = args.pop();
    }

    return this.forDescendants(function (el) {
      if (iter) iter(el);
      el.emit.apply(el, args);
    }, true);
  }

  emitAncestors() {
    var args = Array.prototype.slice(arguments),
        iter;

    if (typeof args[args.length - 1] === 'function') {
      iter = args.pop();
    }

    return this.forAncestors(function (el) {
      if (iter) iter(el);
      el.emit.apply(el, args);
    }, true);
  }

  hasDescendant(target) {
    return function find(el) {
      for (var i = 0; i < el.children.length; i++) {
        if (el.children[i] === target) {
          return true;
        }

        if (find(el.children[i]) === true) {
          return true;
        }
      }

      return false;
    }(this);
  }

  hasAncestor(target) {
    var el = this;

    while (el = el.parent) {
      if (el === target) return true;
    }

    return false;
  }

  get(name, value) {
    if (this.data.hasOwnProperty(name)) {
      return this.data[name];
    }

    return value;
  }

  set(name, value) {
    return this.data[name] = value;
  }

}

Node.uid = 0;
/**
 * Expose
 */

var _default = Node;
exports.default = _default;

},{"../events":81,"./screen":94,"@babel/runtime/helpers/interopRequireDefault":1,"@babel/runtime/helpers/interopRequireWildcard":2}],93:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _input = _interopRequireDefault(require("./input"));

/**
 * prompt.js - textarea element for blessed
 * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).
 * https://github.com/chjj/blessed
 */

/**
 * Modules
 */
var nextTick = global.setImmediate || process.nextTick.bind(process);

class Prompt extends _input.default {
  /**
   * Textarea
   */
  constructor(options) {
    options = options || {};
    super(options);
    this.value = void 0;
    this.cursorPosition = void 0;
    this.scrollPosition = void 0;
    this.backspaceVisiblePadding = void 0;

    this.screen._listenKeys(this);

    this.value = options.value || '';
    this.on('resize', this.resize);
    this.on('move', this.updateCursor);
    this.on('focus', this.onFocus);
    this.cursorPosition = 0;
    this.scrollPosition = 0;
    this.backspaceVisiblePadding = 3;
    this.type = 'textarea';
  }

  resize() {
    this.updateCursor();
    this.scrollToMatchCursor();
    this.screen.render();
  }

  updateCursor() {
    if (this.screen.focused !== this) {
      return;
    }

    var lpos = this._getCoords();

    if (!lpos) return;
    const cy = lpos.yi + this.itop;
    const cx = lpos.xi + this.ileft + this.cursorPosition - this.scrollPosition;
    const program = this.screen.program;

    if (cy === program.y && cx === program.x) {
      return;
    }

    if (cy === program.y) {
      if (cx > program.x) {
        program.cuf(cx - program.x);
      } else if (cx < program.x) {
        program.cub(program.x - cx);
      }
    } else if (cx === program.x) {
      if (cy > program.y) {
        program.cud(cy - program.y);
      } else if (cy < program.y) {
        program.cuu(program.y - cy);
      }
    } else {
      program.cup(cy, cx);
    }
  }

  onFocus() {
    this.screen.grabKeys = true;
    this.updateCursor();
    this.screen.program.showCursor(); //this.screen.program.sgr('normal');
    // Put this in a nextTick so the current
    // key event doesn't trigger any keys input.

    nextTick(() => {
      this.on('keypress', this.onKey);
    });
    this.on('blur', this.onBlur);
  }

  onBlur() {
    this.removeListener('keypress', this.onKey);
    this.removeListener('blur', this.onBlur);
    this.screen.program.hideCursor();
    this.screen.grabKeys = false;
  }

  insert(string, index, count, insertion) {
    let result = string.substr(0, index - count);

    if (insertion) {
      result += insertion;
    }

    if (string.length > index - count) {
      result += string.substr(index);
    }

    return result;
  }

  isWhitespace(ch) {
    return ch === ' ' || ch === "'" || ch === '"' || ch === "-" || ch === "/" || ch === "," || ch === "." || ch === ";";
  }

  cursorLeft() {
    if (this.cursorPosition > 0) {
      this.cursorPosition--;
      this.cursorMoved();
    }
  }

  cursorWordLeft() {
    let oldIsWhitespace = this.isWhitespace(this.value[this.cursorPosition]);

    while (this.cursorPosition > 0) {
      this.cursorPosition--;
      let currentIsWhitespace = this.isWhitespace(this.value[this.cursorPosition]);

      if (currentIsWhitespace && !oldIsWhitespace) {
        break;
      }

      oldIsWhitespace = this.isWhitespace(this.value[this.cursorPosition]);
    }

    this.cursorMoved();
  }

  cursorRight() {
    if (this.cursorPosition < this.value.length) {
      this.cursorPosition++;
      this.cursorMoved();
    }
  }

  cursorWordRight() {
    let oldIsWhitespace = this.isWhitespace(this.value[this.cursorPosition]);

    while (this.cursorPosition < this.value.length) {
      this.cursorPosition++;
      let currentIsWhitespace = this.isWhitespace(this.value[this.cursorPosition]);

      if (currentIsWhitespace && !oldIsWhitespace) {
        break;
      }

      oldIsWhitespace = this.isWhitespace(this.value[this.cursorPosition]);
    }

    this.cursorMoved();
  }

  cursorMoved() {
    if (this.scrollToMatchCursor()) {
      this.trimViewport();
      this.screen.render();
    }

    this.updateCursor();
  }

  onKey(ch, key) {
    var updated = false;
    if (key.name === 'return') return;
    if (key.name === 'enter') return;

    if (key.name === 'left') {
      if (key.meta) {
        this.cursorWordLeft();
      } else {
        this.cursorLeft();
      }
    } else if (key.name === 'right') {
      if (key.meta) {
        this.cursorWordRight();
      } else {
        this.cursorRight();
      }
    }

    if (key.name === 'backspace') {
      if (this.value.length) {
        if (this.screen.fullUnicode) {
          if (unicode.isSurrogate(this.value, this.value.length - 2)) {
            this.value = this.insert(this.value, this.cursorPosition, 2);
          } else {
            this.value = this.insert(this.value, this.cursorPosition, 1);
          }
        } else {
          this.value = this.insert(this.value, this.cursorPosition, 1);
        }

        this.cursorPosition--;

        if (this.cursorPosition <= this.scrollPosition + this.backspaceVisiblePadding) {
          this.scrollPosition = this.cursorPosition - this.backspaceVisiblePadding;

          if (this.scrollPosition < 0) {
            this.scrollPosition = 0;
          }
        }

        updated = true;
      }
    } else if (ch) {
      if (!/^[\x00-\x08\x0b-\x0c\x0e-\x1f\x7f]$/.test(ch)) {
        this.value = this.insert(this.value, this.cursorPosition, 0, ch);
        updated = true;
        this.cursorPosition++;
      }
    }

    if (updated) {
      this.scrollToMatchCursor();
      this.trimViewport();
      this.screen.render();
      this.updateCursor();
    }
  }

  getValue() {
    return this.value;
  }

  setValue(value) {
    if (this.value !== value) {
      this.value = value;
      this.cursorPosition = this.value.length;
      this.scrollToMatchCursor();
      this.setContent(this.value);
      this.updateCursor();
    }
  }

  setCursorPosition(pos) {
    this.cursorPosition = pos;
    this.cursorMoved();
  }

  trimViewport() {
    this.setContent(this.value.substr(this.scrollPosition, this.width), true, true);
  }

  scrollToMatchCursor() {
    let trailingSpaceLength = this.width - this.value.length + this.scrollPosition;
    if (trailingSpaceLength < 0) trailingSpaceLength = 0;
    this.scrollPosition -= trailingSpaceLength;

    if (this.scrollPosition < 0) {
      this.scrollPosition = 0;
    }

    const leftBound = this.scrollPosition;
    const rightBound = this.scrollPosition + this.width;

    if (leftBound > this.cursorPosition) {
      this.scrollPosition = this.cursorPosition;
      return true;
    }

    if (rightBound < this.cursorPosition) {
      this.scrollPosition = this.cursorPosition - this.width;
      return true;
    }

    return false;
  }

  render() {
    this.trimViewport();
    return this._render();
  }

}
/**
 * Expose
 */


var _default = Prompt;
exports.default = _default;

},{"./input":91,"@babel/runtime/helpers/interopRequireDefault":1}],94:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _child_process = _interopRequireDefault(require("child_process"));

var _colors = _interopRequireDefault(require("../colors"));

var _program = _interopRequireDefault(require("../program"));

var _unicode = _interopRequireDefault(require("../unicode"));

var _helpers = _interopRequireDefault(require("../helpers"));

var _node = _interopRequireDefault(require("./node"));

var _element = _interopRequireDefault(require("./element"));

var _box = _interopRequireDefault(require("./box"));

/**
 * screen.js - screen node for blessed
 * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).
 * https://github.com/chjj/blessed
 */

/**
 * Modules
 */
var nextTick = global.setImmediate || process.nextTick.bind(process);

class Screen extends _node.default {
  /**
   * Screen
   */
  constructor(options) {
    options = options || {};

    if (options.rsety && options.listen) {
      options = {
        program: options
      };
    }

    super(options);
    this.program = void 0;
    this.tput = void 0;
    this.autoPadding = void 0;
    this.tabc = void 0;
    this.dockBorders = void 0;
    this.ignoreLocked = void 0;
    this._unicode = void 0;
    this.fullUnicode = void 0;
    this.dattr = void 0;
    this.renders = void 0;
    this.position = void 0;
    this.left = void 0;
    this.aleft = void 0;
    this.rleft = void 0;
    this.right = void 0;
    this.aright = void 0;
    this.rright = void 0;
    this.top = void 0;
    this.atop = void 0;
    this.rtop = void 0;
    this.bottom = void 0;
    this.abottom = void 0;
    this.rbottom = void 0;
    this.ileft = void 0;
    this.itop = void 0;
    this.iright = void 0;
    this.ibottom = void 0;
    this.iheight = void 0;
    this.iwidth = void 0;
    this.padding = void 0;
    this.hover = void 0;
    this.history = void 0;
    this.clickable = void 0;
    this.keyable = void 0;
    this.grabKeys = void 0;
    this.lockKeys = void 0;
    this.focused = void 0;
    this._buf = void 0;
    this._ci = void 0;
    this.cursor = void 0;
    this._destroy = void 0;
    this._listenedMouse = void 0;
    this.debugLog = void 0;
    this.destroyed = void 0;
    this._listenedKeys = void 0;
    this._hoverText = void 0;
    this.lines = void 0;
    this.olines = void 0;
    this._borderStops = void 0;
    this._savedFocus = void 0;
    this._cursorBlink = void 0;
    this._needsClickableSort = void 0;
    this.mouseDown = void 0;
    var self = this;
    Screen.bind(this);
    this.program = options.program;

    if (!this.program) {
      this.program = (0, _program.default)({
        input: options.input,
        output: options.output,
        log: options.log,
        debug: options.debug,
        dump: options.dump,
        terminal: options.terminal || options.term,
        resizeTimeout: options.resizeTimeout,
        forceUnicode: options.forceUnicode,
        tput: true,
        buffer: true,
        zero: true
      });
    } else {
      this.program.setupTput();
      this.program.useBuffer = true;
      this.program.zero = true;
      this.program.options.resizeTimeout = options.resizeTimeout;

      if (options.forceUnicode != null) {
        this.program.tput.features.unicode = options.forceUnicode;
        this.program.tput.unicode = options.forceUnicode;
      }
    }

    this.tput = this.program.tput;
    this.autoPadding = options.autoPadding !== false;
    this.tabc = Array((options.tabSize || 4) + 1).join(' ');
    this.dockBorders = options.dockBorders;
    this.ignoreLocked = options.ignoreLocked || [];
    this._unicode = this.tput.unicode || this.tput.numbers.U8 === 1;
    this.fullUnicode = this.options.fullUnicode && this._unicode;
    this.dattr = 0 << 18 | 0x1ff << 9 | 0x1ff;
    this.renders = 0;
    this.position = {
      left: this.left = this.aleft = this.rleft = 0,
      right: this.right = this.aright = this.rright = 0,
      top: this.top = this.atop = this.rtop = 0,
      bottom: this.bottom = this.abottom = this.rbottom = 0,

      get height() {
        return self.height;
      },

      get width() {
        return self.width;
      }

    };
    this.ileft = 0;
    this.itop = 0;
    this.iright = 0;
    this.ibottom = 0;
    this.iheight = 0;
    this.iwidth = 0;
    this.padding = {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
    this.hover = null;
    this.history = [];
    this.clickable = [];
    this.keyable = [];
    this.grabKeys = false;
    this.lockKeys = false;
    this.focused;
    this._buf = '';
    this._ci = -1;

    if (options.title) {
      this.title = options.title;
    }

    options.cursor = options.cursor || {
      artificial: options.artificialCursor,
      shape: options.cursorShape,
      blink: options.cursorBlink,
      color: options.cursorColor
    };
    this.cursor = {
      artificial: options.cursor.artificial || false,
      shape: options.cursor.shape || 'block',
      blink: options.cursor.blink || false,
      color: options.cursor.color || null,
      _set: false,
      _state: 1,
      _hidden: true
    };
    this.program.on('resize', function () {
      self.alloc();
      self.render();

      (function emit(el) {
        el.emit('resize');
        el.children.forEach(emit);
      })(self);
    });
    this.program.on('focus', function () {
      self.emit('focus');
    });
    this.program.on('blur', function () {
      self.emit('blur');
    });
    this.program.on('warning', function (text) {
      self.emit('warning', text);
    });
    this.on('newListener', function fn(type) {
      if (type === 'keypress' || type.indexOf('key ') === 0 || type === 'mouse') {
        if (type === 'keypress' || type.indexOf('key ') === 0) self._listenKeys();
        if (type === 'mouse') self._listenMouse();
      }

      if (type === 'mouse' || type === 'click' || type === 'mouseover' || type === 'mouseout' || type === 'mousedown' || type === 'mouseup' || type === 'mousewheel' || type === 'wheeldown' || type === 'wheelup' || type === 'mousemove') {
        self._listenMouse();
      }
    });
    this.setMaxListeners(Infinity);
    this.enter();
    this.postEnter();
    this.type = 'screen';
    this._destroy = Screen.prototype.destroy;
  }

  setTerminal(terminal) {
    var entered = !!this.program.isAlt;

    if (entered) {
      this._buf = '';
      this.program._buf = '';
      this.leave();
    }

    this.program.setTerminal(terminal);
    this.tput = this.program.tput;

    if (entered) {
      this.enter();
    }
  }

  enter() {
    if (this.program.isAlt) return;

    if (!this.cursor._set) {
      if (this.options.cursor.shape) {
        this.cursorShape(this.cursor.shape, this.cursor.blink);
      }

      if (this.options.cursor.color) {
        this.cursorColor(this.cursor.color);
      }
    }

    if (process.platform === 'win32') {
      try {
        _child_process.default.execSync('cls', {
          stdio: 'ignore',
          timeout: 1000
        });
      } catch (e) {}
    }

    this.program.alternateBuffer();
    this.program.put.keypad_xmit();
    this.program.csr(0, this.height - 1);
    this.program.hideCursor();
    this.program.cup(0, 0); // We need this for tmux now:

    if (this.tput.strings.ena_acs) {
      this.program._write(this.tput.enacs());
    }

    this.alloc();
  }

  leave() {
    if (!this.program.isAlt) return;
    this.program.put.keypad_local();

    if (this.program.scrollTop !== 0 || this.program.scrollBottom !== this.rows - 1) {
      this.program.csr(0, this.height - 1);
    } // XXX For some reason if alloc/clear() is before this
    // line, it doesn't work on linux console.


    this.program.showCursor();
    this.alloc();

    if (this._listenedMouse) {
      this.program.disableMouse();
    }

    this.program.normalBuffer();
    if (this.cursor._set) this.cursorReset();
    this.program.flush();

    if (process.platform === 'win32') {
      try {
        _child_process.default.execSync('cls', {
          stdio: 'ignore',
          timeout: 1000
        });
      } catch (e) {}
    }
  }

  postEnter() {
    var self = this;

    if (this.options.debug) {
      this.debugLog = new Log({
        screen: this,
        parent: this,
        hidden: true,
        draggable: true,
        left: 'center',
        top: 'center',
        width: '30%',
        height: '30%',
        border: 'line',
        label: ' {bold}Debug Log{/bold} ',
        tags: true,
        keys: true,
        vi: true,
        mouse: true,
        scrollbar: {
          ch: ' ',
          track: {
            bg: 'yellow'
          },
          style: {
            inverse: true
          }
        }
      });

      this.debugLog.toggle = function () {
        if (self.debugLog.hidden) {
          self.saveFocus();
          self.debugLog.show();
          self.debugLog.setFront();
          self.debugLog.focus();
        } else {
          self.debugLog.hide();
          self.restoreFocus();
        }

        self.render();
      };

      this.debugLog.key(['q', 'escape'], self.debugLog.toggle);
      this.key('f12', self.debugLog.toggle);
    }

    if (this.options.warnings) {
      this.on('warning', function (text) {
        var warning = new _box.default({
          screen: self,
          parent: self,
          left: 'center',
          top: 'center',
          width: 'shrink',
          padding: 1,
          height: 'shrink',
          align: 'center',
          valign: 'middle',
          border: 'line',
          label: ' {red-fg}{bold}WARNING{/} ',
          content: '{bold}' + text + '{/bold}',
          tags: true
        });
        self.render();
        var timeout = setTimeout(function () {
          warning.destroy();
          self.render();
        }, 1500);

        if (timeout.unref) {
          timeout.unref();
        }
      });
    }
  }

  destroy() {
    this.leave();
    var index = Screen.instances.indexOf(this);

    if (~index) {
      Screen.instances.splice(index, 1);
      Screen.total--;
      Screen.global = Screen.instances[0];

      if (Screen.total === 0) {
        Screen.global = null;
        process.removeListener('uncaughtException', Screen._exceptionHandler);
        process.removeListener('SIGTERM', Screen._sigtermHandler);
        process.removeListener('SIGINT', Screen._sigintHandler);
        process.removeListener('SIGQUIT', Screen._sigquitHandler);
        process.removeListener('exit', Screen._exitHandler);
        delete Screen._exceptionHandler;
        delete Screen._sigtermHandler;
        delete Screen._sigintHandler;
        delete Screen._sigquitHandler;
        delete Screen._exitHandler;
        delete Screen._bound;
      }

      this.destroyed = true;
      this.emit('destroy');

      this._destroy();
    }

    this.program.destroy();
  }

  log() {
    return this.program.log.apply(this.program, arguments);
  }

  debug() {
    if (this.debugLog) {
      this.debugLog.log.apply(this.debugLog, arguments);
    }

    return this.program.debug.apply(this.program, arguments);
  }

  _listenMouse(el) {
    var self = this;

    if (el && !~this.clickable.indexOf(el)) {
      el.clickable = true;
      this.clickable.push(el);
    }

    if (this._listenedMouse) return;
    this._listenedMouse = true;
    this.program.enableMouse();

    if (this.options.sendFocus) {
      this.program.setMouse({
        sendFocus: true
      }, true);
    }

    this.on('render', function () {
      self._needsClickableSort = true;
    });
    this.program.on('mouse', function (data) {
      if (self.lockKeys) return;

      if (self._needsClickableSort) {
        self.clickable = _helpers.default.hsort(self.clickable);
        self._needsClickableSort = false;
      }

      var i = 0,
          el,
          set,
          pos;

      for (; i < self.clickable.length; i++) {
        el = self.clickable[i];

        if (el.detached || !el.visible) {
          continue;
        } // if (self.grabMouse && self.focused !== el
        //     && !el.hasAncestor(self.focused)) continue;


        pos = el.lpos;
        if (!pos) continue;

        if (data.x >= pos.xi && data.x < pos.xl && data.y >= pos.yi && data.y < pos.yl) {
          el.emit('mouse', data);

          if (data.action === 'mousedown') {
            self.mouseDown = el;
          } else if (data.action === 'mouseup') {
            (self.mouseDown || el).emit('click', data);
            self.mouseDown = null;
          } else if (data.action === 'mousemove') {
            if (self.hover && el.index > self.hover.index) {
              set = false;
            }

            if (self.hover !== el && !set) {
              if (self.hover) {
                self.hover.emit('mouseout', data);
              }

              el.emit('mouseover', data);
              self.hover = el;
            }

            set = true;
          }

          el.emit(data.action, data);
          break;
        }
      } // Just mouseover?


      if ((data.action === 'mousemove' || data.action === 'mousedown' || data.action === 'mouseup') && self.hover && !set) {
        self.hover.emit('mouseout', data);
        self.hover = null;
      }

      self.emit('mouse', data);
      self.emit(data.action, data);
    });
  }

  enableMouse(el) {
    this._listenMouse(el);
  }

  _listenKeys(el) {
    var self = this;

    if (el && !~this.keyable.indexOf(el)) {
      el.keyable = true;
      this.keyable.push(el);
    }

    if (this._listenedKeys) return;
    this._listenedKeys = true; // NOTE: The event emissions used to be reversed:
    // element + screen
    // They are now:
    // screen + element
    // After the first keypress emitted, the handler
    // checks to make sure grabKeys, lockKeys, and focused
    // weren't changed, and handles those situations appropriately.

    this.program.on('keypress', function (ch, key) {
      if (self.lockKeys && !~self.ignoreLocked.indexOf(key.full)) {
        return;
      }

      var focused = self.focused,
          grabKeys = self.grabKeys;

      if (!grabKeys || ~self.ignoreLocked.indexOf(key.full)) {
        self.emit('keypress', ch, key);
        self.emit('key ' + key.full, ch, key);
      } // If something changed from the screen key handler, stop.


      if (self.grabKeys !== grabKeys || self.lockKeys) {
        return;
      }

      if (focused && focused.keyable) {
        focused.emit('keypress', ch, key);
        focused.emit('key ' + key.full, ch, key);
      }
    });
  }

  enableKeys(el) {
    this._listenKeys(el);
  }

  enableInput(el) {
    this._listenMouse(el);

    this._listenKeys(el);
  }

  _initHover() {
    var self = this;

    if (this._hoverText) {
      return;
    }

    this._hoverText = new _box.default({
      screen: this,
      left: 0,
      top: 0,
      tags: false,
      height: 'shrink',
      width: 'shrink',
      border: 'line',
      style: {
        border: {
          fg: 'default'
        },
        bg: 'default',
        fg: 'default'
      }
    });
    this.on('mousemove', function (data) {
      if (self._hoverText.detached) return;
      self._hoverText.rleft = data.x + 1;
      self._hoverText.rtop = data.y;
      self.render();
    });
    this.on('element mouseover', function (el, data) {
      if (!el._hoverOptions) return;
      self._hoverText.parseTags = el.parseTags;

      self._hoverText.setContent(el._hoverOptions.text);

      self.append(self._hoverText);
      self._hoverText.rleft = data.x + 1;
      self._hoverText.rtop = data.y;
      self.render();
    });
    this.on('element mouseout', function () {
      if (self._hoverText.detached) return;

      self._hoverText.detach();

      self.render();
    }); // XXX This can cause problems if the
    // terminal does not support allMotion.
    // Workaround: check to see if content is set.

    this.on('element mouseup', function (el) {
      if (!self._hoverText.getContent()) return;
      if (!el._hoverOptions) return;
      self.append(self._hoverText);
      self.render();
    });
  }

  alloc(dirty) {
    var x, y;
    this.lines = [];

    for (y = 0; y < this.rows; y++) {
      this.lines[y] = [];

      for (x = 0; x < this.cols; x++) {
        this.lines[y][x] = [this.dattr, ' '];
      }

      this.lines[y].dirty = !!dirty;
    }

    this.olines = [];

    for (y = 0; y < this.rows; y++) {
      this.olines[y] = [];

      for (x = 0; x < this.cols; x++) {
        this.olines[y][x] = [this.dattr, ' '];
      }
    }

    this.program.clear();
  }

  realloc() {
    return this.alloc(true);
  }

  render() {
    var self = this;
    if (this.destroyed) return;
    this.emit('prerender');
    this._borderStops = {}; // TODO: Possibly get rid of .dirty altogether.
    // TODO: Could possibly drop .dirty and just clear the `lines` buffer every
    // time before a screen.render. This way clearRegion doesn't have to be
    // called in arbitrary places for the sake of clearing a spot where an
    // element used to be (e.g. when an element moves or is hidden). There could
    // be some overhead though.
    // this.screen.clearRegion(0, this.cols, 0, this.rows);

    this._ci = 0;
    this.children.forEach(function (el) {
      el.index = self._ci++; //el._rendering = true;

      el.render(); //el._rendering = false;
    });
    this._ci = -1;

    if (this.screen.dockBorders) {
      this._dockBorders();
    }

    this.draw(0, this.lines.length - 1); // XXX Workaround to deal with cursor pos before the screen has rendered and
    // lpos is not reliable (stale).

    if (this.focused && this.focused._updateCursor) {
      this.focused._updateCursor(true);
    }

    this.renders++;
    this.emit('render');
  }

  blankLine(ch, dirty) {
    var out = [];

    for (var x = 0; x < this.cols; x++) {
      out[x] = [this.dattr, ch || ' '];
    }

    out.dirty = dirty;
    return out;
  }

  insertLine(n, y, top, bottom) {
    // if (y === top) return this.insertLineNC(n, y, top, bottom);
    if (!this.tput.strings.change_scroll_region || !this.tput.strings.delete_line || !this.tput.strings.insert_line) return;
    this._buf += this.tput.csr(top, bottom);
    this._buf += this.tput.cup(y, 0);
    this._buf += this.tput.il(n);
    this._buf += this.tput.csr(0, this.height - 1);
    var j = bottom + 1;

    while (n--) {
      this.lines.splice(y, 0, this.blankLine());
      this.lines.splice(j, 1);
      this.olines.splice(y, 0, this.blankLine());
      this.olines.splice(j, 1);
    }
  }

  deleteLine(n, y, top, bottom) {
    // if (y === top) return this.deleteLineNC(n, y, top, bottom);
    if (!this.tput.strings.change_scroll_region || !this.tput.strings.delete_line || !this.tput.strings.insert_line) return;
    this._buf += this.tput.csr(top, bottom);
    this._buf += this.tput.cup(y, 0);
    this._buf += this.tput.dl(n);
    this._buf += this.tput.csr(0, this.height - 1);
    var j = bottom + 1;

    while (n--) {
      this.lines.splice(j, 0, this.blankLine());
      this.lines.splice(y, 1);
      this.olines.splice(j, 0, this.blankLine());
      this.olines.splice(y, 1);
    }
  } // This is how ncurses does it.
  // Scroll down (up cursor-wise).
  // This will only work for top line deletion as opposed to arbitrary lines.


  insertLineNC(n, y, top, bottom) {
    if (!this.tput.strings.change_scroll_region || !this.tput.strings.delete_line) return;
    this._buf += this.tput.csr(top, bottom);
    this._buf += this.tput.cup(top, 0);
    this._buf += this.tput.dl(n);
    this._buf += this.tput.csr(0, this.height - 1);
    var j = bottom + 1;

    while (n--) {
      this.lines.splice(j, 0, this.blankLine());
      this.lines.splice(y, 1);
      this.olines.splice(j, 0, this.blankLine());
      this.olines.splice(y, 1);
    }
  } // This is how ncurses does it.
  // Scroll up (down cursor-wise).
  // This will only work for bottom line deletion as opposed to arbitrary lines.


  deleteLineNC(n, y, top, bottom) {
    if (!this.tput.strings.change_scroll_region || !this.tput.strings.delete_line) return;
    this._buf += this.tput.csr(top, bottom);
    this._buf += this.tput.cup(bottom, 0);
    this._buf += Array(n + 1).join('\n');
    this._buf += this.tput.csr(0, this.height - 1);
    var j = bottom + 1;

    while (n--) {
      this.lines.splice(j, 0, this.blankLine());
      this.lines.splice(y, 1);
      this.olines.splice(j, 0, this.blankLine());
      this.olines.splice(y, 1);
    }
  }

  insertBottom(top, bottom) {
    return this.deleteLine(1, top, top, bottom);
  }

  insertTop(top, bottom) {
    return this.insertLine(1, top, top, bottom);
  }

  deleteBottom(top, bottom) {
    return this.clearRegion(0, this.width, bottom, bottom);
  }

  deleteTop(top, bottom) {
    // Same as: return this.insertBottom(top, bottom);
    return this.deleteLine(1, top, top, bottom);
  } // Parse the sides of an element to determine
  // whether an element has uniform cells on
  // both sides. If it does, we can use CSR to
  // optimize scrolling on a scrollable element.
  // Not exactly sure how worthwile this is.
  // This will cause a performance/cpu-usage hit,
  // but will it be less or greater than the
  // performance hit of slow-rendering scrollable
  // boxes with clean sides?


  cleanSides(el) {
    var pos = el.lpos;

    if (!pos) {
      return false;
    }

    if (pos._cleanSides != null) {
      return pos._cleanSides;
    }

    if (pos.xi <= 0 && pos.xl >= this.width) {
      return pos._cleanSides = true;
    }

    if (this.options.fastCSR) {
      // Maybe just do this instead of parsing.
      if (pos.yi < 0) return pos._cleanSides = false;
      if (pos.yl > this.height) return pos._cleanSides = false;

      if (this.width - (pos.xl - pos.xi) < 40) {
        return pos._cleanSides = true;
      }

      return pos._cleanSides = false;
    }

    if (!this.options.smartCSR) {
      return false;
    } // The scrollbar can't update properly, and there's also a
    // chance that the scrollbar may get moved around senselessly.
    // NOTE: In pratice, this doesn't seem to be the case.
    // if (this.scrollbar) {
    //   return pos._cleanSides = false;
    // }
    // Doesn't matter if we're only a height of 1.
    // if ((pos.yl - el.ibottom) - (pos.yi + el.itop) <= 1) {
    //   return pos._cleanSides = false;
    // }


    var yi = pos.yi + el.itop,
        yl = pos.yl - el.ibottom,
        first,
        ch,
        x,
        y;
    if (pos.yi < 0) return pos._cleanSides = false;
    if (pos.yl > this.height) return pos._cleanSides = false;
    if (pos.xi - 1 < 0) return pos._cleanSides = true;
    if (pos.xl > this.width) return pos._cleanSides = true;

    for (x = pos.xi - 1; x >= 0; x--) {
      if (!this.olines[yi]) break;
      first = this.olines[yi][x];

      for (y = yi; y < yl; y++) {
        if (!this.olines[y] || !this.olines[y][x]) break;
        ch = this.olines[y][x];

        if (ch[0] !== first[0] || ch[1] !== first[1]) {
          return pos._cleanSides = false;
        }
      }
    }

    for (x = pos.xl; x < this.width; x++) {
      if (!this.olines[yi]) break;
      first = this.olines[yi][x];

      for (y = yi; y < yl; y++) {
        if (!this.olines[y] || !this.olines[y][x]) break;
        ch = this.olines[y][x];

        if (ch[0] !== first[0] || ch[1] !== first[1]) {
          return pos._cleanSides = false;
        }
      }
    }

    return pos._cleanSides = true;
  }

  _dockBorders() {
    var lines = this.lines,
        stops = this._borderStops,
        i,
        y,
        x,
        ch; // var keys, stop;
    //
    // keys = Object.keys(this._borderStops)
    //   .map(function(k) { return +k; })
    //   .sort(function(a, b) { return a - b; });
    //
    // for (i = 0; i < keys.length; i++) {
    //   y = keys[i];
    //   if (!lines[y]) continue;
    //   stop = this._borderStops[y];
    //   for (x = stop.xi; x < stop.xl; x++) {

    stops = Object.keys(stops).map(function (k) {
      return +k;
    }).sort(function (a, b) {
      return a - b;
    });

    for (i = 0; i < stops.length; i++) {
      y = stops[i];
      if (!lines[y]) continue;

      for (x = 0; x < this.width; x++) {
        ch = lines[y][x][1];

        if (angles[ch]) {
          lines[y][x][1] = this._getAngle(lines, x, y);
          lines[y].dirty = true;
        }
      }
    }
  }

  _getAngle(lines, x, y) {
    var angle = 0,
        attr = lines[y][x][0],
        ch = lines[y][x][1];

    if (lines[y][x - 1] && langles[lines[y][x - 1][1]]) {
      if (!this.options.ignoreDockContrast) {
        if (lines[y][x - 1][0] !== attr) return ch;
      }

      angle |= 1 << 3;
    }

    if (lines[y - 1] && uangles[lines[y - 1][x][1]]) {
      if (!this.options.ignoreDockContrast) {
        if (lines[y - 1][x][0] !== attr) return ch;
      }

      angle |= 1 << 2;
    }

    if (lines[y][x + 1] && rangles[lines[y][x + 1][1]]) {
      if (!this.options.ignoreDockContrast) {
        if (lines[y][x + 1][0] !== attr) return ch;
      }

      angle |= 1 << 1;
    }

    if (lines[y + 1] && dangles[lines[y + 1][x][1]]) {
      if (!this.options.ignoreDockContrast) {
        if (lines[y + 1][x][0] !== attr) return ch;
      }

      angle |= 1 << 0;
    } // Experimental: fixes this situation:
    // +----------+
    //            | <-- empty space here, should be a T angle
    // +-------+  |
    // |       |  |
    // +-------+  |
    // |          |
    // +----------+
    // if (uangles[lines[y][x][1]]) {
    //   if (lines[y + 1] && cdangles[lines[y + 1][x][1]]) {
    //     if (!this.options.ignoreDockContrast) {
    //       if (lines[y + 1][x][0] !== attr) return ch;
    //     }
    //     angle |= 1 << 0;
    //   }
    // }


    return angleTable[angle] || ch;
  }

  draw(start, end) {
    // this.emit('predraw');
    var x, y, line, out, ch, data, attr, fg, bg, flags;
    var main = '',
        pre,
        post;
    var clr, neq, xx;
    var lx = -1,
        ly = -1,
        o;
    var acs;

    if (this._buf) {
      main += this._buf;
      this._buf = '';
    }

    for (y = start; y <= end; y++) {
      line = this.lines[y];
      o = this.olines[y];

      if (!line.dirty && !(this.cursor.artificial && y === this.program.y)) {
        continue;
      }

      line.dirty = false;
      out = '';
      attr = this.dattr;

      for (x = 0; x < line.length; x++) {
        data = line[x][0];
        ch = line[x][1]; // Render the artificial cursor.

        if (this.cursor.artificial && !this.cursor._hidden && this.cursor._state && x === this.program.x && y === this.program.y) {
          var cattr = this._cursorAttr(this.cursor, data);

          if (cattr.ch) ch = cattr.ch;
          data = cattr.attr;
        } // Take advantage of xterm's back_color_erase feature by using a
        // lookahead. Stop spitting out so many damn spaces. NOTE: Is checking
        // the bg for non BCE terminals worth the overhead?


        if (this.options.useBCE && ch === ' ' && (this.tput.bools.back_color_erase || (data & 0x1ff) === (this.dattr & 0x1ff)) && (data >> 18 & 8) === (this.dattr >> 18 & 8)) {
          clr = true;
          neq = false;

          for (xx = x; xx < line.length; xx++) {
            if (line[xx][0] !== data || line[xx][1] !== ' ') {
              clr = false;
              break;
            }

            if (line[xx][0] !== o[xx][0] || line[xx][1] !== o[xx][1]) {
              neq = true;
            }
          }

          if (clr && neq) {
            lx = -1, ly = -1;

            if (data !== attr) {
              out += this.codeAttr(data);
              attr = data;
            }

            out += this.tput.cup(y, x);
            out += this.tput.el();

            for (xx = x; xx < line.length; xx++) {
              o[xx][0] = data;
              o[xx][1] = ' ';
            }

            break;
          } // If there's more than 10 spaces, use EL regardless
          // and start over drawing the rest of line. Might
          // not be worth it. Try to use ECH if the terminal
          // supports it. Maybe only try to use ECH here.
          // //if (this.tput.strings.erase_chars)
          // if (!clr && neq && (xx - x) > 10) {
          //   lx = -1, ly = -1;
          //   if (data !== attr) {
          //     out += this.codeAttr(data);
          //     attr = data;
          //   }
          //   out += this.tput.cup(y, x);
          //   if (this.tput.strings.erase_chars) {
          //     // Use erase_chars to avoid erasing the whole line.
          //     out += this.tput.ech(xx - x);
          //   } else {
          //     out += this.tput.el();
          //   }
          //   if (this.tput.strings.parm_right_cursor) {
          //     out += this.tput.cuf(xx - x);
          //   } else {
          //     out += this.tput.cup(y, xx);
          //   }
          //   this.fillRegion(data, ' ',
          //     x, this.tput.strings.erase_chars ? xx : line.length,
          //     y, y + 1);
          //   x = xx - 1;
          //   continue;
          // }
          // Skip to the next line if the
          // rest of the line is already drawn.
          // if (!neq) {
          //   for (; xx < line.length; xx++) {
          //     if (line[xx][0] !== o[xx][0] || line[xx][1] !== o[xx][1]) {
          //       neq = true;
          //       break;
          //     }
          //   }
          //   if (!neq) {
          //     attr = data;
          //     break;
          //   }
          // }

        } // Optimize by comparing the real output
        // buffer to the pending output buffer.


        if (data === o[x][0] && ch === o[x][1]) {
          if (lx === -1) {
            lx = x;
            ly = y;
          }

          continue;
        } else if (lx !== -1) {
          if (this.tput.strings.parm_right_cursor) {
            out += y === ly ? this.tput.cuf(x - lx) : this.tput.cup(y, x);
          } else {
            out += this.tput.cup(y, x);
          }

          lx = -1, ly = -1;
        }

        o[x][0] = data;
        o[x][1] = ch;

        if (data !== attr) {
          if (attr !== this.dattr) {
            out += '\x1b[m';
          }

          if (data !== this.dattr) {
            out += '\x1b[';
            bg = data & 0x1ff;
            fg = data >> 9 & 0x1ff;
            flags = data >> 18; // bold

            if (flags & 1) {
              out += '1;';
            } // underline


            if (flags & 2) {
              out += '4;';
            } // blink


            if (flags & 4) {
              out += '5;';
            } // inverse


            if (flags & 8) {
              out += '7;';
            } // invisible


            if (flags & 16) {
              out += '8;';
            }

            if (bg !== 0x1ff) {
              bg = this._reduceColor(bg);

              if (bg < 16) {
                if (bg < 8) {
                  bg += 40;
                } else if (bg < 16) {
                  bg -= 8;
                  bg += 100;
                }

                out += bg + ';';
              } else {
                out += '48;5;' + bg + ';';
              }
            }

            if (fg !== 0x1ff) {
              fg = this._reduceColor(fg);

              if (fg < 16) {
                if (fg < 8) {
                  fg += 30;
                } else if (fg < 16) {
                  fg -= 8;
                  fg += 90;
                }

                out += fg + ';';
              } else {
                out += '38;5;' + fg + ';';
              }
            }

            if (out[out.length - 1] === ';') out = out.slice(0, -1);
            out += 'm';
          }
        } // If we find a double-width char, eat the next character which should be
        // a space due to parseContent's behavior.


        if (this.fullUnicode) {
          // If this is a surrogate pair double-width char, we can ignore it
          // because parseContent already counted it as length=2.
          if (_unicode.default.charWidth(line[x][1]) === 2) {
            // NOTE: At cols=44, the bug that is avoided
            // by the angles check occurs in widget-unicode:
            // Might also need: `line[x + 1][0] !== line[x][0]`
            // for borderless boxes?
            if (x === line.length - 1 || angles[line[x + 1][1]]) {
              // If we're at the end, we don't have enough space for a
              // double-width. Overwrite it with a space and ignore.
              ch = ' ';
              o[x][1] = '\0';
            } else {
              // ALWAYS refresh double-width chars because this special cursor
              // behavior is needed. There may be a more efficient way of doing
              // this. See above.
              o[x][1] = '\0'; // Eat the next character by moving forward and marking as a
              // space (which it is).

              o[++x][1] = '\0';
            }
          }
        } // Attempt to use ACS for supported characters.
        // This is not ideal, but it's how ncurses works.
        // There are a lot of terminals that support ACS
        // *and UTF8, but do not declare U8. So ACS ends
        // up being used (slower than utf8). Terminals
        // that do not support ACS and do not explicitly
        // support UTF8 get their unicode characters
        // replaced with really ugly ascii characters.
        // It is possible there is a terminal out there
        // somewhere that does not support ACS, but
        // supports UTF8, but I imagine it's unlikely.
        // Maybe remove !this.tput.unicode check, however,
        // this seems to be the way ncurses does it.


        if (this.tput.strings.enter_alt_charset_mode && !this.tput.brokenACS && (this.tput.acscr[ch] || acs)) {
          // Fun fact: even if this.tput.brokenACS wasn't checked here,
          // the linux console would still work fine because the acs
          // table would fail the check of: this.tput.acscr[ch]
          if (this.tput.acscr[ch]) {
            if (acs) {
              ch = this.tput.acscr[ch];
            } else {
              ch = this.tput.smacs() + this.tput.acscr[ch];
              acs = true;
            }
          } else if (acs) {
            ch = this.tput.rmacs() + ch;
            acs = false;
          }
        } else {
          // U8 is not consistently correct. Some terminfo's
          // terminals that do not declare it may actually
          // support utf8 (e.g. urxvt), but if the terminal
          // does not declare support for ACS (and U8), chances
          // are it does not support UTF8. This is probably
          // the "safest" way to do this. Should fix things
          // like sun-color.
          // NOTE: It could be the case that the $LANG
          // is all that matters in some cases:
          // if (!this.tput.unicode && ch > '~') {
          if (!this.tput.unicode && this.tput.numbers.U8 !== 1 && ch > '~') {
            ch = this.tput.utoa[ch] || '?';
          }
        }

        out += ch;
        attr = data;
      }

      if (attr !== this.dattr) {
        out += '\x1b[m';
      }

      if (out) {
        main += this.tput.cup(y, 0) + out;
      }
    }

    if (acs) {
      main += this.tput.rmacs();
      acs = false;
    }

    if (main) {
      pre = '';
      post = '';
      pre += this.tput.sc();
      post += this.tput.rc();

      if (!this.program.cursorHidden) {
        pre += this.tput.civis();
        post += this.tput.cnorm();
      } // this.program.flush();
      // this.program._owrite(pre + main + post);


      this.program._write(pre + main + post);
    } // this.emit('draw');

  }

  _reduceColor(color) {
    return _colors.default.reduce(color, this.tput.colors);
  } // Convert an SGR string to our own attribute format.


  attrCode(code, cur, def) {
    var flags = cur >> 18 & 0x1ff,
        fg = cur >> 9 & 0x1ff,
        bg = cur & 0x1ff,
        c,
        i;
    code = code.slice(2, -1).split(';');
    if (!code[0]) code[0] = '0';

    for (i = 0; i < code.length; i++) {
      c = +code[i] || 0;

      switch (c) {
        case 0:
          // normal
          bg = def & 0x1ff;
          fg = def >> 9 & 0x1ff;
          flags = def >> 18 & 0x1ff;
          break;

        case 1:
          // bold
          flags |= 1;
          break;

        case 22:
          flags = def >> 18 & 0x1ff;
          break;

        case 4:
          // underline
          flags |= 2;
          break;

        case 24:
          flags = def >> 18 & 0x1ff;
          break;

        case 5:
          // blink
          flags |= 4;
          break;

        case 25:
          flags = def >> 18 & 0x1ff;
          break;

        case 7:
          // inverse
          flags |= 8;
          break;

        case 27:
          flags = def >> 18 & 0x1ff;
          break;

        case 8:
          // invisible
          flags |= 16;
          break;

        case 28:
          flags = def >> 18 & 0x1ff;
          break;

        case 39:
          // default fg
          fg = def >> 9 & 0x1ff;
          break;

        case 49:
          // default bg
          bg = def & 0x1ff;
          break;

        case 100:
          // default fg/bg
          fg = def >> 9 & 0x1ff;
          bg = def & 0x1ff;
          break;

        default:
          // color
          if (c === 48 && +code[i + 1] === 5) {
            i += 2;
            bg = +code[i];
            break;
          } else if (c === 48 && +code[i + 1] === 2) {
            i += 2;
            bg = _colors.default.match(+code[i], +code[i + 1], +code[i + 2]);
            if (bg === -1) bg = def & 0x1ff;
            i += 2;
            break;
          } else if (c === 38 && +code[i + 1] === 5) {
            i += 2;
            fg = +code[i];
            break;
          } else if (c === 38 && +code[i + 1] === 2) {
            i += 2;
            fg = _colors.default.match(+code[i], +code[i + 1], +code[i + 2]);
            if (fg === -1) fg = def >> 9 & 0x1ff;
            i += 2;
            break;
          }

          if (c >= 40 && c <= 47) {
            bg = c - 40;
          } else if (c >= 100 && c <= 107) {
            bg = c - 100;
            bg += 8;
          } else if (c === 49) {
            bg = def & 0x1ff;
          } else if (c >= 30 && c <= 37) {
            fg = c - 30;
          } else if (c >= 90 && c <= 97) {
            fg = c - 90;
            fg += 8;
          } else if (c === 39) {
            fg = def >> 9 & 0x1ff;
          } else if (c === 100) {
            fg = def >> 9 & 0x1ff;
            bg = def & 0x1ff;
          }

          break;
      }
    }

    return flags << 18 | fg << 9 | bg;
  } // Convert our own attribute format to an SGR string.


  codeAttr(code) {
    var flags = code >> 18 & 0x1ff,
        fg = code >> 9 & 0x1ff,
        bg = code & 0x1ff,
        out = ''; // bold

    if (flags & 1) {
      out += '1;';
    } // underline


    if (flags & 2) {
      out += '4;';
    } // blink


    if (flags & 4) {
      out += '5;';
    } // inverse


    if (flags & 8) {
      out += '7;';
    } // invisible


    if (flags & 16) {
      out += '8;';
    }

    if (bg !== 0x1ff) {
      bg = this._reduceColor(bg);

      if (bg < 16) {
        if (bg < 8) {
          bg += 40;
        } else if (bg < 16) {
          bg -= 8;
          bg += 100;
        }

        out += bg + ';';
      } else {
        out += '48;5;' + bg + ';';
      }
    }

    if (fg !== 0x1ff) {
      fg = this._reduceColor(fg);

      if (fg < 16) {
        if (fg < 8) {
          fg += 30;
        } else if (fg < 16) {
          fg -= 8;
          fg += 90;
        }

        out += fg + ';';
      } else {
        out += '38;5;' + fg + ';';
      }
    }

    if (out[out.length - 1] === ';') out = out.slice(0, -1);
    return '\x1b[' + out + 'm';
  }

  focusOffset(offset) {
    var shown = this.keyable.filter(function (el) {
      return !el.detached && el.visible;
    }).length;

    if (!shown || !offset) {
      return;
    }

    var i = this.keyable.indexOf(this.focused);
    if (!~i) return;

    if (offset > 0) {
      while (offset--) {
        if (++i > this.keyable.length - 1) i = 0;
        if (this.keyable[i].detached || !this.keyable[i].visible) offset++;
      }
    } else {
      offset = -offset;

      while (offset--) {
        if (--i < 0) i = this.keyable.length - 1;
        if (this.keyable[i].detached || !this.keyable[i].visible) offset++;
      }
    }

    return this.keyable[i].focus();
  }

  focusPrev() {
    return this.focusOffset(-1);
  }

  focusPrevious() {
    return this.focusOffset(-1);
  }

  focusNext() {
    return this.focusOffset(1);
  }

  focusPush(el) {
    if (!el) return;
    var old = this.history[this.history.length - 1];

    if (this.history.length === 10) {
      this.history.shift();
    }

    this.history.push(el);

    this._focus(el, old);
  }

  focusPop() {
    var old = this.history.pop();

    if (this.history.length) {
      this._focus(this.history[this.history.length - 1], old);
    }

    return old;
  }

  saveFocus() {
    return this._savedFocus = this.focused;
  }

  restoreFocus() {
    if (!this._savedFocus) return;

    this._savedFocus.focus();

    delete this._savedFocus;
    return this.focused;
  }

  rewindFocus() {
    var old = this.history.pop(),
        el;

    while (this.history.length) {
      el = this.history.pop();

      if (!el.detached && el.visible) {
        this.history.push(el);

        this._focus(el, old);

        return el;
      }
    }

    if (old) {
      old.emit('blur');
    }
  }

  _focus(self, old) {
    // Find a scrollable ancestor if we have one.
    var el = self;

    while (el = el.parent) {
      if (el.scrollable) break;
    } // If we're in a scrollable element,
    // automatically scroll to the focused element.


    if (el && !el.detached) {
      // NOTE: This is different from the other "visible" values - it needs the
      // visible height of the scrolling element itself, not the element within
      // it.
      var visible = self.screen.height - el.atop - el.itop - el.abottom - el.ibottom;

      if (self.rtop < el.childBase) {
        el.scrollTo(self.rtop);
        self.screen.render();
      } else if (self.rtop + self.height - self.ibottom > el.childBase + visible) {
        // Explanation for el.itop here: takes into account scrollable elements
        // with borders otherwise the element gets covered by the bottom border:
        el.scrollTo(self.rtop - (el.height - self.height) + el.itop, true);
        self.screen.render();
      }
    }

    if (old) {
      old.emit('blur', self);
    }

    self.emit('focus', old);
  }

  clearRegion(xi, xl, yi, yl, override) {
    return this.fillRegion(this.dattr, ' ', xi, xl, yi, yl, override);
  }

  fillRegion(attr, ch, xi, xl, yi, yl, override) {
    var lines = this.lines,
        cell,
        xx;
    if (xi < 0) xi = 0;
    if (yi < 0) yi = 0;

    for (; yi < yl; yi++) {
      if (!lines[yi]) break;

      for (xx = xi; xx < xl; xx++) {
        cell = lines[yi][xx];
        if (!cell) break;

        if (override || attr !== cell[0] || ch !== cell[1]) {
          lines[yi][xx][0] = attr;
          lines[yi][xx][1] = ch;
          lines[yi].dirty = true;
        }
      }
    }
  }

  key() {
    return this.program.key.apply(this, arguments);
  }

  onceKey() {
    return this.program.onceKey.apply(this, arguments);
  }

  unkey() {
    return this.program.unkey.apply(this, arguments);
  }

  removeKey() {
    return this.program.unkey.apply(this, arguments);
  }

  spawn(file, args, options) {
    if (!Array.isArray(args)) {
      options = args;
      args = [];
    }

    var screen = this,
        program = screen.program,
        spawn = require('child_process').spawn,
        mouse = program.mouseEnabled,
        ps;

    options = options || {};
    options.stdio = options.stdio || 'inherit';
    program.lsaveCursor('spawn'); // program.csr(0, program.rows - 1);

    program.normalBuffer();
    program.showCursor();
    if (mouse) program.disableMouse();
    var write = program.output.write;

    program.output.write = function () {};

    program.input.pause();

    if (program.input.setRawMode) {
      program.input.setRawMode(false);
    }

    var resume = function () {
      if (resume.done) return;
      resume.done = true;

      if (program.input.setRawMode) {
        program.input.setRawMode(true);
      }

      program.input.resume();
      program.output.write = write;
      program.alternateBuffer(); // program.csr(0, program.rows - 1);

      if (mouse) {
        program.enableMouse();

        if (screen.options.sendFocus) {
          screen.program.setMouse({
            sendFocus: true
          }, true);
        }
      }

      screen.alloc();
      screen.render();
      screen.program.lrestoreCursor('spawn', true);
    };

    ps = spawn(file, args, options);
    ps.on('error', resume);
    ps.on('exit', resume);
    return ps;
  }

  exec(file, args, options, callback) {
    var ps = this.spawn(file, args, options);
    ps.on('error', function (err) {
      if (!callback) return;
      return callback(err, false);
    });
    ps.on('exit', function (code) {
      if (!callback) return;
      return callback(null, code === 0);
    });
    return ps;
  }

  readEditor(options, callback) {
    if (typeof options === 'string') {
      options = {
        editor: options
      };
    }

    if (!callback) {
      callback = options;
      options = null;
    }

    if (!callback) {
      callback = function () {};
    }

    options = options || {};
    var self = this,
        editor = options.editor || process.env.EDITOR || 'vi',
        name = options.name || process.title || 'blessed',
        rnd = Math.random().toString(36).split('.').pop(),
        file = '/tmp/' + name + '.' + rnd,
        args = [file],
        opt;
    opt = {
      stdio: 'inherit',
      env: process.env,
      cwd: process.env.HOME
    };

    function writeFile(callback) {
      if (!options.value) return callback();
      return _fs.default.writeFile(file, options.value, callback);
    }

    return writeFile(function (err) {
      if (err) return callback(err);
      return self.exec(editor, args, opt, function (err, success) {
        if (err) return callback(err);
        return _fs.default.readFile(file, 'utf8', function (err, data) {
          return _fs.default.unlink(file, function () {
            if (!success) return callback(new Error('Unsuccessful.'));
            if (err) return callback(err);
            return callback(null, data);
          });
        });
      });
    });
  }

  displayImage(file, callback) {
    if (!file) {
      if (!callback) return;
      return callback(new Error('No image.'));
    }

    file = _path.default.resolve(process.cwd(), file);

    if (!~file.indexOf('://')) {
      file = 'file://' + file;
    }

    var args = ['w3m', '-T', 'text/html'];
    var input = '<title>press q to exit</title>' + '<img align="center" src="' + file + '">';
    var opt = {
      stdio: ['pipe', 1, 2],
      env: process.env,
      cwd: process.env.HOME
    };
    var ps = this.spawn(args[0], args.slice(1), opt);
    ps.on('error', function (err) {
      if (!callback) return;
      return callback(err);
    });
    ps.on('exit', function (code) {
      if (!callback) return;
      if (code !== 0) return callback(new Error('Exit Code: ' + code));
      return callback(null, code === 0);
    });
    ps.stdin.write(input + '\n');
    ps.stdin.end();
  }

  setEffects(el, fel, over, out, effects, temp) {
    if (!effects) return;
    var tmp = {};
    if (temp) el[temp] = tmp;

    if (typeof el !== 'function') {
      var _el = el;

      el = function () {
        return _el;
      };
    }

    fel.on(over, function () {
      var element = el();
      Object.keys(effects).forEach(function (key) {
        var val = effects[key];

        if (val !== null && typeof val === 'object') {
          tmp[key] = tmp[key] || {}; // element.style[key] = element.style[key] || {};

          Object.keys(val).forEach(function (k) {
            var v = val[k];
            tmp[key][k] = element.style[key][k];
            element.style[key][k] = v;
          });
          return;
        }

        tmp[key] = element.style[key];
        element.style[key] = val;
      });
      element.screen.render();
    });
    fel.on(out, function () {
      var element = el();
      Object.keys(effects).forEach(function (key) {
        var val = effects[key];

        if (val !== null && typeof val === 'object') {
          tmp[key] = tmp[key] || {}; // element.style[key] = element.style[key] || {};

          Object.keys(val).forEach(function (k) {
            if (tmp[key].hasOwnProperty(k)) {
              element.style[key][k] = tmp[key][k];
            }
          });
          return;
        }

        if (tmp.hasOwnProperty(key)) {
          element.style[key] = tmp[key];
        }
      });
      element.screen.render();
    });
  }

  sigtstp(callback) {
    var self = this;
    this.program.sigtstp(function () {
      self.alloc();
      self.render();
      self.program.lrestoreCursor('pause', true);
      if (callback) callback();
    });
  }

  copyToClipboard(text) {
    return this.program.copyToClipboard(text);
  }

  cursorShape(shape, blink) {
    var self = this;
    this.cursor.shape = shape || 'block';
    this.cursor.blink = blink || false;
    this.cursor._set = true;

    if (this.cursor.artificial) {
      if (!this.program.hideCursor_old) {
        var hideCursor = this.program.hideCursor;
        this.program.hideCursor_old = this.program.hideCursor;

        this.program.hideCursor = function () {
          hideCursor.call(self.program);
          self.cursor._hidden = true;
          if (self.renders) self.render();
        };
      }

      if (!this.program.showCursor_old) {
        var showCursor = this.program.showCursor;
        this.program.showCursor_old = this.program.showCursor;

        this.program.showCursor = function () {
          self.cursor._hidden = false;
          if (self.program._exiting) showCursor.call(self.program);
          if (self.renders) self.render();
        };
      }

      if (!this._cursorBlink) {
        this._cursorBlink = setInterval(function () {
          if (!self.cursor.blink) return;
          self.cursor._state ^= 1;
          if (self.renders) self.render();
        }, 500);

        if (this._cursorBlink.unref) {
          this._cursorBlink.unref();
        }
      }

      return true;
    }

    return this.program.cursorShape(this.cursor.shape, this.cursor.blink);
  }

  cursorColor(color) {
    this.cursor.color = color != null ? _colors.default.convert(color) : null;
    this.cursor._set = true;

    if (this.cursor.artificial) {
      return true;
    }

    return this.program.cursorColor(_colors.default.ncolors[this.cursor.color]);
  }

  cursorReset() {
    this.cursor.shape = 'block';
    this.cursor.blink = false;
    this.cursor.color = null;
    this.cursor._set = false;

    if (this.cursor.artificial) {
      this.cursor.artificial = false;

      if (this.program.hideCursor_old) {
        this.program.hideCursor = this.program.hideCursor_old;
        delete this.program.hideCursor_old;
      }

      if (this.program.showCursor_old) {
        this.program.showCursor = this.program.showCursor_old;
        delete this.program.showCursor_old;
      }

      if (this._cursorBlink) {
        clearInterval(this._cursorBlink);
        delete this._cursorBlink;
      }

      return true;
    }

    return this.program.cursorReset();
  }

  resetCursor() {
    this.cursor.shape = 'block';
    this.cursor.blink = false;
    this.cursor.color = null;
    this.cursor._set = false;

    if (this.cursor.artificial) {
      this.cursor.artificial = false;

      if (this.program.hideCursor_old) {
        this.program.hideCursor = this.program.hideCursor_old;
        delete this.program.hideCursor_old;
      }

      if (this.program.showCursor_old) {
        this.program.showCursor = this.program.showCursor_old;
        delete this.program.showCursor_old;
      }

      if (this._cursorBlink) {
        clearInterval(this._cursorBlink);
        delete this._cursorBlink;
      }

      return true;
    }

    return this.program.cursorReset();
  }

  _cursorAttr(cursor, dattr) {
    var attr = dattr || this.dattr,
        cattr,
        ch;

    if (cursor.shape === 'line') {
      attr &= ~(0x1ff << 9);
      attr |= 7 << 9;
      ch = '\u2502';
    } else if (cursor.shape === 'underline') {
      attr &= ~(0x1ff << 9);
      attr |= 7 << 9;
      attr |= 2 << 18;
    } else if (cursor.shape === 'block') {
      attr &= ~(0x1ff << 9);
      attr |= 7 << 9;
      attr |= 8 << 18;
    } else if (typeof cursor.shape === 'object' && cursor.shape) {
      cattr = _element.default.prototype.sattr.call(cursor, cursor.shape);

      if (cursor.shape.bold || cursor.shape.underline || cursor.shape.blink || cursor.shape.inverse || cursor.shape.invisible) {
        attr &= ~(0x1ff << 18);
        attr |= (cattr >> 18 & 0x1ff) << 18;
      }

      if (cursor.shape.fg) {
        attr &= ~(0x1ff << 9);
        attr |= (cattr >> 9 & 0x1ff) << 9;
      }

      if (cursor.shape.bg) {
        attr &= ~(0x1ff << 0);
        attr |= cattr & 0x1ff;
      }

      if (cursor.shape.ch) {
        ch = cursor.shape.ch;
      }
    }

    if (cursor.color != null) {
      attr &= ~(0x1ff << 9);
      attr |= cursor.color << 9;
    }

    return {
      ch: ch,
      attr: attr
    };
  }

  screenshot(xi, xl, yi, yl, term) {
    if (xi == null) xi = 0;
    if (xl == null) xl = this.cols;
    if (yi == null) yi = 0;
    if (yl == null) yl = this.rows;
    if (xi < 0) xi = 0;
    if (yi < 0) yi = 0;
    var x, y, line, out, ch, data, attr;
    var sdattr = this.dattr;

    if (term) {
      this.dattr = term.defAttr;
    }

    var main = '';

    for (y = yi; y < yl; y++) {
      line = term ? term.lines[y] : this.lines[y];
      if (!line) break;
      out = '';
      attr = this.dattr;

      for (x = xi; x < xl; x++) {
        if (!line[x]) break;
        data = line[x][0];
        ch = line[x][1];

        if (data !== attr) {
          if (attr !== this.dattr) {
            out += '\x1b[m';
          }

          if (data !== this.dattr) {
            var _data = data;

            if (term) {
              if ((_data >> 9 & 0x1ff) === 257) _data |= 0x1ff << 9;
              if ((_data & 0x1ff) === 256) _data |= 0x1ff;
            }

            out += this.codeAttr(_data);
          }
        }

        if (this.fullUnicode) {
          if (_unicode.default.charWidth(line[x][1]) === 2) {
            if (x === xl - 1) {
              ch = ' ';
            } else {
              x++;
            }
          }
        }

        out += ch;
        attr = data;
      }

      if (attr !== this.dattr) {
        out += '\x1b[m';
      }

      if (out) {
        main += (y > 0 ? '\n' : '') + out;
      }
    }

    main = main.replace(/(?:\s*\x1b\[40m\s*\x1b\[m\s*)*$/, '') + '\n';

    if (term) {
      this.dattr = sdattr;
    }

    return main;
  }
  /**
   * Positioning
   */


  _getPos() {
    return this;
  }

  static bind(screen) {
    if (!Screen.global) {
      Screen.global = screen;
    }

    if (!~Screen.instances.indexOf(screen)) {
      Screen.instances.push(screen);
      screen.index = Screen.total;
      Screen.total++;
    }

    if (Screen._bound) return;
    Screen._bound = true;
    process.on('uncaughtException', Screen._exceptionHandler = function (err) {
      if (process.listeners('uncaughtException').length > 1) {
        return;
      }

      Screen.instances.slice().forEach(function (screen) {
        screen.destroy();
      });
      err = err || new Error('Uncaught Exception.');
      console.log(err.stack ? err.stack + '' : err + '');
      nextTick(function () {
        process.exit(1);
      });
    });
    ['SIGTERM', 'SIGINT', 'SIGQUIT'].forEach(function (signal) {
      var name = '_' + signal.toLowerCase() + 'Handler';
      process.on(signal, Screen[name] = function () {
        if (process.listeners(signal).length > 1) {
          return;
        }

        nextTick(function () {
          process.exit(0);
        });
      });
    });
    process.on('exit', Screen._exitHandler = function () {
      Screen.instances.slice().forEach(function (screen) {
        screen.destroy();
      });
    });
  }

  static _exceptionHandler(err) {
    if (process.listeners('uncaughtException').length > 1) {
      return;
    }

    Screen.instances.slice().forEach(function (screen) {
      screen.destroy();
    });
    err = err || new Error('Uncaught Exception.');
    console.log(err.stack ? err.stack + '' : err + '');
    nextTick(function () {
      process.exit(1);
    });
  }

  static _exitHandler() {
    Screen.instances.slice().forEach(function (screen) {
      screen.destroy();
    });
  }

}

Screen.global = null;
Screen.total = 0;
Screen.instances = [];

Screen.prototype.__defineGetter__('title', function () {
  return this.program.title;
});

Screen.prototype.__defineSetter__('title', function (title) {
  return this.program.title = title;
});

Screen.prototype.__defineGetter__('terminal', function () {
  return this.program.terminal;
});

Screen.prototype.__defineSetter__('terminal', function (terminal) {
  this.setTerminal(terminal);
  return this.program.terminal;
});

Screen.prototype.__defineGetter__('cols', function () {
  return this.program.cols;
});

Screen.prototype.__defineGetter__('rows', function () {
  return this.program.rows;
});

Screen.prototype.__defineGetter__('width', function () {
  return this.program.cols;
});

Screen.prototype.__defineGetter__('height', function () {
  return this.program.rows;
});

Screen.prototype.__defineGetter__('focused', function () {
  return this.history[this.history.length - 1];
});

Screen.prototype.__defineSetter__('focused', function (el) {
  return this.focusPush(el);
});
/**
 * Angle Table
 */


var angles = {
  '\u2518': true,
  // '┘'
  '\u2510': true,
  // '┐'
  '\u250c': true,
  // '┌'
  '\u2514': true,
  // '└'
  '\u253c': true,
  // '┼'
  '\u251c': true,
  // '├'
  '\u2524': true,
  // '┤'
  '\u2534': true,
  // '┴'
  '\u252c': true,
  // '┬'
  '\u2502': true,
  // '│'
  '\u2500': true // '─'

};
var langles = {
  '\u250c': true,
  // '┌'
  '\u2514': true,
  // '└'
  '\u253c': true,
  // '┼'
  '\u251c': true,
  // '├'
  '\u2534': true,
  // '┴'
  '\u252c': true,
  // '┬'
  '\u2500': true // '─'

};
var uangles = {
  '\u2510': true,
  // '┐'
  '\u250c': true,
  // '┌'
  '\u253c': true,
  // '┼'
  '\u251c': true,
  // '├'
  '\u2524': true,
  // '┤'
  '\u252c': true,
  // '┬'
  '\u2502': true // '│'

};
var rangles = {
  '\u2518': true,
  // '┘'
  '\u2510': true,
  // '┐'
  '\u253c': true,
  // '┼'
  '\u2524': true,
  // '┤'
  '\u2534': true,
  // '┴'
  '\u252c': true,
  // '┬'
  '\u2500': true // '─'

};
var dangles = {
  '\u2518': true,
  // '┘'
  '\u2514': true,
  // '└'
  '\u253c': true,
  // '┼'
  '\u251c': true,
  // '├'
  '\u2524': true,
  // '┤'
  '\u2534': true,
  // '┴'
  '\u2502': true // '│'

}; // var cdangles = {
//   '\u250c': true  // '┌'
// };
// Every ACS angle character can be
// represented by 4 bits ordered like this:
// [langle][uangle][rangle][dangle]

var angleTable = {
  '0000': '',
  // ?
  '0001': '\u2502',
  // '│' // ?
  '0010': '\u2500',
  // '─' // ??
  '0011': '\u250c',
  // '┌'
  '0100': '\u2502',
  // '│' // ?
  '0101': '\u2502',
  // '│'
  '0110': '\u2514',
  // '└'
  '0111': '\u251c',
  // '├'
  '1000': '\u2500',
  // '─' // ??
  '1001': '\u2510',
  // '┐'
  '1010': '\u2500',
  // '─' // ??
  '1011': '\u252c',
  // '┬'
  '1100': '\u2518',
  // '┘'
  '1101': '\u2524',
  // '┤'
  '1110': '\u2534',
  // '┴'
  '1111': '\u253c' // '┼'

};
Object.keys(angleTable).forEach(function (key) {
  angleTable[parseInt(key, 2)] = angleTable[key];
  delete angleTable[key];
});
/**
 * Expose
 */

var _default = Screen;
exports.default = _default;

},{"../colors":80,"../helpers":83,"../program":85,"../unicode":87,"./box":89,"./element":90,"./node":92,"@babel/runtime/helpers/interopRequireDefault":1,"child_process":5,"fs":"fs","path":29}],95:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _box = _interopRequireDefault(require("./box"));

/**
 * scrollablebox.js - scrollable box element for blessed
 * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).
 * https://github.com/chjj/blessed
 */

/**
 * Modules
 */
class ScrollableBox extends _box.default {
  /**
   * ScrollableBox
   */
  constructor(options) {
    super(options);
    this.baseLimit = void 0;
    var self = this;
    options = options || {};

    if (options.scrollable === false) {
      return this;
    }

    this.scrollable = true;
    this.childOffset = 0;
    this.childBase = 0;
    this.baseLimit = options.baseLimit || Infinity;
    this.alwaysScroll = options.alwaysScroll;
    this.scrollbar = options.scrollbar;

    if (this.scrollbar) {
      this.scrollbar.ch = this.scrollbar.ch || ' ';
      this.style.scrollbar = this.style.scrollbar || this.scrollbar.style;

      if (!this.style.scrollbar) {
        this.style.scrollbar = {};
        this.style.scrollbar.fg = this.scrollbar.fg;
        this.style.scrollbar.bg = this.scrollbar.bg;
        this.style.scrollbar.bold = this.scrollbar.bold;
        this.style.scrollbar.underline = this.scrollbar.underline;
        this.style.scrollbar.inverse = this.scrollbar.inverse;
        this.style.scrollbar.invisible = this.scrollbar.invisible;
      } //this.scrollbar.style = this.style.scrollbar;


      if (this.track || this.scrollbar.track) {
        this.track = this.scrollbar.track || this.track;
        this.style.track = this.style.scrollbar.track || this.style.track;
        this.track.ch = this.track.ch || ' ';
        this.style.track = this.style.track || this.track.style;

        if (!this.style.track) {
          this.style.track = {};
          this.style.track.fg = this.track.fg;
          this.style.track.bg = this.track.bg;
          this.style.track.bold = this.track.bold;
          this.style.track.underline = this.track.underline;
          this.style.track.inverse = this.track.inverse;
          this.style.track.invisible = this.track.invisible;
        }

        this.track.style = this.style.track;
      } // Allow controlling of the scrollbar via the mouse:


      if (options.mouse) {
        this.on('mousedown', function (data) {
          if (self._scrollingBar) {
            // Do not allow dragging on the scrollbar:
            delete self.screen._dragging;
            delete self._drag;
            return;
          }

          var x = data.x - self.aleft;
          var y = data.y - self.atop;

          if (x === self.width - self.iright - 1) {
            // Do not allow dragging on the scrollbar:
            delete self.screen._dragging;
            delete self._drag;
            var perc = (y - self.itop) / (self.height - self.iheight);
            self.setScrollPerc(perc * 100 | 0);
            self.screen.render();
            var smd, smu;
            self._scrollingBar = true;
            self.onScreenEvent('mousedown', smd = function (data) {
              var y = data.y - self.atop;
              var perc = y / self.height;
              self.setScrollPerc(perc * 100 | 0);
              self.screen.render();
            }); // If mouseup occurs out of the window, no mouseup event fires, and
            // scrollbar will drag again on mousedown until another mouseup
            // occurs.

            self.onScreenEvent('mouseup', smu = function () {
              self._scrollingBar = false;
              self.removeScreenEvent('mousedown', smd);
              self.removeScreenEvent('mouseup', smu);
            });
          }
        });
      }
    }

    if (options.mouse) {
      this.on('wheeldown', function () {
        self.scroll(1);
        self.screen.render();
      });
      this.on('wheelup', function () {
        self.scroll(-1);
        self.screen.render();
      });
    }

    if (options.keys && !options.ignoreKeys) {
      this.on('keypress', function (ch, key) {
        if (key.name === 'up' || options.vi && key.name === 'k') {
          self.scroll(-1);
          self.screen.render();
          return;
        }

        if (key.name === 'down' || options.vi && key.name === 'j') {
          self.scroll(1);
          self.screen.render();
          return;
        }

        if (options.vi && key.name === 'u' && key.ctrl) {
          self.scroll(-(self.height / 2 | 0) || -1);
          self.screen.render();
          return;
        }

        if (options.vi && key.name === 'd' && key.ctrl) {
          self.scroll(self.height / 2 | 0 || 1);
          self.screen.render();
          return;
        }

        if (options.vi && key.name === 'b' && key.ctrl) {
          self.scroll(-self.height || -1);
          self.screen.render();
          return;
        }

        if (options.vi && key.name === 'f' && key.ctrl) {
          self.scroll(self.height || 1);
          self.screen.render();
          return;
        }

        if (options.vi && key.name === 'g' && !key.shift) {
          self.scrollTo(0);
          self.screen.render();
          return;
        }

        if (options.vi && key.name === 'g' && key.shift) {
          self.scrollTo(self.getScrollHeight());
          self.screen.render();
          return;
        }
      });
    }

    this.on('parsed content', function () {
      self._recalculateIndex();
    });

    self._recalculateIndex();

    this.type = 'scrollable-box';
  }

  _scrollBottom() {
    if (!this.scrollable) return 0; // We could just calculate the children, but we can
    // optimize for lists by just returning the items.length.

    if (this._isList) {
      return this.items ? this.items.length : 0;
    }

    if (this.lpos && this.lpos._scrollBottom) {
      return this.lpos._scrollBottom;
    }

    var bottom = this.children.reduce(function (current, el) {
      // el.height alone does not calculate the shrunken height, we need to use
      // getCoords. A shrunken box inside a scrollable element will not grow any
      // larger than the scrollable element's context regardless of how much
      // content is in the shrunken box, unless we do this (call getCoords
      // without the scrollable calculation):
      // See: $ node test/widget-shrink-fail-2.js
      if (!el.detached) {
        var lpos = el._getCoords(false, true);

        if (lpos) {
          return Math.max(current, el.rtop + (lpos.yl - lpos.yi));
        }
      }

      return Math.max(current, el.rtop + el.height);
    }, 0); // XXX Use this? Makes .getScrollHeight() useless!
    // if (bottom < this._clines.length) bottom = this._clines.length;

    if (this.lpos) this.lpos._scrollBottom = bottom;
    return bottom;
  }

  setScroll(offset, always) {
    // XXX
    // At first, this appeared to account for the first new calculation of childBase:
    this.scroll(0);
    return this.scroll(offset - (this.childBase + this.childOffset), always);
  }

  scrollTo(offset, always) {
    // XXX
    // At first, this appeared to account for the first new calculation of childBase:
    this.scroll(0);
    return this.scroll(offset - (this.childBase + this.childOffset), always);
  }

  getScroll() {
    return this.childBase + this.childOffset;
  }

  scroll(offset, always) {
    if (!this.scrollable) return;
    if (this.detached) return; // Handle scrolling.

    var visible = this.height - this.iheight,
        base = this.childBase,
        d,
        p,
        t,
        b,
        max,
        emax;

    if (this.alwaysScroll || always) {
      // Semi-workaround
      this.childOffset = offset > 0 ? visible - 1 + offset : offset;
    } else {
      this.childOffset += offset;
    }

    if (this.childOffset > visible - 1) {
      d = this.childOffset - (visible - 1);
      this.childOffset -= d;
      this.childBase += d;
    } else if (this.childOffset < 0) {
      d = this.childOffset;
      this.childOffset += -d;
      this.childBase += d;
    }

    if (this.childBase < 0) {
      this.childBase = 0;
    } else if (this.childBase > this.baseLimit) {
      this.childBase = this.baseLimit;
    } // Find max "bottom" value for
    // content and descendant elements.
    // Scroll the content if necessary.


    if (this.childBase === base) {
      return this.emit('scroll');
    } // When scrolling text, we want to be able to handle SGR codes as well as line
    // feeds. This allows us to take preformatted text output from other programs
    // and put it in a scrollable text box.


    this.parseContent(); // XXX
    // max = this.getScrollHeight() - (this.height - this.iheight);

    max = this._clines.length - (this.height - this.iheight);
    if (max < 0) max = 0;
    emax = this._scrollBottom() - (this.height - this.iheight);
    if (emax < 0) emax = 0;
    this.childBase = Math.min(this.childBase, Math.max(emax, max));

    if (this.childBase < 0) {
      this.childBase = 0;
    } else if (this.childBase > this.baseLimit) {
      this.childBase = this.baseLimit;
    } // Optimize scrolling with CSR + IL/DL.


    p = this.lpos; // Only really need _getCoords() if we want
    // to allow nestable scrolling elements...
    // or if we **really** want shrinkable
    // scrolling elements.
    // p = this._getCoords();

    if (p && this.childBase !== base && this.screen.cleanSides(this)) {
      t = p.yi + this.itop;
      b = p.yl - this.ibottom - 1;
      d = this.childBase - base;

      if (d > 0 && d < visible) {
        // scrolled down
        this.screen.deleteLine(d, t, t, b);
      } else if (d < 0 && -d < visible) {
        // scrolled up
        d = -d;
        this.screen.insertLine(d, t, t, b);
      }
    }

    return this.emit('scroll');
  }

  _recalculateIndex() {
    var max, emax;

    if (this.detached || !this.scrollable) {
      return 0;
    } // XXX
    // max = this.getScrollHeight() - (this.height - this.iheight);


    max = this._clines.length - (this.height - this.iheight);
    if (max < 0) max = 0;
    emax = this._scrollBottom() - (this.height - this.iheight);
    if (emax < 0) emax = 0;
    this.childBase = Math.min(this.childBase, Math.max(emax, max));

    if (this.childBase < 0) {
      this.childBase = 0;
    } else if (this.childBase > this.baseLimit) {
      this.childBase = this.baseLimit;
    }
  }

  resetScroll() {
    if (!this.scrollable) return;
    this.childOffset = 0;
    this.childBase = 0;
    return this.emit('scroll');
  }

  getScrollHeight() {
    return Math.max(this._clines.length, this._scrollBottom());
  }

  getScrollPerc(s) {
    var pos = this.lpos || this._getCoords();

    if (!pos) return s ? -1 : 0;
    var height = pos.yl - pos.yi - this.iheight,
        i = this.getScrollHeight(),
        p;

    if (height < i) {
      if (this.alwaysScroll) {
        p = this.childBase / (i - height);
      } else {
        p = (this.childBase + this.childOffset) / (i - 1);
      }

      return p * 100;
    }

    return s ? -1 : 0;
  }

  setScrollPerc(i) {
    // XXX
    // var m = this.getScrollHeight();
    var m = Math.max(this._clines.length, this._scrollBottom());
    return this.scrollTo(i / 100 * m | 0);
  }

} // XXX Potentially use this in place of scrollable checks elsewhere.


ScrollableBox.prototype.__defineGetter__('reallyScrollable', function () {
  if (this.shrink) return this.scrollable;
  return this.getScrollHeight() > this.height;
});
/**
 * Expose
 */


var _default = ScrollableBox;
exports.default = _default;

},{"./box":89,"@babel/runtime/helpers/interopRequireDefault":1}],96:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _scrollablebox = _interopRequireDefault(require("./scrollablebox"));

/**
 * scrollabletext.js - scrollable text element for blessed
 * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).
 * https://github.com/chjj/blessed
 */

/**
 * Modules
 */
class ScrollableText extends _scrollablebox.default {
  /**
   * ScrollableText
   */
  constructor(options) {
    options = options || {};
    options.alwaysScroll = true;
    super(options);
    this.type = 'scrollable-text';
  }

}
/**
 * Expose
 */


var _default = ScrollableText;
exports.default = _default;

},{"./scrollablebox":95,"@babel/runtime/helpers/interopRequireDefault":1}],97:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = _interopRequireDefault(require("./element"));

/**
 * text.js - text element for blessed
 * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).
 * https://github.com/chjj/blessed
 */

/**
 * Modules
 */
class Text extends _element.default {
  /**
   * Text
   */
  constructor(options) {
    options = options || {};
    options.shrink = true;
    super(options);
    this.type = 'text';
  }

}
/**
 * Expose
 */


var _default = Text;
exports.default = _default;

},{"./element":90,"@babel/runtime/helpers/interopRequireDefault":1}],98:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _logger = _interopRequireDefault(require("../log/logger"));

var _fs = _interopRequireDefault(require("fs"));

var _consolewindow = _interopRequireDefault(require("./consolewindow"));

var _path = _interopRequireDefault(require("path"));

var _argumentParser = _interopRequireDefault(require("./argument-parser"));

var _ai2 = _interopRequireDefault(require("../commands/types/ai"));

var _banip2 = _interopRequireDefault(require("../commands/types/banip"));

var _exit2 = _interopRequireDefault(require("../commands/types/exit"));

var _explode2 = _interopRequireDefault(require("../commands/types/explode"));

var _help2 = _interopRequireDefault(require("../commands/types/help"));

var _kick2 = _interopRequireDefault(require("../commands/types/kick"));

var _room2 = _interopRequireDefault(require("../commands/types/room"));

var _run2 = _interopRequireDefault(require("../commands/types/run"));

var _say2 = _interopRequireDefault(require("../commands/types/say"));

var _service2 = _interopRequireDefault(require("../commands/types/service"));

var _settps2 = _interopRequireDefault(require("../commands/types/settps"));

var _status2 = _interopRequireDefault(require("../commands/types/status"));

var _tps2 = _interopRequireDefault(require("../commands/types/tps"));

var _unban2 = _interopRequireDefault(require("../commands/types/unban"));

__dirname = "/Users/Temich/PycharmProjects/tanks/src/server/console";
const CommandList = {
  ai: _ai2.default,
  banip: _banip2.default,
  exit: _exit2.default,
  explode: _explode2.default,
  help: _help2.default,
  kick: _kick2.default,
  room: _room2.default,
  run: _run2.default,
  say: _say2.default,
  service: _service2.default,
  settps: _settps2.default,
  status: _status2.default,
  tps: _tps2.default,
  unban: _unban2.default
};

class Console {
  /**
   * @type {Server}
   */

  /**
   * @type {Logger}
   */
  constructor() {
    this.observingRoom = void 0;
    this.visible = void 0;
    this.prompt = void 0;
    this.tabCompleteIndex = void 0;
    this.tabCompletions = void 0;
    this.window = void 0;
    this.currentLogger = void 0;
    this.commands = new Map();
    this.server = null;
    this.logger = null;
    this.server = null;
    this.observingRoom = null;
    this.visible = true;
    this.prompt = null;
    this.tabCompleteIndex = null;
    this.tabCompletions = null;
    this.logger = _logger.default.global;
    this.loadCommands();
  }

  createWindow() {
    this.window = new _consolewindow.default(); // Shift-tab feature doesn't work
    // in WebStorm internal console.

    this.window.on("tab", shift => {
      if (this.tabCompletions) {
        if (shift) {
          this.tabCompletePrevious();
        } else {
          this.tabCompleteNext();
        }
      } else {
        this.tabCompleteBegin(this.window.consoleTextbox.value, shift);
      }
    });
    this.window.on("keypress", () => {
      this.tabComplete();
    });
    this.window.on("exit", () => {
      this.commands.get("exit").onPerform([]);
    });
    this.window.on("command", command => {
      this.evaluate(command);
    });
    this.logger.addDestination(this.window.destination);
  }

  tabCompleteBegin(line, shift) {
    let args = _argumentParser.default.parseArguments(line);

    if (args.length <= 1) {
      this.tabCompletions = [];

      for (let command of this.commands.values()) {
        let name = command.getName();

        if (args.length === 0 || name.startsWith(args[0])) {
          this.tabCompletions.push(name);
        }
      }

      if (this.tabCompletions.length > 1) this.logger.log(this.tabCompletions.join(", "));
    } else {
      let command = this.commands.get(args[0]);

      if (command) {
        let prefix = _argumentParser.default.parseArguments(line, true).slice(0, -1).join(" ") + " ";
        let completions = command.onTabComplete(args.slice(1));

        if (completions.length) {
          if (completions.length > 1) {
            this.logger.log(completions.join(", "));
          }

          this.tabCompletions = completions.map(arg => {
            if (arg.indexOf(" ") !== -1) {
              arg = "'" + arg + "'";
            }

            return prefix + arg;
          });
        }
      }
    }

    if (this.tabCompletions && this.tabCompletions.length) {
      if (this.tabCompletions.length > 1) {
        if (shift) {
          this.tabCompleteIndex = this.tabCompletions.length;
          this.tabCompletePrevious();
        } else {
          this.tabCompleteIndex = -1;
          this.tabCompleteNext();
        }

        return;
      }

      this.window.setLine(this.tabCompletions[0]);
    }

    this.tabCompletions = null;
  }

  tabCompletePrevious() {
    this.tabCompleteIndex--;
    if (this.tabCompleteIndex < 0) this.tabCompleteIndex = this.tabCompletions.length - 1;
    this.window.setLine(this.tabCompletions[this.tabCompleteIndex]);
  }

  tabCompleteNext() {
    this.tabCompleteIndex++;

    if (this.tabCompleteIndex >= this.tabCompletions.length) {
      this.tabCompleteIndex = 0;
    }

    this.window.setLine(this.tabCompletions[this.tabCompleteIndex]);
  }

  tabComplete() {
    this.tabCompletions = null;
    this.tabCompleteIndex = null;
  }

  evaluate(line) {
    line = line.trim();
    this.logger.log("> §!FFF;" + line);
    if (line.length === 0) return;

    let command = _argumentParser.default.parseArguments(line);

    if (!command.length || command[0].length === 0) return;
    let handle = this.commands.get(command[0]);

    if (handle) {
      this.callHandle(handle, command.slice(1));
    } else {
      this.logger.log("§F00;Unknown command: '" + command[0] + "'");
    }
  }

  callHandle(handle, args) {
    if (handle.requiresRoom() && !this.observingRoom) {
      this.logger.log("§F00;You should be in a room for executing this command");
    } else {
      handle.onPerform(args);
    }
  }

  switchToLogger(logger) {
    if (this.currentLogger) {
      this.currentLogger.removeDestination(this.logger);
    }

    logger.addDestination(this.logger);
    this.currentLogger = logger;
  }

  runScript(name, index) {
    const file = _path.default.resolve(__dirname, "..", "scripts", name + ".script");

    if (!_fs.default.existsSync(file)) {
      this.logger.log("§F00;Could not find script named '" + name + "'.");
      return;
    }

    this.logger.log("§FF0;Running script '" + name + "'");

    const commands = _fs.default.readFileSync(file, 'utf8').split("\n");

    for (let i = index || 0; i < commands.length; i++) {
      const command = commands[i];
      this.evaluate(command);
    }
  }

  loadCommands() {
    for (let constructor of Object.values(CommandList)) {
      let command = new constructor({
        console: this
      });
      this.commands.set(command.getName(), command);
    }
  }

}

var _default = Console;
exports.default = _default;

},{"../commands/types/ai":60,"../commands/types/banip":61,"../commands/types/exit":62,"../commands/types/explode":63,"../commands/types/help":64,"../commands/types/kick":65,"../commands/types/room":66,"../commands/types/run":70,"../commands/types/say":71,"../commands/types/service":72,"../commands/types/settps":73,"../commands/types/status":74,"../commands/types/tps":75,"../commands/types/unban":76,"../log/logger":104,"./argument-parser":77,"./consolewindow":99,"@babel/runtime/helpers/interopRequireDefault":1,"fs":"fs","path":29}],99:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _eventemitter = _interopRequireDefault(require("../../utils/eventemitter"));

var _loggerDestination = _interopRequireDefault(require("../log/logger-destination"));

var _blessed = _interopRequireDefault(require("./blessed-fork/lib/blessed"));

var _prompt = _interopRequireDefault(require("./blessed-fork/lib/widgets/prompt"));

class WindowDestination extends _loggerDestination.default {
  constructor(window) {
    super();
    this.window = void 0;
    this.window = window;
  }

  log(value) {
    this.window.write(value);
  }

}

class HistoryEntry {
  constructor(text, cursorPos) {
    this.text = void 0;
    this.cursorPos = void 0;
    this.text = text;
    this.cursorPos = cursorPos;
  }

  storeState(console) {
    this.text = console.consoleTextbox.value;
    this.cursorPos = console.consoleTextbox.cursorPosition;
  }

  restoreState(console) {
    console.consoleTextbox.setValue(this.text);
    console.consoleTextbox.setCursorPosition(this.cursorPos);
  }

}

class ConsoleWindow extends _eventemitter.default {
  constructor() {
    super();
    this.destination = void 0;
    this.waitsForRender = void 0;
    this.history = void 0;
    this.historyIndex = void 0;
    this.currentHistoryEntry = void 0;
    this.lines = void 0;
    this.screen = void 0;
    this.consoleTextbox = void 0;
    this.scrollView = void 0;
    this.promptLabel = void 0;
    this.prompt = void 0;
    this.destination = new WindowDestination(this);
    this.waitsForRender = false;
    this.history = [];
    this.historyIndex = null;
    this.currentHistoryEntry = new HistoryEntry(null, 0);
    this.lines = 0;
    this.screen = new _blessed.default.Screen({
      smartCSR: true
    });
    this.screen.program.on("keypress", (key, data) => {
      if (data.name === "tab") {
        this.consoleTextbox.keyable = false;
        this.emit("tab", data.shift);
      } else {
        this.consoleTextbox.keyable = true;
        this.emit("keypress");
      }
    });
    this.scrollView = new _blessed.default.ScrollableText({
      top: 0,
      left: 0,
      right: 0,
      bottom: 1,
      scrollable: true,
      mouse: true,
      keys: true,
      style: {
        fg: 'white',
        bg: 'black'
      }
    });
    this.consoleTextbox = new _blessed.default.Prompt({
      bottom: 0,
      left: 0,
      right: 0,
      height: 1,
      style: {
        fg: 'white',
        bg: 'black'
      },
      keys: true
    });
    this.promptLabel = new _blessed.default.Text({
      bottom: 0,
      left: 0,
      width: 10,
      height: 1,
      style: {
        fg: 'white',
        bg: 'black'
      }
    });
    this.screen.append(this.consoleTextbox);
    this.screen.append(this.scrollView); //this.screen.append(this.promptLabel)

    this.consoleTextbox.key(["C-c"], () => this.emit("exit"));
    this.consoleTextbox.key(["enter"], () => {
      const command = this.consoleTextbox.value;
      this.addHistoryEntry(command);
      this.emit("command", command);
      this.consoleTextbox.setValue("");
      this.render();
    });
    this.consoleTextbox.key(["up"], () => this.historyGoUp());
    this.consoleTextbox.key(["down"], () => this.historyGoDown());
    this.refocus();
    this.render();
  }

  addHistoryEntry(command) {
    let pushHistoryEntry = true;

    if (this.history.length > 0) {
      if (this.historyIndex === null) {
        const index = this.history.length - 1;

        if (this.history[index].text === command) {
          this.history[index].cursorPos = this.consoleTextbox.cursorPosition;
          pushHistoryEntry = false;
        }
      }
    }

    if (pushHistoryEntry) {
      this.history.push(new HistoryEntry(command, this.consoleTextbox.cursorPosition));
    }

    this.historyIndex = null;
  }

  historyGoUp() {
    if (this.historyIndex === null) {
      if (this.history.length > 0) {
        this.currentHistoryEntry.storeState(this);
        this.historyIndex = this.history.length - 1;
      } else {
        return;
      }
    } else {
      this.history[this.historyIndex].storeState(this);
      this.historyIndex--;
    }

    if (this.historyIndex < 0) this.historyIndex = 0;
    this.history[this.historyIndex].restoreState(this);
    this.render();
  }

  historyGoDown() {
    if (this.historyIndex === null) return;
    this.history[this.historyIndex].storeState(this);
    this.historyIndex++;

    if (this.historyIndex >= this.history.length) {
      this.historyIndex = null;
      this.currentHistoryEntry.restoreState(this);
    } else {
      this.history[this.historyIndex].restoreState(this);
    }

    this.render();
  }

  write(text) {
    text = text.split("\n");
    this.scrollView.insertLine(this.lines, text);
    this.scrollView.setScrollPerc(100);
    this.lines += text.length;
    this.render();
  }

  setPrompt(prompt) {
    this.prompt = prompt;
    prompt += "> ";
    this.promptLabel.content = prompt;
    this.promptLabel.width = prompt.length;
    this.consoleTextbox.left = prompt.length;
  }

  render() {
    if (this.waitsForRender) return;
    this.waitsForRender = true;
    setImmediate(() => {
      this.screen.render();
      this.waitsForRender = false;
    });
  }

  refocus() {
    if (!this.screen.focused || !(this.screen.focused instanceof _prompt.default)) this.consoleTextbox.focus();
  }

  setLine(text) {
    this.consoleTextbox.setValue(text);
    this.render();
  }

}

var _default = ConsoleWindow;
exports.default = _default;

},{"../../utils/eventemitter":127,"../log/logger-destination":103,"./blessed-fork/lib/blessed":79,"./blessed-fork/lib/widgets/prompt":93,"@babel/runtime/helpers/interopRequireDefault":1}],100:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mongodb = require("mongodb");

var _preferences = _interopRequireDefault(require("../preferences/preferences"));

class DB {
  /**
   * @type DB
   */

  /**
   * @type string
   */
  constructor() {
    this.url = void 0;
    this.client = void 0;
    this.db = void 0;
    let auth = null;

    const url = _preferences.default.string("database.url");

    const username = _preferences.default.stringOptional("database.user");

    const db = _preferences.default.string("database.db");

    if (username !== null) {
      const password = _preferences.default.string("database.password");

      auth = {
        user: username,
        password: password
      };
    }

    this.url = url;
    this.db = db;
    this.client = new _mongodb.MongoClient(this.url, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      auth: auth
    });
  }

  async connect() {
    await this.client.connect();
    this.client.db(this.db);
  }

  async disconnect(force) {
    await this.client.close(force);
  }

}

DB.instance = void 0;
var _default = DB;
exports.default = _default;

},{"../preferences/preferences":106,"@babel/runtime/helpers/interopRequireDefault":1,"mongodb":"mongodb"}],101:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _abstracteffect = _interopRequireDefault(require("/Users/Temich/PycharmProjects/tanks/src/effects/abstracteffect"));

class ServerEffect extends _abstracteffect.default {
  constructor(...args) {
    super(...args);
    this.Types = void 0;
  }

  /**
   * Finds server-side implementation of the effect model
   * @param model {EffectModel}
   * @returns {ServerEffect}
   */
  static fromModel(model) {
    let clazz =
    /** @type Class<ServerEffect> */
    this.Types.get(model.constructor);
    if (clazz) return new clazz(model);
    return null;
  }

}

ServerEffect.shouldSynchroniseRemoval = true;
var _default = ServerEffect;
exports.default = _default;

},{"/Users/Temich/PycharmProjects/tanks/src/effects/abstracteffect":33,"@babel/runtime/helpers/interopRequireDefault":1}],102:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _servereffect = _interopRequireDefault(require("../servereffect"));

var _worldeffectmodel = _interopRequireDefault(require("/Users/Temich/PycharmProjects/tanks/src/effects/world/worldeffectmodel"));

/**
 * This class unites all the world effect implementations on the server
 * side. If the effect is visual and should not have a separate logic
 * on the server side (does not scatter players, does not break
 * blocks, etc.), it is enough to set only its {@link WorldEffectModel} and
 * not to use this class. You also should not initialize this class
 * directly, use {@link ServerWorldEffect#fromModel fromModel} static method
 * instead
 */
class ServerWorldEffect extends _servereffect.default {
  /**
   * @type WorldEffectModel
   */

  /**
   * @type ServerGameWorld
   */

  /**
   * @private
   * Creates server-side world effect class, linked to specific
   * {@link WorldEffectModel} and {@link ServerGameWorld}. This
   * constructor should not be called directly, use
   * {@link ServerWorldEffect#fromModel fromModel} static method
   * instead
   * @param {WorldEffectModel} model
   * @param {ServerGameWorld} world
   */
  constructor(model, world) {
    super(model);
    this.model = void 0;
    this.world = void 0;
    this.model = model;
    this.world = world;
  } // noinspection JSCheckFunctionSignatures

  /**
   * Wraps the {@link WorldEffectModel} in corresponding
   * {@link ServerWorldEffect} class. If this effect has any additional
   * server-side logic, the instance of appropriate subclass will be
   * returned. Otherwise, this method returns {@link ServerWorldEffect}
   * instance
   * @param model {WorldEffectModel} Effect model to wrap
   * @param world {ServerWorldEffect} A world which this effect will be created in
   * @returns {ServerWorldEffect}
   */


  static fromModel(model, world) {
    let clazz =
    /** @type Class<ServerWorldEffect> */
    this.Types.get(model.constructor);
    if (clazz) return new clazz(model, world); // If this model has no server-side implementation, return
    // default class

    if (model instanceof _worldeffectmodel.default) {
      return new ServerWorldEffect(model, world);
    }

    throw new TypeError("The 'model' argument should inherit WorldEffectModel");
  }

}

var _default = ServerWorldEffect;
exports.default = _default;

},{"../servereffect":101,"/Users/Temich/PycharmProjects/tanks/src/effects/world/worldeffectmodel":36,"@babel/runtime/helpers/interopRequireDefault":1}],103:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class LoggerDestination {
  /**
   * @abstract
   */
  log() {}

  close() {}

}

var _default = LoggerDestination;
exports.default = _default;

},{}],104:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _util = _interopRequireDefault(require("util"));

var _color = _interopRequireDefault(require("/Users/Temich/PycharmProjects/tanks/src/utils/color"));

class Logger {
  constructor() {
    this.destinations = void 0;
    this.redirectToGlobal = void 0;
    this.prefix = void 0;
    this.destinations = [];
    this.redirectToGlobal = true;
    this.prefix = null;
  }

  setPrefix(prefix) {
    this.prefix = "[" + prefix + "] ";
  }

  addDestination(destination) {
    this.removeDestination(destination);
    this.destinations.push(destination);
  }

  removeDestination(destination) {
    for (let i = this.destinations.length - 1; i >= 0; i--) {
      if (this.destinations[i].id === destination.id) {
        this.destinations.splice(i, 1);
        break;
      }
    }
  }

  static callDestinations(destinations, text) {
    for (let i = destinations.length - 1; i >= 0; i--) {
      destinations[i].log(text);
    }
  }

  static convertChatColors(text) {
    return _color.default.replace(text, (color, bold, text) => {
      let chalk = bold ? _chalk.default.bold : _chalk.default;

      if (color) {
        chalk = chalk.hex(color);
      }

      return chalk(text);
    });
  }

  log(text) {
    if (typeof text == "string") {
      text = Logger.convertChatColors(text);
    } else {
      text = _util.default.inspect(text, {
        depth: 0,
        colors: true
      });
    }

    if (this.prefix) text = this.prefix + text;

    if (this.redirectToGlobal) {
      Logger.callDestinations(Logger.global.destinations, text);
    } else {
      Logger.callDestinations(this.destinations, text);
    }
  }

}

Logger.global = new Logger();
var _default = Logger;
exports.default = _default;

},{"/Users/Temich/PycharmProjects/tanks/src/utils/color":125,"@babel/runtime/helpers/interopRequireDefault":1,"chalk":"chalk","util":7}],105:[function(require,module,exports){
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _server = _interopRequireDefault(require("./server"));

var _db = _interopRequireDefault(require("./db/db"));

var _logger = _interopRequireDefault(require("./log/logger"));

var _console = _interopRequireDefault(require("./console/console"));

var _bootcommand = _interopRequireDefault(require("./commands/bootcommand"));

var _preferences = _interopRequireDefault(require("./preferences/preferences"));

var packageJson = _interopRequireWildcard(require("../../package.json"));

var _url = require("url");

const serverStartupTime = Date.now();

async function initDatabase() {
  if (_preferences.default.boolean("database.enabled")) {
    _logger.default.global.log("Connecting to database");

    _db.default.instance = new _db.default();

    try {
      await _db.default.instance.connect();
    } catch (error) {
      _logger.default.global.log("Failed to connect to database");

      _logger.default.global.log(error);
    }
  }
}

async function configureClusterCommunication(server) {
  if (_preferences.default.boolean("cluster.enabled")) {
    let clusterPortSettingPath = "cluster.hub-port";
    let clusterPort;

    const clusterPortSetting = _preferences.default.value(clusterPortSettingPath);

    if (clusterPortSetting === "inherit-game-port") {
      clusterPort = server.clientPort;
    } else {
      _preferences.default.validatePort(clusterPortSetting, clusterPortSettingPath);

      clusterPort = Number(clusterPortSetting);
    }

    server.setClusterPort(clusterPort);
    let hubUrl = new _url.URL(_preferences.default.string("cluster.hub-address"));
    if (hubUrl.port === "") hubUrl.port = String(clusterPort);
    hubUrl.pathname = "/cluster-link";
    server.setSocketServerIP(hubUrl.href);
    server.setClusterPassword(_preferences.default.string("cluster.hub-access-key"));
  }
}

async function initialize() {
  await _preferences.default.read();
  const serverConsole = new _console.default();
  serverConsole.createWindow();

  _logger.default.global.log(`Loaded libraries within ${(Date.now() - serverStartupTime) / 1000}s`);

  let server;

  try {
    const bootCommand = new _bootcommand.default({
      console: serverConsole
    });
    serverConsole.callHandle(bootCommand, process.argv);

    _preferences.default.override(bootCommand.preferencesOverride);

    await initDatabase();
    server = new _server.default();
    server.setClientPort(_preferences.default.port("port"));
    server.console = serverConsole;
    serverConsole.server = server;
    await configureClusterCommunication(server);
    bootCommand.runPostInit();
  } catch (e) {
    // Cleaning up everything that would cause program to stay active
    if (server) server.terminate();else if (serverConsole) serverConsole.window.screen.destroy();
    throw e;
  }
}

const serverInitializeTime = Date.now();
initialize().then(() => {
  _logger.default.global.log(`§0F0;Server v${packageJson.version} has been started successfully §444;(${(Date.now() - serverInitializeTime) / 1000}s)\n` + `"777; ⭑ §;Type \"help\" for more information`);
}).catch(e => {
  console.error("Failed to start server");
  console.error(e);
});

},{"../../package.json":32,"./commands/bootcommand":57,"./console/console":98,"./db/db":100,"./log/logger":104,"./preferences/preferences":106,"./server":108,"@babel/runtime/helpers/interopRequireDefault":1,"@babel/runtime/helpers/interopRequireWildcard":2,"url":"url"}],106:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _json = _interopRequireDefault(require("json5"));

var _path = _interopRequireDefault(require("path"));

var _fs = require("fs");

__dirname = "/Users/Temich/PycharmProjects/tanks/src/server/preferences";

const preferencesPath = _path.default.resolve(__dirname, "../preferences.json");

const defaultsPath = _path.default.resolve(__dirname, "default.json");

class Preferences {
  static async resetPreferences() {
    return _fs.promises.copyFile(defaultsPath, preferencesPath);
  }

  static async read() {
    await _fs.promises.access(preferencesPath).catch(async err => {
      if (err.code = "ENOENT") {
        await Preferences.resetPreferences();
      } else {
        throw err;
      }
    }).then(async () => {
      const data = await _fs.promises.readFile(preferencesPath, "utf-8");
      Preferences.root = _json.default.parse(data);
    });
  }

  static override(overrideList) {
    for (let entry of overrideList) {
      this.set(entry.key, entry.value);
    }
  }

  static set(path, value) {
    let prevDirectory = null;
    let lastPathComponent = path[path.length - 1];
    let directory = Preferences.root;

    for (let item of path) {
      if (typeof directory !== "object") {
        return;
      }

      prevDirectory = directory;
      directory = prevDirectory[item];

      if (directory === undefined || directory === null) {
        directory = {};
        prevDirectory[item] = directory;
      }
    }

    prevDirectory[lastPathComponent] = value;
  }
  /**
   * Returns preferences value for key
   * @param {string} path
   * @return {any}
   */


  static value(path) {
    let directory = Preferences.root;

    for (let item of path.split(".")) {
      if (typeof directory != "object" || !directory) {
        return undefined;
      }

      directory = directory[item];
    }

    return directory;
  }
  /**
   * @param path {string} Path to config entry
   * @return {number}
   * @throws if value at given path is not valid port
   */


  static port(path) {
    let value = this.value(path);
    this.validatePort(value, path);
    return value;
  }
  /**
   * @param path {string} Path to config entry
   * @return {number}
   * @throws if value at given path is not a number
   */


  static number(path) {
    let value = this.value(path);
    this.validateNumber(value, path);
    return value;
  }
  /**
   * @param path {string} Path to config entry
   * @return {boolean}
   * @throws if value at given path is not a boolean
   */


  static boolean(path) {
    let value = this.value(path);
    this.validateBoolean(value, path);
    return value;
  }
  /**
   * @param path {string} Path to config entry
   * @return {string}
   * @throws if value at given path is not a string
   */


  static string(path) {
    let value = this.value(path);
    this.validateString(value, path);
    return value;
  }
  /**
   * @param path {string} Path to config entry
   * @return {number | null}
   * @throws if value at given path is not valid port or null
   */


  static portOptional(path) {
    let value = this.value(path);
    if (value === null || value === undefined) return null;
    this.validatePort(value, path);
    return value;
  }
  /**
   * @param path {string} Path to config entry
   * @return {number | null}
   * @throws if value at given path is not number or null
   */


  static numberOptional(path) {
    let value = this.value(path);
    if (value === null || value === undefined) return null;
    this.validateNumber(value, path);
    return value;
  }
  /**
   * @param path {string} Path to config entry
   * @return {boolean | null}
   * @throws if value at given path is not boolean or null
   */


  static booleanOptional(path) {
    let value = this.value(path);
    if (value === null || value === undefined) return null;
    this.validateBoolean(value, path);
    return value;
  }
  /**
   * @param path {string} Path to config entry
   * @return {string | null}
   * @throws if value at given path is not string or null
   */


  static stringOptional(path) {
    let value = this.value(path);
    if (value === null || value === undefined) return null;
    this.validateString(value, path);
    return value;
  }
  /**
   * Checks if specified value at given path is a valid port
   * @throws if value is not a valid port
   */


  static validatePort(value, path) {
    if (!Number.isInteger(value) || value < 0 || value > 65535 || value !== Math.round(value)) throw new Error("setting at " + path + " should be a valid port (integer in 0...65535 range)");
  }
  /**
   * Checks if specified value at given path is a string
   * @throws if value is not a valid string
   */


  static validateString(value, path) {
    if (typeof value != "string") throw new Error("setting at " + path + " should be string");
  }
  /**
   * Checks if specified value at given path is a number
   * @throws if value is not a number
   */


  static validateNumber(value, path) {
    if (!Number.isInteger(value)) throw new Error("setting at " + path + " should be number");
  }
  /**
   * Checks if specified value at given path is a boolean
   * @throws if value is not a boolean
   */


  static validateBoolean(value, path) {
    if (value !== true && value !== false) throw new Error("setting at " + path + " should be boolean");
  }

}

Preferences.root = null;
var _default = Preferences;
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":1,"fs":"fs","json5":12,"path":29}],107:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _serializable = _interopRequireDefault(require("/Users/Temich/PycharmProjects/tanks/src/serialization/binary/serializable"));

class RoomConfig extends _serializable.default {
  /**
   * @type {string}
   */

  /**
   * @type {string}
   */
  constructor() {
    super();
    this.name = void 0;
    this.map = void 0;
  }

  toBinary(encoder) {
    encoder.writeString(this.name);
    encoder.writeString(this.map);
  }

  static fromBinary(decoder) {
    let name = decoder.readString();
    let map = decoder.readString();
    let instance = new RoomConfig();
    instance.name = name;
    instance.map = map;
    return instance;
  }

}

var _default = RoomConfig;
exports.default = _default;

},{"/Users/Temich/PycharmProjects/tanks/src/serialization/binary/serializable":53,"@babel/runtime/helpers/interopRequireDefault":1}],108:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _universalPortListener = _interopRequireDefault(require("./universal-port-listener"));

var _webserver = _interopRequireDefault(require("./webserver/webserver"));

var _gameSocketPortal = _interopRequireDefault(require("./socket/game-server/game-socket-portal"));

var _clusterSocketPortal = _interopRequireDefault(require("./socket/hub-server/cluster-socket-portal"));

var _serverParticipantClient = _interopRequireDefault(require("./socket/participant-client/server-participant-client"));

var _cpuUsageWatcher = _interopRequireDefault(require("/Users/Temich/PycharmProjects/tanks/src/utils/cpu-usage-watcher.ts"));

class Server {
  /**
   * @type {Map<Number, UniversalPortListener>}
   */

  /**
   * @type {GameSocketPortal}
   */

  /**
   * @type {ClusterSocketPortal}
   */

  /**
   * @type {ServerParticipantClient}
   */

  /**
   * @type {boolean}
   */

  /**
   * @type {boolean}
   */

  /**
   * @type {WebServer}
   */

  /**
   * @type {number | null}
   */

  /**
   * @type {number | null}
   */

  /**
   * @type {number | null}
   */

  /**
   * @type {string | null}
   */

  /**
   * @type {CpuUsageWatcher}
   */
  constructor() {
    this.portListeners = new Map();
    this.gameSocket = null;
    this.clusterSocket = null;
    this.clusterClient = null;
    this.gamePageActive = false;
    this.hubPageActive = false;
    this.webServer = null;
    this.clusterPort = null;
    this.clientPort = null;
    this.clusterServerIP = null;
    this.clusterPassword = null;
    this.cpuUsageWatcher = null;
    this.console = null;
    this.cpuUsageWatcher = new _cpuUsageWatcher.default();
  }

  setHubPageActive(active) {
    this.hubPageActive = active;
    this.setWebServerActive(this.hubPageActive || this.gamePageActive);

    if (this.webServer) {
      this.webServer.hubModule.enabled = active;
    }

    this.setClusterSocketServerActive(active);
    this.setClusterClientActive(!active);
  }

  setGamePageActive(active) {
    this.gamePageActive = active;
    this.setWebServerActive(this.hubPageActive || this.gamePageActive);

    if (this.webServer) {
      this.webServer.gameModule.enabled = active;
    }
  }

  setWebServerActive(active) {
    if (active === !!this.webServer) return;

    if (active) {
      if (this.webServer) return;
      let portListener = this.getPortListener(this.clientPort);
      portListener.retainHTTP();
      this.webServer = new _webserver.default();
      this.webServer.listen(portListener.httpServer);
    } else {
      if (!this.webServer) return;
      this.webServer.disable();
      this.webServer = null;
      this.getPortListener(this.clientPort).retainHTTP();
    }
  }

  setGameSocketActive(active) {
    if (active) {
      if (this.gameSocket) return;
      let portListener = this.getPortListener(this.clientPort);
      portListener.retainWebsocket();
      this.gameSocket = new _gameSocketPortal.default();
      this.gameSocket.bindToWebsocket(portListener.webSocketServer);
    } else {
      if (!this.gameSocket) return;
      this.gameSocket.terminate();
      this.gameSocket = null;
      this.getPortListener(this.clientPort).retainWebsocket();
    }
  }

  setClusterClientActive(active) {
    if (this.clusterServerIP === null) return;

    if (active) {
      if (this.clusterClient) return;
      this.clusterClient = new _serverParticipantClient.default({
        ip: this.clusterServerIP
      });
      this.clusterClient.password = this.clusterPassword;
      this.clusterClient.connectToServer();
    } else {
      if (!this.clusterClient) return;
      this.clusterClient.disconnect();
      this.clusterClient = null;
    }
  }

  setClusterSocketServerActive(active) {
    if (this.clusterPort === null) return;

    if (active) {
      if (this.clusterSocket) return;
      let portListener = this.getPortListener(this.clusterPort);
      portListener.retainWebsocket();
      this.clusterSocket = new _clusterSocketPortal.default();
      this.clusterSocket.password = this.clusterPassword;
      this.clusterSocket.bindToWebsocket(portListener.webSocketServer);
    } else {
      if (!this.clusterSocket) return;
      this.clusterSocket.terminate();
      this.getPortListener(this.clusterPort).releaseWebsocket();
      this.clusterSocket = null;
    }
  }

  isWebServerActive() {
    return !!this.webServer;
  }

  isGameSocketActive() {
    return !!this.gameSocket;
  }

  isClusterClientActive() {
    return !!this.clusterClient;
  }

  isClusterSocketActive() {
    return !!this.clusterSocket;
  }

  getPortListener(port) {
    let cached = this.portListeners.get(port);
    if (cached) return cached;
    let server = new _universalPortListener.default(port);
    this.portListeners.set(port, server);
    return server;
  }

  setClientPort(port) {
    this.clientPort = port;
  }

  setClusterPort(port) {
    this.clusterPort = port;
  }

  setSocketServerIP(ip) {
    this.clusterServerIP = ip;
  }

  setClusterPassword(password) {
    this.clusterPassword = password;
  }

  terminate() {
    this.console.window.screen.destroy();
    this.setHubPageActive(false);
    this.setGamePageActive(false);
    this.setClusterClientActive(false);
    this.setWebServerActive(false);
    this.setClusterSocketServerActive(false);
  }

}

var _default = Server;
exports.default = _default;

},{"./socket/game-server/game-socket-portal":110,"./socket/hub-server/cluster-socket-portal":112,"./socket/participant-client/server-participant-client":113,"./universal-port-listener":118,"./webserver/webserver":123,"/Users/Temich/PycharmProjects/tanks/src/utils/cpu-usage-watcher.ts":126,"@babel/runtime/helpers/interopRequireDefault":1}],109:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _crypto = _interopRequireDefault(require("crypto"));

class ClusterHandshake {
  constructor() {
    this.handshakeBytes = void 0;
  }

  static generateSalt() {
    return _crypto.default.randomBytes(this.handshakeBytes);
  }

  static checkKey(password, salt, key, callback) {
    this.createKey(password, salt, (error, expectedKey) => {
      if (key) {
        let expectedKeyBytes = new Uint8Array(expectedKey);

        for (let i = 0; i < this.handshakeBytes; i++) {
          if (expectedKeyBytes[i] !== key[i]) {
            callback(false);
            return;
          }
        }

        callback(true);
        return;
      }

      callback(false);
    });
  }

  static createKey(password, salt, callback) {
    _crypto.default.scrypt(password, salt, this.handshakeBytes, callback);
  }

}

ClusterHandshake.handshakeBytes = 32;
var _default = ClusterHandshake;
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":1,"crypto":"crypto"}],110:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _socketPortal = _interopRequireDefault(require("../socket-portal"));

var _roomlistrequestpacket = _interopRequireDefault(require("../../../networking/packets/game-packets/roomlistrequestpacket"));

var _roomlistpacket = _interopRequireDefault(require("../../../networking/packets/game-packets/roomlistpacket"));

var _playerroomrequestpacket = _interopRequireDefault(require("../../../networking/packets/game-packets/playerroomrequestpacket"));

var _playerroomchangepacket = _interopRequireDefault(require("../../../networking/packets/game-packets/playerroomchangepacket"));

var _pako = _interopRequireDefault(require("pako"));

class GameSocketPortal extends _socketPortal.default {
  /**
   * @type {Map<string, Room>}
   */
  constructor(config) {
    super(config);
    this.roomsInterval = void 0;
    this.server = void 0;
    this.games = new Map();
    this.config = config || {};
    this.setupRoomsUpdate();
  }

  setupRoomsUpdate() {
    this.roomsInterval = setInterval(() => this.updateRooms(), 1000);
  }

  stopRoomUpdate() {
    clearInterval(this.roomsInterval);
  }

  handleRequest(request) {
    // Only handling /game-socket requests
    if (request.resourceURL.path === "/game-socket") {
      super.handleRequest(request);
    }
  }

  updateRooms() {
    if (this.clients.size === 0) {
      return;
    }

    let packet = new _roomlistpacket.default(Array.from(this.games.values()));

    for (let client of this.clients.values()) {
      if (client.data["listeningForRooms"]) {
        packet.sendTo(client);
      }
    }
  }

  terminate() {
    this.logger.log("Closing server...");
    this.stopRoomUpdate();
    super.terminate();
  }
  /**
   * @param client {SocketPortalClient}
   * @param game {Room}
   */


  configureClient(client, game) {
    if (client.game) {
      this.logger.log("Клиент " + client.id + " отключен от игры " + client.game.name);
      client.game.clientDisconnected(client);
    }

    this.logger.log("Клиент " + client.id + " подключен к игре " + game.name);
    game.clientConnected(client);
    client.game = game;
  }

  clientDisconnected(client) {
    super.clientDisconnected(client);

    if (client.game) {
      this.logger.log("Клиент " + client.id + " отключен от игры " + client.game.name);
      client.game.clientDisconnected(client);
    }
  }

  handlePacket(packet, client) {
    super.handlePacket(packet, client);

    if (packet instanceof _roomlistrequestpacket.default) {
      client.data["listeningForRooms"] = packet.request;
    } else if (packet instanceof _playerroomrequestpacket.default) {
      const room = this.games.get(packet.room);

      if (room) {
        if (room.clients.size >= room.maxOnline) {
          _playerroomchangepacket.default.deny(packet.room, "Эта комната переполнена").sendTo(client.connection);
        } else {
          _playerroomchangepacket.default.allow(room.name).sendTo(client.connection);

          this.configureClient(client, room);
        }
      } else {
        _playerroomchangepacket.default.deny(packet.room, "Такой комнаты не существует. Возможно, она была закрыта").sendTo(client.connection);
      }
    }

    if (packet) client.game.clientMessage(client, packet);
  }

  getFreeGame() {
    let game,
        online = -1;

    for (let eachGame of this.games.values()) {
      const eachOnline = eachGame.clients.size;

      if (eachOnline < eachGame.maxOnline) {
        if (eachOnline > online) {
          game = eachGame;
          online = eachOnline;
        }
      }
    }

    return game;
  }

  clientConnected(client) {
    let connection = client.connection;

    if (this.banned.indexOf(connection.remoteAddress) !== -1) {
      connection.close(1000, "Администратор внёс Ваш ip в бан-лист");
      return;
    }

    if (this.games.size === 0) {
      connection.close(1000, "Нет запущенных игр, попробуйте позже");
      return;
    }

    let game = this.getFreeGame();

    if (!game) {
      connection.close(1000, "Сервер переполнен, попробуйте позже");
      return;
    }

    this.configureClient(client, game);
  }
  /**
   * @async
   * Creates a room with specified config
   * @param config {RoomConfig}
   */


  async createRoom(config) {
    const gzip = await fs.promise.readFile(config.map);

    const data = _pako.default.inflate(gzip);

    const decoder = new BinaryDecoder({
      largeIndices: true
    });
    decoder.reset();
    decoder.readData(data.buffer);
    const map = GameMap.fromBinary(decoder);
    const game = new Game({
      name: config.name,
      server: this.server,
      map: map
    });
    this.games.set(config.name, game);
  }

}

var _default = GameSocketPortal;
exports.default = _default;

},{"../../../networking/packets/game-packets/playerroomchangepacket":45,"../../../networking/packets/game-packets/playerroomrequestpacket":46,"../../../networking/packets/game-packets/roomlistpacket":47,"../../../networking/packets/game-packets/roomlistrequestpacket":48,"../socket-portal":117,"@babel/runtime/helpers/interopRequireDefault":1,"pako":13}],111:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _socketPortalClient = _interopRequireDefault(require("../socket-portal-client"));

class ClusterSocketPortalClient extends _socketPortalClient.default {
  constructor(config) {
    super(config);
    this.rooms = [];
  }

}

var _default = ClusterSocketPortalClient;
exports.default = _default;

},{"../socket-portal-client":116,"@babel/runtime/helpers/interopRequireDefault":1}],112:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _socketPortal = _interopRequireDefault(require("../socket-portal"));

var _clusterHandshake = _interopRequireDefault(require("../cluster-handshake"));

var _handshakePacket = _interopRequireDefault(require("/Users/Temich/PycharmProjects/tanks/src/networking/packets/cluster-packets/handshake-packet"));

var _handshakeSuccessPacket = _interopRequireDefault(require("/Users/Temich/PycharmProjects/tanks/src/networking/packets/cluster-packets/handshake-success-packet"));

var _roomCreationRequestPacket = _interopRequireDefault(require("/Users/Temich/PycharmProjects/tanks/src/networking/packets/cluster-packets/room-creation-request-packet"));

var _roomConfig = _interopRequireDefault(require("/Users/Temich/PycharmProjects/tanks/src/server/room/room-config"));

var _clusterSocketPortalClient = _interopRequireDefault(require("./cluster-socket-portal-client"));

var _chalk = _interopRequireDefault(require("chalk"));

class ClusterSocketPortal extends _socketPortal.default {
  /**
   * @type {string}
   */
  constructor(config) {
    super(config);
    this.password = void 0;
    this.logger.setPrefix("CLink hub");
  }

  handleRequest(request) {
    // Only handling /cluster-link requests
    if (request.resourceURL.path === "/cluster-link") {
      super.handleRequest(request);
    }
  }

  authorizeClient(client) {
    let salt = _clusterHandshake.default.generateSalt();

    client.data.authorizationSalt = salt;
    new _handshakePacket.default(new Int8Array(salt)).sendTo(client.connection);
  }

  handleUnauthorizedPacket(packet, client) {
    if (!client.data.authorizationSalt) {
      // Prevent duplicating authorization packets
      return;
    }

    if (packet instanceof _handshakePacket.default) {
      let response = packet.handshakeData;
      let salt = client.data.authorizationSalt;

      _clusterHandshake.default.checkKey(this.password, salt, response, success => {
        if (success) this.handleAuthorizationSuccess(client);else this.handleAuthorizationFail(client);
      });
    } else {
      this.handleAuthorizationFail(client);
    }
  }

  handleAuthorizationFail(client) {
    this.logger.log(_chalk.default.redBright(`Rejected connection from origin ${client.websocket.remoteAddress} due to failed handshake`));
    client.connection.close("Access denied");
    client.data.authorizationSalt = null;
  }

  handleAuthorizationSuccess(client) {
    this.logger.log(`The game server from origin ${client.websocket.remoteAddress} has been connected`);
    client.data.authorized = true;
    new _handshakeSuccessPacket.default().sendTo(client.connection);
    let roomConfig = new _roomConfig.default();
    roomConfig.name = "test room";
    roomConfig.map = "trafalgara.map";
    new _roomCreationRequestPacket.default(roomConfig).sendTo(client.connection);
  }

  clientConnected(client) {
    client.data.authorized = false;
    this.authorizeClient(client);
  }

  clientDisconnected(client) {}

  handleAuthorizedPacket(packet, client) {} // noinspection JSCheckFunctionSignatures

  /**
   * Called when client sends packet
   * @param packet {BinaryPacket} Received packet
   * @param client {ClusterSocketPortalClient} Packet sender
   */


  handlePacket(packet, client) {
    if (client.data.authorized) this.handleAuthorizedPacket(packet, client);else this.handleUnauthorizedPacket(packet, client);
  }

}

ClusterSocketPortal.clientClass = _clusterSocketPortalClient.default;
var _default = ClusterSocketPortal;
exports.default = _default;

},{"../cluster-handshake":109,"../socket-portal":117,"./cluster-socket-portal-client":111,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/cluster-packets/handshake-packet":41,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/cluster-packets/handshake-success-packet":42,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/cluster-packets/room-creation-request-packet":43,"/Users/Temich/PycharmProjects/tanks/src/server/room/room-config":107,"@babel/runtime/helpers/interopRequireDefault":1,"chalk":"chalk"}],113:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _serverWebSocketClient = _interopRequireDefault(require("../server-web-socket-client"));

var _handshakePacket = _interopRequireDefault(require("/Users/Temich/PycharmProjects/tanks/src/networking/packets/cluster-packets/handshake-packet"));

var _handshakeSuccessPacket = _interopRequireDefault(require("/Users/Temich/PycharmProjects/tanks/src/networking/packets/cluster-packets/handshake-success-packet"));

var _roomCreationRequestPacket = _interopRequireDefault(require("/Users/Temich/PycharmProjects/tanks/src/networking/packets/cluster-packets/room-creation-request-packet"));

var _logger = _interopRequireDefault(require("/Users/Temich/PycharmProjects/tanks/src/server/log/logger"));

var _clusterHandshake = _interopRequireDefault(require("../cluster-handshake"));

var _serverParticipantConnection = _interopRequireDefault(require("./server-participant-connection"));

class ServerParticipantClient extends _serverWebSocketClient.default {
  /**
   * @type {string}
   */

  /**
   * @type {boolean}
   */
  constructor(config) {
    super(config);
    this.password = void 0;
    this.reconnect = false;
    this.logger.setPrefix("CLink Client");
    this.on(_handshakePacket.default, packet => {
      this.logger.log("Performing handshake");
      let salt = packet.handshakeData;

      _clusterHandshake.default.createKey(this.password, salt, (error, key) => {
        if (error) {
          // Something went wrong
          this.connection.close("Failed to generate handshake key: " + error);
        } else {
          // Sending back the generated handshake key
          packet.handshakeData = new Uint8Array(key);
          packet.sendTo(this.connection);
        }
      });
    });
    this.on(_handshakeSuccessPacket.default, () => {
      this.onOpen();
    });
    this.on(_roomCreationRequestPacket.default, packet => {
      _logger.default.global.log("Received room creation request: " + JSON.stringify(packet.config));
    });
    this.on("close", (code, reason) => {
      this.logger.log("§F77;Connection to hub was closed: " + reason);
      this.reconnectDelayed();
    });
    this.on("error", error => {
      this.logger.log("§F77;Failed to connect to hub: " + error);
      this.reconnectDelayed();
    });
  }

  connectToServer() {
    this.logger.log("Connecting to hub at §77F;" + this.config.ip);
    super.connectToServer();
  }

  onConnection() {
    this.logger.log("Answer received, waiting for handshake request");
  }

  onOpen() {
    super.onOpen();
    this.logger.log("§7F7;Successfully connected to the hub");
  }

  createConnection() {
    return new _serverParticipantConnection.default(this);
  }

  reconnectDelayed() {
    if (!this.reconnect) return;
    this.webSocketConnection = null;
    this.client = null;
    setTimeout(() => {
      if (this.reconnect) this.connectToServer();
    }, this.reconnectionDelay);
  }

  isConnecting() {
    // Since we don't want to drop packets,
    // cluster client is always available to
    // enqueue them.
    return true;
  }

  disconnect(reason) {
    this.reconnect = false;
    super.disconnect(reason);
  }

}

var _default = ServerParticipantClient;
exports.default = _default;

},{"../cluster-handshake":109,"../server-web-socket-client":115,"./server-participant-connection":114,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/cluster-packets/handshake-packet":41,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/cluster-packets/handshake-success-packet":42,"/Users/Temich/PycharmProjects/tanks/src/networking/packets/cluster-packets/room-creation-request-packet":43,"/Users/Temich/PycharmProjects/tanks/src/server/log/logger":104,"@babel/runtime/helpers/interopRequireDefault":1}],114:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _clientConnection = _interopRequireDefault(require("../../../networking/client-connection"));

class ServerParticipantConnection extends _clientConnection.default {
  close(reason) {
    // Calling `closeConnection` instead of `disconnect` here because
    // `disconnect` method prevents client from reconnecting again. We
    // should always try to reconnect to hub in the event that an error
    // occurs that causes the connection to be closed.
    this.client.closeConnection(reason);
  }

}

var _default = ServerParticipantConnection;
exports.default = _default;

},{"../../../networking/client-connection":40,"@babel/runtime/helpers/interopRequireDefault":1}],115:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _websocket = require("websocket");

var _abstractClient = _interopRequireDefault(require("../../networking/abstract-client"));

var _logger = _interopRequireDefault(require("../log/logger"));

// Since `WebSocketClient` name is reserved by websocket module,
// this class is named like this

/**
 * This class implements a websocket client on Node.js side
 */
class ServerWebSocketClient extends _abstractClient.default {
  /**
   * @type WebSocketClient
   */
  constructor(config) {
    super(config);
    this.webSocketConnection = void 0;
    this.reconnect = void 0;
    this.reconnectionDelay = void 0;
    this.logger = void 0;
    this.client = void 0;
    this.client = null;
    this.webSocketConnection = null;
    this.reconnect = false;
    this.reconnectionDelay = 5000; // ms

    this.logger = new _logger.default();
  }

  connectToServer() {
    if (this.client != null) return;
    this.reconnect = true;
    this.client = new _websocket.client();
    this.client.on("connectFailed", error => this.onError(error));
    this.client.on("connect", connection => {
      this.webSocketConnection = connection;
      this.onConnection();
      connection.on('error', error => this.onError(error));
      connection.on('close', (code, reason) => this.onClose(code, reason));
      connection.on('message', message => this.onMessage(message));
    });
    this.client.connect(this.config.ip);
  }

  onMessage(message) {
    try {
      if (message.type !== "binary") {
        this.logger.log("Received invalid packet");
        this.logger.log("Binary message expected, " + message.type + " received.");
        return;
      }

      super.onData(new Uint8Array(message.binaryData).buffer);
    } catch (e) {
      this.logger.log("Exception while handling packet");
      this.logger.log(e);
    }
  }

  isConnecting() {
    return !!this.client;
  }

  isOpen() {
    return !!this.webSocketConnection;
  }

  writePacket(packet) {
    this.webSocketConnection.sendBytes(Buffer.from(packet));
  }

  disconnect(reason) {
    this.reconnect = false;
    super.disconnect(reason);
    this.closeConnection(reason);
  }

  closeConnection(reason) {
    if (this.webSocketConnection) this.webSocketConnection.close(_websocket.connection.CLOSE_REASON_NORMAL, reason);
    if (this.client) this.client.abort();
  }

}

var _default = ServerWebSocketClient;
exports.default = _default;

},{"../../networking/abstract-client":37,"../log/logger":104,"@babel/runtime/helpers/interopRequireDefault":1,"websocket":"websocket"}],116:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class SocketPortalClient {
  /**
   * @type {Room}
   */
  constructor(config) {
    this.id = void 0;
    this.data = void 0;
    this.websocket = void 0;
    this.connection = void 0;
    this.game = null;
    config = config || {};
    this.id = SocketPortalClient.globalId++;
    this.data = config.data || {};
    this.connection = config.connection;
    this.websocket = config.websocket;
  }

}

SocketPortalClient.globalId = 0;
var _default = SocketPortalClient;
exports.default = _default;

},{}],117:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _socketPortalClient = _interopRequireDefault(require("../socket/socket-portal-client"));

var _binarypacket = _interopRequireDefault(require("../../networking/binarypacket"));

var _logger = _interopRequireDefault(require("../log/logger"));

var _websocketConnection = _interopRequireDefault(require("../websocket-connection"));

/**
 * This class represents a specific socket portal.
 * One WebSocket instance can redirect its connections for different
 * socket portals. When new connection request is received,
 * {@link handleRequest} function is called. It decides
 * if specific socket portal should handle this connection or not.
 */
class SocketPortal {
  /**
   * Clients of exactly this portal
   * @type {Map<number, SocketPortalClient>}
   */

  /**
   * List of IPs blocked for connecting to this portal
   * @type {string[]}
   */

  /**
   * @type {Logger}
   */
  constructor(config) {
    this.config = void 0;
    this.dynamicConnectionHandler = void 0;
    this.webSocketServer = void 0;
    this.clients = new Map();
    this.banned = [];
    this.logger = new _logger.default();
    this.config = config || {};

    this.dynamicConnectionHandler = request => this.handleRequest(request);
  }
  /**
   * Disconnects all portal clients and unbinds
   * portal from WebSocket server
   */


  terminate() {
    for (let client of this.clients.values()) {
      client.websocket.close();
    }

    this.webSocketServer.off('request', this.dynamicConnectionHandler);
  } // noinspection JSValidateJSDoc

  /**
   * This method decides whether to process, (accept or deny) the
   * connection request or ignore it so that it can be handled by
   * another socket instance. By default, all connection requests
   * are allowed. Overwrite this method if you wish only to process
   * exact request path or deny requests made from not-trusted
   * origin.
   * @param request {WebSocketRequest}
   */


  handleRequest(request) {
    this.handleConnection(request.accept(null, request.origin));
  } // noinspection JSValidateJSDoc

  /**
   * This method is called up when this socket instance handles and
   * permits the connection to the socket.
   * @param connection {WebSocketConnection}
   */


  handleConnection(connection) {
    const client = new this.constructor.clientClass({
      websocket: connection,
      connection: new _websocketConnection.default(connection)
    });
    this.clients.set(client.id, client);
    client.websocket.on('message', message => {
      this.handleMessage(message, client);
    });
    client.websocket.on('close', () => {
      this.clientDisconnected(client);
      this.clients.delete(client.id);
    });
    this.clientConnected(client);
  }
  /**
   * This method is called when portal receives a message from
   * specific client
   * @param message {Object}
   * @param client {SocketPortalClient}
   */


  handleMessage(message, client) {
    try {
      if (message.type !== "binary") {
        this.logger.log("Received invalid packet from client " + client.id);
        this.logger.log("Binary message expected, " + message.type + " received.");
        return;
      }

      let data = message.binaryData;
      let decoder = _binarypacket.default.binaryDecoder;
      decoder.reset();
      decoder.readData(new Uint8Array(data).buffer); // BinaryPacket.deserialize may only return
      // a BinaryPacket instance

      let packet =
      /** @type BinaryPacket */
      _binarypacket.default.deserialize(decoder, _binarypacket.default);

      this.handlePacket(packet, client);
    } catch (e) {
      this.logger.error("Exception while handling packet from client " + client.id);
      this.logger.error(e);
    }
  }
  /**
   * Called when client sends packet
   * @param packet {BinaryPacket} Received packet
   * @param client {SocketPortalClient} Packet sender
   */


  handlePacket(packet, client) {}
  /**
   * Called when client disconnects from the socket
   * @param client {SocketPortalClient}
   */


  clientDisconnected(client) {}
  /**
   * Called when new client connects to the socket*
   * @param client {SocketPortalClient}
   */


  clientConnected(client) {}
  /**
   * Binds this socket instance to listen websocket
   * connections
   * @param webSocket
   */


  bindToWebsocket(webSocket) {
    this.webSocketServer = webSocket;
    this.webSocketServer.on('request', this.dynamicConnectionHandler);
  }

}

SocketPortal.clientClass = _socketPortalClient.default;
var _default = SocketPortal;
exports.default = _default;

},{"../../networking/binarypacket":39,"../log/logger":104,"../socket/socket-portal-client":116,"../websocket-connection":124,"@babel/runtime/helpers/interopRequireDefault":1}],118:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _websocket = _interopRequireDefault(require("websocket"));

var _http = _interopRequireDefault(require("http"));

class UniversalPortListener {
  /**
   * Port that is being listened by this instance
   * @type number
   */

  /**
   * Websocket retain counter
   * @type number
   */

  /**
   * HTTPServer retain counter
   * @type number
   */

  /**
   * HTTPServer binded to this port
   */

  /**
   * WebSocket server binded to this port
   */
  constructor(port) {
    this.port = void 0;
    this.socketRetainCounter = 0;
    this.httpRetainCounter = 0;
    this.httpServer = void 0;
    this.webSocketServer = void 0;
    this.port = port;
  }

  retainHTTP() {
    this.httpRetainCounter++;

    if (!this.httpServer) {
      this.httpServer = _http.default.createServer();
      this.httpServer.listen(this.port);
    }
  }

  releaseHTTP() {
    this.httpRetainCounter--;

    if (this.httpRetainCounter === 0) {
      this.httpServer.close();
      this.httpServer = null;
    }
  }

  retainWebsocket() {
    // since WebSocket uses HTTP server,
    // we are ensuring it is configured and will
    // not be destroyed.
    this.retainHTTP();
    this.socketRetainCounter++;

    if (!this.webSocketServer) {
      this.webSocketServer = new _websocket.default.server({
        httpServer: this.httpServer
      });
    }
  }

  releaseWebsocket() {
    this.socketRetainCounter--;

    if (this.socketRetainCounter === 0) {
      this.webSocketServer.shutDown();
      this.webSocketServer = null;
    }

    this.releaseHTTP();
  }

}

var _default = UniversalPortListener;
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":1,"http":"http","websocket":"websocket"}],119:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _webserverModule = _interopRequireDefault(require("./webserver-module"));

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

__dirname = "/Users/Temich/PycharmProjects/tanks/src/server/webserver";

class BaseModule extends _webserverModule.default {
  constructor(options) {
    super(options);
    this.resourcesDirectory = _path.default.resolve(__dirname, "../../client/html/");
    this.priority = _webserverModule.default.PRIORITY_LOWEST;
    this.router.use("/assets/", _express.default.static(this.resourcePath("assets")));
    this.router.use((req, res, next) => this.onNotFound.apply(this, [req, res, next]));
    this.router.use((err, req, res, next) => this.onError.apply(this, [err, req, res, next]));
  }

  onNotFound(req, res, next) {
    res.status(404);

    if (req.accepts('html')) {
      res.render('html/views/404.hbs');
    } else if (req.accepts('json')) {
      res.send({
        error: 'Not found'
      });
    } else {
      res.type('txt').send('Not found');
    }
  }

  onError(err, res, req) {
    res.status(500);

    if (req.accepts('html')) {
      res.render('500');
    } else if (req.accepts('json')) {
      res.send({
        error: 'Internal server error'
      });
    } else {
      res.type('txt').send('Internal server error');
    }
  }

}

var _default = BaseModule;
exports.default = _default;

},{"./webserver-module":122,"@babel/runtime/helpers/interopRequireDefault":1,"express":"express","path":29}],120:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _webserverModule = _interopRequireDefault(require("../webserver-module"));

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

__dirname = "/Users/Temich/PycharmProjects/tanks/src/server/webserver/game";

class GameModule extends _webserverModule.default {
  constructor(config) {
    super(config);
    this.resourcesDirectory = _path.default.resolve(__dirname, "../../../client/game/page/");
    this.router.get("/game/", (req, res, next) => {
      res.render("game/page/index");
    });
    this.router.use("/game/styles/", _express.default.static(this.resourcePath("styles")));
    this.router.use("/game/scripts/", _express.default.static(this.resourcePath("scripts")));
  }

}

var _default = GameModule;
exports.default = _default;

},{"../webserver-module":122,"@babel/runtime/helpers/interopRequireDefault":1,"express":"express","path":29}],121:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _webserverModule = _interopRequireDefault(require("../webserver-module"));

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

__dirname = "/Users/Temich/PycharmProjects/tanks/src/server/webserver/hub";

class HubModule extends _webserverModule.default {
  constructor(config) {
    super(config);
    this.resourcesDirectory = _path.default.resolve(__dirname, "../../../client/hub/page/");
    this.router.get("/hub/", (req, res, next) => {
      res.render("hub/page/index");
    });
    this.router.use("/hub/styles/", _express.default.static(this.resourcePath("styles")));
    this.router.use("/hub/scripts/", _express.default.static(this.resourcePath("scripts")));
  }

}

var _default = HubModule;
exports.default = _default;

},{"../webserver-module":122,"@babel/runtime/helpers/interopRequireDefault":1,"express":"express","path":29}],122:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _express = _interopRequireDefault(require("express"));

var _path = _interopRequireDefault(require("path"));

/**
 * @abstract
 */
class WebserverModule {
  // The lower priority, the later the handler is called.

  /**
   * @type string
   */
  constructor(config) {
    this.priority = void 0;
    this.router = void 0;
    this.resourcesDirectory = null;
    this.enabled = false;
    this.request = void 0;
    this.priority = WebserverModule.PRIORITY_NORMAL;
    this.router = _express.default.Router();
  }

  staticAccess(path) {
    this.router.use(path, this.router.static(this.resourcePath(path)));
  }

  resourcePath(resourcePath) {
    return _path.default.resolve(this.resourcesDirectory, resourcePath);
  }

}

WebserverModule.PRIORITY_LOWEST = 0;
WebserverModule.PRIORITY_NORMAL = 1;
WebserverModule.PRIORITY_MONITOR = 2;
WebserverModule.PRIORITY_HIGHEST = 3;
var _default = WebserverModule;
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":1,"express":"express","path":29}],123:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _express = _interopRequireDefault(require("express"));

var _logger = _interopRequireDefault(require("../log/logger"));

var _expressSession = _interopRequireDefault(require("express-session"));

var _path = _interopRequireDefault(require("path"));

var _gameModule = _interopRequireDefault(require("./game/game-module"));

var _hubModule = _interopRequireDefault(require("./hub/hub-module"));

var _baseModule = _interopRequireDefault(require("./base-module"));

__dirname = "/Users/Temich/PycharmProjects/tanks/src/server/webserver";

class WebServer {
  /**
   * @type {Map<Number, [WebserverModule]>}
   */
  constructor() {
    this.app = void 0;
    this.logger = void 0;
    this.server = void 0;
    this.session = void 0;
    this.modules = new Map();
    this.hubModule = new _hubModule.default();
    this.gameModule = new _gameModule.default();
    this.baseModule = new _baseModule.default();
    this.app = (0, _express.default)();
    this.setupApp();
    this.logger = _logger.default.global;
    this.server = null;
    this.addModule(this.hubModule);
    this.addModule(this.gameModule);
    this.addModule(this.baseModule);
    this.baseModule.enabled = true;
  }

  addModule(module) {
    if (this.modules.has(module.priority)) {
      this.modules.get(module.priority).push(module);
    } else {
      this.modules.set(module.priority, [module]);
    }
  }

  *getModules() {
    let valueListIterator = this.modules.values();
    let valueList = null;
    /** @type {Iterator | null} */

    let valueIterator = null;

    while (true) {
      /** @type {IteratorYieldResult} */
      let handle = null;

      if (valueIterator) {
        handle = valueIterator.next();
      }

      while (!handle || handle.done) {
        valueList = valueListIterator.next();

        if (valueList.done) {
          return;
        }

        valueIterator = valueList.value.values();
        handle = valueIterator.next();
      }

      if (handle.value.enabled) {
        yield handle.value;
      }
    }
  }

  setupApp() {
    this.app.set('view engine', 'hbs');
    this.app.set('views', _path.default.resolve(__dirname, "../../client/"));
    this.app.use(function (err, req, res, next) {
      res.header("Access-Control-Allow-Origin", "*");
      res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
      next();
    });
    this.session = (0, _expressSession.default)({
      secret: "f1qbc248ecd09bdh0j5r7o8",
      resave: true,
      saveUninitialized: true
    });
    this.app.use(_express.default.urlencoded({
      extended: true
    }));
    this.app.use(this.session);
    this.app.use((req, res, next) => {
      let iterator = this.getModules();

      const iterate = () => {
        let handle = iterator.next();

        if (handle.done) {
          next();
          return;
        }

        handle.value.router(req, res, iterate);
      };

      iterate();
    });
  }
  /**
   *
   * @param server
   */


  listen(server) {
    this.server = server;
    server.on("request", this.app);
  }

  disable() {
    this.server.off("request", this.app);
  }

}

var _default = WebServer;
exports.default = _default;

},{"../log/logger":104,"./base-module":119,"./game/game-module":120,"./hub/hub-module":121,"@babel/runtime/helpers/interopRequireDefault":1,"express":"express","express-session":"express-session","path":29}],124:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _abstractConnection = _interopRequireDefault(require("../networking/abstract-connection"));

var _websocket = _interopRequireDefault(require("websocket"));

const WebSocketConnection = _websocket.default.connection;

class WebsocketConnection extends _abstractConnection.default {
  /**
   * @type {WebSocketConnection}
   */
  constructor(websocket) {
    super();
    this.websocket = null;
    this.websocket = websocket;
  }

  isReady() {
    return this.websocket.state === "open";
  }

  send(packet) {
    this.websocket.sendBytes(Buffer.from(packet.getData()));
  }

  close(reason) {
    this.websocket.close(WebSocketConnection.CLOSE_REASON_NORMAL, reason);
  }

}

var _default = WebsocketConnection;
exports.default = _default;

},{"../networking/abstract-connection":38,"@babel/runtime/helpers/interopRequireDefault":1,"websocket":"websocket"}],125:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class Color {
  constructor(red, green, blue, alpha) {
    this.r = void 0;
    this.g = void 0;
    this.b = void 0;
    this.alpha = void 0;
    this.string = void 0;
    this.r = red;
    this.g = green;
    this.b = blue;
    this.alpha = alpha || 1.0;
  }

  setRed(r) {
    this.r = r;
    this.string = 0;
  }

  setGreen(g) {
    this.g = g;
    this.string = 0;
  }

  setBlue(b) {
    this.b = b;
    this.string = 0;
  }

  setAlpha(a) {
    this.alpha = a;
    this.string = 0;
  }
  /**
   * Returns chat color code with specified RGB values
   * @param r {number}
   * @param g {number}
   * @param b {number}
   * @param bold {boolean}
   */


  static chatColor(r, g, b, bold = false) {
    let color = "";

    if ((r & 0xF) === (r >> 4 & 0xF) && (g & 0xF) === (g >> 4 & 0xF) && (b & 0xF) === (b >> 4 & 0xF)) {
      color = r.toString(16) + g.toString(16) + b.toString(16);
    } else {
      color = r.toString(16).padStart(2, "0") + g.toString(16).padStart(2, "0") + b.toString(16).padStart(2, "0");
    }

    if (bold) {
      return "§!" + color + ";";
    } else {
      return "§" + color + ";";
    }
  }

  static replace(text, replace) {
    return text.replace(/(§!?[0-9A-F]{0,6};)?[^§\n]*/gi, function (a) {
      // if(!/^\\*(§!?[0-9A-F]{0,6};/.test(a)) {
      //     return replace("", false, a)
      // }
      //
      // // Checking if color sequence is screened
      //
      // let start = a.indexOf("§")
      let prefix = ""; // if(start % 2 === 1) {
      //     return a.substr(1)
      // } else if(start) {
      //     prefix = a.substr(0, start)
      //     a = a.substr(start)
      // }

      let index = a.indexOf(";");
      let color = a.substr(1, index - 1);
      let text = a.substr(index + 1);
      let bold = color.startsWith("!");
      if (bold) color = color.substr(1);
      return prefix + replace(color, bold, text);
    });
  }

  toChatColor(bold) {
    return Color.chatColor(this.r, this.g, this.b, bold);
  }

  code() {
    if (this.string) return this.string;

    if (this.alpha === 1) {
      let r, g, b;
      r = Math.round(this.r).toString(16);
      g = Math.round(this.g).toString(16);
      b = Math.round(this.b).toString(16);
      r.length === 1 && (r = "0" + r);
      g.length === 1 && (g = "0" + g);
      b.length === 1 && (b = "0" + b);
      this.string = "#" + r + g + b;
    } else {
      this.string = "rgba(" + Math.round(this.r) + "," + Math.round(this.g) + "," + Math.round(this.b) + "," + Math.round(this.alpha * 100) / 100 + ")";
    }

    return this.string;
  }

  static saturateChannel(c, saturation) {
    return Math.round((c - 127) * saturation + 127);
  }

  applyingSaturation(saturation) {
    return new Color(Color.saturateChannel(this.r, saturation), Color.saturateChannel(this.g, saturation), Color.saturateChannel(this.b, saturation), this.alpha);
  }

  withAlpha(alpha) {
    return new Color(this.r, this.g, this.b, alpha);
  }

  static red() {
    return new Color(255, 0, 0);
  }

  static green() {
    return new Color(0, 255, 0);
  }

  static blue() {
    return new Color(0, 0, 255);
  }

  static gray() {
    return new Color(127, 127, 127);
  }

}

var _default = Color;
exports.default = _default;

},{}],126:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class CpuUsageWatcher {
  constructor() {
    this.updateSeconds = void 0;
    this.usageBufferLength = void 0;
    this.previousUsage = void 0;
    this.interval = void 0;
    this.lastUsageIndex = void 0;
    this.usages = void 0;
    this.updateSeconds = 10;
    this.usageBufferLength = 96;
    this.previousUsage = null;
    this.interval = setInterval(() => this.updateUsage(), this.updateSeconds * 1000);
    this.lastUsageIndex = -1;
    this.usages = Array(this.usageBufferLength).fill(-1);
  }

  updateUsage() {
    this.previousUsage = process.cpuUsage(this.previousUsage);
    this.lastUsageIndex++;
    if (this.lastUsageIndex >= this.usageBufferLength) this.lastUsageIndex = 0;
    this.usages[this.lastUsageIndex] = this.previousUsage.user + this.previousUsage.system;
  }

  getCpuUsage(seconds) {
    if (seconds % this.updateSeconds !== 0) {
      throw new Error(`Cannot count CPU usage for last ${seconds}s since update interval of the watcher is ${this.updateSeconds}s`);
    }

    seconds /= this.updateSeconds;

    if (seconds > this.usageBufferLength) {
      throw new Error(`Cannot count CPU usage for last ${seconds}s since this watcher only stores last ${this.usageBufferLength * this.updateSeconds}s of CPU usage history`);
    }

    let result = 0;

    for (let i = 0, pointer = this.lastUsageIndex; i < seconds; i++, pointer--) {
      if (pointer < 0) pointer = this.usageBufferLength - 1;
      if (this.usages[pointer] < 0) return -1;
      result += this.usages[pointer];
    }

    return result;
  }

  destroy() {
    clearInterval(this.interval);
  }

}

var _default = CpuUsageWatcher;
exports.default = _default;

},{}],127:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class EventEmitter {
  constructor() {
    this.events = void 0;
    this.events = new Map();
  }

  emit(event) {
    if (this.events.has(event)) {
      let args = Array.prototype.slice.call(arguments, 1);

      for (let listener of this.events.get(event)) {
        listener.apply(null, args);
      }
    }
  }

  on(event, handler) {
    if (this.events.has(event)) {
      this.events.get(event).push(handler);
    } else {
      this.events.set(event, [handler]);
    }
  }

}

exports.default = EventEmitter;

},{}],128:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const metricUnits = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
const binaryUnits = ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
/**
 * Format bytes as human-readable text.
 *
 * @param bytes Number of bytes.
 * @param format True to use metric (SI) units, aka powers of 1000. False to use
 *           binary (IEC), aka powers of 1024.
 * @param precision Number of decimal places to display.
 *
 * @return Formatted string.
 */

function humanFileSize(bytes, format = true, precision = 1) {
  const thresh = format ? 1000 : 1024;

  if (Math.abs(bytes) < thresh) {
    return bytes + ' B';
  }

  const units = format ? metricUnits : binaryUnits;
  let u = -1;
  const r = 10 ** precision;

  do {
    bytes /= thresh;
    u++;
  } while (Math.round(Math.abs(bytes) * r) / r >= thresh && u < units.length - 1);

  return bytes.toFixed(precision) + ' ' + units[u];
}

var _default = humanFileSize;
exports.default = _default;

},{}],129:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _default = (str, num) => {
  if (num < 1) return '';
  let result = '';

  while (num > 0) {
    if ((num & 1) === 1) result += str;
    num >>= 1;
    str += str;
  }

  return result;
};

exports.default = _default;

},{}]},{},[105])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
